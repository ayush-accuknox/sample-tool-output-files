{"errors": [{"code": 2, "level": "warn", "message": "Timeout when running cpp.lang.security.uri.url-manipulation-generic.url-manipulation-generic on llama/llama.cpp:\n ", "path": "llama/llama.cpp", "rule_id": "cpp.lang.security.uri.url-manipulation-generic.url-manipulation-generic", "type": "Timeout"}, {"code": 2, "level": "warn", "message": "Timeout when running cpp.lang.security.use-after-free.local-variable-malloc-free.local-variable-malloc-free on llama/llama.cpp:\n ", "path": "llama/llama.cpp", "rule_id": "cpp.lang.security.use-after-free.local-variable-malloc-free.local-variable-malloc-free", "type": "Timeout"}, {"code": 2, "level": "warn", "message": "Timeout when running cpp.lang.security.use-after-free.local-variable-new-delete.local-variable-new-delete on llama/llama.cpp:\n ", "path": "llama/llama.cpp", "rule_id": "cpp.lang.security.use-after-free.local-variable-new-delete.local-variable-new-delete", "type": "Timeout"}, {"code": 3, "level": "warn", "message": "Syntax error at line llama/json.hpp:1:\n `//     __ _____ _____ _____\n//  __|  |   __|     |   | |  JSON for Modern C++\n// |  |  |__   |  |  | | | |  version 3.11.3\n// |_____|_____|_____|_|___|  https://github.com/nlohmann/json\n//\n// SPDX-FileCopyrightText: 2013-2023 Niels Lohmann <https://nlohmann.me>\n// SPDX-License-Identifier: MIT\n\n/****************************************************************************\\\n * Note on documentation: The source files contain links to the online      *\n * documentation of the public API at https://json.nlohmann.me. This URL    *\n * contains the most recent documentation and should also be applicable to  *\n * previous versions; documentation for deprecated functions is not         *\n * removed, but marked deprecated. See \"Generate documentation\" section in  *\n * file docs/README.md.                                                     *\n\\****************************************************************************/\n\n#ifndef INCLUDE_NLOHMANN_JSON_HPP_\n#define INCLUDE_NLOHMANN_JSON_HPP_\n\n#include <algorithm> // all_of, find, for_each\n#include <cstddef> // nullptr_t, ptrdiff_t, size_t\n#include <functional> // hash, less\n#include <initializer_list> // initializer_list\n#ifndef JSON_NO_IO\n    #include <iosfwd> // istream, ostream\n#endif  // JSON_NO_IO\n#include <iterator> // random_access_iterator_tag\n#include <memory> // unique_ptr\n#include <string> // string, stoi, to_string\n#include <utility> // declval, forward, move, pair, swap\n#include <vector> // vector\n\n// #include <nlohmann/adl_serializer.hpp>\n//     __ _____ _____ _____\n//  __|  |   __|     |   | |  JSON for Modern C++\n// |  |  |__   |  |  | | | |  version 3.11.3\n// |_____|_____|_____|_|___|  https://github.com/nlohmann/json\n//\n// SPDX-FileCopyrightText: 2013-2023 Niels Lohmann <https://nlohmann.me>\n// SPDX-License-Identifier: MIT\n\n\n\n#include <utility>\n\n// #include <nlohmann/detail/abi_macros.hpp>\n//     __ _____ _____ _____\n//  __|  |   __|     |   | |  JSON for Modern C++\n// |  |  |__   |  |  | | | |  version 3.11.3\n// |_____|_____|_____|_|___|  https://github.com/nlohmann/json\n//\n// SPDX-FileCopyrightText: 2013-2023 Niels Lohmann <https://nlohmann.me>\n// SPDX-License-Identifier: MIT\n\n\n\n// This file contains all macro definitions affecting or depending on the ABI\n\n#ifndef JSON_SKIP_LIBRARY_VERSION_CHECK\n    #if defined(NLOHMANN_JSON_VERSION_MAJOR) && defined(NLOHMANN_JSON_VERSION_MINOR) && defined(NLOHMANN_JSON_VERSION_PATCH)\n        #if NLOHMANN_JSON_VERSION_MAJOR != 3 || NLOHMANN_JSON_VERSION_MINOR != 11 || NLOHMANN_JSON_VERSION_PATCH != 3\n            #warning \"Already included a different version of the library!\"\n        #endif\n    #endif\n#endif\n\n#define NLOHMANN_JSON_VERSION_MAJOR 3   // NOLINT(modernize-macro-to-enum)\n#define NLOHMANN_JSON_VERSION_MINOR 11  // NOLINT(modernize-macro-to-enum)\n#define NLOHMANN_JSON_VERSION_PATCH 3   // NOLINT(modernize-macro-to-enum)\n\n#ifndef JSON_DIAGNOSTICS\n    #define JSON_DIAGNOSTICS 0\n#endif\n\n#ifndef JSON_USE_LEGACY_DISCARDED_VALUE_COMPARISON\n    #define JSON_USE_LEGACY_DISCARDED_VALUE_COMPARISON 0\n#endif\n\n#if JSON_DIAGNOSTICS\n    #define NLOHMANN_JSON_ABI_TAG_DIAGNOSTICS _diag\n#else\n    #define NLOHMANN_JSON_ABI_TAG_DIAGNOSTICS\n#endif\n\n#if JSON_USE_LEGACY_DISCARDED_VALUE_COMPARISON\n    #define NLOHMANN_JSON_ABI_TAG_LEGACY_DISCARDED_VALUE_COMPARISON _ldvcmp\n#else\n    #define NLOHMANN_JSON_ABI_TAG_LEGACY_DISCARDED_VALUE_COMPARISON\n#endif\n\n#ifndef NLOHMANN_JSON_NAMESPACE_NO_VERSION\n    #define NLOHMANN_JSON_NAMESPACE_NO_VERSION 0\n#endif\n\n// Construct the namespace ABI tags component\n#define NLOHMANN_JSON_ABI_TAGS_CONCAT_EX(a, b) json_abi ## a ## b\n#define NLOHMANN_JSON_ABI_TAGS_CONCAT(a, b) \\\n    NLOHMANN_JSON_ABI_TAGS_CONCAT_EX(a, b)\n\n#define NLOHMANN_JSON_ABI_TAGS                                       \\\n    NLOHMANN_JSON_ABI_TAGS_CONCAT(                                   \\\n            NLOHMANN_JSON_ABI_TAG_DIAGNOSTICS,                       \\\n            NLOHMANN_JSON_ABI_TAG_LEGACY_DISCARDED_VALUE_COMPARISON)\n\n// Construct the namespace version component\n#define NLOHMANN_JSON_NAMESPACE_VERSION_CONCAT_EX(major, minor, patch) \\\n    _v ## major ## _ ## minor ## _ ## patch\n#define NLOHMANN_JSON_NAMESPACE_VERSION_CONCAT(major, minor, patch) \\\n    NLOHMANN_JSON_NAMESPACE_VERSION_CONCAT_EX(major, minor, patch)\n\n#if NLOHMANN_JSON_NAMESPACE_NO_VERSION\n#define NLOHMANN_JSON_NAMESPACE_VERSION\n#else\n#define NLOHMANN_JSON_NAMESPACE_VERSION                                 \\\n    NLOHMANN_JSON_NAMESPACE_VERSION_CONCAT(NLOHMANN_JSON_VERSION_MAJOR, \\\n                                           NLOHMANN_JSON_VERSION_MINOR, \\\n                                           NLOHMANN_JSON_VERSION_PATCH)\n#endif\n\n// Combine namespace components\n#define NLOHMANN_JSON_NAMESPACE_CONCAT_EX(a, b) a ## b\n#define NLOHMANN_JSON_NAMESPACE_CONCAT(a, b) \\\n    NLOHMANN_JSON_NAMESPACE_CONCAT_EX(a, b)\n\n#ifndef NLOHMANN_JSON_NAMESPACE\n#define NLOHMANN_JSON_NAMESPACE               \\\n    nlohmann::NLOHMANN_JSON_NAMESPACE_CONCAT( \\\n            NLOHMANN_JSON_ABI_TAGS,           \\\n            NLOHMANN_JSON_NAMESPACE_VERSION)\n#endif\n\n#ifndef NLOHMANN_JSON_NAMESPACE_BEGIN\n#define NLOHMANN_JSON_NAMESPACE_BEGIN                \\\n    namespace nlohmann                               \\\n    {                                                \\\n    inline namespace NLOHMANN_JSON_NAMESPACE_CONCAT( \\\n                NLOHMANN_JSON_ABI_TAGS,              \\\n                NLOHMANN_JSON_NAMESPACE_VERSION)     \\\n    {\n#endif\n\n#ifndef NLOHMANN_JSON_NAMESPACE_END\n#define NLOHMANN_JSON_NAMESPACE_END                                     \\\n    }  /* namespace (inline namespace) NOLINT(readability/namespace) */ \\\n    }  // namespace nlohmann\n#endif\n\n// #include <nlohmann/detail/conversions/from_json.hpp>\n//     __ _____ _____ _____\n//  __|  |   __|     |   | |  JSON for Modern C++\n// |  |  |__   |  |  | | | |  version 3.11.3\n// |_____|_____|_____|_|___|  https://github.com/nlohmann/json\n//\n// SPDX-FileCopyrightText: 2013-2023 Niels Lohmann <https://nlohmann.me>\n// SPDX-License-Identifier: MIT\n\n\n\n#include <algorithm> // transform\n#include <array> // array\n#include <forward_list> // forward_list\n#include <iterator> // inserter, front_inserter, end\n#include <map> // map\n#include <string> // string\n#include <tuple> // tuple, make_tuple\n#include <type_traits> // is_arithmetic, is_same, is_enum, underlying_type, is_convertible\n#include <unordered_map> // unordered_map\n#include <utility> // pair, declval\n#include <valarray> // valarray\n\n// #include <nlohmann/detail/exceptions.hpp>\n//     __ _____ _____ _____\n//  __|  |   __|     |   | |  JSON for Modern C++\n// |  |  |__   |  |  | | | |  version 3.11.3\n// |_____|_____|_____|_|___|  https://github.com/nlohmann/json\n//\n// SPDX-FileCopyrightText: 2013-2023 Niels Lohmann <https://nlohmann.me>\n// SPDX-License-Identifier: MIT\n\n\n\n#include <cstddef> // nullptr_t\n#include <exception> // exception\n#if JSON_DIAGNOSTICS\n    #include <numeric> // accumulate\n#endif\n#include <stdexcept> // runtime_error\n#include <string> // to_string\n#include <vector> // vector\n\n// #include <nlohmann/detail/value_t.hpp>\n//     __ _____ _____ _____\n//  __|  |   __|     |   | |  JSON for Modern C++\n// |  |  |__   |  |  | | | |  version 3.11.3\n// |_____|_____|_____|_|___|  https://github.com/nlohmann/json\n//\n// SPDX-FileCopyrightText: 2013-2023 Niels Lohmann <https://nlohmann.me>\n// SPDX-License-Identifier: MIT\n\n\n\n#include <array> // array\n#include <cstddef> // size_t\n#include <cstdint> // uint8_t\n#include <string> // string\n\n// #include <nlohmann/detail/macro_scope.hpp>\n//     __ _____ _____ _____\n//  __|  |   __|     |   | |  JSON for Modern C++\n// |  |  |__   |  |  | | | |  version 3.11.3\n// |_____|_____|_____|_|___|  https://github.com/nlohmann/json\n//\n// SPDX-FileCopyrightText: 2013-2023 Niels Lohmann <https://nlohmann.me>\n// SPDX-License-Identifier: MIT\n\n\n\n#include <utility> // declval, pair\n// #include <nlohmann/detail/meta/detected.hpp>\n//     __ _____ _____ _____\n//  __|  |   __|     |   | |  JSON for Modern C++\n// |  |  |__   |  |  | | | |  version 3.11.3\n// |_____|_____|_____|_|___|  https://github.com/nlohmann/json\n//\n// SPDX-FileCopyrightText: 2013-2023 Niels Lohmann <https://nlohmann.me>\n// SPDX-License-Identifier: MIT\n\n\n\n#include <type_traits>\n\n// #include <nlohmann/detail/meta/void_t.hpp>\n//     __ _____ _____ _____\n//  __|  |   __|     |   | |  JSON for Modern C++\n// |  |  |__   |  |  | | | |  version 3.11.3\n// |_____|_____|_____|_|___|  https://github.com/nlohmann/json\n//\n// SPDX-FileCopyrightText: 2013-2023 Niels Lohmann <https://nlohmann.me>\n// SPDX-License-Identifier: MIT\n\n\n\n// #include <nlohmann/detail/abi_macros.hpp>\n\n\nNLOHMANN_JSON_NAMESPACE_BEGIN\nnamespace detail\n{\n\ntemplate<typename ...Ts> struct make_void\n{\n    using type = void;\n};\ntemplate<typename ...Ts> using void_t = typename make_void<Ts...>::type;\n\n}  // namespace detail\nNLOHMANN_JSON_NAMESPACE_END\n\n\nNLOHMANN_JSON_NAMESPACE_BEGIN\nnamespace detail\n{\n\n// https://en.cppreference.com/w/cpp/experimental/is_detected\nstruct nonesuch\n{\n    nonesuch() = delete;\n    ~nonesuch() = delete;\n    nonesuch(nonesuch const&) = delete;\n    nonesuch(nonesuch const&&) = delete;\n    void operator=(nonesuch const&) = delete;\n    void operator=(nonesuch&&) = delete;\n};\n\ntemplate<class Default,\n         class AlwaysVoid,\n         template<class...> class Op,\n         class... Args>\nstruct detector\n{\n    using value_t = std::false_type;\n    using type = Default;\n};\n\ntemplate<class Default, template<class...> class Op, class... Args>\nstruct detector<Default, void_t<Op<Args...>>, Op, Args...>\n{\n    using value_t = std::true_type;\n    using type = Op<Args...>;\n};\n\ntemplate<template<class...> class Op, class... Args>\nusing is_detected = typename detector<nonesuch, void, Op, Args...>::value_t;\n\ntemplate<template<class...> class Op, class... Args>\nstruct is_detected_lazy : is_detected<Op, Args...> { };\n\ntemplate<template<class...> class Op, class... Args>\nusing detected_t = typename detector<nonesuch, void, Op, Args...>::type;\n\ntemplate<class Default, template<class...> class Op, class... Args>\nusing detected_or = detector<Default, void, Op, Args...>;\n\ntemplate<class Default, template<class...> class Op, class... Args>\nusing detected_or_t = typename detected_or<Default, Op, Args...>::type;\n\ntemplate<class Expected, template<class...> class Op, class... Args>\nusing is_detected_exact = std::is_same<Expected, detected_t<Op, Args...>>;\n\ntemplate<class To, template<class...> class Op, class... Args>\nusing is_detected_convertible =\n    std::is_convertible<detected_t<Op, Args...>, To>;\n\n}  // namespace detail\nNLOHMANN_JSON_NAMESPACE_END\n\n// #include <nlohmann/thirdparty/hedley/hedley.hpp>\n\n\n//     __ _____ _____ _____\n//  __|  |   __|     |   | |  JSON for Modern C++\n// |  |  |__   |  |  | | | |  version 3.11.3\n// |_____|_____|_____|_|___|  https://github.com/nlohmann/json\n//\n// SPDX-FileCopyrightText: 2013-2023 Niels Lohmann <https://nlohmann.me>\n// SPDX-FileCopyrightText: 2016-2021 Evan Nemerson <evan@nemerson.com>\n// SPDX-License-Identifier: MIT\n\n/* Hedley - https://nemequ.github.io/hedley\n * Created by Evan Nemerson <evan@nemerson.com>\n */\n\n#if !defined(JSON_HEDLEY_VERSION) || (JSON_HEDLEY_VERSION < 15)\n#if defined(JSON_HEDLEY_VERSION)\n    #undef JSON_HEDLEY_VERSION\n#endif\n#define JSON_HEDLEY_VERSION 15\n\n#if defined(JSON_HEDLEY_STRINGIFY_EX)\n    #undef JSON_HEDLEY_STRINGIFY_EX\n#endif\n#define JSON_HEDLEY_STRINGIFY_EX(x) #x\n\n#if defined(JSON_HEDLEY_STRINGIFY)\n    #undef JSON_HEDLEY_STRINGIFY\n#endif\n#define JSON_HEDLEY_STRINGIFY(x) JSON_HEDLEY_STRINGIFY_EX(x)\n\n#if defined(JSON_HEDLEY_CONCAT_EX)\n    #undef JSON_HEDLEY_CONCAT_EX\n#endif\n#define JSON_HEDLEY_CONCAT_EX(a,b) a##b\n\n#if defined(JSON_HEDLEY_CONCAT)\n    #undef JSON_HEDLEY_CONCAT\n#endif\n#define JSON_HEDLEY_CONCAT(a,b) JSON_HEDLEY_CONCAT_EX(a,b)\n\n#if defined(JSON_HEDLEY_CONCAT3_EX)\n    #undef JSON_HEDLEY_CONCAT3_EX\n#endif\n#define JSON_HEDLEY_CONCAT3_EX(a,b,c) a##b##c\n\n#if defined(JSON_HEDLEY_CONCAT3)\n    #undef JSON_HEDLEY_CONCAT3\n#endif\n#define JSON_HEDLEY_CONCAT3(a,b,c) JSON_HEDLEY_CONCAT3_EX(a,b,c)\n\n#if defined(JSON_HEDLEY_VERSION_ENCODE)\n    #undef JSON_HEDLEY_VERSION_ENCODE\n#endif\n#define JSON_HEDLEY_VERSION_ENCODE(major,minor,revision) (((major) * 1000000) + ((minor) * 1000) + (revision))\n\n#if defined(JSON_HEDLEY_VERSION_DECODE_MAJOR)\n    #undef JSON_HEDLEY_VERSION_DECODE_MAJOR\n#endif\n#define JSON_HEDLEY_VERSION_DECODE_MAJOR(version) ((version) / 1000000)\n\n#if defined(JSON_HEDLEY_VERSION_DECODE_MINOR)\n    #undef JSON_HEDLEY_VERSION_DECODE_MINOR\n#endif\n#define JSON_HEDLEY_VERSION_DECODE_MINOR(version) (((version) % 1000000) / 1000)\n\n#if defined(JSON_HEDLEY_VERSION_DECODE_REVISION)\n    #undef JSON_HEDLEY_VERSION_DECODE_REVISION\n#endif\n#define JSON_HEDLEY_VERSION_DECODE_REVISION(version) ((version) % 1000)\n\n#if defined(JSON_HEDLEY_GNUC_VERSION)\n    #undef JSON_HEDLEY_GNUC_VERSION\n#endif\n#if defined(__GNUC__) && defined(__GNUC_PATCHLEVEL__)\n    #define JSON_HEDLEY_GNUC_VERSION JSON_HEDLEY_VERSION_ENCODE(__GNUC__, __GNUC_MINOR__, __GNUC_PATCHLEVEL__)\n#elif defined(__GNUC__)\n    #define JSON_HEDLEY_GNUC_VERSION JSON_HEDLEY_VERSION_ENCODE(__GNUC__, __GNUC_MINOR__, 0)\n#endif\n\n#if defined(JSON_HEDLEY_GNUC_VERSION_CHECK)\n    #undef JSON_HEDLEY_GNUC_VERSION_CHECK\n#endif\n#if defined(JSON_HEDLEY_GNUC_VERSION)\n    #define JSON_HEDLEY_GNUC_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_GNUC_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))\n#else\n    #define JSON_HEDLEY_GNUC_VERSION_CHECK(major,minor,patch) (0)\n#endif\n\n#if defined(JSON_HEDLEY_MSVC_VERSION)\n    #undef JSON_HEDLEY_MSVC_VERSION\n#endif\n#if defined(_MSC_FULL_VER) && (_MSC_FULL_VER >= 140000000) && !defined(__ICL)\n    #define JSON_HEDLEY_MSVC_VERSION JSON_HEDLEY_VERSION_ENCODE(_MSC_FULL_VER / 10000000, (_MSC_FULL_VER % 10000000) / 100000, (_MSC_FULL_VER % 100000) / 100)\n#elif defined(_MSC_FULL_VER) && !defined(__ICL)\n    #define JSON_HEDLEY_MSVC_VERSION JSON_HEDLEY_VERSION_ENCODE(_MSC_FULL_VER / 1000000, (_MSC_FULL_VER % 1000000) / 10000, (_MSC_FULL_VER % 10000) / 10)\n#elif defined(_MSC_VER) && !defined(__ICL)\n    #define JSON_HEDLEY_MSVC_VERSION JSON_HEDLEY_VERSION_ENCODE(_MSC_VER / 100, _MSC_VER % 100, 0)\n#endif\n\n#if defined(JSON_HEDLEY_MSVC_VERSION_CHECK)\n    #undef JSON_HEDLEY_MSVC_VERSION_CHECK\n#endif\n#if !defined(JSON_HEDLEY_MSVC_VERSION)\n    #define JSON_HEDLEY_MSVC_VERSION_CHECK(major,minor,patch) (0)\n#elif defined(_MSC_VER) && (_MSC_VER >= 1400)\n    #define JSON_HEDLEY_MSVC_VERSION_CHECK(major,minor,patch) (_MSC_FULL_VER >= ((major * 10000000) + (minor * 100000) + (patch)))\n#elif defined(_MSC_VER) && (_MSC_VER >= 1200)\n    #define JSON_HEDLEY_MSVC_VERSION_CHECK(major,minor,patch) (_MSC_FULL_VER >= ((major * 1000000) + (minor * 10000) + (patch)))\n#else\n    #define JSON_HEDLEY_MSVC_VERSION_CHECK(major,minor,patch) (_MSC_VER >= ((major * 100) + (minor)))\n#endif\n\n#if defined(JSON_HEDLEY_INTEL_VERSION)\n    #undef JSON_HEDLEY_INTEL_VERSION\n#endif\n#if defined(__INTEL_COMPILER) && defined(__INTEL_COMPILER_UPDATE) && !defined(__ICL)\n    #define JSON_HEDLEY_INTEL_VERSION JSON_HEDLEY_VERSION_ENCODE(__INTEL_COMPILER / 100, __INTEL_COMPILER % 100, __INTEL_COMPILER_UPDATE)\n#elif defined(__INTEL_COMPILER) && !defined(__ICL)\n    #define JSON_HEDLEY_INTEL_VERSION JSON_HEDLEY_VERSION_ENCODE(__INTEL_COMPILER / 100, __INTEL_COMPILER % 100, 0)\n#endif\n\n#if defined(JSON_HEDLEY_INTEL_VERSION_CHECK)\n    #undef JSON_HEDLEY_INTEL_VERSION_CHECK\n#endif\n#if defined(JSON_HEDLEY_INTEL_VERSION)\n    #define JSON_HEDLEY_INTEL_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_INTEL_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))\n#else\n    #define JSON_HEDLEY_INTEL_VERSION_CHECK(major,minor,patch) (0)\n#endif\n\n#if defined(JSON_HEDLEY_INTEL_CL_VERSION)\n    #undef JSON_HEDLEY_INTEL_CL_VERSION\n#endif\n#if defined(__INTEL_COMPILER) && defined(__INTEL_COMPILER_UPDATE) && defined(__ICL)\n    #define JSON_HEDLEY_INTEL_CL_VERSION JSON_HEDLEY_VERSION_ENCODE(__INTEL_COMPILER, __INTEL_COMPILER_UPDATE, 0)\n#endif\n\n#if defined(JSON_HEDLEY_INTEL_CL_VERSION_CHECK)\n    #undef JSON_HEDLEY_INTEL_CL_VERSION_CHECK\n#endif\n#if defined(JSON_HEDLEY_INTEL_CL_VERSION)\n    #define JSON_HEDLEY_INTEL_CL_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_INTEL_CL_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))\n#else\n    #define JSON_HEDLEY_INTEL_CL_VERSION_CHECK(major,minor,patch) (0)\n#endif\n\n#if defined(JSON_HEDLEY_PGI_VERSION)\n    #undef JSON_HEDLEY_PGI_VERSION\n#endif\n#if defined(__PGI) && defined(__PGIC__) && defined(__PGIC_MINOR__) && defined(__PGIC_PATCHLEVEL__)\n    #define JSON_HEDLEY_PGI_VERSION JSON_HEDLEY_VERSION_ENCODE(__PGIC__, __PGIC_MINOR__, __PGIC_PATCHLEVEL__)\n#endif\n\n#if defined(JSON_HEDLEY_PGI_VERSION_CHECK)\n    #undef JSON_HEDLEY_PGI_VERSION_CHECK\n#endif\n#if defined(JSON_HEDLEY_PGI_VERSION)\n    #define JSON_HEDLEY_PGI_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_PGI_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))\n#else\n    #define JSON_HEDLEY_PGI_VERSION_CHECK(major,minor,patch) (0)\n#endif\n\n#if defined(JSON_HEDLEY_SUNPRO_VERSION)\n    #undef JSON_HEDLEY_SUNPRO_VERSION\n#endif\n#if defined(__SUNPRO_C) && (__SUNPRO_C > 0x1000)\n    #define JSON_HEDLEY_SUNPRO_VERSION JSON_HEDLEY_VERSION_ENCODE((((__SUNPRO_C >> 16) & 0xf) * 10) + ((__SUNPRO_C >> 12) & 0xf), (((__SUNPRO_C >> 8) & 0xf) * 10) + ((__SUNPRO_C >> 4) & 0xf), (__SUNPRO_C & 0xf) * 10)\n#elif defined(__SUNPRO_C)\n    #define JSON_HEDLEY_SUNPRO_VERSION JSON_HEDLEY_VERSION_ENCODE((__SUNPRO_C >> 8) & 0xf, (__SUNPRO_C >> 4) & 0xf, (__SUNPRO_C) & 0xf)\n#elif defined(__SUNPRO_CC) && (__SUNPRO_CC > 0x1000)\n    #define JSON_HEDLEY_SUNPRO_VERSION JSON_HEDLEY_VERSION_ENCODE((((__SUNPRO_CC >> 16) & 0xf) * 10) + ((__SUNPRO_CC >> 12) & 0xf), (((__SUNPRO_CC >> 8) & 0xf) * 10) + ((__SUNPRO_CC >> 4) & 0xf), (__SUNPRO_CC & 0xf) * 10)\n#elif defined(__SUNPRO_CC)\n    #define JSON_HEDLEY_SUNPRO_VERSION JSON_HEDLEY_VERSION_ENCODE((__SUNPRO_CC >> 8) & 0xf, (__SUNPRO_CC >> 4) & 0xf, (__SUNPRO_CC) & 0xf)\n#endif\n\n#if defined(JSON_HEDLEY_SUNPRO_VERSION_CHECK)\n    #undef JSON_HEDLEY_SUNPRO_VERSION_CHECK\n#endif\n#if defined(JSON_HEDLEY_SUNPRO_VERSION)\n    #define JSON_HEDLEY_SUNPRO_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_SUNPRO_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))\n#else\n    #define JSON_HEDLEY_SUNPRO_VERSION_CHECK(major,minor,patch) (0)\n#endif\n\n#if defined(JSON_HEDLEY_EMSCRIPTEN_VERSION)\n    #undef JSON_HEDLEY_EMSCRIPTEN_VERSION\n#endif\n#if defined(__EMSCRIPTEN__)\n    #define JSON_HEDLEY_EMSCRIPTEN_VERSION JSON_HEDLEY_VERSION_ENCODE(__EMSCRIPTEN_major__, __EMSCRIPTEN_minor__, __EMSCRIPTEN_tiny__)\n#endif\n\n#if defined(JSON_HEDLEY_EMSCRIPTEN_VERSION_CHECK)\n    #undef JSON_HEDLEY_EMSCRIPTEN_VERSION_CHECK\n#endif\n#if defined(JSON_HEDLEY_EMSCRIPTEN_VERSION)\n    #define JSON_HEDLEY_EMSCRIPTEN_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_EMSCRIPTEN_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))\n#else\n    #define JSON_HEDLEY_EMSCRIPTEN_VERSION_CHECK(major,minor,patch) (0)\n#endif\n\n#if defined(JSON_HEDLEY_ARM_VERSION)\n    #undef JSON_HEDLEY_ARM_VERSION\n#endif\n#if defined(__CC_ARM) && defined(__ARMCOMPILER_VERSION)\n    #define JSON_HEDLEY_ARM_VERSION JSON_HEDLEY_VERSION_ENCODE(__ARMCOMPILER_VERSION / 1000000, (__ARMCOMPILER_VERSION % 1000000) / 10000, (__ARMCOMPILER_VERSION % 10000) / 100)\n#elif defined(__CC_ARM) && defined(__ARMCC_VERSION)\n    #define JSON_HEDLEY_ARM_VERSION JSON_HEDLEY_VERSION_ENCODE(__ARMCC_VERSION / 1000000, (__ARMCC_VERSION % 1000000) / 10000, (__ARMCC_VERSION % 10000) / 100)\n#endif\n\n#if defined(JSON_HEDLEY_ARM_VERSION_CHECK)\n    #undef JSON_HEDLEY_ARM_VERSION_CHECK\n#endif\n#if defined(JSON_HEDLEY_ARM_VERSION)\n    #define JSON_HEDLEY_ARM_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_ARM_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))\n#else\n    #define JSON_HEDLEY_ARM_VERSION_CHECK(major,minor,patch) (0)\n#endif\n\n#if defined(JSON_HEDLEY_IBM_VERSION)\n    #undef JSON_HEDLEY_IBM_VERSION\n#endif\n#if defined(__ibmxl__)\n    #define JSON_HEDLEY_IBM_VERSION JSON_HEDLEY_VERSION_ENCODE(__ibmxl_version__, __ibmxl_release__, __ibmxl_modification__)\n#elif defined(__xlC__) && defined(__xlC_ver__)\n    #define JSON_HEDLEY_IBM_VERSION JSON_HEDLEY_VERSION_ENCODE(__xlC__ >> 8, __xlC__ & 0xff, (__xlC_ver__ >> 8) & 0xff)\n#elif defined(__xlC__)\n    #define JSON_HEDLEY_IBM_VERSION JSON_HEDLEY_VERSION_ENCODE(__xlC__ >> 8, __xlC__ & 0xff, 0)\n#endif\n\n#if defined(JSON_HEDLEY_IBM_VERSION_CHECK)\n    #undef JSON_HEDLEY_IBM_VERSION_CHECK\n#endif\n#if defined(JSON_HEDLEY_IBM_VERSION)\n    #define JSON_HEDLEY_IBM_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_IBM_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))\n#else\n    #define JSON_HEDLEY_IBM_VERSION_CHECK(major,minor,patch) (0)\n#endif\n\n#if defined(JSON_HEDLEY_TI_VERSION)\n    #undef JSON_HEDLEY_TI_VERSION\n#endif\n#if \\\n    defined(__TI_COMPILER_VERSION__) && \\\n    ( \\\n      defined(__TMS470__) || defined(__TI_ARM__) || \\\n      defined(__MSP430__) || \\\n      defined(__TMS320C2000__) \\\n    )\n#if (__TI_COMPILER_VERSION__ >= 16000000)\n    #define JSON_HEDLEY_TI_VERSION JSON_HEDLEY_VERSION_ENCODE(__TI_COMPILER_VERSION__ / 1000000, (__TI_COMPILER_VERSION__ % 1000000) / 1000, (__TI_COMPILER_VERSION__ % 1000))\n#endif\n#endif\n\n#if defined(JSON_HEDLEY_TI_VERSION_CHECK)\n    #undef JSON_HEDLEY_TI_VERSION_CHECK\n#endif\n#if defined(JSON_HEDLEY_TI_VERSION)\n    #define JSON_HEDLEY_TI_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_TI_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))\n#else\n    #define JSON_HEDLEY_TI_VERSION_CHECK(major,minor,patch) (0)\n#endif\n\n#if defined(JSON_HEDLEY_TI_CL2000_VERSION)\n    #undef JSON_HEDLEY_TI_CL2000_VERSION\n#endif\n#if defined(__TI_COMPILER_VERSION__) && defined(__TMS320C2000__)\n    #define JSON_HEDLEY_TI_CL2000_VERSION JSON_HEDLEY_VERSION_ENCODE(__TI_COMPILER_VERSION__ / 1000000, (__TI_COMPILER_VERSION__ % 1000000) / 1000, (__TI_COMPILER_VERSION__ % 1000))\n#endif\n\n#if defined(JSON_HEDLEY_TI_CL2000_VERSION_CHECK)\n    #undef JSON_HEDLEY_TI_CL2000_VERSION_CHECK\n#endif\n#if defined(JSON_HEDLEY_TI_CL2000_VERSION)\n    #define JSON_HEDLEY_TI_CL2000_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_TI_CL2000_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))\n#else\n    #define JSON_HEDLEY_TI_CL2000_VERSION_CHECK(major,minor,patch) (0)\n#endif\n\n#if defined(JSON_HEDLEY_TI_CL430_VERSION)\n    #undef JSON_HEDLEY_TI_CL430_VERSION\n#endif\n#if defined(__TI_COMPILER_VERSION__) && defined(__MSP430__)\n    #define JSON_HEDLEY_TI_CL430_VERSION JSON_HEDLEY_VERSION_ENCODE(__TI_COMPILER_VERSION__ / 1000000, (__TI_COMPILER_VERSION__ % 1000000) / 1000, (__TI_COMPILER_VERSION__ % 1000))\n#endif\n\n#if defined(JSON_HEDLEY_TI_CL430_VERSION_CHECK)\n    #undef JSON_HEDLEY_TI_CL430_VERSION_CHECK\n#endif\n#if defined(JSON_HEDLEY_TI_CL430_VERSION)\n    #define JSON_HEDLEY_TI_CL430_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_TI_CL430_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))\n#else\n    #define JSON_HEDLEY_TI_CL430_VERSION_CHECK(major,minor,patch) (0)\n#endif\n\n#if defined(JSON_HEDLEY_TI_ARMCL_VERSION)\n    #undef JSON_HEDLEY_TI_ARMCL_VERSION\n#endif\n#if defined(__TI_COMPILER_VERSION__) && (defined(__TMS470__) || defined(__TI_ARM__))\n    #define JSON_HEDLEY_TI_ARMCL_VERSION JSON_HEDLEY_VERSION_ENCODE(__TI_COMPILER_VERSION__ / 1000000, (__TI_COMPILER_VERSION__ % 1000000) / 1000, (__TI_COMPILER_VERSION__ % 1000))\n#endif\n\n#if defined(JSON_HEDLEY_TI_ARMCL_VERSION_CHECK)\n    #undef JSON_HEDLEY_TI_ARMCL_VERSION_CHECK\n#endif\n#if defined(JSON_HEDLEY_TI_ARMCL_VERSION)\n    #define JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_TI_ARMCL_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))\n#else\n    #define JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(major,minor,patch) (0)\n#endif\n\n#if defined(JSON_HEDLEY_TI_CL6X_VERSION)\n    #undef JSON_HEDLEY_TI_CL6X_VERSION\n#endif\n#if defined(__TI_COMPILER_VERSION__) && defined(__TMS320C6X__)\n    #define JSON_HEDLEY_TI_CL6X_VERSION JSON_HEDLEY_VERSION_ENCODE(__TI_COMPILER_VERSION__ / 1000000, (__TI_COMPILER_VERSION__ % 1000000) / 1000, (__TI_COMPILER_VERSION__ % 1000))\n#endif\n\n#if defined(JSON_HEDLEY_TI_CL6X_VERSION_CHECK)\n    #undef JSON_HEDLEY_TI_CL6X_VERSION_CHECK\n#endif\n#if defined(JSON_HEDLEY_TI_CL6X_VERSION)\n    #define JSON_HEDLEY_TI_CL6X_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_TI_CL6X_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))\n#else\n    #define JSON_HEDLEY_TI_CL6X_VERSION_CHECK(major,minor,patch) (0)\n#endif\n\n#if defined(JSON_HEDLEY_TI_CL7X_VERSION)\n    #undef JSON_HEDLEY_TI_CL7X_VERSION\n#endif\n#if defined(__TI_COMPILER_VERSION__) && defined(__C7000__)\n    #define JSON_HEDLEY_TI_CL7X_VERSION JSON_HEDLEY_VERSION_ENCODE(__TI_COMPILER_VERSION__ / 1000000, (__TI_COMPILER_VERSION__ % 1000000) / 1000, (__TI_COMPILER_VERSION__ % 1000))\n#endif\n\n#if defined(JSON_HEDLEY_TI_CL7X_VERSION_CHECK)\n    #undef JSON_HEDLEY_TI_CL7X_VERSION_CHECK\n#endif\n#if defined(JSON_HEDLEY_TI_CL7X_VERSION)\n    #define JSON_HEDLEY_TI_CL7X_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_TI_CL7X_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))\n#else\n    #define JSON_HEDLEY_TI_CL7X_VERSION_CHECK(major,minor,patch) (0)\n#endif\n\n#if defined(JSON_HEDLEY_TI_CLPRU_VERSION)\n    #undef JSON_HEDLEY_TI_CLPRU_VERSION\n#endif\n#if defined(__TI_COMPILER_VERSION__) && defined(__PRU__)\n    #define JSON_HEDLEY_TI_CLPRU_VERSION JSON_HEDLEY_VERSION_ENCODE(__TI_COMPILER_VERSION__ / 1000000, (__TI_COMPILER_VERSION__ % 1000000) / 1000, (__TI_COMPILER_VERSION__ % 1000))\n#endif\n\n#if defined(JSON_HEDLEY_TI_CLPRU_VERSION_CHECK)\n    #undef JSON_HEDLEY_TI_CLPRU_VERSION_CHECK\n#endif\n#if defined(JSON_HEDLEY_TI_CLPRU_VERSION)\n    #define JSON_HEDLEY_TI_CLPRU_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_TI_CLPRU_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))\n#else\n    #define JSON_HEDLEY_TI_CLPRU_VERSION_CHECK(major,minor,patch) (0)\n#endif\n\n#if defined(JSON_HEDLEY_CRAY_VERSION)\n    #undef JSON_HEDLEY_CRAY_VERSION\n#endif\n#if defined(_CRAYC)\n    #if defined(_RELEASE_PATCHLEVEL)\n        #define JSON_HEDLEY_CRAY_VERSION JSON_HEDLEY_VERSION_ENCODE(_RELEASE_MAJOR, _RELEASE_MINOR, _RELEASE_PATCHLEVEL)\n    #else\n        #define JSON_HEDLEY_CRAY_VERSION JSON_HEDLEY_VERSION_ENCODE(_RELEASE_MAJOR, _RELEASE_MINOR, 0)\n    #endif\n#endif\n\n#if defined(JSON_HEDLEY_CRAY_VERSION_CHECK)\n    #undef JSON_HEDLEY_CRAY_VERSION_CHECK\n#endif\n#if defined(JSON_HEDLEY_CRAY_VERSION)\n    #define JSON_HEDLEY_CRAY_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_CRAY_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))\n#else\n    #define JSON_HEDLEY_CRAY_VERSION_CHECK(major,minor,patch) (0)\n#endif\n\n#if defined(JSON_HEDLEY_IAR_VERSION)\n    #undef JSON_HEDLEY_IAR_VERSION\n#endif\n#if defined(__IAR_SYSTEMS_ICC__)\n    #if __VER__ > 1000\n        #define JSON_HEDLEY_IAR_VERSION JSON_HEDLEY_VERSION_ENCODE((__VER__ / 1000000), ((__VER__ / 1000) % 1000), (__VER__ % 1000))\n    #else\n        #define JSON_HEDLEY_IAR_VERSION JSON_HEDLEY_VERSION_ENCODE(__VER__ / 100, __VER__ % 100, 0)\n    #endif\n#endif\n\n#if defined(JSON_HEDLEY_IAR_VERSION_CHECK)\n    #undef JSON_HEDLEY_IAR_VERSION_CHECK\n#endif\n#if defined(JSON_HEDLEY_IAR_VERSION)\n    #define JSON_HEDLEY_IAR_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_IAR_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))\n#else\n    #define JSON_HEDLEY_IAR_VERSION_CHECK(major,minor,patch) (0)\n#endif\n\n#if defined(JSON_HEDLEY_TINYC_VERSION)\n    #undef JSON_HEDLEY_TINYC_VERSION\n#endif\n#if defined(__TINYC__)\n    #define JSON_HEDLEY_TINYC_VERSION JSON_HEDLEY_VERSION_ENCODE(__TINYC__ / 1000, (__TINYC__ / 100) % 10, __TINYC__ % 100)\n#endif\n\n#if defined(JSON_HEDLEY_TINYC_VERSION_CHECK)\n    #undef JSON_HEDLEY_TINYC_VERSION_CHECK\n#endif\n#if defined(JSON_HEDLEY_TINYC_VERSION)\n    #define JSON_HEDLEY_TINYC_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_TINYC_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))\n#else\n    #define JSON_HEDLEY_TINYC_VERSION_CHECK(major,minor,patch) (0)\n#endif\n\n#if defined(JSON_HEDLEY_DMC_VERSION)\n    #undef JSON_HEDLEY_DMC_VERSION\n#endif\n#if defined(__DMC__)\n    #define JSON_HEDLEY_DMC_VERSION JSON_HEDLEY_VERSION_ENCODE(__DMC__ >> 8, (__DMC__ >> 4) & 0xf, __DMC__ & 0xf)\n#endif\n\n#if defined(JSON_HEDLEY_DMC_VERSION_CHECK)\n    #undef JSON_HEDLEY_DMC_VERSION_CHECK\n#endif\n#if defined(JSON_HEDLEY_DMC_VERSION)\n    #define JSON_HEDLEY_DMC_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_DMC_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))\n#else\n    #define JSON_HEDLEY_DMC_VERSION_CHECK(major,minor,patch) (0)\n#endif\n\n#if defined(JSON_HEDLEY_COMPCERT_VERSION)\n    #undef JSON_HEDLEY_COMPCERT_VERSION\n#endif\n#if defined(__COMPCERT_VERSION__)\n    #define JSON_HEDLEY_COMPCERT_VERSION JSON_HEDLEY_VERSION_ENCODE(__COMPCERT_VERSION__ / 10000, (__COMPCERT_VERSION__ / 100) % 100, __COMPCERT_VERSION__ % 100)\n#endif\n\n#if defined(JSON_HEDLEY_COMPCERT_VERSION_CHECK)\n    #undef JSON_HEDLEY_COMPCERT_VERSION_CHECK\n#endif\n#if defined(JSON_HEDLEY_COMPCERT_VERSION)\n    #define JSON_HEDLEY_COMPCERT_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_COMPCERT_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))\n#else\n    #define JSON_HEDLEY_COMPCERT_VERSION_CHECK(major,minor,patch) (0)\n#endif\n\n#if defined(JSON_HEDLEY_PELLES_VERSION)\n    #undef JSON_HEDLEY_PELLES_VERSION\n#endif\n#if defined(__POCC__)\n    #define JSON_HEDLEY_PELLES_VERSION JSON_HEDLEY_VERSION_ENCODE(__POCC__ / 100, __POCC__ % 100, 0)\n#endif\n\n#if defined(JSON_HEDLEY_PELLES_VERSION_CHECK)\n    #undef JSON_HEDLEY_PELLES_VERSION_CHECK\n#endif\n#if defined(JSON_HEDLEY_PELLES_VERSION)\n    #define JSON_HEDLEY_PELLES_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_PELLES_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))\n#else\n    #define JSON_HEDLEY_PELLES_VERSION_CHECK(major,minor,patch) (0)\n#endif\n\n#if defined(JSON_HEDLEY_MCST_LCC_VERSION)\n    #undef JSON_HEDLEY_MCST_LCC_VERSION\n#endif\n#if defined(__LCC__) && defined(__LCC_MINOR__)\n    #define JSON_HEDLEY_MCST_LCC_VERSION JSON_HEDLEY_VERSION_ENCODE(__LCC__ / 100, __LCC__ % 100, __LCC_MINOR__)\n#endif\n\n#if defined(JSON_HEDLEY_MCST_LCC_VERSION_CHECK)\n    #undef JSON_HEDLEY_MCST_LCC_VERSION_CHECK\n#endif\n#if defined(JSON_HEDLEY_MCST_LCC_VERSION)\n    #define JSON_HEDLEY_MCST_LCC_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_MCST_LCC_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))\n#else\n    #define JSON_HEDLEY_MCST_LCC_VERSION_CHECK(major,minor,patch) (0)\n#endif\n\n#if defined(JSON_HEDLEY_GCC_VERSION)\n    #undef JSON_HEDLEY_GCC_VERSION\n#endif\n#if \\\n    defined(JSON_HEDLEY_GNUC_VERSION) && \\\n    !defined(__clang__) && \\\n    !defined(JSON_HEDLEY_INTEL_VERSION) && \\\n    !defined(JSON_HEDLEY_PGI_VERSION) && \\\n    !defined(JSON_HEDLEY_ARM_VERSION) && \\\n    !defined(JSON_HEDLEY_CRAY_VERSION) && \\\n    !defined(JSON_HEDLEY_TI_VERSION) && \\\n    !defined(JSON_HEDLEY_TI_ARMCL_VERSION) && \\\n    !defined(JSON_HEDLEY_TI_CL430_VERSION) && \\\n    !defined(JSON_HEDLEY_TI_CL2000_VERSION) && \\\n    !defined(JSON_HEDLEY_TI_CL6X_VERSION) && \\\n    !defined(JSON_HEDLEY_TI_CL7X_VERSION) && \\\n    !defined(JSON_HEDLEY_TI_CLPRU_VERSION) && \\\n    !defined(__COMPCERT__) && \\\n    !defined(JSON_HEDLEY_MCST_LCC_VERSION)\n    #define JSON_HEDLEY_GCC_VERSION JSON_HEDLEY_GNUC_VERSION\n#endif\n\n#if defined(JSON_HEDLEY_GCC_VERSION_CHECK)\n    #undef JSON_HEDLEY_GCC_VERSION_CHECK\n#endif\n#if defined(JSON_HEDLEY_GCC_VERSION)\n    #define JSON_HEDLEY_GCC_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_GCC_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))\n#else\n    #define JSON_HEDLEY_GCC_VERSION_CHECK(major,minor,patch) (0)\n#endif\n\n#if defined(JSON_HEDLEY_HAS_ATTRIBUTE)\n    #undef JSON_HEDLEY_HAS_ATTRIBUTE\n#endif\n#if \\\n  defined(__has_attribute) && \\\n  ( \\\n    (!defined(JSON_HEDLEY_IAR_VERSION) || JSON_HEDLEY_IAR_VERSION_CHECK(8,5,9)) \\\n  )\n#  define JSON_HEDLEY_HAS_ATTRIBUTE(attribute) __has_attribute(attribute)\n#else\n#  define JSON_HEDLEY_HAS_ATTRIBUTE(attribute) (0)\n#endif\n\n#if defined(JSON_HEDLEY_GNUC_HAS_ATTRIBUTE)\n    #undef JSON_HEDLEY_GNUC_HAS_ATTRIBUTE\n#endif\n#if defined(__has_attribute)\n    #define JSON_HEDLEY_GNUC_HAS_ATTRIBUTE(attribute,major,minor,patch) JSON_HEDLEY_HAS_ATTRIBUTE(attribute)\n#else\n    #define JSON_HEDLEY_GNUC_HAS_ATTRIBUTE(attribute,major,minor,patch) JSON_HEDLEY_GNUC_VERSION_CHECK(major,minor,patch)\n#endif\n\n#if defined(JSON_HEDLEY_GCC_HAS_ATTRIBUTE)\n    #undef JSON_HEDLEY_GCC_HAS_ATTRIBUTE\n#endif\n#if defined(__has_attribute)\n    #define JSON_HEDLEY_GCC_HAS_ATTRIBUTE(attribute,major,minor,patch) JSON_HEDLEY_HAS_ATTRIBUTE(attribute)\n#else\n    #define JSON_HEDLEY_GCC_HAS_ATTRIBUTE(attribute,major,minor,patch) JSON_HEDLEY_GCC_VERSION_CHECK(major,minor,patch)\n#endif\n\n#if defined(JSON_HEDLEY_HAS_CPP_ATTRIBUTE)\n    #undef JSON_HEDLEY_HAS_CPP_ATTRIBUTE\n#endif\n#if \\\n    defined(__has_cpp_attribute) && \\\n    defined(__cplusplus) && \\\n    (!defined(JSON_HEDLEY_SUNPRO_VERSION) || JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,15,0))\n    #define JSON_HEDLEY_HAS_CPP_ATTRIBUTE(attribute) __has_cpp_attribute(attribute)\n#else\n    #define JSON_HEDLEY_HAS_CPP_ATTRIBUTE(attribute) (0)\n#endif\n\n#if defined(JSON_HEDLEY_HAS_CPP_ATTRIBUTE_NS)\n    #undef JSON_HEDLEY_HAS_CPP_ATTRIBUTE_NS\n#endif\n#if !defined(__cplusplus) || !defined(__has_cpp_attribute)\n    #define JSON_HEDLEY_HAS_CPP_ATTRIBUTE_NS(ns,attribute) (0)\n#elif \\\n    !defined(JSON_HEDLEY_PGI_VERSION) && \\\n    !defined(JSON_HEDLEY_IAR_VERSION) && \\\n    (!defined(JSON_HEDLEY_SUNPRO_VERSION) || JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,15,0)) && \\\n    (!defined(JSON_HEDLEY_MSVC_VERSION) || JSON_HEDLEY_MSVC_VERSION_CHECK(19,20,0))\n    #define JSON_HEDLEY_HAS_CPP_ATTRIBUTE_NS(ns,attribute) JSON_HEDLEY_HAS_CPP_ATTRIBUTE(ns::attribute)\n#else\n    #define JSON_HEDLEY_HAS_CPP_ATTRIBUTE_NS(ns,attribute) (0)\n#endif\n\n#if defined(JSON_HEDLEY_GNUC_HAS_CPP_ATTRIBUTE)\n    #undef JSON_HEDLEY_GNUC_HAS_CPP_ATTRIBUTE\n#endif\n#if defined(__has_cpp_attribute) && defined(__cplusplus)\n    #define JSON_HEDLEY_GNUC_HAS_CPP_ATTRIBUTE(attribute,major,minor,patch) __has_cpp_attribute(attribute)\n#else\n    #define JSON_HEDLEY_GNUC_HAS_CPP_ATTRIBUTE(attribute,major,minor,patch) JSON_HEDLEY_GNUC_VERSION_CHECK(major,minor,patch)\n#endif\n\n#if defined(JSON_HEDLEY_GCC_HAS_CPP_ATTRIBUTE)\n    #undef JSON_HEDLEY_GCC_HAS_CPP_ATTRIBUTE\n#endif\n#if defined(__has_cpp_attribute) && defined(__cplusplus)\n    #define JSON_HEDLEY_GCC_HAS_CPP_ATTRIBUTE(attribute,major,minor,patch) __has_cpp_attribute(attribute)\n#else\n    #define JSON_HEDLEY_GCC_HAS_CPP_ATTRIBUTE(attribute,major,minor,patch) JSON_HEDLEY_GCC_VERSION_CHECK(major,minor,patch)\n#endif\n\n#if defined(JSON_HEDLEY_HAS_BUILTIN)\n    #undef JSON_HEDLEY_HAS_BUILTIN\n#endif\n#if defined(__has_builtin)\n    #define JSON_HEDLEY_HAS_BUILTIN(builtin) __has_builtin(builtin)\n#else\n    #define JSON_HEDLEY_HAS_BUILTIN(builtin) (0)\n#endif\n\n#if defined(JSON_HEDLEY_GNUC_HAS_BUILTIN)\n    #undef JSON_HEDLEY_GNUC_HAS_BUILTIN\n#endif\n#if defined(__has_builtin)\n    #define JSON_HEDLEY_GNUC_HAS_BUILTIN(builtin,major,minor,patch) __has_builtin(builtin)\n#else\n    #define JSON_HEDLEY_GNUC_HAS_BUILTIN(builtin,major,minor,patch) JSON_HEDLEY_GNUC_VERSION_CHECK(major,minor,patch)\n#endif\n\n#if defined(JSON_HEDLEY_GCC_HAS_BUILTIN)\n    #undef JSON_HEDLEY_GCC_HAS_BUILTIN\n#endif\n#if defined(__has_builtin)\n    #define JSON_HEDLEY_GCC_HAS_BUILTIN(builtin,major,minor,patch) __has_builtin(builtin)\n#else\n    #define JSON_HEDLEY_GCC_HAS_BUILTIN(builtin,major,minor,patch) JSON_HEDLEY_GCC_VERSION_CHECK(major,minor,patch)\n#endif\n\n#if defined(JSON_HEDLEY_HAS_FEATURE)\n    #undef JSON_HEDLEY_HAS_FEATURE\n#endif\n#if defined(__has_feature)\n    #define JSON_HEDLEY_HAS_FEATURE(feature) __has_feature(feature)\n#else\n    #define JSON_HEDLEY_HAS_FEATURE(feature) (0)\n#endif\n\n#if defined(JSON_HEDLEY_GNUC_HAS_FEATURE)\n    #undef JSON_HEDLEY_GNUC_HAS_FEATURE\n#endif\n#if defined(__has_feature)\n    #define JSON_HEDLEY_GNUC_HAS_FEATURE(feature,major,minor,patch) __has_feature(feature)\n#else\n    #define JSON_HEDLEY_GNUC_HAS_FEATURE(feature,major,minor,patch) JSON_HEDLEY_GNUC_VERSION_CHECK(major,minor,patch)\n#endif\n\n#if defined(JSON_HEDLEY_GCC_HAS_FEATURE)\n    #undef JSON_HEDLEY_GCC_HAS_FEATURE\n#endif\n#if defined(__has_feature)\n    #define JSON_HEDLEY_GCC_HAS_FEATURE(feature,major,minor,patch) __has_feature(feature)\n#else\n    #define JSON_HEDLEY_GCC_HAS_FEATURE(feature,major,minor,patch) JSON_HEDLEY_GCC_VERSION_CHECK(major,minor,patch)\n#endif\n\n#if defined(JSON_HEDLEY_HAS_EXTENSION)\n    #undef JSON_HEDLEY_HAS_EXTENSION\n#endif\n#if defined(__has_extension)\n    #define JSON_HEDLEY_HAS_EXTENSION(extension) __has_extension(extension)\n#else\n    #define JSON_HEDLEY_HAS_EXTENSION(extension) (0)\n#endif\n\n#if defined(JSON_HEDLEY_GNUC_HAS_EXTENSION)\n    #undef JSON_HEDLEY_GNUC_HAS_EXTENSION\n#endif\n#if defined(__has_extension)\n    #define JSON_HEDLEY_GNUC_HAS_EXTENSION(extension,major,minor,patch) __has_extension(extension)\n#else\n    #define JSON_HEDLEY_GNUC_HAS_EXTENSION(extension,major,minor,patch) JSON_HEDLEY_GNUC_VERSION_CHECK(major,minor,patch)\n#endif\n\n#if defined(JSON_HEDLEY_GCC_HAS_EXTENSION)\n    #undef JSON_HEDLEY_GCC_HAS_EXTENSION\n#endif\n#if defined(__has_extension)\n    #define JSON_HEDLEY_GCC_HAS_EXTENSION(extension,major,minor,patch) __has_extension(extension)\n#else\n    #define JSON_HEDLEY_GCC_HAS_EXTENSION(extension,major,minor,patch) JSON_HEDLEY_GCC_VERSION_CHECK(major,minor,patch)\n#endif\n\n#if defined(JSON_HEDLEY_HAS_DECLSPEC_ATTRIBUTE)\n    #undef JSON_HEDLEY_HAS_DECLSPEC_ATTRIBUTE\n#endif\n#if defined(__has_declspec_attribute)\n    #define JSON_HEDLEY_HAS_DECLSPEC_ATTRIBUTE(attribute) __has_declspec_attribute(attribute)\n#else\n    #define JSON_HEDLEY_HAS_DECLSPEC_ATTRIBUTE(attribute) (0)\n#endif\n\n#if defined(JSON_HEDLEY_GNUC_HAS_DECLSPEC_ATTRIBUTE)\n    #undef JSON_HEDLEY_GNUC_HAS_DECLSPEC_ATTRIBUTE\n#endif\n#if defined(__has_declspec_attribute)\n    #define JSON_HEDLEY_GNUC_HAS_DECLSPEC_ATTRIBUTE(attribute,major,minor,patch) __has_declspec_attribute(attribute)\n#else\n    #define JSON_HEDLEY_GNUC_HAS_DECLSPEC_ATTRIBUTE(attribute,major,minor,patch) JSON_HEDLEY_GNUC_VERSION_CHECK(major,minor,patch)\n#endif\n\n#if defined(JSON_HEDLEY_GCC_HAS_DECLSPEC_ATTRIBUTE)\n    #undef JSON_HEDLEY_GCC_HAS_DECLSPEC_ATTRIBUTE\n#endif\n#if defined(__has_declspec_attribute)\n    #define JSON_HEDLEY_GCC_HAS_DECLSPEC_ATTRIBUTE(attribute,major,minor,patch) __has_declspec_attribute(attribute)\n#else\n    #define JSON_HEDLEY_GCC_HAS_DECLSPEC_ATTRIBUTE(attribute,major,minor,patch) JSON_HEDLEY_GCC_VERSION_CHECK(major,minor,patch)\n#endif\n\n#if defined(JSON_HEDLEY_HAS_WARNING)\n    #undef JSON_HEDLEY_HAS_WARNING\n#endif\n#if defined(__has_warning)\n    #define JSON_HEDLEY_HAS_WARNING(warning) __has_warning(warning)\n#else\n    #define JSON_HEDLEY_HAS_WARNING(warning) (0)\n#endif\n\n#if defined(JSON_HEDLEY_GNUC_HAS_WARNING)\n    #undef JSON_HEDLEY_GNUC_HAS_WARNING\n#endif\n#if defined(__has_warning)\n    #define JSON_HEDLEY_GNUC_HAS_WARNING(warning,major,minor,patch) __has_warning(warning)\n#else\n    #define JSON_HEDLEY_GNUC_HAS_WARNING(warning,major,minor,patch) JSON_HEDLEY_GNUC_VERSION_CHECK(major,minor,patch)\n#endif\n\n#if defined(JSON_HEDLEY_GCC_HAS_WARNING)\n    #undef JSON_HEDLEY_GCC_HAS_WARNING\n#endif\n#if defined(__has_warning)\n    #define JSON_HEDLEY_GCC_HAS_WARNING(warning,major,minor,patch) __has_warning(warning)\n#else\n    #define JSON_HEDLEY_GCC_HAS_WARNING(warning,major,minor,patch) JSON_HEDLEY_GCC_VERSION_CHECK(major,minor,patch)\n#endif\n\n#if \\\n    (defined(__STDC_VERSION__) && (__STDC_VERSION__ >= 199901L)) || \\\n    defined(__clang__) || \\\n    JSON_HEDLEY_GCC_VERSION_CHECK(3,0,0) || \\\n    JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \\\n    JSON_HEDLEY_IAR_VERSION_CHECK(8,0,0) || \\\n    JSON_HEDLEY_PGI_VERSION_CHECK(18,4,0) || \\\n    JSON_HEDLEY_ARM_VERSION_CHECK(4,1,0) || \\\n    JSON_HEDLEY_TI_VERSION_CHECK(15,12,0) || \\\n    JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(4,7,0) || \\\n    JSON_HEDLEY_TI_CL430_VERSION_CHECK(2,0,1) || \\\n    JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,1,0) || \\\n    JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,0,0) || \\\n    JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0) || \\\n    JSON_HEDLEY_TI_CLPRU_VERSION_CHECK(2,1,0) || \\\n    JSON_HEDLEY_CRAY_VERSION_CHECK(5,0,0) || \\\n    JSON_HEDLEY_TINYC_VERSION_CHECK(0,9,17) || \\\n    JSON_HEDLEY_SUNPRO_VERSION_CHECK(8,0,0) || \\\n    (JSON_HEDLEY_IBM_VERSION_CHECK(10,1,0) && defined(__C99_PRAGMA_OPERATOR))\n    #define JSON_HEDLEY_PRAGMA(value) _Pragma(#value)\n#elif JSON_HEDLEY_MSVC_VERSION_CHECK(15,0,0)\n    #define JSON_HEDLEY_PRAGMA(value) __pragma(value)\n#else\n    #define JSON_HEDLEY_PRAGMA(value)\n#endif\n\n#if defined(JSON_HEDLEY_DIAGNOSTIC_PUSH)\n    #undef JSON_HEDLEY_DIAGNOSTIC_PUSH\n#endif\n#if defined(JSON_HEDLEY_DIAGNOSTIC_POP)\n    #undef JSON_HEDLEY_DIAGNOSTIC_POP\n#endif\n#if defined(__clang__)\n    #define JSON_HEDLEY_DIAGNOSTIC_PUSH _Pragma(\"clang diagnostic push\")\n    #define JSON_HEDLEY_DIAGNOSTIC_POP _Pragma(\"clang diagnostic pop\")\n#elif JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0)\n    #define JSON_HEDLEY_DIAGNOSTIC_PUSH _Pragma(\"warning(push)\")\n    #define JSON_HEDLEY_DIAGNOSTIC_POP _Pragma(\"warning(pop)\")\n#elif JSON_HEDLEY_GCC_VERSION_CHECK(4,6,0)\n    #define JSON_HEDLEY_DIAGNOSTIC_PUSH _Pragma(\"GCC diagnostic push\")\n    #define JSON_HEDLEY_DIAGNOSTIC_POP _Pragma(\"GCC diagnostic pop\")\n#elif \\\n    JSON_HEDLEY_MSVC_VERSION_CHECK(15,0,0) || \\\n    JSON_HEDLEY_INTEL_CL_VERSION_CHECK(2021,1,0)\n    #define JSON_HEDLEY_DIAGNOSTIC_PUSH __pragma(warning(push))\n    #define JSON_HEDLEY_DIAGNOSTIC_POP __pragma(warning(pop))\n#elif JSON_HEDLEY_ARM_VERSION_CHECK(5,6,0)\n    #define JSON_HEDLEY_DIAGNOSTIC_PUSH _Pragma(\"push\")\n    #define JSON_HEDLEY_DIAGNOSTIC_POP _Pragma(\"pop\")\n#elif \\\n    JSON_HEDLEY_TI_VERSION_CHECK(15,12,0) || \\\n    JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(5,2,0) || \\\n    JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,4,0) || \\\n    JSON_HEDLEY_TI_CL6X_VERSION_CHECK(8,1,0) || \\\n    JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0) || \\\n    JSON_HEDLEY_TI_CLPRU_VERSION_CHECK(2,1,0)\n    #define JSON_HEDLEY_DIAGNOSTIC_PUSH _Pragma(\"diag_push\")\n    #define JSON_HEDLEY_DIAGNOSTIC_POP _Pragma(\"diag_pop\")\n#elif JSON_HEDLEY_PELLES_VERSION_CHECK(2,90,0)\n    #define JSON_HEDLEY_DIAGNOSTIC_PUSH _Pragma(\"warning(push)\")\n    #define JSON_HEDLEY_DIAGNOSTIC_POP _Pragma(\"warning(pop)\")\n#else\n    #define JSON_HEDLEY_DIAGNOSTIC_PUSH\n    #define JSON_HEDLEY_DIAGNOSTIC_POP\n#endif\n\n/* JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_ is for\n   HEDLEY INTERNAL USE ONLY.  API subject to change without notice. */\n#if defined(JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_)\n    #undef JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_\n#endif\n#if defined(__cplusplus)\n#  if JSON_HEDLEY_HAS_WARNING(\"-Wc++98-compat\")\n#    if JSON_HEDLEY_HAS_WARNING(\"-Wc++17-extensions\")\n#      if JSON_HEDLEY_HAS_WARNING(\"-Wc++1z-extensions\")\n#        define JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_(xpr) \\\n    JSON_HEDLEY_DIAGNOSTIC_PUSH \\\n    _Pragma(\"clang diagnostic ignored \\\"-Wc++98-compat\\\"\") \\\n    _Pragma(\"clang diagnostic ignored \\\"-Wc++17-extensions\\\"\") \\\n    _Pragma(\"clang diagnostic ignored \\\"-Wc++1z-extensions\\\"\") \\\n    xpr \\\n    JSON_HEDLEY_DIAGNOSTIC_POP\n#      else\n#        define JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_(xpr) \\\n    JSON_HEDLEY_DIAGNOSTIC_PUSH \\\n    _Pragma(\"clang diagnostic ignored \\\"-Wc++98-compat\\\"\") \\\n    _Pragma(\"clang diagnostic ignored \\\"-Wc++17-extensions\\\"\") \\\n    xpr \\\n    JSON_HEDLEY_DIAGNOSTIC_POP\n#      endif\n#    else\n#      define JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_(xpr) \\\n    JSON_HEDLEY_DIAGNOSTIC_PUSH \\\n    _Pragma(\"clang diagnostic ignored \\\"-Wc++98-compat\\\"\") \\\n    xpr \\\n    JSON_HEDLEY_DIAGNOSTIC_POP\n#    endif\n#  endif\n#endif\n#if !defined(JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_)\n    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_(x) x\n#endif\n\n#if defined(JSON_HEDLEY_CONST_CAST)\n    #undef JSON_HEDLEY_CONST_CAST\n#endif\n#if defined(__cplusplus)\n#  define JSON_HEDLEY_CONST_CAST(T, expr) (const_cast<T>(expr))\n#elif \\\n  JSON_HEDLEY_HAS_WARNING(\"-Wcast-qual\") || \\\n  JSON_HEDLEY_GCC_VERSION_CHECK(4,6,0) || \\\n  JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0)\n#  define JSON_HEDLEY_CONST_CAST(T, expr) (__extension__ ({ \\\n        JSON_HEDLEY_DIAGNOSTIC_PUSH \\\n        JSON_HEDLEY_DIAGNOSTIC_DISABLE_CAST_QUAL \\\n        ((T) (expr)); \\\n        JSON_HEDLEY_DIAGNOSTIC_POP \\\n    }))\n#else\n#  define JSON_HEDLEY_CONST_CAST(T, expr) ((T) (expr))\n#endif\n\n#if defined(JSON_HEDLEY_REINTERPRET_CAST)\n    #undef JSON_HEDLEY_REINTERPRET_CAST\n#endif\n#if defined(__cplusplus)\n    #define JSON_HEDLEY_REINTERPRET_CAST(T, expr) (reinterpret_cast<T>(expr))\n#else\n    #define JSON_HEDLEY_REINTERPRET_CAST(T, expr) ((T) (expr))\n#endif\n\n#if defined(JSON_HEDLEY_STATIC_CAST)\n    #undef JSON_HEDLEY_STATIC_CAST\n#endif\n#if defined(__cplusplus)\n    #define JSON_HEDLEY_STATIC_CAST(T, expr) (static_cast<T>(expr))\n#else\n    #define JSON_HEDLEY_STATIC_CAST(T, expr) ((T) (expr))\n#endif\n\n#if defined(JSON_HEDLEY_CPP_CAST)\n    #undef JSON_HEDLEY_CPP_CAST\n#endif\n#if defined(__cplusplus)\n#  if JSON_HEDLEY_HAS_WARNING(\"-Wold-style-cast\")\n#    define JSON_HEDLEY_CPP_CAST(T, expr) \\\n    JSON_HEDLEY_DIAGNOSTIC_PUSH \\\n    _Pragma(\"clang diagnostic ignored \\\"-Wold-style-cast\\\"\") \\\n    ((T) (expr)) \\\n    JSON_HEDLEY_DIAGNOSTIC_POP\n#  elif JSON_HEDLEY_IAR_VERSION_CHECK(8,3,0)\n#    define JSON_HEDLEY_CPP_CAST(T, expr) \\\n    JSON_HEDLEY_DIAGNOSTIC_PUSH \\\n    _Pragma(\"diag_suppress=Pe137\") \\\n    JSON_HEDLEY_DIAGNOSTIC_POP\n#  else\n#    define JSON_HEDLEY_CPP_CAST(T, expr) ((T) (expr))\n#  endif\n#else\n#  define JSON_HEDLEY_CPP_CAST(T, expr) (expr)\n#endif\n\n#if defined(JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED)\n    #undef JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED\n#endif\n#if JSON_HEDLEY_HAS_WARNING(\"-Wdeprecated-declarations\")\n    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED _Pragma(\"clang diagnostic ignored \\\"-Wdeprecated-declarations\\\"\")\n#elif JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0)\n    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED _Pragma(\"warning(disable:1478 1786)\")\n#elif JSON_HEDLEY_INTEL_CL_VERSION_CHECK(2021,1,0)\n    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED __pragma(warning(disable:1478 1786))\n#elif JSON_HEDLEY_PGI_VERSION_CHECK(20,7,0)\n    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED _Pragma(\"diag_suppress 1215,1216,1444,1445\")\n#elif JSON_HEDLEY_PGI_VERSION_CHECK(17,10,0)\n    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED _Pragma(\"diag_suppress 1215,1444\")\n#elif JSON_HEDLEY_GCC_VERSION_CHECK(4,3,0)\n    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED _Pragma(\"GCC diagnostic ignored \\\"-Wdeprecated-declarations\\\"\")\n#elif JSON_HEDLEY_MSVC_VERSION_CHECK(15,0,0)\n    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED __pragma(warning(disable:4996))\n#elif JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)\n    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED _Pragma(\"diag_suppress 1215,1444\")\n#elif \\\n    JSON_HEDLEY_TI_VERSION_CHECK(15,12,0) || \\\n    (JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(4,8,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \\\n    JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(5,2,0) || \\\n    (JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,0,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \\\n    JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,4,0) || \\\n    (JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,0,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \\\n    JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,3,0) || \\\n    (JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,2,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \\\n    JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,5,0) || \\\n    JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0) || \\\n    JSON_HEDLEY_TI_CLPRU_VERSION_CHECK(2,1,0)\n    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED _Pragma(\"diag_suppress 1291,1718\")\n#elif JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,13,0) && !defined(__cplusplus)\n    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED _Pragma(\"error_messages(off,E_DEPRECATED_ATT,E_DEPRECATED_ATT_MESS)\")\n#elif JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,13,0) && defined(__cplusplus)\n    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED _Pragma(\"error_messages(off,symdeprecated,symdeprecated2)\")\n#elif JSON_HEDLEY_IAR_VERSION_CHECK(8,0,0)\n    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED _Pragma(\"diag_suppress=Pe1444,Pe1215\")\n#elif JSON_HEDLEY_PELLES_VERSION_CHECK(2,90,0)\n    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED _Pragma(\"warn(disable:2241)\")\n#else\n    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED\n#endif\n\n#if defined(JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS)\n    #undef JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS\n#endif\n#if JSON_HEDLEY_HAS_WARNING(\"-Wunknown-pragmas\")\n    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS _Pragma(\"clang diagnostic ignored \\\"-Wunknown-pragmas\\\"\")\n#elif JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0)\n    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS _Pragma(\"warning(disable:161)\")\n#elif JSON_HEDLEY_INTEL_CL_VERSION_CHECK(2021,1,0)\n    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS __pragma(warning(disable:161))\n#elif JSON_HEDLEY_PGI_VERSION_CHECK(17,10,0)\n    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS _Pragma(\"diag_suppress 1675\")\n#elif JSON_HEDLEY_GCC_VERSION_CHECK(4,3,0)\n    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS _Pragma(\"GCC diagnostic ignored \\\"-Wunknown-pragmas\\\"\")\n#elif JSON_HEDLEY_MSVC_VERSION_CHECK(15,0,0)\n    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS __pragma(warning(disable:4068))\n#elif \\\n    JSON_HEDLEY_TI_VERSION_CHECK(16,9,0) || \\\n    JSON_HEDLEY_TI_CL6X_VERSION_CHECK(8,0,0) || \\\n    JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0) || \\\n    JSON_HEDLEY_TI_CLPRU_VERSION_CHECK(2,3,0)\n    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS _Pragma(\"diag_suppress 163\")\n#elif JSON_HEDLEY_TI_CL6X_VERSION_CHECK(8,0,0)\n    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS _Pragma(\"diag_suppress 163\")\n#elif JSON_HEDLEY_IAR_VERSION_CHECK(8,0,0)\n    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS _Pragma(\"diag_suppress=Pe161\")\n#elif JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)\n    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS _Pragma(\"diag_suppress 161\")\n#else\n    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS\n#endif\n\n#if defined(JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES)\n    #undef JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES\n#endif\n#if JSON_HEDLEY_HAS_WARNING(\"-Wunknown-attributes\")\n    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES _Pragma(\"clang diagnostic ignored \\\"-Wunknown-attributes\\\"\")\n#elif JSON_HEDLEY_GCC_VERSION_CHECK(4,6,0)\n    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES _Pragma(\"GCC diagnostic ignored \\\"-Wdeprecated-declarations\\\"\")\n#elif JSON_HEDLEY_INTEL_VERSION_CHECK(17,0,0)\n    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES _Pragma(\"warning(disable:1292)\")\n#elif JSON_HEDLEY_INTEL_CL_VERSION_CHECK(2021,1,0)\n    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES __pragma(warning(disable:1292))\n#elif JSON_HEDLEY_MSVC_VERSION_CHECK(19,0,0)\n    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES __pragma(warning(disable:5030))\n#elif JSON_HEDLEY_PGI_VERSION_CHECK(20,7,0)\n    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES _Pragma(\"diag_suppress 1097,1098\")\n#elif JSON_HEDLEY_PGI_VERSION_CHECK(17,10,0)\n    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES _Pragma(\"diag_suppress 1097\")\n#elif JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,14,0) && defined(__cplusplus)\n    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES _Pragma(\"error_messages(off,attrskipunsup)\")\n#elif \\\n    JSON_HEDLEY_TI_VERSION_CHECK(18,1,0) || \\\n    JSON_HEDLEY_TI_CL6X_VERSION_CHECK(8,3,0) || \\\n    JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0)\n    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES _Pragma(\"diag_suppress 1173\")\n#elif JSON_HEDLEY_IAR_VERSION_CHECK(8,0,0)\n    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES _Pragma(\"diag_suppress=Pe1097\")\n#elif JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)\n    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES _Pragma(\"diag_suppress 1097\")\n#else\n    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES\n#endif\n\n#if defined(JSON_HEDLEY_DIAGNOSTIC_DISABLE_CAST_QUAL)\n    #undef JSON_HEDLEY_DIAGNOSTIC_DISABLE_CAST_QUAL\n#endif\n#if JSON_HEDLEY_HAS_WARNING(\"-Wcast-qual\")\n    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_CAST_QUAL _Pragma(\"clang diagnostic ignored \\\"-Wcast-qual\\\"\")\n#elif JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0)\n    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_CAST_QUAL _Pragma(\"warning(disable:2203 2331)\")\n#elif JSON_HEDLEY_GCC_VERSION_CHECK(3,0,0)\n    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_CAST_QUAL _Pragma(\"GCC diagnostic ignored \\\"-Wcast-qual\\\"\")\n#else\n    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_CAST_QUAL\n#endif\n\n#if defined(JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNUSED_FUNCTION)\n    #undef JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNUSED_FUNCTION\n#endif\n#if JSON_HEDLEY_HAS_WARNING(\"-Wunused-function\")\n    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNUSED_FUNCTION _Pragma(\"clang diagnostic ignored \\\"-Wunused-function\\\"\")\n#elif JSON_HEDLEY_GCC_VERSION_CHECK(3,4,0)\n    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNUSED_FUNCTION _Pragma(\"GCC diagnostic ignored \\\"-Wunused-function\\\"\")\n#elif JSON_HEDLEY_MSVC_VERSION_CHECK(1,0,0)\n    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNUSED_FUNCTION __pragma(warning(disable:4505))\n#elif JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)\n    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNUSED_FUNCTION _Pragma(\"diag_suppress 3142\")\n#else\n    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNUSED_FUNCTION\n#endif\n\n#if defined(JSON_HEDLEY_DEPRECATED)\n    #undef JSON_HEDLEY_DEPRECATED\n#endif\n#if defined(JSON_HEDLEY_DEPRECATED_FOR)\n    #undef JSON_HEDLEY_DEPRECATED_FOR\n#endif\n#if \\\n    JSON_HEDLEY_MSVC_VERSION_CHECK(14,0,0) || \\\n    JSON_HEDLEY_INTEL_CL_VERSION_CHECK(2021,1,0)\n    #define JSON_HEDLEY_DEPRECATED(since) __declspec(deprecated(\"Since \" # since))\n    #define JSON_HEDLEY_DEPRECATED_FOR(since, replacement) __declspec(deprecated(\"Since \" #since \"; use \" #replacement))\n#elif \\\n    (JSON_HEDLEY_HAS_EXTENSION(attribute_deprecated_with_message) && !defined(JSON_HEDLEY_IAR_VERSION)) || \\\n    JSON_HEDLEY_GCC_VERSION_CHECK(4,5,0) || \\\n    JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \\\n    JSON_HEDLEY_ARM_VERSION_CHECK(5,6,0) || \\\n    JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,13,0) || \\\n    JSON_HEDLEY_PGI_VERSION_CHECK(17,10,0) || \\\n    JSON_HEDLEY_TI_VERSION_CHECK(18,1,0) || \\\n    JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(18,1,0) || \\\n    JSON_HEDLEY_TI_CL6X_VERSION_CHECK(8,3,0) || \\\n    JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0) || \\\n    JSON_HEDLEY_TI_CLPRU_VERSION_CHECK(2,3,0) || \\\n    JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)\n    #define JSON_HEDLEY_DEPRECATED(since) __attribute__((__deprecated__(\"Since \" #since)))\n    #define JSON_HEDLEY_DEPRECATED_FOR(since, replacement) __attribute__((__deprecated__(\"Since \" #since \"; use \" #replacement)))\n#elif defined(__cplusplus) && (__cplusplus >= 201402L)\n    #define JSON_HEDLEY_DEPRECATED(since) JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_([[deprecated(\"Since \" #since)]])\n    #define JSON_HEDLEY_DEPRECATED_FOR(since, replacement) JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_([[deprecated(\"Since \" #since \"; use \" #replacement)]])\n#elif \\\n    JSON_HEDLEY_HAS_ATTRIBUTE(deprecated) || \\\n    JSON_HEDLEY_GCC_VERSION_CHECK(3,1,0) || \\\n    JSON_HEDLEY_ARM_VERSION_CHECK(4,1,0) || \\\n    JSON_HEDLEY_TI_VERSION_CHECK(15,12,0) || \\\n    (JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(4,8,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \\\n    JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(5,2,0) || \\\n    (JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,0,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \\\n    JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,4,0) || \\\n    (JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,0,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \\\n    JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,3,0) || \\\n    (JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,2,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \\\n    JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,5,0) || \\\n    JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0) || \\\n    JSON_HEDLEY_TI_CLPRU_VERSION_CHECK(2,1,0) || \\\n    JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10) || \\\n    JSON_HEDLEY_IAR_VERSION_CHECK(8,10,0)\n    #define JSON_HEDLEY_DEPRECATED(since) __attribute__((__deprecated__))\n    #define JSON_HEDLEY_DEPRECATED_FOR(since, replacement) __attribute__((__deprecated__))\n#elif \\\n    JSON_HEDLEY_MSVC_VERSION_CHECK(13,10,0) || \\\n    JSON_HEDLEY_PELLES_VERSION_CHECK(6,50,0) || \\\n    JSON_HEDLEY_INTEL_CL_VERSION_CHECK(2021,1,0)\n    #define JSON_HEDLEY_DEPRECATED(since) __declspec(deprecated)\n    #define JSON_HEDLEY_DEPRECATED_FOR(since, replacement) __declspec(deprecated)\n#elif JSON_HEDLEY_IAR_VERSION_CHECK(8,0,0)\n    #define JSON_HEDLEY_DEPRECATED(since) _Pragma(\"deprecated\")\n    #define JSON_HEDLEY_DEPRECATED_FOR(since, replacement) _Pragma(\"deprecated\")\n#else\n    #define JSON_HEDLEY_DEPRECATED(since)\n    #define JSON_HEDLEY_DEPRECATED_FOR(since, replacement)\n#endif\n\n#if defined(JSON_HEDLEY_UNAVAILABLE)\n    #undef JSON_HEDLEY_UNAVAILABLE\n#endif\n#if \\\n    JSON_HEDLEY_HAS_ATTRIBUTE(warning) || \\\n    JSON_HEDLEY_GCC_VERSION_CHECK(4,3,0) || \\\n    JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \\\n    JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)\n    #define JSON_HEDLEY_UNAVAILABLE(available_since) __attribute__((__warning__(\"Not available until \" #available_since)))\n#else\n    #define JSON_HEDLEY_UNAVAILABLE(available_since)\n#endif\n\n#if defined(JSON_HEDLEY_WARN_UNUSED_RESULT)\n    #undef JSON_HEDLEY_WARN_UNUSED_RESULT\n#endif\n#if defined(JSON_HEDLEY_WARN_UNUSED_RESULT_MSG)\n    #undef JSON_HEDLEY_WARN_UNUSED_RESULT_MSG\n#endif\n#if \\\n    JSON_HEDLEY_HAS_ATTRIBUTE(warn_unused_result) || \\\n    JSON_HEDLEY_GCC_VERSION_CHECK(3,4,0) || \\\n    JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \\\n    JSON_HEDLEY_TI_VERSION_CHECK(15,12,0) || \\\n    (JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(4,8,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \\\n    JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(5,2,0) || \\\n    (JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,0,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \\\n    JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,4,0) || \\\n    (JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,0,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \\\n    JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,3,0) || \\\n    (JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,2,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \\\n    JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,5,0) || \\\n    JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0) || \\\n    JSON_HEDLEY_TI_CLPRU_VERSION_CHECK(2,1,0) || \\\n    (JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,15,0) && defined(__cplusplus)) || \\\n    JSON_HEDLEY_PGI_VERSION_CHECK(17,10,0) || \\\n    JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)\n    #define JSON_HEDLEY_WARN_UNUSED_RESULT __attribute__((__warn_unused_result__))\n    #define JSON_HEDLEY_WARN_UNUSED_RESULT_MSG(msg) __attribute__((__warn_unused_result__))\n#elif (JSON_HEDLEY_HAS_CPP_ATTRIBUTE(nodiscard) >= 201907L)\n    #define JSON_HEDLEY_WARN_UNUSED_RESULT JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_([[nodiscard]])\n    #define JSON_HEDLEY_WARN_UNUSED_RESULT_MSG(msg) JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_([[nodiscard(msg)]])\n#elif JSON_HEDLEY_HAS_CPP_ATTRIBUTE(nodiscard)\n    #define JSON_HEDLEY_WARN_UNUSED_RESULT JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_([[nodiscard]])\n    #define JSON_HEDLEY_WARN_UNUSED_RESULT_MSG(msg) JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_([[nodiscard]])\n#elif defined(_Check_return_) /* SAL */\n    #define JSON_HEDLEY_WARN_UNUSED_RESULT _Check_return_\n    #define JSON_HEDLEY_WARN_UNUSED_RESULT_MSG(msg) _Check_return_\n#else\n    #define JSON_HEDLEY_WARN_UNUSED_RESULT\n    #define JSON_HEDLEY_WARN_UNUSED_RESULT_MSG(msg)\n#endif\n\n#if defined(JSON_HEDLEY_SENTINEL)\n    #undef JSON_HEDLEY_SENTINEL\n#endif\n#if \\\n    JSON_HEDLEY_HAS_ATTRIBUTE(sentinel) || \\\n    JSON_HEDLEY_GCC_VERSION_CHECK(4,0,0) || \\\n    JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \\\n    JSON_HEDLEY_ARM_VERSION_CHECK(5,4,0) || \\\n    JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)\n    #define JSON_HEDLEY_SENTINEL(position) __attribute__((__sentinel__(position)))\n#else\n    #define JSON_HEDLEY_SENTINEL(position)\n#endif\n\n#if defined(JSON_HEDLEY_NO_RETURN)\n    #undef JSON_HEDLEY_NO_RETURN\n#endif\n#if JSON_HEDLEY_IAR_VERSION_CHECK(8,0,0)\n    #define JSON_HEDLEY_NO_RETURN __noreturn\n#elif \\\n    JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \\\n    JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)\n    #define JSON_HEDLEY_NO_RETURN __attribute__((__noreturn__))\n#elif defined(__STDC_VERSION__) && __STDC_VERSION__ >= 201112L\n    #define JSON_HEDLEY_NO_RETURN _Noreturn\n#elif defined(__cplusplus) && (__cplusplus >= 201103L)\n    #define JSON_HEDLEY_NO_RETURN JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_([[noreturn]])\n#elif \\\n    JSON_HEDLEY_HAS_ATTRIBUTE(noreturn) || \\\n    JSON_HEDLEY_GCC_VERSION_CHECK(3,2,0) || \\\n    JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,11,0) || \\\n    JSON_HEDLEY_ARM_VERSION_CHECK(4,1,0) || \\\n    JSON_HEDLEY_IBM_VERSION_CHECK(10,1,0) || \\\n    JSON_HEDLEY_TI_VERSION_CHECK(15,12,0) || \\\n    (JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(4,8,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \\\n    JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(5,2,0) || \\\n    (JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,0,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \\\n    JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,4,0) || \\\n    (JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,0,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \\\n    JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,3,0) || \\\n    (JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,2,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \\\n    JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,5,0) || \\\n    JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0) || \\\n    JSON_HEDLEY_TI_CLPRU_VERSION_CHECK(2,1,0) || \\\n    JSON_HEDLEY_IAR_VERSION_CHECK(8,10,0)\n    #define JSON_HEDLEY_NO_RETURN __attribute__((__noreturn__))\n#elif JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,10,0)\n    #define JSON_HEDLEY_NO_RETURN _Pragma(\"does_not_return\")\n#elif \\\n    JSON_HEDLEY_MSVC_VERSION_CHECK(13,10,0) || \\\n    JSON_HEDLEY_INTEL_CL_VERSION_CHECK(2021,1,0)\n    #define JSON_HEDLEY_NO_RETURN __declspec(noreturn)\n#elif JSON_HEDLEY_TI_CL6X_VERSION_CHECK(6,0,0) && defined(__cplusplus)\n    #define JSON_HEDLEY_NO_RETURN _Pragma(\"FUNC_NEVER_RETURNS;\")\n#elif JSON_HEDLEY_COMPCERT_VERSION_CHECK(3,2,0)\n    #define JSON_HEDLEY_NO_RETURN __attribute((noreturn))\n#elif JSON_HEDLEY_PELLES_VERSION_CHECK(9,0,0)\n    #define JSON_HEDLEY_NO_RETURN __declspec(noreturn)\n#else\n    #define JSON_HEDLEY_NO_RETURN\n#endif\n\n#if defined(JSON_HEDLEY_NO_ESCAPE)\n    #undef JSON_HEDLEY_NO_ESCAPE\n#endif\n#if JSON_HEDLEY_HAS_ATTRIBUTE(noescape)\n    #define JSON_HEDLEY_NO_ESCAPE __attribute__((__noescape__))\n#else\n    #define JSON_HEDLEY_NO_ESCAPE\n#endif\n\n#if defined(JSON_HEDLEY_UNREACHABLE)\n    #undef JSON_HEDLEY_UNREACHABLE\n#endif\n#if defined(JSON_HEDLEY_UNREACHABLE_RETURN)\n    #undef JSON_HEDLEY_UNREACHABLE_RETURN\n#endif\n#if defined(JSON_HEDLEY_ASSUME)\n    #undef JSON_HEDLEY_ASSUME\n#endif\n#if \\\n    JSON_HEDLEY_MSVC_VERSION_CHECK(13,10,0) || \\\n    JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \\\n    JSON_HEDLEY_INTEL_CL_VERSION_CHECK(2021,1,0)\n    #define JSON_HEDLEY_ASSUME(expr) __assume(expr)\n#elif JSON_HEDLEY_HAS_BUILTIN(__builtin_assume)\n    #define JSON_HEDLEY_ASSUME(expr) __builtin_assume(expr)\n#elif \\\n    JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,2,0) || \\\n    JSON_HEDLEY_TI_CL6X_VERSION_CHECK(4,0,0)\n    #if defined(__cplusplus)\n        #define JSON_HEDLEY_ASSUME(expr) std::_nassert(expr)\n    #else\n        #define JSON_HEDLEY_ASSUME(expr) _nassert(expr)\n    #endif\n#endif\n#if \\\n    (JSON_HEDLEY_HAS_BUILTIN(__builtin_unreachable) && (!defined(JSON_HEDLEY_ARM_VERSION))) || \\\n    JSON_HEDLEY_GCC_VERSION_CHECK(4,5,0) || \\\n    JSON_HEDLEY_PGI_VERSION_CHECK(18,10,0) || \\\n    JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \\\n    JSON_HEDLEY_IBM_VERSION_CHECK(13,1,5) || \\\n    JSON_HEDLEY_CRAY_VERSION_CHECK(10,0,0) || \\\n    JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)\n    #define JSON_HEDLEY_UNREACHABLE() __builtin_unreachable()\n#elif defined(JSON_HEDLEY_ASSUME)\n    #define JSON_HEDLEY_UNREACHABLE() JSON_HEDLEY_ASSUME(0)\n#endif\n#if !defined(JSON_HEDLEY_ASSUME)\n    #if defined(JSON_HEDLEY_UNREACHABLE)\n        #define JSON_HEDLEY_ASSUME(expr) JSON_HEDLEY_STATIC_CAST(void, ((expr) ? 1 : (JSON_HEDLEY_UNREACHABLE(), 1)))\n    #else\n        #define JSON_HEDLEY_ASSUME(expr) JSON_HEDLEY_STATIC_CAST(void, expr)\n    #endif\n#endif\n#if defined(JSON_HEDLEY_UNREACHABLE)\n    #if  \\\n        JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,2,0) || \\\n        JSON_HEDLEY_TI_CL6X_VERSION_CHECK(4,0,0)\n        #define JSON_HEDLEY_UNREACHABLE_RETURN(value) return (JSON_HEDLEY_STATIC_CAST(void, JSON_HEDLEY_ASSUME(0)), (value))\n    #else\n        #define JSON_HEDLEY_UNREACHABLE_RETURN(value) JSON_HEDLEY_UNREACHABLE()\n    #endif\n#else\n    #define JSON_HEDLEY_UNREACHABLE_RETURN(value) return (value)\n#endif\n#if !defined(JSON_HEDLEY_UNREACHABLE)\n    #define JSON_HEDLEY_UNREACHABLE() JSON_HEDLEY_ASSUME(0)\n#endif\n\nJSON_HEDLEY_DIAGNOSTIC_PUSH\n#if JSON_HEDLEY_HAS_WARNING(\"-Wpedantic\")\n    #pragma clang diagnostic ignored \"-Wpedantic\"\n#endif\n#if JSON_HEDLEY_HAS_WARNING(\"-Wc++98-compat-pedantic\") && defined(__cplusplus)\n    #pragma clang diagnostic ignored \"-Wc++98-compat-pedantic\"\n#endif\n#if JSON_HEDLEY_GCC_HAS_WARNING(\"-Wvariadic-macros\",4,0,0)\n    #if defined(__clang__)\n        #pragma clang diagnostic ignored \"-Wvariadic-macros\"\n    #elif defined(JSON_HEDLEY_GCC_VERSION)\n        #pragma GCC diagnostic ignored \"-Wvariadic-macros\"\n    #endif\n#endif\n#if defined(JSON_HEDLEY_NON_NULL)\n    #undef JSON_HEDLEY_NON_NULL\n#endif\n#if \\\n    JSON_HEDLEY_HAS_ATTRIBUTE(nonnull) || \\\n    JSON_HEDLEY_GCC_VERSION_CHECK(3,3,0) || \\\n    JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \\\n    JSON_HEDLEY_ARM_VERSION_CHECK(4,1,0)\n    #define JSON_HEDLEY_NON_NULL(...) __attribute__((__nonnull__(__VA_ARGS__)))\n#else\n    #define JSON_HEDLEY_NON_NULL(...)\n#endif\nJSON_HEDLEY_DIAGNOSTIC_POP\n\n#if defined(JSON_HEDLEY_PRINTF_FORMAT)\n    #undef JSON_HEDLEY_PRINTF_FORMAT\n#endif\n#if defined(__MINGW32__) && JSON_HEDLEY_GCC_HAS_ATTRIBUTE(format,4,4,0) && !defined(__USE_MINGW_ANSI_STDIO)\n    #define JSON_HEDLEY_PRINTF_FORMAT(string_idx,first_to_check) __attribute__((__format__(ms_printf, string_idx, first_to_check)))\n#elif defined(__MINGW32__) && JSON_HEDLEY_GCC_HAS_ATTRIBUTE(format,4,4,0) && defined(__USE_MINGW_ANSI_STDIO)\n    #define JSON_HEDLEY_PRINTF_FORMAT(string_idx,first_to_check) __attribute__((__format__(gnu_printf, string_idx, first_to_check)))\n#elif \\\n    JSON_HEDLEY_HAS_ATTRIBUTE(format) || \\\n    JSON_HEDLEY_GCC_VERSION_CHECK(3,1,0) || \\\n    JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \\\n    JSON_HEDLEY_ARM_VERSION_CHECK(5,6,0) || \\\n    JSON_HEDLEY_IBM_VERSION_CHECK(10,1,0) || \\\n    JSON_HEDLEY_TI_VERSION_CHECK(15,12,0) || \\\n    (JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(4,8,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \\\n    JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(5,2,0) || \\\n    (JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,0,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \\\n    JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,4,0) || \\\n    (JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,0,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \\\n    JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,3,0) || \\\n    (JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,2,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \\\n    JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,5,0) || \\\n    JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0) || \\\n    JSON_HEDLEY_TI_CLPRU_VERSION_CHECK(2,1,0) || \\\n    JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)\n    #define JSON_HEDLEY_PRINTF_FORMAT(string_idx,first_to_check) __attribute__((__format__(__printf__, string_idx, first_to_check)))\n#elif JSON_HEDLEY_PELLES_VERSION_CHECK(6,0,0)\n    #define JSON_HEDLEY_PRINTF_FORMAT(string_idx,first_to_check) __declspec(vaformat(printf,string_idx,first_to_check))\n#else\n    #define JSON_HEDLEY_PRINTF_FORMAT(string_idx,first_to_check)\n#endif\n\n#if defined(JSON_HEDLEY_CONSTEXPR)\n    #undef JSON_HEDLEY_CONSTEXPR\n#endif\n#if defined(__cplusplus)\n    #if __cplusplus >= 201103L\n        #define JSON_HEDLEY_CONSTEXPR JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_(constexpr)\n    #endif\n#endif\n#if !defined(JSON_HEDLEY_CONSTEXPR)\n    #define JSON_HEDLEY_CONSTEXPR\n#endif\n\n#if defined(JSON_HEDLEY_PREDICT)\n    #undef JSON_HEDLEY_PREDICT\n#endif\n#if defined(JSON_HEDLEY_LIKELY)\n    #undef JSON_HEDLEY_LIKELY\n#endif\n#if defined(JSON_HEDLEY_UNLIKELY)\n    #undef JSON_HEDLEY_UNLIKELY\n#endif\n#if defined(JSON_HEDLEY_UNPREDICTABLE)\n    #undef JSON_HEDLEY_UNPREDICTABLE\n#endif\n#if JSON_HEDLEY_HAS_BUILTIN(__builtin_unpredictable)\n    #define JSON_HEDLEY_UNPREDICTABLE(expr) __builtin_unpredictable((expr))\n#endif\n#if \\\n  (JSON_HEDLEY_HAS_BUILTIN(__builtin_expect_with_probability) && !defined(JSON_HEDLEY_PGI_VERSION)) || \\\n  JSON_HEDLEY_GCC_VERSION_CHECK(9,0,0) || \\\n  JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)\n#  define JSON_HEDLEY_PREDICT(expr, value, probability) __builtin_expect_with_probability(  (expr), (value), (probability))\n#  define JSON_HEDLEY_PREDICT_TRUE(expr, probability)   __builtin_expect_with_probability(!!(expr),    1   , (probability))\n#  define JSON_HEDLEY_PREDICT_FALSE(expr, probability)  __builtin_expect_with_probability(!!(expr),    0   , (probability))\n#  define JSON_HEDLEY_LIKELY(expr)                      __builtin_expect                 (!!(expr),    1                  )\n#  define JSON_HEDLEY_UNLIKELY(expr)                    __builtin_expect                 (!!(expr),    0                  )\n#elif \\\n  (JSON_HEDLEY_HAS_BUILTIN(__builtin_expect) && !defined(JSON_HEDLEY_INTEL_CL_VERSION)) || \\\n  JSON_HEDLEY_GCC_VERSION_CHECK(3,0,0) || \\\n  JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \\\n  (JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,15,0) && defined(__cplusplus)) || \\\n  JSON_HEDLEY_ARM_VERSION_CHECK(4,1,0) || \\\n  JSON_HEDLEY_IBM_VERSION_CHECK(10,1,0) || \\\n  JSON_HEDLEY_TI_VERSION_CHECK(15,12,0) || \\\n  JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(4,7,0) || \\\n  JSON_HEDLEY_TI_CL430_VERSION_CHECK(3,1,0) || \\\n  JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,1,0) || \\\n  JSON_HEDLEY_TI_CL6X_VERSION_CHECK(6,1,0) || \\\n  JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0) || \\\n  JSON_HEDLEY_TI_CLPRU_VERSION_CHECK(2,1,0) || \\\n  JSON_HEDLEY_TINYC_VERSION_CHECK(0,9,27) || \\\n  JSON_HEDLEY_CRAY_VERSION_CHECK(8,1,0) || \\\n  JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)\n#  define JSON_HEDLEY_PREDICT(expr, expected, probability) \\\n    (((probability) >= 0.9) ? __builtin_expect((expr), (expected)) : (JSON_HEDLEY_STATIC_CAST(void, expected), (expr)))\n#  define JSON_HEDLEY_PREDICT_TRUE(expr, probability) \\\n    (__extension__ ({ \\\n        double hedley_probability_ = (probability); \\\n        ((hedley_probability_ >= 0.9) ? __builtin_expect(!!(expr), 1) : ((hedley_probability_ <= 0.1) ? __builtin_expect(!!(expr), 0) : !!(expr))); \\\n    }))\n#  define JSON_HEDLEY_PREDICT_FALSE(expr, probability) \\\n    (__extension__ ({ \\\n        double hedley_probability_ = (probability); \\\n        ((hedley_probability_ >= 0.9) ? __builtin_expect(!!(expr), 0) : ((hedley_probability_ <= 0.1) ? __builtin_expect(!!(expr), 1) : !!(expr))); \\\n    }))\n#  define JSON_HEDLEY_LIKELY(expr)   __builtin_expect(!!(expr), 1)\n#  define JSON_HEDLEY_UNLIKELY(expr) __builtin_expect(!!(expr), 0)\n#else\n#  define JSON_HEDLEY_PREDICT(expr, expected, probability) (JSON_HEDLEY_STATIC_CAST(void, expected), (expr))\n#  define JSON_HEDLEY_PREDICT_TRUE(expr, probability) (!!(expr))\n#  define JSON_HEDLEY_PREDICT_FALSE(expr, probability) (!!(expr))\n#  define JSON_HEDLEY_LIKELY(expr) (!!(expr))\n#  define JSON_HEDLEY_UNLIKELY(expr) (!!(expr))\n#endif\n#if !defined(JSON_HEDLEY_UNPREDICTABLE)\n    #define JSON_HEDLEY_UNPREDICTABLE(expr) JSON_HEDLEY_PREDICT(expr, 1, 0.5)\n#endif\n\n#if defined(JSON_HEDLEY_MALLOC)\n    #undef JSON_HEDLEY_MALLOC\n#endif\n#if \\\n    JSON_HEDLEY_HAS_ATTRIBUTE(malloc) || \\\n    JSON_HEDLEY_GCC_VERSION_CHECK(3,1,0) || \\\n    JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \\\n    JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,11,0) || \\\n    JSON_HEDLEY_ARM_VERSION_CHECK(4,1,0) || \\\n    JSON_HEDLEY_IBM_VERSION_CHECK(12,1,0) || \\\n    JSON_HEDLEY_TI_VERSION_CHECK(15,12,0) || \\\n    (JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(4,8,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \\\n    JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(5,2,0) || \\\n    (JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,0,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \\\n    JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,4,0) || \\\n    (JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,0,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \\\n    JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,3,0) || \\\n    (JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,2,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \\\n    JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,5,0) || \\\n    JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0) || \\\n    JSON_HEDLEY_TI_CLPRU_VERSION_CHECK(2,1,0) || \\\n    JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)\n    #define JSON_HEDLEY_MALLOC __attribute__((__malloc__))\n#elif JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,10,0)\n    #define JSON_HEDLEY_MALLOC _Pragma(\"returns_new_memory\")\n#elif \\\n    JSON_HEDLEY_MSVC_VERSION_CHECK(14,0,0) || \\\n    JSON_HEDLEY_INTEL_CL_VERSION_CHECK(2021,1,0)\n    #define JSON_HEDLEY_MALLOC __declspec(restrict)\n#else\n    #define JSON_HEDLEY_MALLOC\n#endif\n\n#if defined(JSON_HEDLEY_PURE)\n    #undef JSON_HEDLEY_PURE\n#endif\n#if \\\n  JSON_HEDLEY_HAS_ATTRIBUTE(pure) || \\\n  JSON_HEDLEY_GCC_VERSION_CHECK(2,96,0) || \\\n  JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \\\n  JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,11,0) || \\\n  JSON_HEDLEY_ARM_VERSION_CHECK(4,1,0) || \\\n  JSON_HEDLEY_IBM_VERSION_CHECK(10,1,0) || \\\n  JSON_HEDLEY_TI_VERSION_CHECK(15,12,0) || \\\n  (JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(4,8,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \\\n  JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(5,2,0) || \\\n  (JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,0,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \\\n  JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,4,0) || \\\n  (JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,0,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \\\n  JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,3,0) || \\\n  (JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,2,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \\\n  JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,5,0) || \\\n  JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0) || \\\n  JSON_HEDLEY_TI_CLPRU_VERSION_CHECK(2,1,0) || \\\n  JSON_HEDLEY_PGI_VERSION_CHECK(17,10,0) || \\\n  JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)\n#  define JSON_HEDLEY_PURE __attribute__((__pure__))\n#elif JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,10,0)\n#  define JSON_HEDLEY_PURE _Pragma(\"does_not_write_global_data\")\n#elif defined(__cplusplus) && \\\n    ( \\\n      JSON_HEDLEY_TI_CL430_VERSION_CHECK(2,0,1) || \\\n      JSON_HEDLEY_TI_CL6X_VERSION_CHECK(4,0,0) || \\\n      JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0) \\\n    )\n#  define JSON_HEDLEY_PURE _Pragma(\"FUNC_IS_PURE;\")\n#else\n#  define JSON_HEDLEY_PURE\n#endif\n\n#if defined(JSON_HEDLEY_CONST)\n    #undef JSON_HEDLEY_CONST\n#endif\n#if \\\n    JSON_HEDLEY_HAS_ATTRIBUTE(const) || \\\n    JSON_HEDLEY_GCC_VERSION_CHECK(2,5,0) || \\\n    JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \\\n    JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,11,0) || \\\n    JSON_HEDLEY_ARM_VERSION_CHECK(4,1,0) || \\\n    JSON_HEDLEY_IBM_VERSION_CHECK(10,1,0) || \\\n    JSON_HEDLEY_TI_VERSION_CHECK(15,12,0) || \\\n    (JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(4,8,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \\\n    JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(5,2,0) || \\\n    (JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,0,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \\\n    JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,4,0) || \\\n    (JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,0,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \\\n    JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,3,0) || \\\n    (JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,2,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \\\n    JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,5,0) || \\\n    JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0) || \\\n    JSON_HEDLEY_TI_CLPRU_VERSION_CHECK(2,1,0) || \\\n    JSON_HEDLEY_PGI_VERSION_CHECK(17,10,0) || \\\n    JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)\n    #define JSON_HEDLEY_CONST __attribute__((__const__))\n#elif \\\n    JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,10,0)\n    #define JSON_HEDLEY_CONST _Pragma(\"no_side_effect\")\n#else\n    #define JSON_HEDLEY_CONST JSON_HEDLEY_PURE\n#endif\n\n#if defined(JSON_HEDLEY_RESTRICT)\n    #undef JSON_HEDLEY_RESTRICT\n#endif\n#if defined(__STDC_VERSION__) && (__STDC_VERSION__ >= 199901L) && !defined(__cplusplus)\n    #define JSON_HEDLEY_RESTRICT restrict\n#elif \\\n    JSON_HEDLEY_GCC_VERSION_CHECK(3,1,0) || \\\n    JSON_HEDLEY_MSVC_VERSION_CHECK(14,0,0) || \\\n    JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \\\n    JSON_HEDLEY_INTEL_CL_VERSION_CHECK(2021,1,0) || \\\n    JSON_HEDLEY_ARM_VERSION_CHECK(4,1,0) || \\\n    JSON_HEDLEY_IBM_VERSION_CHECK(10,1,0) || \\\n    JSON_HEDLEY_PGI_VERSION_CHECK(17,10,0) || \\\n    JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,3,0) || \\\n    JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,2,4) || \\\n    JSON_HEDLEY_TI_CL6X_VERSION_CHECK(8,1,0) || \\\n    JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0) || \\\n    (JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,14,0) && defined(__cplusplus)) || \\\n    JSON_HEDLEY_IAR_VERSION_CHECK(8,0,0) || \\\n    defined(__clang__) || \\\n    JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)\n    #define JSON_HEDLEY_RESTRICT __restrict\n#elif JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,3,0) && !defined(__cplusplus)\n    #define JSON_HEDLEY_RESTRICT _Restrict\n#else\n    #define JSON_HEDLEY_RESTRICT\n#endif\n\n#if defined(JSON_HEDLEY_INLINE)\n    #undef JSON_HEDLEY_INLINE\n#endif\n#if \\\n    (defined(__STDC_VERSION__) && (__STDC_VERSION__ >= 199901L)) || \\\n    (defined(__cplusplus) && (__cplusplus >= 199711L))\n    #define JSON_HEDLEY_INLINE inline\n#elif \\\n    defined(JSON_HEDLEY_GCC_VERSION) || \\\n    JSON_HEDLEY_ARM_VERSION_CHECK(6,2,0)\n    #define JSON_HEDLEY_INLINE __inline__\n#elif \\\n    JSON_HEDLEY_MSVC_VERSION_CHECK(12,0,0) || \\\n    JSON_HEDLEY_INTEL_CL_VERSION_CHECK(2021,1,0) || \\\n    JSON_HEDLEY_ARM_VERSION_CHECK(4,1,0) || \\\n    JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(5,1,0) || \\\n    JSON_HEDLEY_TI_CL430_VERSION_CHECK(3,1,0) || \\\n    JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,2,0) || \\\n    JSON_HEDLEY_TI_CL6X_VERSION_CHECK(8,0,0) || \\\n    JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0) || \\\n    JSON_HEDLEY_TI_CLPRU_VERSION_CHECK(2,1,0) || \\\n    JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)\n    #define JSON_HEDLEY_INLINE __inline\n#else\n    #define JSON_HEDLEY_INLINE\n#endif\n\n#if defined(JSON_HEDLEY_ALWAYS_INLINE)\n    #undef JSON_HEDLEY_ALWAYS_INLINE\n#endif\n#if \\\n  JSON_HEDLEY_HAS_ATTRIBUTE(always_inline) || \\\n  JSON_HEDLEY_GCC_VERSION_CHECK(4,0,0) || \\\n  JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \\\n  JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,11,0) || \\\n  JSON_HEDLEY_ARM_VERSION_CHECK(4,1,0) || \\\n  JSON_HEDLEY_IBM_VERSION_CHECK(10,1,0) || \\\n  JSON_HEDLEY_TI_VERSION_CHECK(15,12,0) || \\\n  (JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(4,8,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \\\n  JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(5,2,0) || \\\n  (JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,0,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \\\n  JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,4,0) || \\\n  (JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,0,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \\\n  JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,3,0) || \\\n  (JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,2,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \\\n  JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,5,0) || \\\n  JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0) || \\\n  JSON_HEDLEY_TI_CLPRU_VERSION_CHECK(2,1,0) || \\\n  JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10) || \\\n  JSON_HEDLEY_IAR_VERSION_CHECK(8,10,0)\n#  define JSON_HEDLEY_ALWAYS_INLINE __attribute__((__always_inline__)) JSON_HEDLEY_INLINE\n#elif \\\n  JSON_HEDLEY_MSVC_VERSION_CHECK(12,0,0) || \\\n  JSON_HEDLEY_INTEL_CL_VERSION_CHECK(2021,1,0)\n#  define JSON_HEDLEY_ALWAYS_INLINE __forceinline\n#elif defined(__cplusplus) && \\\n    ( \\\n      JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(5,2,0) || \\\n      JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,3,0) || \\\n      JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,4,0) || \\\n      JSON_HEDLEY_TI_CL6X_VERSION_CHECK(6,1,0) || \\\n      JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0) || \\\n      JSON_HEDLEY_TI_CLPRU_VERSION_CHECK(2,1,0) \\\n    )\n#  define JSON_HEDLEY_ALWAYS_INLINE _Pragma(\"FUNC_ALWAYS_INLINE;\")\n#elif JSON_HEDLEY_IAR_VERSION_CHECK(8,0,0)\n#  define JSON_HEDLEY_ALWAYS_INLINE _Pragma(\"inline=forced\")\n#else\n#  define JSON_HEDLEY_ALWAYS_INLINE JSON_HEDLEY_INLINE\n#endif\n\n#if defined(JSON_HEDLEY_NEVER_INLINE)\n    #undef JSON_HEDLEY_NEVER_INLINE\n#endif\n#if \\\n    JSON_HEDLEY_HAS_ATTRIBUTE(noinline) || \\\n    JSON_HEDLEY_GCC_VERSION_CHECK(4,0,0) || \\\n    JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \\\n    JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,11,0) || \\\n    JSON_HEDLEY_ARM_VERSION_CHECK(4,1,0) || \\\n    JSON_HEDLEY_IBM_VERSION_CHECK(10,1,0) || \\\n    JSON_HEDLEY_TI_VERSION_CHECK(15,12,0) || \\\n    (JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(4,8,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \\\n    JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(5,2,0) || \\\n    (JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,0,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \\\n    JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,4,0) || \\\n    (JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,0,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \\\n    JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,3,0) || \\\n    (JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,2,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \\\n    JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,5,0) || \\\n    JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0) || \\\n    JSON_HEDLEY_TI_CLPRU_VERSION_CHECK(2,1,0) || \\\n    JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10) || \\\n    JSON_HEDLEY_IAR_VERSION_CHECK(8,10,0)\n    #define JSON_HEDLEY_NEVER_INLINE __attribute__((__noinline__))\n#elif \\\n    JSON_HEDLEY_MSVC_VERSION_CHECK(13,10,0) || \\\n    JSON_HEDLEY_INTEL_CL_VERSION_CHECK(2021,1,0)\n    #define JSON_HEDLEY_NEVER_INLINE __declspec(noinline)\n#elif JSON_HEDLEY_PGI_VERSION_CHECK(10,2,0)\n    #define JSON_HEDLEY_NEVER_INLINE _Pragma(\"noinline\")\n#elif JSON_HEDLEY_TI_CL6X_VERSION_CHECK(6,0,0) && defined(__cplusplus)\n    #define JSON_HEDLEY_NEVER_INLINE _Pragma(\"FUNC_CANNOT_INLINE;\")\n#elif JSON_HEDLEY_IAR_VERSION_CHECK(8,0,0)\n    #define JSON_HEDLEY_NEVER_INLINE _Pragma(\"inline=never\")\n#elif JSON_HEDLEY_COMPCERT_VERSION_CHECK(3,2,0)\n    #define JSON_HEDLEY_NEVER_INLINE __attribute((noinline))\n#elif JSON_HEDLEY_PELLES_VERSION_CHECK(9,0,0)\n    #define JSON_HEDLEY_NEVER_INLINE __declspec(noinline)\n#else\n    #define JSON_HEDLEY_NEVER_INLINE\n#endif\n\n#if defined(JSON_HEDLEY_PRIVATE)\n    #undef JSON_HEDLEY_PRIVATE\n#endif\n#if defined(JSON_HEDLEY_PUBLIC)\n    #undef JSON_HEDLEY_PUBLIC\n#endif\n#if defined(JSON_HEDLEY_IMPORT)\n    #undef JSON_HEDLEY_IMPORT\n#endif\n#if defined(_WIN32) || defined(__CYGWIN__)\n#  define JSON_HEDLEY_PRIVATE\n#  define JSON_HEDLEY_PUBLIC   __declspec(dllexport)\n#  define JSON_HEDLEY_IMPORT   __declspec(dllimport)\n#else\n#  if \\\n    JSON_HEDLEY_HAS_ATTRIBUTE(visibility) || \\\n    JSON_HEDLEY_GCC_VERSION_CHECK(3,3,0) || \\\n    JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,11,0) || \\\n    JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \\\n    JSON_HEDLEY_ARM_VERSION_CHECK(4,1,0) || \\\n    JSON_HEDLEY_IBM_VERSION_CHECK(13,1,0) || \\\n    ( \\\n      defined(__TI_EABI__) && \\\n      ( \\\n        (JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,2,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \\\n        JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,5,0) \\\n      ) \\\n    ) || \\\n    JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)\n#    define JSON_HEDLEY_PRIVATE __attribute__((__visibility__(\"hidden\")))\n#    define JSON_HEDLEY_PUBLIC  __attribute__((__visibility__(\"default\")))\n#  else\n#    define JSON_HEDLEY_PRIVATE\n#    define JSON_HEDLEY_PUBLIC\n#  endif\n#  define JSON_HEDLEY_IMPORT    extern\n#endif\n\n#if defined(JSON_HEDLEY_NO_THROW)\n    #undef JSON_HEDLEY_NO_THROW\n#endif\n#if \\\n    JSON_HEDLEY_HAS_ATTRIBUTE(nothrow) || \\\n    JSON_HEDLEY_GCC_VERSION_CHECK(3,3,0) || \\\n    JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \\\n    JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)\n    #define JSON_HEDLEY_NO_THROW __attribute__((__nothrow__))\n#elif \\\n    JSON_HEDLEY_MSVC_VERSION_CHECK(13,1,0) || \\\n    JSON_HEDLEY_INTEL_CL_VERSION_CHECK(2021,1,0) || \\\n    JSON_HEDLEY_ARM_VERSION_CHECK(4,1,0)\n    #define JSON_HEDLEY_NO_THROW __declspec(nothrow)\n#else\n    #define JSON_HEDLEY_NO_THROW\n#endif\n\n#if defined(JSON_HEDLEY_FALL_THROUGH)\n    #undef JSON_HEDLEY_FALL_THROUGH\n#endif\n#if \\\n    JSON_HEDLEY_HAS_ATTRIBUTE(fallthrough) || \\\n    JSON_HEDLEY_GCC_VERSION_CHECK(7,0,0) || \\\n    JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)\n    #define JSON_HEDLEY_FALL_THROUGH __attribute__((__fallthrough__))\n#elif JSON_HEDLEY_HAS_CPP_ATTRIBUTE_NS(clang,fallthrough)\n    #define JSON_HEDLEY_FALL_THROUGH JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_([[clang::fallthrough]])\n#elif JSON_HEDLEY_HAS_CPP_ATTRIBUTE(fallthrough)\n    #define JSON_HEDLEY_FALL_THROUGH JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_([[fallthrough]])\n#elif defined(__fallthrough) /* SAL */\n    #define JSON_HEDLEY_FALL_THROUGH __fallthrough\n#else\n    #define JSON_HEDLEY_FALL_THROUGH\n#endif\n\n#if defined(JSON_HEDLEY_RETURNS_NON_NULL)\n    #undef JSON_HEDLEY_RETURNS_NON_NULL\n#endif\n#if \\\n    JSON_HEDLEY_HAS_ATTRIBUTE(returns_nonnull) || \\\n    JSON_HEDLEY_GCC_VERSION_CHECK(4,9,0) || \\\n    JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)\n    #define JSON_HEDLEY_RETURNS_NON_NULL __attribute__((__returns_nonnull__))\n#elif defined(_Ret_notnull_) /* SAL */\n    #define JSON_HEDLEY_RETURNS_NON_NULL _Ret_notnull_\n#else\n    #define JSON_HEDLEY_RETURNS_NON_NULL\n#endif\n\n#if defined(JSON_HEDLEY_ARRAY_PARAM)\n    #undef JSON_HEDLEY_ARRAY_PARAM\n#endif\n#if \\\n    defined(__STDC_VERSION__) && (__STDC_VERSION__ >= 199901L) && \\\n    !defined(__STDC_NO_VLA__) && \\\n    !defined(__cplusplus) && \\\n    !defined(JSON_HEDLEY_PGI_VERSION) && \\\n    !defined(JSON_HEDLEY_TINYC_VERSION)\n    #define JSON_HEDLEY_ARRAY_PARAM(name) (name)\n#else\n    #define JSON_HEDLEY_ARRAY_PARAM(name)\n#endif\n\n#if defined(JSON_HEDLEY_IS_CONSTANT)\n    #undef JSON_HEDLEY_IS_CONSTANT\n#endif\n#if defined(JSON_HEDLEY_REQUIRE_CONSTEXPR)\n    #undef JSON_HEDLEY_REQUIRE_CONSTEXPR\n#endif\n/* JSON_HEDLEY_IS_CONSTEXPR_ is for\n   HEDLEY INTERNAL USE ONLY.  API subject to change without notice. */\n#if defined(JSON_HEDLEY_IS_CONSTEXPR_)\n    #undef JSON_HEDLEY_IS_CONSTEXPR_\n#endif\n#if \\\n    JSON_HEDLEY_HAS_BUILTIN(__builtin_constant_p) || \\\n    JSON_HEDLEY_GCC_VERSION_CHECK(3,4,0) || \\\n    JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \\\n    JSON_HEDLEY_TINYC_VERSION_CHECK(0,9,19) || \\\n    JSON_HEDLEY_ARM_VERSION_CHECK(4,1,0) || \\\n    JSON_HEDLEY_IBM_VERSION_CHECK(13,1,0) || \\\n    JSON_HEDLEY_TI_CL6X_VERSION_CHECK(6,1,0) || \\\n    (JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,10,0) && !defined(__cplusplus)) || \\\n    JSON_HEDLEY_CRAY_VERSION_CHECK(8,1,0) || \\\n    JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)\n    #define JSON_HEDLEY_IS_CONSTANT(expr) __builtin_constant_p(expr)\n#endif\n#if !defined(__cplusplus)\n#  if \\\n       JSON_HEDLEY_HAS_BUILTIN(__builtin_types_compatible_p) || \\\n       JSON_HEDLEY_GCC_VERSION_CHECK(3,4,0) || \\\n       JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \\\n       JSON_HEDLEY_IBM_VERSION_CHECK(13,1,0) || \\\n       JSON_HEDLEY_CRAY_VERSION_CHECK(8,1,0) || \\\n       JSON_HEDLEY_ARM_VERSION_CHECK(5,4,0) || \\\n       JSON_HEDLEY_TINYC_VERSION_CHECK(0,9,24)\n#if defined(__INTPTR_TYPE__)\n    #define JSON_HEDLEY_IS_CONSTEXPR_(expr) __builtin_types_compatible_p(__typeof__((1 ? (void*) ((__INTPTR_TYPE__) ((expr) * 0)) : (int*) 0)), int*)\n#else\n    #include <stdint.h>\n    #define JSON_HEDLEY_IS_CONSTEXPR_(expr) __builtin_types_compatible_p(__typeof__((1 ? (void*) ((intptr_t) ((expr) * 0)) : (int*) 0)), int*)\n#endif\n#  elif \\\n       ( \\\n          defined(__STDC_VERSION__) && (__STDC_VERSION__ >= 201112L) && \\\n          !defined(JSON_HEDLEY_SUNPRO_VERSION) && \\\n          !defined(JSON_HEDLEY_PGI_VERSION) && \\\n          !defined(JSON_HEDLEY_IAR_VERSION)) || \\\n       (JSON_HEDLEY_HAS_EXTENSION(c_generic_selections) && !defined(JSON_HEDLEY_IAR_VERSION)) || \\\n       JSON_HEDLEY_GCC_VERSION_CHECK(4,9,0) || \\\n       JSON_HEDLEY_INTEL_VERSION_CHECK(17,0,0) || \\\n       JSON_HEDLEY_IBM_VERSION_CHECK(12,1,0) || \\\n       JSON_HEDLEY_ARM_VERSION_CHECK(5,3,0)\n#if defined(__INTPTR_TYPE__)\n    #define JSON_HEDLEY_IS_CONSTEXPR_(expr) _Generic((1 ? (void*) ((__INTPTR_TYPE__) ((expr) * 0)) : (int*) 0), int*: 1, void*: 0)\n#else\n    #include <stdint.h>\n    #define JSON_HEDLEY_IS_CONSTEXPR_(expr) _Generic((1 ? (void*) ((intptr_t) * 0) : (int*) 0), int*: 1, void*: 0)\n#endif\n#  elif \\\n       defined(JSON_HEDLEY_GCC_VERSION) || \\\n       defined(JSON_HEDLEY_INTEL_VERSION) || \\\n       defined(JSON_HEDLEY_TINYC_VERSION) || \\\n       defined(JSON_HEDLEY_TI_ARMCL_VERSION) || \\\n       JSON_HEDLEY_TI_CL430_VERSION_CHECK(18,12,0) || \\\n       defined(JSON_HEDLEY_TI_CL2000_VERSION) || \\\n       defined(JSON_HEDLEY_TI_CL6X_VERSION) || \\\n       defined(JSON_HEDLEY_TI_CL7X_VERSION) || \\\n       defined(JSON_HEDLEY_TI_CLPRU_VERSION) || \\\n       defined(__clang__)\n#    define JSON_HEDLEY_IS_CONSTEXPR_(expr) ( \\\n        sizeof(void) != \\\n        sizeof(*( \\\n                  1 ? \\\n                  ((void*) ((expr) * 0L) ) : \\\n((struct { char v[sizeof(void) * 2]; } *) 1) \\\n                ) \\\n              ) \\\n                                            )\n#  endif\n#endif\n#if defined(JSON_HEDLEY_IS_CONSTEXPR_)\n    #if !defined(JSON_HEDLEY_IS_CONSTANT)\n        #define JSON_HEDLEY_IS_CONSTANT(expr) JSON_HEDLEY_IS_CONSTEXPR_(expr)\n    #endif\n    #define JSON_HEDLEY_REQUIRE_CONSTEXPR(expr) (JSON_HEDLEY_IS_CONSTEXPR_(expr) ? (expr) : (-1))\n#else\n    #if !defined(JSON_HEDLEY_IS_CONSTANT)\n        #define JSON_HEDLEY_IS_CONSTANT(expr) (0)\n    #endif\n    #define JSON_HEDLEY_REQUIRE_CONSTEXPR(expr) (expr)\n#endif\n\n#if defined(JSON_HEDLEY_BEGIN_C_DECLS)\n    #undef JSON_HEDLEY_BEGIN_C_DECLS\n#endif\n#if defined(JSON_HEDLEY_END_C_DECLS)\n    #undef JSON_HEDLEY_END_C_DECLS\n#endif\n#if defined(JSON_HEDLEY_C_DECL)\n    #undef JSON_HEDLEY_C_DECL\n#endif\n#if defined(__cplusplus)\n    #define JSON_HEDLEY_BEGIN_C_DECLS extern \"C\" {\n    #define JSON_HEDLEY_END_C_DECLS }\n    #define JSON_HEDLEY_C_DECL extern \"C\"\n#else\n    #define JSON_HEDLEY_BEGIN_C_DECLS\n    #define JSON_HEDLEY_END_C_DECLS\n    #define JSON_HEDLEY_C_DECL\n#endif\n\n#if defined(JSON_HEDLEY_STATIC_ASSERT)\n    #undef JSON_HEDLEY_STATIC_ASSERT\n#endif\n#if \\\n  !defined(__cplusplus) && ( \\\n      (defined(__STDC_VERSION__) && (__STDC_VERSION__ >= 201112L)) || \\\n      (JSON_HEDLEY_HAS_FEATURE(c_static_assert) && !defined(JSON_HEDLEY_INTEL_CL_VERSION)) || \\\n      JSON_HEDLEY_GCC_VERSION_CHECK(6,0,0) || \\\n      JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \\\n      defined(_Static_assert) \\\n    )\n#  define JSON_HEDLEY_STATIC_ASSERT(expr, message) _Static_assert(expr, message)\n#elif \\\n  (defined(__cplusplus) && (__cplusplus >= 201103L)) || \\\n  JSON_HEDLEY_MSVC_VERSION_CHECK(16,0,0) || \\\n  JSON_HEDLEY_INTEL_CL_VERSION_CHECK(2021,1,0)\n#  define JSON_HEDLEY_STATIC_ASSERT(expr, message) JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_(static_assert(expr, message))\n#else\n#  define JSON_HEDLEY_STATIC_ASSERT(expr, message)\n#endif\n\n#if defined(JSON_HEDLEY_NULL)\n    #undef JSON_HEDLEY_NULL\n#endif\n#if defined(__cplusplus)\n    #if __cplusplus >= 201103L\n        #define JSON_HEDLEY_NULL JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_(nullptr)\n    #elif defined(NULL)\n        #define JSON_HEDLEY_NULL NULL\n    #else\n        #define JSON_HEDLEY_NULL JSON_HEDLEY_STATIC_CAST(void*, 0)\n    #endif\n#elif defined(NULL)\n    #define JSON_HEDLEY_NULL NULL\n#else\n    #define JSON_HEDLEY_NULL ((void*) 0)\n#endif\n\n#if defined(JSON_HEDLEY_MESSAGE)\n    #undef JSON_HEDLEY_MESSAGE\n#endif\n#if JSON_HEDLEY_HAS_WARNING(\"-Wunknown-pragmas\")\n#  define JSON_HEDLEY_MESSAGE(msg) \\\n    JSON_HEDLEY_DIAGNOSTIC_PUSH \\\n    JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS \\\n    JSON_HEDLEY_PRAGMA(message msg) \\\n    JSON_HEDLEY_DIAGNOSTIC_POP\n#elif \\\n  JSON_HEDLEY_GCC_VERSION_CHECK(4,4,0) || \\\n  JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0)\n#  define JSON_HEDLEY_MESSAGE(msg) JSON_HEDLEY_PRAGMA(message msg)\n#elif JSON_HEDLEY_CRAY_VERSION_CHECK(5,0,0)\n#  define JSON_HEDLEY_MESSAGE(msg) JSON_HEDLEY_PRAGMA(_CRI message msg)\n#elif JSON_HEDLEY_IAR_VERSION_CHECK(8,0,0)\n#  define JSON_HEDLEY_MESSAGE(msg) JSON_HEDLEY_PRAGMA(message(msg))\n#elif JSON_HEDLEY_PELLES_VERSION_CHECK(2,0,0)\n#  define JSON_HEDLEY_MESSAGE(msg) JSON_HEDLEY_PRAGMA(message(msg))\n#else\n#  define JSON_HEDLEY_MESSAGE(msg)\n#endif\n\n#if defined(JSON_HEDLEY_WARNING)\n    #undef JSON_HEDLEY_WARNING\n#endif\n#if JSON_HEDLEY_HAS_WARNING(\"-Wunknown-pragmas\")\n#  define JSON_HEDLEY_WARNING(msg) \\\n    JSON_HEDLEY_DIAGNOSTIC_PUSH \\\n    JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS \\\n    JSON_HEDLEY_PRAGMA(clang warning msg) \\\n    JSON_HEDLEY_DIAGNOSTIC_POP\n#elif \\\n  JSON_HEDLEY_GCC_VERSION_CHECK(4,8,0) || \\\n  JSON_HEDLEY_PGI_VERSION_CHECK(18,4,0) || \\\n  JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0)\n#  define JSON_HEDLEY_WARNING(msg) JSON_HEDLEY_PRAGMA(GCC warning msg)\n#elif \\\n  JSON_HEDLEY_MSVC_VERSION_CHECK(15,0,0) || \\\n  JSON_HEDLEY_INTEL_CL_VERSION_CHECK(2021,1,0)\n#  define JSON_HEDLEY_WARNING(msg) JSON_HEDLEY_PRAGMA(message(msg))\n#else\n#  define JSON_HEDLEY_WARNING(msg) JSON_HEDLEY_MESSAGE(msg)\n#endif\n\n#if defined(JSON_HEDLEY_REQUIRE)\n    #undef JSON_HEDLEY_REQUIRE\n#endif\n#if defined(JSON_HEDLEY_REQUIRE_MSG)\n    #undef JSON_HEDLEY_REQUIRE_MSG\n#endif\n#if JSON_HEDLEY_HAS_ATTRIBUTE(diagnose_if)\n#  if JSON_HEDLEY_HAS_WARNING(\"-Wgcc-compat\")\n#    define JSON_HEDLEY_REQUIRE(expr) \\\n    JSON_HEDLEY_DIAGNOSTIC_PUSH \\\n    _Pragma(\"clang diagnostic ignored \\\"-Wgcc-compat\\\"\") \\\n    __attribute__((diagnose_if(!(expr), #expr, \"error\"))) \\\n    JSON_HEDLEY_DIAGNOSTIC_POP\n#    define JSON_HEDLEY_REQUIRE_MSG(expr,msg) \\\n    JSON_HEDLEY_DIAGNOSTIC_PUSH \\\n    _Pragma(\"clang diagnostic ignored \\\"-Wgcc-compat\\\"\") \\\n    __attribute__((diagnose_if(!(expr), msg, \"error\"))) \\\n    JSON_HEDLEY_DIAGNOSTIC_POP\n#  else\n#    define JSON_HEDLEY_REQUIRE(expr) __attribute__((diagnose_if(!(expr), #expr, \"error\")))\n#    define JSON_HEDLEY_REQUIRE_MSG(expr,msg) __attribute__((diagnose_if(!(expr), msg, \"error\")))\n#  endif\n#else\n#  define JSON_HEDLEY_REQUIRE(expr)\n#  define JSON_HEDLEY_REQUIRE_MSG(expr,msg)\n#endif\n\n#if defined(JSON_HEDLEY_FLAGS)\n    #undef JSON_HEDLEY_FLAGS\n#endif\n#if JSON_HEDLEY_HAS_ATTRIBUTE(flag_enum) && (!defined(__cplusplus) || JSON_HEDLEY_HAS_WARNING(\"-Wbitfield-enum-conversion\"))\n    #define JSON_HEDLEY_FLAGS __attribute__((__flag_enum__))\n#else\n    #define JSON_HEDLEY_FLAGS\n#endif\n\n#if defined(JSON_HEDLEY_FLAGS_CAST)\n    #undef JSON_HEDLEY_FLAGS_CAST\n#endif\n#if JSON_HEDLEY_INTEL_VERSION_CHECK(19,0,0)\n#  define JSON_HEDLEY_FLAGS_CAST(T, expr) (__extension__ ({ \\\n        JSON_HEDLEY_DIAGNOSTIC_PUSH \\\n        _Pragma(\"warning(disable:188)\") \\\n        ((T) (expr)); \\\n        JSON_HEDLEY_DIAGNOSTIC_POP \\\n    }))\n#else\n#  define JSON_HEDLEY_FLAGS_CAST(T, expr) JSON_HEDLEY_STATIC_CAST(T, expr)\n#endif\n\n#if defined(JSON_HEDLEY_EMPTY_BASES)\n    #undef JSON_HEDLEY_EMPTY_BASES\n#endif\n#if \\\n    (JSON_HEDLEY_MSVC_VERSION_CHECK(19,0,23918) && !JSON_HEDLEY_MSVC_VERSION_CHECK(20,0,0)) || \\\n    JSON_HEDLEY_INTEL_CL_VERSION_CHECK(2021,1,0)\n    #define JSON_HEDLEY_EMPTY_BASES __declspec(empty_bases)\n#else\n    #define JSON_HEDLEY_EMPTY_BASES\n#endif\n\n/* Remaining macros are deprecated. */\n\n#if defined(JSON_HEDLEY_GCC_NOT_CLANG_VERSION_CHECK)\n    #undef JSON_HEDLEY_GCC_NOT_CLANG_VERSION_CHECK\n#endif\n#if defined(__clang__)\n    #define JSON_HEDLEY_GCC_NOT_CLANG_VERSION_CHECK(major,minor,patch) (0)\n#else\n    #define JSON_HEDLEY_GCC_NOT_CLANG_VERSION_CHECK(major,minor,patch) JSON_HEDLEY_GCC_VERSION_CHECK(major,minor,patch)\n#endif\n\n#if defined(JSON_HEDLEY_CLANG_HAS_ATTRIBUTE)\n    #undef JSON_HEDLEY_CLANG_HAS_ATTRIBUTE\n#endif\n#define JSON_HEDLEY_CLANG_HAS_ATTRIBUTE(attribute) JSON_HEDLEY_HAS_ATTRIBUTE(attribute)\n\n#if defined(JSON_HEDLEY_CLANG_HAS_CPP_ATTRIBUTE)\n    #undef JSON_HEDLEY_CLANG_HAS_CPP_ATTRIBUTE\n#endif\n#define JSON_HEDLEY_CLANG_HAS_CPP_ATTRIBUTE(attribute) JSON_HEDLEY_HAS_CPP_ATTRIBUTE(attribute)\n\n#if defined(JSON_HEDLEY_CLANG_HAS_BUILTIN)\n    #undef JSON_HEDLEY_CLANG_HAS_BUILTIN\n#endif\n#define JSON_HEDLEY_CLANG_HAS_BUILTIN(builtin) JSON_HEDLEY_HAS_BUILTIN(builtin)\n\n#if defined(JSON_HEDLEY_CLANG_HAS_FEATURE)\n    #undef JSON_HEDLEY_CLANG_HAS_FEATURE\n#endif\n#define JSON_HEDLEY_CLANG_HAS_FEATURE(feature) JSON_HEDLEY_HAS_FEATURE(feature)\n\n#if defined(JSON_HEDLEY_CLANG_HAS_EXTENSION)\n    #undef JSON_HEDLEY_CLANG_HAS_EXTENSION\n#endif\n#define JSON_HEDLEY_CLANG_HAS_EXTENSION(extension) JSON_HEDLEY_HAS_EXTENSION(extension)\n\n#if defined(JSON_HEDLEY_CLANG_HAS_DECLSPEC_DECLSPEC_ATTRIBUTE)\n    #undef JSON_HEDLEY_CLANG_HAS_DECLSPEC_DECLSPEC_ATTRIBUTE\n#endif\n#define JSON_HEDLEY_CLANG_HAS_DECLSPEC_ATTRIBUTE(attribute) JSON_HEDLEY_HAS_DECLSPEC_ATTRIBUTE(attribute)\n\n#if defined(JSON_HEDLEY_CLANG_HAS_WARNING)\n    #undef JSON_HEDLEY_CLANG_HAS_WARNING\n#endif\n#define JSON_HEDLEY_CLANG_HAS_WARNING(warning) JSON_HEDLEY_HAS_WARNING(warning)\n\n#endif /* !defined(JSON_HEDLEY_VERSION) || (JSON_HEDLEY_VERSION < X) */\n\n\n// This file contains all internal macro definitions (except those affecting ABI)\n// You MUST include macro_unscope.hpp at the end of json.hpp to undef all of them\n\n// #include <nlohmann/detail/abi_macros.hpp>\n\n\n// exclude unsupported compilers\n#if !defined(JSON_SKIP_UNSUPPORTED_COMPILER_CHECK)\n    #if defined(__clang__)\n        #if (__clang_major__ * 10000 + __clang_minor__ * 100 + __clang_patchlevel__) < 30400\n            #error \"unsupported Clang version - see https://github.com/nlohmann/json#supported-compilers\"\n        #endif\n    #elif defined(__GNUC__) && !(defined(__ICC) || defined(__INTEL_COMPILER))\n        #if (__GNUC__ * 10000 + __GNUC_MINOR__ * 100 + __GNUC_PATCHLEVEL__) < 40800\n            #error \"unsupported GCC version - see https://github.com/nlohmann/json#supported-compilers\"\n        #endif\n    #endif\n#endif\n\n// C++ language standard detection\n// if the user manually specified the used c++ version this is skipped\n#if !defined(JSON_HAS_CPP_20) && !defined(JSON_HAS_CPP_17) && !defined(JSON_HAS_CPP_14) && !defined(JSON_HAS_CPP_11)\n    #if (defined(__cplusplus) && __cplusplus >= 202002L) || (defined(_MSVC_LANG) && _MSVC_LANG >= 202002L)\n        #define JSON_HAS_CPP_20\n        #define JSON_HAS_CPP_17\n        #define JSON_HAS_CPP_14\n    #elif (defined(__cplusplus) && __cplusplus >= 201703L) || (defined(_HAS_CXX17) && _HAS_CXX17 == 1) // fix for issue #464\n        #define JSON_HAS_CPP_17\n        #define JSON_HAS_CPP_14\n    #elif (defined(__cplusplus) && __cplusplus >= 201402L) || (defined(_HAS_CXX14) && _HAS_CXX14 == 1)\n        #define JSON_HAS_CPP_14\n    #endif\n    // the cpp 11 flag is always specified because it is the minimal required version\n    #define JSON_HAS_CPP_11\n#endif\n\n#ifdef __has_include\n    #if __has_include(<version>)\n        #include <version>\n    #endif\n#endif\n\n#if !defined(JSON_HAS_FILESYSTEM) && !defined(JSON_HAS_EXPERIMENTAL_FILESYSTEM)\n    #ifdef JSON_HAS_CPP_17\n        #if defined(__cpp_lib_filesystem)\n            #define JSON_HAS_FILESYSTEM 1\n        #elif defined(__cpp_lib_experimental_filesystem)\n            #define JSON_HAS_EXPERIMENTAL_FILESYSTEM 1\n        #elif !defined(__has_include)\n            #define JSON_HAS_EXPERIMENTAL_FILESYSTEM 1\n        #elif __has_include(<filesystem>)\n            #define JSON_HAS_FILESYSTEM 1\n        #elif __has_include(<experimental/filesystem>)\n            #define JSON_HAS_EXPERIMENTAL_FILESYSTEM 1\n        #endif\n\n        // std::filesystem does not work on MinGW GCC 8: https://sourceforge.net/p/mingw-w64/bugs/737/\n        #if defined(__MINGW32__) && defined(__GNUC__) && __GNUC__ == 8\n            #undef JSON_HAS_FILESYSTEM\n            #undef JSON_HAS_EXPERIMENTAL_FILESYSTEM\n        #endif\n\n        // no filesystem support before GCC 8: https://en.cppreference.com/w/cpp/compiler_support\n        #if defined(__GNUC__) && !defined(__clang__) && __GNUC__ < 8\n            #undef JSON_HAS_FILESYSTEM\n            #undef JSON_HAS_EXPERIMENTAL_FILESYSTEM\n        #endif\n\n        // no filesystem support before Clang 7: https://en.cppreference.com/w/cpp/compiler_support\n        #if defined(__clang_major__) && __clang_major__ < 7\n            #undef JSON_HAS_FILESYSTEM\n            #undef JSON_HAS_EXPERIMENTAL_FILESYSTEM\n        #endif\n\n        // no filesystem support before MSVC 19.14: https://en.cppreference.com/w/cpp/compiler_support\n        #if defined(_MSC_VER) && _MSC_VER < 1914\n            #undef JSON_HAS_FILESYSTEM\n            #undef JSON_HAS_EXPERIMENTAL_FILESYSTEM\n        #endif\n\n        // no filesystem support before iOS 13\n        #if defined(__IPHONE_OS_VERSION_MIN_REQUIRED) && __IPHONE_OS_VERSION_MIN_REQUIRED < 130000\n            #undef JSON_HAS_FILESYSTEM\n            #undef JSON_HAS_EXPERIMENTAL_FILESYSTEM\n        #endif\n\n        // no filesystem support before macOS Catalina\n        #if defined(__MAC_OS_X_VERSION_MIN_REQUIRED) && __MAC_OS_X_VERSION_MIN_REQUIRED < 101500\n            #undef JSON_HAS_FILESYSTEM\n            #undef JSON_HAS_EXPERIMENTAL_FILESYSTEM\n        #endif\n    #endif\n#endif\n\n#ifndef JSON_HAS_EXPERIMENTAL_FILESYSTEM\n    #define JSON_HAS_EXPERIMENTAL_FILESYSTEM 0\n#endif\n\n#ifndef JSON_HAS_FILESYSTEM\n    #define JSON_HAS_FILESYSTEM 0\n#endif\n\n#ifndef JSON_HAS_THREE_WAY_COMPARISON\n    #if defined(__cpp_impl_three_way_comparison) && __cpp_impl_three_way_comparison >= 201907L \\\n        && defined(__cpp_lib_three_way_comparison) && __cpp_lib_three_way_comparison >= 201907L\n        #define JSON_HAS_THREE_WAY_COMPARISON 1\n    #else\n        #define JSON_HAS_THREE_WAY_COMPARISON 0\n    #endif\n#endif\n\n#ifndef JSON_HAS_RANGES\n    // ranges header shipping in GCC 11.1.0 (released 2021-04-27) has syntax error\n    #if defined(__GLIBCXX__) && __GLIBCXX__ == 20210427\n        #define JSON_HAS_RANGES 0\n    #elif defined(__cpp_lib_ranges)\n        #define JSON_HAS_RANGES 1\n    #else\n        #define JSON_HAS_RANGES 0\n    #endif\n#endif\n\n#ifndef JSON_HAS_STATIC_RTTI\n    #if !defined(_HAS_STATIC_RTTI) || _HAS_STATIC_RTTI != 0\n        #define JSON_HAS_STATIC_RTTI 1\n    #else\n        #define JSON_HAS_STATIC_RTTI 0\n    #endif\n#endif\n\n#ifdef JSON_HAS_CPP_17\n    #define JSON_INLINE_VARIABLE inline\n#else\n    #define JSON_INLINE_VARIABLE\n#endif\n\n#if JSON_HEDLEY_HAS_ATTRIBUTE(no_unique_address)\n    #define JSON_NO_UNIQUE_ADDRESS [[no_unique_address]]\n#else\n    #define JSON_NO_UNIQUE_ADDRESS\n#endif\n\n// disable documentation warnings on clang\n#if defined(__clang__)\n    #pragma clang diagnostic push\n    #pragma clang diagnostic ignored \"-Wdocumentation\"\n    #pragma clang diagnostic ignored \"-Wdocumentation-unknown-command\"\n#endif\n\n// allow disabling exceptions\n#if (defined(__cpp_exceptions) || defined(__EXCEPTIONS) || defined(_CPPUNWIND)) && !defined(JSON_NOEXCEPTION)\n    #define JSON_THROW(exception) throw exception\n    #define JSON_TRY try\n    #define JSON_CATCH(exception) catch(exception)\n    #define JSON_INTERNAL_CATCH(exception) catch(exception)\n#else\n    #include <cstdlib>\n    #define JSON_THROW(exception) std::abort()\n    #define JSON_TRY if(true)\n    #define JSON_CATCH(exception) if(false)\n    #define JSON_INTERNAL_CATCH(exception) if(false)\n#endif\n\n// override exception macros\n#if defined(JSON_THROW_USER)\n    #undef JSON_THROW\n    #define JSON_THROW JSON_THROW_USER\n#endif\n#if defined(JSON_TRY_USER)\n    #undef JSON_TRY\n    #define JSON_TRY JSON_TRY_USER\n#endif\n#if defined(JSON_CATCH_USER)\n    #undef JSON_CATCH\n    #define JSON_CATCH JSON_CATCH_USER\n    #undef JSON_INTERNAL_CATCH\n    #define JSON_INTERNAL_CATCH JSON_CATCH_USER\n#endif\n#if defined(JSON_INTERNAL_CATCH_USER)\n    #undef JSON_INTERNAL_CATCH\n    #define JSON_INTERNAL_CATCH JSON_INTERNAL_CATCH_USER\n#endif\n\n// allow overriding assert\n#if !defined(JSON_ASSERT)\n    #include <cassert> // assert\n    #define JSON_ASSERT(x) assert(x)\n#endif\n\n// allow to access some private functions (needed by the test suite)\n#if defined(JSON_TESTS_PRIVATE)\n    #define JSON_PRIVATE_UNLESS_TESTED public\n#else\n    #define JSON_PRIVATE_UNLESS_TESTED private\n#endif\n\n/*!\n@brief macro to briefly define a mapping between an enum and JSON\n@def NLOHMANN_JSON_SERIALIZE_ENUM\n@since version 3.4.0\n*/\n#define NLOHMANN_JSON_SERIALIZE_ENUM(ENUM_TYPE, ...)                                            \\\n    template<typename BasicJsonType>                                                            \\\n    inline void to_json(BasicJsonType& j, const ENUM_TYPE& e)                                   \\\n    {                                                                                           \\\n        static_assert(std::is_enum<ENUM_TYPE>::value, #ENUM_TYPE \" must be an enum!\");          \\\n        static const std::pair<ENUM_TYPE, BasicJsonType> m[] = __VA_ARGS__;                     \\\n        auto it = std::find_if(std::begin(m), std::end(m),                                      \\\n                               [e](const std::pair<ENUM_TYPE, BasicJsonType>& ej_pair) -> bool  \\\n        {                                                                                       \\\n            return ej_pair.first == e;                                                          \\\n        });                                                                                     \\\n        j = ((it != std::end(m)) ? it : std::begin(m))->second;                                 \\\n    }                                                                                           \\\n    template<typename BasicJsonType>                                                            \\\n    inline void from_json(const BasicJsonType& j, ENUM_TYPE& e)                                 \\\n    {                                                                                           \\\n        static_assert(std::is_enum<ENUM_TYPE>::value, #ENUM_TYPE \" must be an enum!\");          \\\n        static const std::pair<ENUM_TYPE, BasicJsonType> m[] = __VA_ARGS__;                     \\\n        auto it = std::find_if(std::begin(m), std::end(m),                                      \\\n                               [&j](const std::pair<ENUM_TYPE, BasicJsonType>& ej_pair) -> bool \\\n        {                                                                                       \\\n            return ej_pair.second == j;                                                         \\\n        });                                                                                     \\\n        e = ((it != std::end(m)) ? it : std::begin(m))->first;                                  \\\n    }\n\n// Ugly macros to avoid uglier copy-paste when specializing basic_json. They\n// may be removed in the future once the class is split.\n\n#define NLOHMANN_BASIC_JSON_TPL_DECLARATION                                \\\n    template<template<typename, typename, typename...> class ObjectType,   \\\n             template<typename, typename...> class ArrayType,              \\\n             class StringType, class BooleanType, class NumberIntegerType, \\\n             class NumberUnsignedType, class NumberFloatType,              \\\n             template<typename> class AllocatorType,                       \\\n             template<typename, typename = void> class JSONSerializer,     \\\n             class BinaryType,                                             \\\n             class CustomBaseClass>\n\n#define NLOHMANN_BASIC_JSON_TPL                                            \\\n    basic_json<ObjectType, ArrayType, StringType, BooleanType,             \\\n    NumberIntegerType, NumberUnsignedType, NumberFloatType,                \\\n    AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>\n\n// Macros to simplify conversion from/to types\n\n#define NLOHMANN_JSON_EXPAND( x ) x\n#define NLOHMANN_JSON_GET_MACRO(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, NAME,...) NAME\n#define NLOHMANN_JSON_PASTE(...) NLOHMANN_JSON_EXPAND(NLOHMANN_JSON_GET_MACRO(__VA_ARGS__, \\\n        NLOHMANN_JSON_PASTE64, \\\n        NLOHMANN_JSON_PASTE63, \\\n        NLOHMANN_JSON_PASTE62, \\\n        NLOHMANN_JSON_PASTE61, \\\n        NLOHMANN_JSON_PASTE60, \\\n        NLOHMANN_JSON_PASTE59, \\\n        NLOHMANN_JSON_PASTE58, \\\n        NLOHMANN_JSON_PASTE57, \\\n        NLOHMANN_JSON_PASTE56, \\\n        NLOHMANN_JSON_PASTE55, \\\n        NLOHMANN_JSON_PASTE54, \\\n        NLOHMANN_JSON_PASTE53, \\\n        NLOHMANN_JSON_PASTE52, \\\n        NLOHMANN_JSON_PASTE51, \\\n        NLOHMANN_JSON_PASTE50, \\\n        NLOHMANN_JSON_PASTE49, \\\n        NLOHMANN_JSON_PASTE48, \\\n        NLOHMANN_JSON_PASTE47, \\\n        NLOHMANN_JSON_PASTE46, \\\n        NLOHMANN_JSON_PASTE45, \\\n        NLOHMANN_JSON_PASTE44, \\\n        NLOHMANN_JSON_PASTE43, \\\n        NLOHMANN_JSON_PASTE42, \\\n        NLOHMANN_JSON_PASTE41, \\\n        NLOHMANN_JSON_PASTE40, \\\n        NLOHMANN_JSON_PASTE39, \\\n        NLOHMANN_JSON_PASTE38, \\\n        NLOHMANN_JSON_PASTE37, \\\n        NLOHMANN_JSON_PASTE36, \\\n        NLOHMANN_JSON_PASTE35, \\\n        NLOHMANN_JSON_PASTE34, \\\n        NLOHMANN_JSON_PASTE33, \\\n        NLOHMANN_JSON_PASTE32, \\\n        NLOHMANN_JSON_PASTE31, \\\n        NLOHMANN_JSON_PASTE30, \\\n        NLOHMANN_JSON_PASTE29, \\\n        NLOHMANN_JSON_PASTE28, \\\n        NLOHMANN_JSON_PASTE27, \\\n        NLOHMANN_JSON_PASTE26, \\\n        NLOHMANN_JSON_PASTE25, \\\n        NLOHMANN_JSON_PASTE24, \\\n        NLOHMANN_JSON_PASTE23, \\\n        NLOHMANN_JSON_PASTE22, \\\n        NLOHMANN_JSON_PASTE21, \\\n        NLOHMANN_JSON_PASTE20, \\\n        NLOHMANN_JSON_PASTE19, \\\n        NLOHMANN_JSON_PASTE18, \\\n        NLOHMANN_JSON_PASTE17, \\\n        NLOHMANN_JSON_PASTE16, \\\n        NLOHMANN_JSON_PASTE15, \\\n        NLOHMANN_JSON_PASTE14, \\\n        NLOHMANN_JSON_PASTE13, \\\n        NLOHMANN_JSON_PASTE12, \\\n        NLOHMANN_JSON_PASTE11, \\\n        NLOHMANN_JSON_PASTE10, \\\n        NLOHMANN_JSON_PASTE9, \\\n        NLOHMANN_JSON_PASTE8, \\\n        NLOHMANN_JSON_PASTE7, \\\n        NLOHMANN_JSON_PASTE6, \\\n        NLOHMANN_JSON_PASTE5, \\\n        NLOHMANN_JSON_PASTE4, \\\n        NLOHMANN_JSON_PASTE3, \\\n        NLOHMANN_JSON_PASTE2, \\\n        NLOHMANN_JSON_PASTE1)(__VA_ARGS__))\n#define NLOHMANN_JSON_PASTE2(func, v1) func(v1)\n#define NLOHMANN_JSON_PASTE3(func, v1, v2) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE2(func, v2)\n#define NLOHMANN_JSON_PASTE4(func, v1, v2, v3) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE3(func, v2, v3)\n#define NLOHMANN_JSON_PASTE5(func, v1, v2, v3, v4) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE4(func, v2, v3, v4)\n#define NLOHMANN_JSON_PASTE6(func, v1, v2, v3, v4, v5) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE5(func, v2, v3, v4, v5)\n#define NLOHMANN_JSON_PASTE7(func, v1, v2, v3, v4, v5, v6) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE6(func, v2, v3, v4, v5, v6)\n#define NLOHMANN_JSON_PASTE8(func, v1, v2, v3, v4, v5, v6, v7) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE7(func, v2, v3, v4, v5, v6, v7)\n#define NLOHMANN_JSON_PASTE9(func, v1, v2, v3, v4, v5, v6, v7, v8) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE8(func, v2, v3, v4, v5, v6, v7, v8)\n#define NLOHMANN_JSON_PASTE10(func, v1, v2, v3, v4, v5, v6, v7, v8, v9) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE9(func, v2, v3, v4, v5, v6, v7, v8, v9)\n#define NLOHMANN_JSON_PASTE11(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE10(func, v2, v3, v4, v5, v6, v7, v8, v9, v10)\n#define NLOHMANN_JSON_PASTE12(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE11(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11)\n#define NLOHMANN_JSON_PASTE13(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE12(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12)\n#define NLOHMANN_JSON_PASTE14(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE13(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13)\n#define NLOHMANN_JSON_PASTE15(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE14(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14)\n#define NLOHMANN_JSON_PASTE16(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE15(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15)\n#define NLOHMANN_JSON_PASTE17(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE16(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16)\n#define NLOHMANN_JSON_PASTE18(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE17(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17)\n#define NLOHMANN_JSON_PASTE19(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE18(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18)\n#define NLOHMANN_JSON_PASTE20(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE19(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19)\n#define NLOHMANN_JSON_PASTE21(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE20(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20)\n#define NLOHMANN_JSON_PASTE22(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE21(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21)\n#define NLOHMANN_JSON_PASTE23(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE22(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22)\n#define NLOHMANN_JSON_PASTE24(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE23(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23)\n#define NLOHMANN_JSON_PASTE25(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE24(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24)\n#define NLOHMANN_JSON_PASTE26(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE25(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25)\n#define NLOHMANN_JSON_PASTE27(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE26(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26)\n#define NLOHMANN_JSON_PASTE28(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE27(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27)\n#define NLOHMANN_JSON_PASTE29(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE28(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28)\n#define NLOHMANN_JSON_PASTE30(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE29(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29)\n#define NLOHMANN_JSON_PASTE31(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE30(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30)\n#define NLOHMANN_JSON_PASTE32(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE31(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31)\n#define NLOHMANN_JSON_PASTE33(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE32(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32)\n#define NLOHMANN_JSON_PASTE34(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE33(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33)\n#define NLOHMANN_JSON_PASTE35(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE34(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34)\n#define NLOHMANN_JSON_PASTE36(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE35(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35)\n#define NLOHMANN_JSON_PASTE37(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE36(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36)\n#define NLOHMANN_JSON_PASTE38(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE37(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37)\n#define NLOHMANN_JSON_PASTE39(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE38(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38)\n#define NLOHMANN_JSON_PASTE40(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE39(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39)\n#define NLOHMANN_JSON_PASTE41(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE40(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40)\n#define NLOHMANN_JSON_PASTE42(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE41(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41)\n#define NLOHMANN_JSON_PASTE43(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE42(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42)\n#define NLOHMANN_JSON_PASTE44(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE43(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43)\n#define NLOHMANN_JSON_PASTE45(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE44(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44)\n#define NLOHMANN_JSON_PASTE46(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE45(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45)\n#define NLOHMANN_JSON_PASTE47(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE46(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46)\n#define NLOHMANN_JSON_PASTE48(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE47(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47)\n#define NLOHMANN_JSON_PASTE49(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE48(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48)\n#define NLOHMANN_JSON_PASTE50(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE49(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49)\n#define NLOHMANN_JSON_PASTE51(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE50(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50)\n#define NLOHMANN_JSON_PASTE52(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE51(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51)\n#define NLOHMANN_JSON_PASTE53(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE52(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52)\n#define NLOHMANN_JSON_PASTE54(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE53(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53)\n#define NLOHMANN_JSON_PASTE55(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE54(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54)\n#define NLOHMANN_JSON_PASTE56(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE55(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55)\n#define NLOHMANN_JSON_PASTE57(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE56(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56)\n#define NLOHMANN_JSON_PASTE58(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE57(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57)\n#define NLOHMANN_JSON_PASTE59(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE58(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58)\n#define NLOHMANN_JSON_PASTE60(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE59(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59)\n#define NLOHMANN_JSON_PASTE61(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE60(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60)\n#define NLOHMANN_JSON_PASTE62(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60, v61) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE61(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60, v61)\n#define NLOHMANN_JSON_PASTE63(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60, v61, v62) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE62(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60, v61, v62)\n#define NLOHMANN_JSON_PASTE64(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE63(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63)\n\n#define NLOHMANN_JSON_TO(v1) nlohmann_json_j[#v1] = nlohmann_json_t.v1;\n#define NLOHMANN_JSON_FROM(v1) nlohmann_json_j.at(#v1).get_to(nlohmann_json_t.v1);\n#define NLOHMANN_JSON_FROM_WITH_DEFAULT(v1) nlohmann_json_t.v1 = nlohmann_json_j.value(#v1, nlohmann_json_default_obj.v1);\n\n/*!\n@brief macro\n@def NLOHMANN_DEFINE_TYPE_INTRUSIVE\n@since version 3.9.0\n*/\n#define NLOHMANN_DEFINE_TYPE_INTRUSIVE(Type, ...)  \\\n    friend void to_json(nlohmann::json& nlohmann_json_j, const Type& nlohmann_json_t) { NLOHMANN_JSON_EXPAND(NLOHMANN_JSON_PASTE(NLOHMANN_JSON_TO, __VA_ARGS__)) } \\\n    friend void from_json(const nlohmann::json& nlohmann_json_j, Type& nlohmann_json_t) { NLOHMANN_JSON_EXPAND(NLOHMANN_JSON_PASTE(NLOHMANN_JSON_FROM, __VA_ARGS__)) }\n\n#define NLOHMANN_DEFINE_TYPE_INTRUSIVE_WITH_DEFAULT(Type, ...)  \\\n    friend void to_json(nlohmann::json& nlohmann_json_j, const Type& nlohmann_json_t) { NLOHMANN_JSON_EXPAND(NLOHMANN_JSON_PASTE(NLOHMANN_JSON_TO, __VA_ARGS__)) } \\\n    friend void from_json(const nlohmann::json& nlohmann_json_j, Type& nlohmann_json_t) { const Type nlohmann_json_default_obj{}; NLOHMANN_JSON_EXPAND(NLOHMANN_JSON_PASTE(NLOHMANN_JSON_FROM_WITH_DEFAULT, __VA_ARGS__)) }\n\n#define NLOHMANN_DEFINE_TYPE_INTRUSIVE_ONLY_SERIALIZE(Type, ...)  \\\n    friend void to_json(nlohmann::json& nlohmann_json_j, const Type& nlohmann_json_t) { NLOHMANN_JSON_EXPAND(NLOHMANN_JSON_PASTE(NLOHMANN_JSON_TO, __VA_ARGS__)) }\n\n/*!\n@brief macro\n@def NLOHMANN_DEFINE_TYPE_NON_INTRUSIVE\n@since version 3.9.0\n*/\n#define NLOHMANN_DEFINE_TYPE_NON_INTRUSIVE(Type, ...)  \\\n    inline void to_json(nlohmann::json& nlohmann_json_j, const Type& nlohmann_json_t) { NLOHMANN_JSON_EXPAND(NLOHMANN_JSON_PASTE(NLOHMANN_JSON_TO, __VA_ARGS__)) } \\\n    inline void from_json(const nlohmann::json& nlohmann_json_j, Type& nlohmann_json_t) { NLOHMANN_JSON_EXPAND(NLOHMANN_JSON_PASTE(NLOHMANN_JSON_FROM, __VA_ARGS__)) }\n\n#define NLOHMANN_DEFINE_TYPE_NON_INTRUSIVE_ONLY_SERIALIZE(Type, ...)  \\\n    inline void to_json(nlohmann::json& nlohmann_json_j, const Type& nlohmann_json_t) { NLOHMANN_JSON_EXPAND(NLOHMANN_JSON_PASTE(NLOHMANN_JSON_TO, __VA_ARGS__)) }\n\n#define NLOHMANN_DEFINE_TYPE_NON_INTRUSIVE_WITH_DEFAULT(Type, ...)  \\\n    inline void to_json(nlohmann::json& nlohmann_json_j, const Type& nlohmann_json_t) { NLOHMANN_JSON_EXPAND(NLOHMANN_JSON_PASTE(NLOHMANN_JSON_TO, __VA_ARGS__)) } \\\n    inline void from_json(const nlohmann::json& nlohmann_json_j, Type& nlohmann_json_t) { const Type nlohmann_json_default_obj{}; NLOHMANN_JSON_EXPAND(NLOHMANN_JSON_PASTE(NLOHMANN_JSON_FROM_WITH_DEFAULT, __VA_ARGS__)) }\n\n// inspired from https://stackoverflow.com/a/26745591\n// allows to call any std function as if (e.g. with begin):\n// using std::begin; begin(x);\n//\n// it allows using the detected idiom to retrieve the return type\n// of such an expression\n#define NLOHMANN_CAN_CALL_STD_FUNC_IMPL(std_name)                                 \\\n    namespace detail {                                                            \\\n    using std::std_name;                                                          \\\n    \\\n    template<typename... T>                                                       \\\n    using result_of_##std_name = decltype(std_name(std::declval<T>()...));        \\\n    }                                                                             \\\n    \\\n    namespace detail2 {                                                           \\\n    struct std_name##_tag                                                         \\\n    {                                                                             \\\n    };                                                                            \\\n    \\\n    template<typename... T>                                                       \\\n    std_name##_tag std_name(T&&...);                                              \\\n    \\\n    template<typename... T>                                                       \\\n    using result_of_##std_name = decltype(std_name(std::declval<T>()...));        \\\n    \\\n    template<typename... T>                                                       \\\n    struct would_call_std_##std_name                                              \\\n    {                                                                             \\\n        static constexpr auto const value = ::nlohmann::detail::                  \\\n                                            is_detected_exact<std_name##_tag, result_of_##std_name, T...>::value; \\\n    };                                                                            \\\n    } /* namespace detail2 */ \\\n    \\\n    template<typename... T>                                                       \\\n    struct would_call_std_##std_name : detail2::would_call_std_##std_name<T...>   \\\n    {                                                                             \\\n    }\n\n#ifndef JSON_USE_IMPLICIT_CONVERSIONS\n    #define JSON_USE_IMPLICIT_CONVERSIONS 1\n#endif\n\n#if JSON_USE_IMPLICIT_CONVERSIONS\n    #define JSON_EXPLICIT\n#else\n    #define JSON_EXPLICIT explicit\n#endif\n\n#ifndef JSON_DISABLE_ENUM_SERIALIZATION\n    #define JSON_DISABLE_ENUM_SERIALIZATION 0\n#endif\n\n#ifndef JSON_USE_GLOBAL_UDLS\n    #define JSON_USE_GLOBAL_UDLS 1\n#endif\n\n#if JSON_HAS_THREE_WAY_COMPARISON\n    #include <compare> // partial_ordering\n#endif\n\nNLOHMANN_JSON_NAMESPACE_BEGIN\nnamespace detail\n{\n\n///////////////////////////\n// JSON type enumeration //\n///////////////////////////\n\n/*!\n@brief the JSON type enumeration\n\nThis enumeration collects the different JSON types. It is internally used to\ndistinguish the stored values, and the functions @ref basic_json::is_null(),\n@ref basic_json::is_object(), @ref basic_json::is_array(),\n@ref basic_json::is_string(), @ref basic_json::is_boolean(),\n@ref basic_json::is_number() (with @ref basic_json::is_number_integer(),\n@ref basic_json::is_number_unsigned(), and @ref basic_json::is_number_float()),\n@ref basic_json::is_discarded(), @ref basic_json::is_primitive(), and\n@ref basic_json::is_structured() rely on it.\n\n@note There are three enumeration entries (number_integer, number_unsigned, and\nnumber_float), because the library distinguishes these three types for numbers:\n@ref basic_json::number_unsigned_t is used for unsigned integers,\n@ref basic_json::number_integer_t is used for signed integers, and\n@ref basic_json::number_float_t is used for floating-point numbers or to\napproximate integers which do not fit in the limits of their respective type.\n\n@sa see @ref basic_json::basic_json(const value_t value_type) -- create a JSON\nvalue with the default value for a given type\n\n@since version 1.0.0\n*/\nenum class value_t : std::uint8_t\n{\n    null,             ///< null value\n    object,           ///< object (unordered set of name/value pairs)\n    array,            ///< array (ordered collection of values)\n    string,           ///< string value\n    boolean,          ///< boolean value\n    number_integer,   ///< number value (signed integer)\n    number_unsigned,  ///< number value (unsigned integer)\n    number_float,     ///< number value (floating-point)\n    binary,           ///< binary array (ordered collection of bytes)\n    discarded         ///< discarded by the parser callback function\n};\n\n/*!\n@brief comparison operator for JSON types\n\nReturns an ordering that is similar to Python:\n- order: null < boolean < number < object < array < string < binary\n- furthermore, each type is not smaller than itself\n- discarded values are not comparable\n- binary is represented as a b\"\" string in python and directly comparable to a\n  string; however, making a binary array directly comparable with a string would\n  be surprising behavior in a JSON file.\n\n@since version 1.0.0\n*/\n#if JSON_HAS_THREE_WAY_COMPARISON\n    inline std::partial_ordering operator<=>(const value_t lhs, const value_t rhs) noexcept // *NOPAD*\n#else\n    inline bool operator<(const value_t lhs, const value_t rhs) noexcept\n#endif\n{\n    static constexpr std::array<std::uint8_t, 9> order = {{\n            0 /* null */, 3 /* object */, 4 /* array */, 5 /* string */,\n            1 /* boolean */, 2 /* integer */, 2 /* unsigned */, 2 /* float */,\n            6 /* binary */\n        }\n    };\n\n    const auto l_index = static_cast<std::size_t>(lhs);\n    const auto r_index = static_cast<std::size_t>(rhs);\n#if JSON_HAS_THREE_WAY_COMPARISON\n    if (l_index < order.size() && r_index < order.size())\n    {\n        return order[l_index] <=> order[r_index]; // *NOPAD*\n    }\n    return std::partial_ordering::unordered;\n#else\n    return l_index < order.size() && r_index < order.size() && order[l_index] < order[r_index];\n#endif\n}\n\n// GCC selects the built-in operator< over an operator rewritten from\n// a user-defined spaceship operator\n// Clang, MSVC, and ICC select the rewritten candidate\n// (see GCC bug https://gcc.gnu.org/bugzilla/show_bug.cgi?id=105200)\n#if JSON_HAS_THREE_WAY_COMPARISON && defined(__GNUC__)\ninline bool operator<(const value_t lhs, const value_t rhs) noexcept\n{\n    return std::is_lt(lhs <=> rhs); // *NOPAD*\n}\n#endif\n\n}  // namespace detail\nNLOHMANN_JSON_NAMESPACE_END\n\n// #include <nlohmann/detail/string_escape.hpp>\n//     __ _____ _____ _____\n//  __|  |   __|     |   | |  JSON for Modern C++\n// |  |  |__   |  |  | | | |  version 3.11.3\n// |_____|_____|_____|_|___|  https://github.com/nlohmann/json\n//\n// SPDX-FileCopyrightText: 2013-2023 Niels Lohmann <https://nlohmann.me>\n// SPDX-License-Identifier: MIT\n\n\n\n// #include <nlohmann/detail/abi_macros.hpp>\n\n\nNLOHMANN_JSON_NAMESPACE_BEGIN\nnamespace detail\n{\n\n/*!\n@brief replace all occurrences of a substring by another string\n\n@param[in,out] s  the string to manipulate; changed so that all\n               occurrences of @a f are replaced with @a t\n@param[in]     f  the substring to replace with @a t\n@param[in]     t  the string to replace @a f\n\n@pre The search string @a f must not be empty. **This precondition is\nenforced with an assertion.**\n\n@since version 2.0.0\n*/\ntemplate<typename StringType>\ninline void replace_substring(StringType& s, const StringType& f,\n                              const StringType& t)\n{\n    JSON_ASSERT(!f.empty());\n    for (auto pos = s.find(f);                // find first occurrence of f\n            pos != StringType::npos;          // make sure f was found\n            s.replace(pos, f.size(), t),      // replace with t, and\n            pos = s.find(f, pos + t.size()))  // find next occurrence of f\n    {}\n}\n\n/*!\n * @brief string escaping as described in RFC 6901 (Sect. 4)\n * @param[in] s string to escape\n * @return    escaped string\n *\n * Note the order of escaping \"~\" to \"~0\" and \"/\" to \"~1\" is important.\n */\ntemplate<typename StringType>\ninline StringType escape(StringType s)\n{\n    replace_substring(s, StringType{\"~\"}, StringType{\"~0\"});\n    replace_substring(s, StringType{\"/\"}, StringType{\"~1\"});\n    return s;\n}\n\n/*!\n * @brief string unescaping as described in RFC 6901 (Sect. 4)\n * @param[in] s string to unescape\n * @return    unescaped string\n *\n * Note the order of escaping \"~1\" to \"/\" and \"~0\" to \"~\" is important.\n */\ntemplate<typename StringType>\nstatic void unescape(StringType& s)\n{\n    replace_substring(s, StringType{\"~1\"}, StringType{\"/\"});\n    replace_substring(s, StringType{\"~0\"}, StringType{\"~\"});\n}\n\n}  // namespace detail\nNLOHMANN_JSON_NAMESPACE_END\n\n// #include <nlohmann/detail/input/position_t.hpp>\n//     __ _____ _____ _____\n//  __|  |   __|     |   | |  JSON for Modern C++\n// |  |  |__   |  |  | | | |  version 3.11.3\n// |_____|_____|_____|_|___|  https://github.com/nlohmann/json\n//\n// SPDX-FileCopyrightText: 2013-2023 Niels Lohmann <https://nlohmann.me>\n// SPDX-License-Identifier: MIT\n\n\n\n#include <cstddef> // size_t\n\n// #include <nlohmann/detail/abi_macros.hpp>\n\n\nNLOHMANN_JSON_NAMESPACE_BEGIN\nnamespace detail\n{\n\n/// struct to capture the start position of the current token\nstruct position_t\n{\n    /// the total number of characters read\n    std::size_t chars_read_total = 0;\n    /// the number of characters read in the current line\n    std::size_t chars_read_current_line = 0;\n    /// the number of lines read\n    std::size_t lines_read = 0;\n\n    /// conversion to size_t to preserve SAX interface\n    constexpr operator size_t() const\n    {\n        return chars_read_total;\n    }\n};\n\n}  // namespace detail\nNLOHMANN_JSON_NAMESPACE_END\n\n// #include <nlohmann/detail/macro_scope.hpp>\n\n// #include <nlohmann/detail/meta/cpp_future.hpp>\n//     __ _____ _____ _____\n//  __|  |   __|     |   | |  JSON for Modern C++\n// |  |  |__   |  |  | | | |  version 3.11.3\n// |_____|_____|_____|_|___|  https://github.com/nlohmann/json\n//\n// SPDX-FileCopyrightText: 2013-2023 Niels Lohmann <https://nlohmann.me>\n// SPDX-FileCopyrightText: 2018 The Abseil Authors\n// SPDX-License-Identifier: MIT\n\n\n\n#include <array> // array\n#include <cstddef> // size_t\n#include <type_traits> // conditional, enable_if, false_type, integral_constant, is_constructible, is_integral, is_same, remove_cv, remove_reference, true_type\n#include <utility> // index_sequence, make_index_sequence, index_sequence_for\n\n// #include <nlohmann/detail/macro_scope.hpp>\n\n\nNLOHMANN_JSON_NAMESPACE_BEGIN\nnamespace detail\n{\n\ntemplate<typename T>\nusing uncvref_t = typename std::remove_cv<typename std::remove_reference<T>::type>::type;\n\n#ifdef JSON_HAS_CPP_14\n\n// the following utilities are natively available in C++14\nusing std::enable_if_t;\nusing std::index_sequence;\nusing std::make_index_sequence;\nusing std::index_sequence_for;\n\n#else\n\n// alias templates to reduce boilerplate\ntemplate<bool B, typename T = void>\nusing enable_if_t = typename std::enable_if<B, T>::type;\n\n// The following code is taken from https://github.com/abseil/abseil-cpp/blob/10cb35e459f5ecca5b2ff107635da0bfa41011b4/absl/utility/utility.h\n// which is part of Google Abseil (https://github.com/abseil/abseil-cpp), licensed under the Apache License 2.0.\n\n//// START OF CODE FROM GOOGLE ABSEIL\n\n// integer_sequence\n//\n// Class template representing a compile-time integer sequence. An instantiation\n// of `integer_sequence<T, Ints...>` has a sequence of integers encoded in its\n// type through its template arguments (which is a common need when\n// working with C++11 variadic templates). `absl::integer_sequence` is designed\n// to be a drop-in replacement for C++14's `std::integer_sequence`.\n//\n// Example:\n//\n//   template< class T, T... Ints >\n//   void user_function(integer_sequence<T, Ints...>);\n//\n//   int main()\n//   {\n//     // user_function's `T` will be deduced to `int` and `Ints...`\n//     // will be deduced to `0, 1, 2, 3, 4`.\n//     user_function(make_integer_sequence<int, 5>());\n//   }\ntemplate <typename T, T... Ints>\nstruct integer_sequence\n{\n    using value_type = T;\n    static constexpr std::size_t size() noexcept\n    {\n        return sizeof...(Ints);\n    }\n};\n\n// index_sequence\n//\n// A helper template for an `integer_sequence` of `size_t`,\n// `absl::index_sequence` is designed to be a drop-in replacement for C++14's\n// `std::index_sequence`.\ntemplate <size_t... Ints>\nusing index_sequence = integer_sequence<size_t, Ints...>;\n\nnamespace utility_internal\n{\n\ntemplate <typename Seq, size_t SeqSize, size_t Rem>\nstruct Extend;\n\n// Note that SeqSize == sizeof...(Ints). It's passed explicitly for efficiency.\ntemplate <typename T, T... Ints, size_t SeqSize>\nstruct Extend<integer_sequence<T, Ints...>, SeqSize, 0>\n{\n    using type = integer_sequence < T, Ints..., (Ints + SeqSize)... >;\n};\n\ntemplate <typename T, T... Ints, size_t SeqSize>\nstruct Extend<integer_sequence<T, Ints...>, SeqSize, 1>\n{\n    using type = integer_sequence < T, Ints..., (Ints + SeqSize)..., 2 * SeqSize >;\n};\n\n// Recursion helper for 'make_integer_sequence<T, N>'.\n// 'Gen<T, N>::type' is an alias for 'integer_sequence<T, 0, 1, ... N-1>'.\ntemplate <typename T, size_t N>\nstruct Gen\n{\n    using type =\n        typename Extend < typename Gen < T, N / 2 >::type, N / 2, N % 2 >::type;\n};\n\ntemplate <typename T>\nstruct Gen<T, 0>\n{\n    using type = integer_sequence<T>;\n};\n\n}  // namespace utility_internal\n\n// Compile-time sequences of integers\n\n// make_integer_sequence\n//\n// This template alias is equivalent to\n// `integer_sequence<int, 0, 1, ..., N-1>`, and is designed to be a drop-in\n// replacement for C++14's `std::make_integer_sequence`.\ntemplate <typename T, T N>\nusing make_integer_sequence = typename utility_internal::Gen<T, N>::type;\n\n// make_index_sequence\n//\n// This template alias is equivalent to `index_sequence<0, 1, ..., N-1>`,\n// and is designed to be a drop-in replacement for C++14's\n// `std::make_index_sequence`.\ntemplate <size_t N>\nusing make_index_sequence = make_integer_sequence<size_t, N>;\n\n// index_sequence_for\n//\n// Converts a typename pack into an index sequence of the same length, and\n// is designed to be a drop-in replacement for C++14's\n// `std::index_sequence_for()`\ntemplate <typename... Ts>\nusing index_sequence_for = make_index_sequence<sizeof...(Ts)>;\n\n//// END OF CODE FROM GOOGLE ABSEIL\n\n#endif\n\n// dispatch utility (taken from ranges-v3)\ntemplate<unsigned N> struct priority_tag : priority_tag < N - 1 > {};\ntemplate<> struct priority_tag<0> {};\n\n// taken from ranges-v3\ntemplate<typename T>\nstruct static_const\n{\n    static JSON_INLINE_VARIABLE constexpr T value{};\n};\n\n#ifndef JSON_HAS_CPP_17\n    template<typename T>\n    constexpr T static_const<T>::value;\n#endif\n\ntemplate<typename T, typename... Args>\ninline constexpr std::array<T, sizeof...(Args)> make_array(Args&& ... args)\n{\n    return std::array<T, sizeof...(Args)> {{static_cast<T>(std::forward<Args>(args))...}};\n}\n\n}  // namespace detail\nNLOHMANN_JSON_NAMESPACE_END\n\n// #include <nlohmann/detail/meta/type_traits.hpp>\n//     __ _____ _____ _____\n//  __|  |   __|     |   | |  JSON for Modern C++\n// |  |  |__   |  |  | | | |  version 3.11.3\n// |_____|_____|_____|_|___|  https://github.com/nlohmann/json\n//\n// SPDX-FileCopyrightText: 2013-2023 Niels Lohmann <https://nlohmann.me>\n// SPDX-License-Identifier: MIT\n\n\n\n#include <limits> // numeric_limits\n#include <type_traits> // false_type, is_constructible, is_integral, is_same, true_type\n#include <utility> // declval\n#include <tuple> // tuple\n#include <string> // char_traits\n\n// #include <nlohmann/detail/iterators/iterator_traits.hpp>\n//     __ _____ _____ _____\n//  __|  |   __|     |   | |  JSON for Modern C++\n// |  |  |__   |  |  | | | |  version 3.11.3\n// |_____|_____|_____|_|___|  https://github.com/nlohmann/json\n//\n// SPDX-FileCopyrightText: 2013-2023 Niels Lohmann <https://nlohmann.me>\n// SPDX-License-Identifier: MIT\n\n\n\n#include <iterator> // random_access_iterator_tag\n\n// #include <nlohmann/detail/abi_macros.hpp>\n\n// #include <nlohmann/detail/meta/void_t.hpp>\n\n// #include <nlohmann/detail/meta/cpp_future.hpp>\n\n\nNLOHMANN_JSON_NAMESPACE_BEGIN\nnamespace detail\n{\n\ntemplate<typename It, typename = void>\nstruct iterator_types {};\n\ntemplate<typename It>\nstruct iterator_types <\n    It,\n    void_t<typename It::difference_type, typename It::value_type, typename It::pointer,\n    typename It::reference, typename It::iterator_category >>\n{\n    using difference_type = typename It::difference_type;\n    using value_type = typename It::value_type;\n    using pointer = typename It::pointer;\n    using reference = typename It::reference;\n    using iterator_category = typename It::iterator_category;\n};\n\n// This is required as some compilers implement std::iterator_traits in a way that\n// doesn't work with SFINAE. See https://github.com/nlohmann/json/issues/1341.\ntemplate<typename T, typename = void>\nstruct iterator_traits\n{\n};\n\ntemplate<typename T>\nstruct iterator_traits < T, enable_if_t < !std::is_pointer<T>::value >>\n            : iterator_types<T>\n{\n};\n\ntemplate<typename T>\nstruct iterator_traits<T*, enable_if_t<std::is_object<T>::value>>\n{\n    using iterator_category = std::random_access_iterator_tag;\n    using value_type = T;\n    using difference_type = ptrdiff_t;\n    using pointer = T*;\n    using reference = T&;\n};\n\n}  // namespace detail\nNLOHMANN_JSON_NAMESPACE_END\n\n// #include <nlohmann/detail/macro_scope.hpp>\n\n// #include <nlohmann/detail/meta/call_std/begin.hpp>\n//     __ _____ _____ _____\n//  __|  |   __|     |   | |  JSON for Modern C++\n// |  |  |__   |  |  | | | |  version 3.11.3\n// |_____|_____|_____|_|___|  https://github.com/nlohmann/json\n//\n// SPDX-FileCopyrightText: 2013-2023 Niels Lohmann <https://nlohmann.me>\n// SPDX-License-Identifier: MIT\n\n\n\n// #include <nlohmann/detail/macro_scope.hpp>\n\n\nNLOHMANN_JSON_NAMESPACE_BEGIN\n\nNLOHMANN_CAN_CALL_STD_FUNC_IMPL(begin);\n\nNLOHMANN_JSON_NAMESPACE_END\n\n// #include <nlohmann/detail/meta/call_std/end.hpp>\n//     __ _____ _____ _____\n//  __|  |   __|     |   | |  JSON for Modern C++\n// |  |  |__   |  |  | | | |  version 3.11.3\n// |_____|_____|_____|_|___|  https://github.com/nlohmann/json\n//\n// SPDX-FileCopyrightText: 2013-2023 Niels Lohmann <https://nlohmann.me>\n// SPDX-License-Identifier: MIT\n\n\n\n// #include <nlohmann/detail/macro_scope.hpp>\n\n\nNLOHMANN_JSON_NAMESPACE_BEGIN\n\nNLOHMANN_CAN_CALL_STD_FUNC_IMPL(end);\n\nNLOHMANN_JSON_NAMESPACE_END\n\n// #include <nlohmann/detail/meta/cpp_future.hpp>\n\n// #include <nlohmann/detail/meta/detected.hpp>\n\n// #include <nlohmann/json_fwd.hpp>\n//     __ _____ _____ _____\n//  __|  |   __|     |   | |  JSON for Modern C++\n// |  |  |__   |  |  | | | |  version 3.11.3\n// |_____|_____|_____|_|___|  https://github.com/nlohmann/json\n//\n// SPDX-FileCopyrightText: 2013-2023 Niels Lohmann <https://nlohmann.me>\n// SPDX-License-Identifier: MIT\n\n#ifndef INCLUDE_NLOHMANN_JSON_FWD_HPP_\n    #define INCLUDE_NLOHMANN_JSON_FWD_HPP_\n\n    #include <cstdint> // int64_t, uint64_t\n    #include <map> // map\n    #include <memory> // allocator\n    #include <string> // string\n    #include <vector> // vector\n\n    // #include <nlohmann/detail/abi_macros.hpp>\n\n\n    /*!\n    @brief namespace for Niels Lohmann\n    @see https://github.com/nlohmann\n    @since version 1.0.0\n    */\n    NLOHMANN_JSON_NAMESPACE_BEGIN\n\n    /*!\n    @brief default JSONSerializer template argument\n\n    This serializer ignores the template arguments and uses ADL\n    ([argument-dependent lookup](https://en.cppreference.com/w/cpp/language/adl))\n    for serialization.\n    */\n    template<typename T = void, typename SFINAE = void>\n    struct adl_serializer;\n\n    /// a class to store JSON values\n    /// @sa https://json.nlohmann.me/api/basic_json/\n    template<template<typename U, typename V, typename... Args> class ObjectType =\n    std::map,\n    template<typename U, typename... Args> class ArrayType = std::vector,\n    class StringType = std::string, class BooleanType = bool,\n    class NumberIntegerType = std::int64_t,\n    class NumberUnsignedType = std::uint64_t,\n    class NumberFloatType = double,\n    template<typename U> class AllocatorType = std::allocator,\n    template<typename T, typename SFINAE = void> class JSONSerializer =\n    adl_serializer,\n    class BinaryType = std::vector<std::uint8_t>, // cppcheck-suppress syntaxError\n    class CustomBaseClass = void>\n    class basic_json;\n\n    /// @brief JSON Pointer defines a string syntax for identifying a specific value within a JSON document\n    /// @sa https://json.nlohmann.me/api/json_pointer/\n    template<typename RefStringType>\n    class json_pointer;\n\n    /*!\n    @brief default specialization\n    @sa https://json.nlohmann.me/api/json/\n    */\n    using json = basic_json<>;\n\n    /// @brief a minimal map-like container that preserves insertion order\n    /// @sa https://json.nlohmann.me/api/ordered_map/\n    template<class Key, class T, class IgnoredLess, class Allocator>\n    struct ordered_map;\n\n    /// @brief specialization that maintains the insertion order of object keys\n    /// @sa https://json.nlohmann.me/api/ordered_json/\n    using ordered_json = basic_json<nlohmann::ordered_map>;\n\n    NLOHMANN_JSON_NAMESPACE_END\n\n#endif  // INCLUDE_NLOHMANN_JSON_FWD_HPP_\n\n\nNLOHMANN_JSON_NAMESPACE_BEGIN\n/*!\n@brief detail namespace with internal helper functions\n\nThis namespace collects functions that should not be exposed,\nimplementations of some @ref basic_json methods, and meta-programming helpers.\n\n@since version 2.1.0\n*/\nnamespace detail\n{\n\n/////////////\n// helpers //\n/////////////\n\n// Note to maintainers:\n//\n// Every trait in this file expects a non CV-qualified type.\n// The only exceptions are in the 'aliases for detected' section\n// (i.e. those of the form: decltype(T::member_function(std::declval<T>())))\n//\n// In this case, T has to be properly CV-qualified to constraint the function arguments\n// (e.g. to_json(BasicJsonType&, const T&))\n\ntemplate<typename> struct is_basic_json : std::false_type {};\n\nNLOHMANN_BASIC_JSON_TPL_DECLARATION\nstruct is_basic_json<NLOHMANN_BASIC_JSON_TPL> : std::true_type {};\n\n// used by exceptions create() member functions\n// true_type for pointer to possibly cv-qualified basic_json or std::nullptr_t\n// false_type otherwise\ntemplate<typename BasicJsonContext>\nstruct is_basic_json_context :\n    std::integral_constant < bool,\n    is_basic_json<typename std::remove_cv<typename std::remove_pointer<BasicJsonContext>::type>::type>::value\n    || std::is_same<BasicJsonContext, std::nullptr_t>::value >\n{};\n\n//////////////////////\n// json_ref helpers //\n//////////////////////\n\ntemplate<typename>\nclass json_ref;\n\ntemplate<typename>\nstruct is_json_ref : std::false_type {};\n\ntemplate<typename T>\nstruct is_json_ref<json_ref<T>> : std::true_type {};\n\n//////////////////////////\n// aliases for detected //\n//////////////////////////\n\ntemplate<typename T>\nusing mapped_type_t = typename T::mapped_type;\n\ntemplate<typename T>\nusing key_type_t = typename T::key_type;\n\ntemplate<typename T>\nusing value_type_t = typename T::value_type;\n\ntemplate<typename T>\nusing difference_type_t = typename T::difference_type;\n\ntemplate<typename T>\nusing pointer_t = typename T::pointer;\n\ntemplate<typename T>\nusing reference_t = typename T::reference;\n\ntemplate<typename T>\nusing iterator_category_t = typename T::iterator_category;\n\ntemplate<typename T, typename... Args>\nusing to_json_function = decltype(T::to_json(std::declval<Args>()...));\n\ntemplate<typename T, typename... Args>\nusing from_json_function = decltype(T::from_json(std::declval<Args>()...));\n\ntemplate<typename T, typename U>\nusing get_template_function = decltype(std::declval<T>().template get<U>());\n\n// trait checking if JSONSerializer<T>::from_json(json const&, udt&) exists\ntemplate<typename BasicJsonType, typename T, typename = void>\nstruct has_from_json : std::false_type {};\n\n// trait checking if j.get<T> is valid\n// use this trait instead of std::is_constructible or std::is_convertible,\n// both rely on, or make use of implicit conversions, and thus fail when T\n// has several constructors/operator= (see https://github.com/nlohmann/json/issues/958)\ntemplate <typename BasicJsonType, typename T>\nstruct is_getable\n{\n    static constexpr bool value = is_detected<get_template_function, const BasicJsonType&, T>::value;\n};\n\ntemplate<typename BasicJsonType, typename T>\nstruct has_from_json < BasicJsonType, T, enable_if_t < !is_basic_json<T>::value >>\n{\n    using serializer = typename BasicJsonType::template json_serializer<T, void>;\n\n    static constexpr bool value =\n        is_detected_exact<void, from_json_function, serializer,\n        const BasicJsonType&, T&>::value;\n};\n\n// This trait checks if JSONSerializer<T>::from_json(json const&) exists\n// this overload is used for non-default-constructible user-defined-types\ntemplate<typename BasicJsonType, typename T, typename = void>\nstruct has_non_default_from_json : std::false_type {};\n\ntemplate<typename BasicJsonType, typename T>\nstruct has_non_default_from_json < BasicJsonType, T, enable_if_t < !is_basic_json<T>::value >>\n{\n    using serializer = typename BasicJsonType::template json_serializer<T, void>;\n\n    static constexpr bool value =\n        is_detected_exact<T, from_json_function, serializer,\n        const BasicJsonType&>::value;\n};\n\n// This trait checks if BasicJsonType::json_serializer<T>::to_json exists\n// Do not evaluate the trait when T is a basic_json type, to avoid template instantiation infinite recursion.\ntemplate<typename BasicJsonType, typename T, typename = void>\nstruct has_to_json : std::false_type {};\n\ntemplate<typename BasicJsonType, typename T>\nstruct has_to_json < BasicJsonType, T, enable_if_t < !is_basic_json<T>::value >>\n{\n    using serializer = typename BasicJsonType::template json_serializer<T, void>;\n\n    static constexpr bool value =\n        is_detected_exact<void, to_json_function, serializer, BasicJsonType&,\n        T>::value;\n};\n\ntemplate<typename T>\nusing detect_key_compare = typename T::key_compare;\n\ntemplate<typename T>\nstruct has_key_compare : std::integral_constant<bool, is_detected<detect_key_compare, T>::value> {};\n\n// obtains the actual object key comparator\ntemplate<typename BasicJsonType>\nstruct actual_object_comparator\n{\n    using object_t = typename BasicJsonType::object_t;\n    using object_comparator_t = typename BasicJsonType::default_object_comparator_t;\n    using type = typename std::conditional < has_key_compare<object_t>::value,\n          typename object_t::key_compare, object_comparator_t>::type;\n};\n\ntemplate<typename BasicJsonType>\nusing actual_object_comparator_t = typename actual_object_comparator<BasicJsonType>::type;\n\n/////////////////\n// char_traits //\n/////////////////\n\n// Primary template of char_traits calls std char_traits\ntemplate<typename T>\nstruct char_traits : std::char_traits<T>\n{};\n\n// Explicitly define char traits for unsigned char since it is not standard\ntemplate<>\nstruct char_traits<unsigned char> : std::char_traits<char>\n{\n    using char_type = unsigned char;\n    using int_type = uint64_t;\n\n    // Redefine to_int_type function\n    static int_type to_int_type(char_type c) noexcept\n    {\n        return static_cast<int_type>(c);\n    }\n\n    static char_type to_char_type(int_type i) noexcept\n    {\n        return static_cast<char_type>(i);\n    }\n\n    static constexpr int_type eof() noexcept\n    {\n        return static_cast<int_type>(EOF);\n    }\n};\n\n// Explicitly define char traits for signed char since it is not standard\ntemplate<>\nstruct char_traits<signed char> : std::char_traits<char>\n{\n    using char_type = signed char;\n    using int_type = uint64_t;\n\n    // Redefine to_int_type function\n    static int_type to_int_type(char_type c) noexcept\n    {\n        return static_cast<int_type>(c);\n    }\n\n    static char_type to_char_type(int_type i) noexcept\n    {\n        return static_cast<char_type>(i);\n    }\n\n    static constexpr int_type eof() noexcept\n    {\n        return static_cast<int_type>(EOF);\n    }\n};\n\n///////////////////\n// is_ functions //\n///////////////////\n\n// https://en.cppreference.com/w/cpp/types/conjunction\ntemplate<class...> struct conjunction : std::true_type { };\ntemplate<class B> struct conjunction<B> : B { };\ntemplate<class B, class... Bn>\nstruct conjunction<B, Bn...>\n: std::conditional<static_cast<bool>(B::value), conjunction<Bn...>, B>::type {};\n\n// https://en.cppreference.com/w/cpp/types/negation\ntemplate<class B> struct negation : std::integral_constant < bool, !B::value > { };\n\n// Reimplementation of is_constructible and is_default_constructible, due to them being broken for\n// std::pair and std::tuple until LWG 2367 fix (see https://cplusplus.github.io/LWG/lwg-defects.html#2367).\n// This causes compile errors in e.g. clang 3.5 or gcc 4.9.\ntemplate <typename T>\nstruct is_default_constructible : std::is_default_constructible<T> {};\n\ntemplate <typename T1, typename T2>\nstruct is_default_constructible<std::pair<T1, T2>>\n            : conjunction<is_default_constructible<T1>, is_default_constructible<T2>> {};\n\ntemplate <typename T1, typename T2>\nstruct is_default_constructible<const std::pair<T1, T2>>\n            : conjunction<is_default_constructible<T1>, is_default_constructible<T2>> {};\n\ntemplate <typename... Ts>\nstruct is_default_constructible<std::tuple<Ts...>>\n            : conjunction<is_default_constructible<Ts>...> {};\n\ntemplate <typename... Ts>\nstruct is_default_constructible<const std::tuple<Ts...>>\n            : conjunction<is_default_constructible<Ts>...> {};\n\ntemplate <typename T, typename... Args>\nstruct is_constructible : std::is_constructible<T, Args...> {};\n\ntemplate <typename T1, typename T2>\nstruct is_constructible<std::pair<T1, T2>> : is_default_constructible<std::pair<T1, T2>> {};\n\ntemplate <typename T1, typename T2>\nstruct is_constructible<const std::pair<T1, T2>> : is_default_constructible<const std::pair<T1, T2>> {};\n\ntemplate <typename... Ts>\nstruct is_constructible<std::tuple<Ts...>> : is_default_constructible<std::tuple<Ts...>> {};\n\ntemplate <typename... Ts>\nstruct is_constructible<const std::tuple<Ts...>> : is_default_constructible<const std::tuple<Ts...>> {};\n\ntemplate<typename T, typename = void>\nstruct is_iterator_traits : std::false_type {};\n\ntemplate<typename T>\nstruct is_iterator_traits<iterator_traits<T>>\n{\n  private:\n    using traits = iterator_traits<T>;\n\n  public:\n    static constexpr auto value =\n        is_detected<value_type_t, traits>::value &&\n        is_detected<difference_type_t, traits>::value &&\n        is_detected<pointer_t, traits>::value &&\n        is_detected<iterator_category_t, traits>::value &&\n        is_detected<reference_t, traits>::value;\n};\n\ntemplate<typename T>\nstruct is_range\n{\n  private:\n    using t_ref = typename std::add_lvalue_reference<T>::type;\n\n    using iterator = detected_t<result_of_begin, t_ref>;\n    using sentinel = detected_t<result_of_end, t_ref>;\n\n    // to be 100% correct, it should use https://en.cppreference.com/w/cpp/iterator/input_or_output_iterator\n    // and https://en.cppreference.com/w/cpp/iterator/sentinel_for\n    // but reimplementing these would be too much work, as a lot of other concepts are used underneath\n    static constexpr auto is_iterator_begin =\n        is_iterator_traits<iterator_traits<iterator>>::value;\n\n  public:\n    static constexpr bool value = !std::is_same<iterator, nonesuch>::value && !std::is_same<sentinel, nonesuch>::value && is_iterator_begin;\n};\n\ntemplate<typename R>\nusing iterator_t = enable_if_t<is_range<R>::value, result_of_begin<decltype(std::declval<R&>())>>;\n\ntemplate<typename T>\nusing range_value_t = value_type_t<iterator_traits<iterator_t<T>>>;\n\n// The following implementation of is_complete_type is taken from\n// https://blogs.msdn.microsoft.com/vcblog/2015/12/02/partial-support-for-expression-sfinae-in-vs-2015-update-1/\n// and is written by Xiang Fan who agreed to using it in this library.\n\ntemplate<typename T, typename = void>\nstruct is_complete_type : std::false_type {};\n\ntemplate<typename T>\nstruct is_complete_type<T, decltype(void(sizeof(T)))> : std::true_type {};\n\ntemplate<typename BasicJsonType, typename CompatibleObjectType,\n         typename = void>\nstruct is_compatible_object_type_impl : std::false_type {};\n\ntemplate<typename BasicJsonType, typename CompatibleObjectType>\nstruct is_compatible_object_type_impl <\n    BasicJsonType, CompatibleObjectType,\n    enable_if_t < is_detected<mapped_type_t, CompatibleObjectType>::value&&\n    is_detected<key_type_t, CompatibleObjectType>::value >>\n{\n    using object_t = typename BasicJsonType::object_t;\n\n    // macOS's is_constructible does not play well with nonesuch...\n    static constexpr bool value =\n        is_constructible<typename object_t::key_type,\n        typename CompatibleObjectType::key_type>::value &&\n        is_constructible<typename object_t::mapped_type,\n        typename CompatibleObjectType::mapped_type>::value;\n};\n\ntemplate<typename BasicJsonType, typename CompatibleObjectType>\nstruct is_compatible_object_type\n    : is_compatible_object_type_impl<BasicJsonType, CompatibleObjectType> {};\n\ntemplate<typename BasicJsonType, typename ConstructibleObjectType,\n         typename = void>\nstruct is_constructible_object_type_impl : std::false_type {};\n\ntemplate<typename BasicJsonType, typename ConstructibleObjectType>\nstruct is_constructible_object_type_impl <\n    BasicJsonType, ConstructibleObjectType,\n    enable_if_t < is_detected<mapped_type_t, ConstructibleObjectType>::value&&\n    is_detected<key_type_t, ConstructibleObjectType>::value >>\n{\n    using object_t = typename BasicJsonType::object_t;\n\n    static constexpr bool value =\n        (is_default_constructible<ConstructibleObjectType>::value &&\n         (std::is_move_assignable<ConstructibleObjectType>::value ||\n          std::is_copy_assignable<ConstructibleObjectType>::value) &&\n         (is_constructible<typename ConstructibleObjectType::key_type,\n          typename object_t::key_type>::value &&\n          std::is_same <\n          typename object_t::mapped_type,\n          typename ConstructibleObjectType::mapped_type >::value)) ||\n        (has_from_json<BasicJsonType,\n         typename ConstructibleObjectType::mapped_type>::value ||\n         has_non_default_from_json <\n         BasicJsonType,\n         typename ConstructibleObjectType::mapped_type >::value);\n};\n\ntemplate<typename BasicJsonType, typename ConstructibleObjectType>\nstruct is_constructible_object_type\n    : is_constructible_object_type_impl<BasicJsonType,\n      ConstructibleObjectType> {};\n\ntemplate<typename BasicJsonType, typename CompatibleStringType>\nstruct is_compatible_string_type\n{\n    static constexpr auto value =\n        is_constructible<typename BasicJsonType::string_t, CompatibleStringType>::value;\n};\n\ntemplate<typename BasicJsonType, typename ConstructibleStringType>\nstruct is_constructible_string_type\n{\n    // launder type through decltype() to fix compilation failure on ICPC\n#ifdef __INTEL_COMPILER\n    using laundered_type = decltype(std::declval<ConstructibleStringType>());\n#else\n    using laundered_type = ConstructibleStringType;\n#endif\n\n    static constexpr auto value =\n        conjunction <\n        is_constructible<laundered_type, typename BasicJsonType::string_t>,\n        is_detected_exact<typename BasicJsonType::string_t::value_type,\n        value_type_t, laundered_type >>::value;\n};\n\ntemplate<typename BasicJsonType, typename CompatibleArrayType, typename = void>\nstruct is_compatible_array_type_impl : std::false_type {};\n\ntemplate<typename BasicJsonType, typename CompatibleArrayType>\nstruct is_compatible_array_type_impl <\n    BasicJsonType, CompatibleArrayType,\n    enable_if_t <\n    is_detected<iterator_t, CompatibleArrayType>::value&&\n    is_iterator_traits<iterator_traits<detected_t<iterator_t, CompatibleArrayType>>>::value&&\n// special case for types like std::filesystem::path whose iterator's value_type are themselves\n// c.f. https://github.com/nlohmann/json/pull/3073\n    !std::is_same<CompatibleArrayType, detected_t<range_value_t, CompatibleArrayType>>::value >>\n{\n    static constexpr bool value =\n        is_constructible<BasicJsonType,\n        range_value_t<CompatibleArrayType>>::value;\n};\n\ntemplate<typename BasicJsonType, typename CompatibleArrayType>\nstruct is_compatible_array_type\n    : is_compatible_array_type_impl<BasicJsonType, CompatibleArrayType> {};\n\ntemplate<typename BasicJsonType, typename ConstructibleArrayType, typename = void>\nstruct is_constructible_array_type_impl : std::false_type {};\n\ntemplate<typename BasicJsonType, typename ConstructibleArrayType>\nstruct is_constructible_array_type_impl <\n    BasicJsonType, ConstructibleArrayType,\n    enable_if_t<std::is_same<ConstructibleArrayType,\n    typename BasicJsonType::value_type>::value >>\n            : std::true_type {};\n\ntemplate<typename BasicJsonType, typename ConstructibleArrayType>\nstruct is_constructible_array_type_impl <\n    BasicJsonType, ConstructibleArrayType,\n    enable_if_t < !std::is_same<ConstructibleArrayType,\n    typename BasicJsonType::value_type>::value&&\n    !is_compatible_string_type<BasicJsonType, ConstructibleArrayType>::value&&\n    is_default_constructible<ConstructibleArrayType>::value&&\n(std::is_move_assignable<ConstructibleArrayType>::value ||\n std::is_copy_assignable<ConstructibleArrayType>::value)&&\nis_detected<iterator_t, ConstructibleArrayType>::value&&\nis_iterator_traits<iterator_traits<detected_t<iterator_t, ConstructibleArrayType>>>::value&&\nis_detected<range_value_t, ConstructibleArrayType>::value&&\n// special case for types like std::filesystem::path whose iterator's value_type are themselves\n// c.f. https://github.com/nlohmann/json/pull/3073\n!std::is_same<ConstructibleArrayType, detected_t<range_value_t, ConstructibleArrayType>>::value&&\n        is_complete_type <\n        detected_t<range_value_t, ConstructibleArrayType >>::value >>\n{\n    using value_type = range_value_t<ConstructibleArrayType>;\n\n    static constexpr bool value =\n        std::is_same<value_type,\n        typename BasicJsonType::array_t::value_type>::value ||\n        has_from_json<BasicJsonType,\n        value_type>::value ||\n        has_non_default_from_json <\n        BasicJsonType,\n        value_type >::value;\n};\n\ntemplate<typename BasicJsonType, typename ConstructibleArrayType>\nstruct is_constructible_array_type\n    : is_constructible_array_type_impl<BasicJsonType, ConstructibleArrayType> {};\n\ntemplate<typename RealIntegerType, typename CompatibleNumberIntegerType,\n         typename = void>\nstruct is_compatible_integer_type_impl : std::false_type {};\n\ntemplate<typename RealIntegerType, typename CompatibleNumberIntegerType>\nstruct is_compatible_integer_type_impl <\n    RealIntegerType, CompatibleNumberIntegerType,\n    enable_if_t < std::is_integral<RealIntegerType>::value&&\n    std::is_integral<CompatibleNumberIntegerType>::value&&\n    !std::is_same<bool, CompatibleNumberIntegerType>::value >>\n{\n    // is there an assert somewhere on overflows?\n    using RealLimits = std::numeric_limits<RealIntegerType>;\n    using CompatibleLimits = std::numeric_limits<CompatibleNumberIntegerType>;\n\n    static constexpr auto value =\n        is_constructible<RealIntegerType,\n        CompatibleNumberIntegerType>::value &&\n        CompatibleLimits::is_integer &&\n        RealLimits::is_signed == CompatibleLimits::is_signed;\n};\n\ntemplate<typename RealIntegerType, typename CompatibleNumberIntegerType>\nstruct is_compatible_integer_type\n    : is_compatible_integer_type_impl<RealIntegerType,\n      CompatibleNumberIntegerType> {};\n\ntemplate<typename BasicJsonType, typename CompatibleType, typename = void>\nstruct is_compatible_type_impl: std::false_type {};\n\ntemplate<typename BasicJsonType, typename CompatibleType>\nstruct is_compatible_type_impl <\n    BasicJsonType, CompatibleType,\n    enable_if_t<is_complete_type<CompatibleType>::value >>\n{\n    static constexpr bool value =\n        has_to_json<BasicJsonType, CompatibleType>::value;\n};\n\ntemplate<typename BasicJsonType, typename CompatibleType>\nstruct is_compatible_type\n    : is_compatible_type_impl<BasicJsonType, CompatibleType> {};\n\ntemplate<typename T1, typename T2>\nstruct is_constructible_tuple : std::false_type {};\n\ntemplate<typename T1, typename... Args>\nstruct is_constructible_tuple<T1, std::tuple<Args...>> : conjunction<is_constructible<T1, Args>...> {};\n\ntemplate<typename BasicJsonType, typename T>\nstruct is_json_iterator_of : std::false_type {};\n\ntemplate<typename BasicJsonType>\nstruct is_json_iterator_of<BasicJsonType, typename BasicJsonType::iterator> : std::true_type {};\n\ntemplate<typename BasicJsonType>\nstruct is_json_iterator_of<BasicJsonType, typename BasicJsonType::const_iterator> : std::true_type\n{};\n\n// checks if a given type T is a template specialization of Primary\ntemplate<template <typename...> class Primary, typename T>\nstruct is_specialization_of : std::false_type {};\n\ntemplate<template <typename...> class Primary, typename... Args>\nstruct is_specialization_of<Primary, Primary<Args...>> : std::true_type {};\n\ntemplate<typename T>\nusing is_json_pointer = is_specialization_of<::nlohmann::json_pointer, uncvref_t<T>>;\n\n// checks if A and B are comparable using Compare functor\ntemplate<typename Compare, typename A, typename B, typename = void>\nstruct is_comparable : std::false_type {};\n\ntemplate<typename Compare, typename A, typename B>\nstruct is_comparable<Compare, A, B, void_t<\ndecltype(std::declval<Compare>()(std::declval<A>(), std::declval<B>())),\ndecltype(std::declval<Compare>()(std::declval<B>(), std::declval<A>()))\n>> : std::true_type {};\n\ntemplate<typename T>\nusing detect_is_transparent = typename T::is_transparent;\n\n// type trait to check if KeyType can be used as object key (without a BasicJsonType)\n// see is_usable_as_basic_json_key_type below\ntemplate<typename Comparator, typename ObjectKeyType, typename KeyTypeCVRef, bool RequireTransparentComparator = true,\n         bool ExcludeObjectKeyType = RequireTransparentComparator, typename KeyType = uncvref_t<KeyTypeCVRef>>\nusing is_usable_as_key_type = typename std::conditional <\n                              is_comparable<Comparator, ObjectKeyType, KeyTypeCVRef>::value\n                              && !(ExcludeObjectKeyType && std::is_same<KeyType,\n                                   ObjectKeyType>::value)\n                              && (!RequireTransparentComparator\n                                  || is_detected <detect_is_transparent, Comparator>::value)\n                              && !is_json_pointer<KeyType>::value,\n                              std::true_type,\n                              std::false_type >::type;\n\n// type trait to check if KeyType can be used as object key\n// true if:\n//   - KeyType is comparable with BasicJsonType::object_t::key_type\n//   - if ExcludeObjectKeyType is true, KeyType is not BasicJsonType::object_t::key_type\n//   - the comparator is transparent or RequireTransparentComparator is false\n//   - KeyType is not a JSON iterator or json_pointer\ntemplate<typename BasicJsonType, typename KeyTypeCVRef, bool RequireTransparentComparator = true,\n         bool ExcludeObjectKeyType = RequireTransparentComparator, typename KeyType = uncvref_t<KeyTypeCVRef>>\nusing is_usable_as_basic_json_key_type = typename std::conditional <\n        is_usable_as_key_type<typename BasicJsonType::object_comparator_t,\n        typename BasicJsonType::object_t::key_type, KeyTypeCVRef,\n        RequireTransparentComparator, ExcludeObjectKeyType>::value\n        && !is_json_iterator_of<BasicJsonType, KeyType>::value,\n        std::true_type,\n        std::false_type >::type;\n\ntemplate<typename ObjectType, typename KeyType>\nusing detect_erase_with_key_type = decltype(std::declval<ObjectType&>().erase(std::declval<KeyType>()));\n\n// type trait to check if object_t has an erase() member functions accepting KeyType\ntemplate<typename BasicJsonType, typename KeyType>\nusing has_erase_with_key_type = typename std::conditional <\n                                is_detected <\n                                detect_erase_with_key_type,\n                                typename BasicJsonType::object_t, KeyType >::value,\n                                std::true_type,\n                                std::false_type >::type;\n\n// a naive helper to check if a type is an ordered_map (exploits the fact that\n// ordered_map inherits capacity() from std::vector)\ntemplate <typename T>\nstruct is_ordered_map\n{\n    using one = char;\n\n    struct two\n    {\n        char x[2]; // NOLINT(cppcoreguidelines-avoid-c-arrays,hicpp-avoid-c-arrays,modernize-avoid-c-arrays)\n    };\n\n    template <typename C> static one test( decltype(&C::capacity) ) ;\n    template <typename C> static two test(...);\n\n    enum { value = sizeof(test<T>(nullptr)) == sizeof(char) }; // NOLINT(cppcoreguidelines-pro-type-vararg,hicpp-vararg)\n};\n\n// to avoid useless casts (see https://github.com/nlohmann/json/issues/2893#issuecomment-889152324)\ntemplate < typename T, typename U, enable_if_t < !std::is_same<T, U>::value, int > = 0 >\nT conditional_static_cast(U value)\n{\n    return static_cast<T>(value);\n}\n\ntemplate<typename T, typename U, enable_if_t<std::is_same<T, U>::value, int> = 0>\nT conditional_static_cast(U value)\n{\n    return value;\n}\n\ntemplate<typename... Types>\nusing all_integral = conjunction<std::is_integral<Types>...>;\n\ntemplate<typename... Types>\nusing all_signed = conjunction<std::is_signed<Types>...>;\n\ntemplate<typename... Types>\nusing all_unsigned = conjunction<std::is_unsigned<Types>...>;\n\n// there's a disjunction trait in another PR; replace when merged\ntemplate<typename... Types>\nusing same_sign = std::integral_constant < bool,\n      all_signed<Types...>::value || all_unsigned<Types...>::value >;\n\ntemplate<typename OfType, typename T>\nusing never_out_of_range = std::integral_constant < bool,\n      (std::is_signed<OfType>::value && (sizeof(T) < sizeof(OfType)))\n      || (same_sign<OfType, T>::value && sizeof(OfType) == sizeof(T)) >;\n\ntemplate<typename OfType, typename T,\n         bool OfTypeSigned = std::is_signed<OfType>::value,\n         bool TSigned = std::is_signed<T>::value>\nstruct value_in_range_of_impl2;\n\ntemplate<typename OfType, typename T>\nstruct value_in_range_of_impl2<OfType, T, false, false>\n{\n    static constexpr bool test(T val)\n    {\n        using CommonType = typename std::common_type<OfType, T>::type;\n        return static_cast<CommonType>(val) <= static_cast<CommonType>((std::numeric_limits<OfType>::max)());\n    }\n};\n\ntemplate<typename OfType, typename T>\nstruct value_in_range_of_impl2<OfType, T, true, false>\n{\n    static constexpr bool test(T val)\n    {\n        using CommonType = typename std::common_type<OfType, T>::type;\n        return static_cast<CommonType>(val) <= static_cast<CommonType>((std::numeric_limits<OfType>::max)());\n    }\n};\n\ntemplate<typename OfType, typename T>\nstruct value_in_range_of_impl2<OfType, T, false, true>\n{\n    static constexpr bool test(T val)\n    {\n        using CommonType = typename std::common_type<OfType, T>::type;\n        return val >= 0 && static_cast<CommonType>(val) <= static_cast<CommonType>((std::numeric_limits<OfType>::max)());\n    }\n};\n\ntemplate<typename OfType, typename T>\nstruct value_in_range_of_impl2<OfType, T, true, true>\n{\n    static constexpr bool test(T val)\n    {\n        using CommonType = typename std::common_type<OfType, T>::type;\n        return static_cast<CommonType>(val) >= static_cast<CommonType>((std::numeric_limits<OfType>::min)())\n               && static_cast<CommonType>(val) <= static_cast<CommonType>((std::numeric_limits<OfType>::max)());\n    }\n};\n\ntemplate<typename OfType, typename T,\n         bool NeverOutOfRange = never_out_of_range<OfType, T>::value,\n         typename = detail::enable_if_t<all_integral<OfType, T>::value>>\nstruct value_in_range_of_impl1;\n\ntemplate<typename OfType, typename T>\nstruct value_in_range_of_impl1<OfType, T, false>\n{\n    static constexpr bool test(T val)\n    {\n        return value_in_range_of_impl2<OfType, T>::test(val);\n    }\n};\n\ntemplate<typename OfType, typename T>\nstruct value_in_range_of_impl1<OfType, T, true>\n{\n    static constexpr bool test(T /*val*/)\n    {\n        return true;\n    }\n};\n\ntemplate<typename OfType, typename T>\ninline constexpr bool value_in_range_of(T val)\n{\n    return value_in_range_of_impl1<OfType, T>::test(val);\n}\n\ntemplate<bool Value>\nusing bool_constant = std::integral_constant<bool, Value>;\n\n///////////////////////////////////////////////////////////////////////////////\n// is_c_string\n///////////////////////////////////////////////////////////////////////////////\n\nnamespace impl\n{\n\ntemplate<typename T>\ninline constexpr bool is_c_string()\n{\n    using TUnExt = typename std::remove_extent<T>::type;\n    using TUnCVExt = typename std::remove_cv<TUnExt>::type;\n    using TUnPtr = typename std::remove_pointer<T>::type;\n    using TUnCVPtr = typename std::remove_cv<TUnPtr>::type;\n    return\n        (std::is_array<T>::value && std::is_same<TUnCVExt, char>::value)\n        || (std::is_pointer<T>::value && std::is_same<TUnCVPtr, char>::value);\n}\n\n}  // namespace impl\n\n// checks whether T is a [cv] char */[cv] char[] C string\ntemplate<typename T>\nstruct is_c_string : bool_constant<impl::is_c_string<T>()> {};\n\ntemplate<typename T>\nusing is_c_string_uncvref = is_c_string<uncvref_t<T>>;\n\n///////////////////////////////////////////////////////////////////////////////\n// is_transparent\n///////////////////////////////////////////////////////////////////////////////\n\nnamespace impl\n{\n\ntemplate<typename T>\ninline constexpr bool is_transparent()\n{\n    return is_detected<detect_is_transparent, T>::value;\n}\n\n}  // namespace impl\n\n// checks whether T has a member named is_transparent\ntemplate<typename T>\nstruct is_transparent : bool_constant<impl::is_transparent<T>()> {};\n\n///////////////////////////////////////////////////////////////////////////////\n\n}  // namespace detail\nNLOHMANN_JSON_NAMESPACE_END\n\n// #include <nlohmann/detail/string_concat.hpp>\n//     __ _____ _____ _____\n//  __|  |   __|     |   | |  JSON for Modern C++\n// |  |  |__   |  |  | | | |  version 3.11.3\n// |_____|_____|_____|_|___|  https://github.com/nlohmann/json\n//\n// SPDX-FileCopyrightText: 2013-2023 Niels Lohmann <https://nlohmann.me>\n// SPDX-License-Identifier: MIT\n\n\n\n#include <cstring> // strlen\n#include <string> // string\n#include <utility> // forward\n\n// #include <nlohmann/detail/meta/cpp_future.hpp>\n\n// #include <nlohmann/detail/meta/detected.hpp>\n\n\nNLOHMANN_JSON_NAMESPACE_BEGIN\nnamespace detail\n{\n\ninline std::size_t concat_length()\n{\n    return 0;\n}\n\ntemplate<typename... Args>\ninline std::size_t concat_length(const char* cstr, const Args& ... rest);\n\ntemplate<typename StringType, typename... Args>\ninline std::size_t concat_length(const StringType& str, const Args& ... rest);\n\ntemplate<typename... Args>\ninline std::size_t concat_length(const char /*c*/, const Args& ... rest)\n{\n    return 1 + concat_length(rest...);\n}\n\ntemplate<typename... Args>\ninline std::size_t concat_length(const char* cstr, const Args& ... rest)\n{\n    // cppcheck-suppress ignoredReturnValue\n    return ::strlen(cstr) + concat_length(rest...);\n}\n\ntemplate<typename StringType, typename... Args>\ninline std::size_t concat_length(const StringType& str, const Args& ... rest)\n{\n    return str.size() + concat_length(rest...);\n}\n\ntemplate<typename OutStringType>\ninline void concat_into(OutStringType& /*out*/)\n{}\n\ntemplate<typename StringType, typename Arg>\nusing string_can_append = decltype(std::declval<StringType&>().append(std::declval < Arg && > ()));\n\ntemplate<typename StringType, typename Arg>\nusing detect_string_can_append = is_detected<string_can_append, StringType, Arg>;\n\ntemplate<typename StringType, typename Arg>\nusing string_can_append_op = decltype(std::declval<StringType&>() += std::declval < Arg && > ());\n\ntemplate<typename StringType, typename Arg>\nusing detect_string_can_append_op = is_detected<string_can_append_op, StringType, Arg>;\n\ntemplate<typename StringType, typename Arg>\nusing string_can_append_iter = decltype(std::declval<StringType&>().append(std::declval<const Arg&>().begin(), std::declval<const Arg&>().end()));\n\ntemplate<typename StringType, typename Arg>\nusing detect_string_can_append_iter = is_detected<string_can_append_iter, StringType, Arg>;\n\ntemplate<typename StringType, typename Arg>\nusing string_can_append_data = decltype(std::declval<StringType&>().append(std::declval<const Arg&>().data(), std::declval<const Arg&>().size()));\n\ntemplate<typename StringType, typename Arg>\nusing detect_string_can_append_data = is_detected<string_can_append_data, StringType, Arg>;\n\ntemplate < typename OutStringType, typename Arg, typename... Args,\n           enable_if_t < !detect_string_can_append<OutStringType, Arg>::value\n                         && detect_string_can_append_op<OutStringType, Arg>::value, int > = 0 >\ninline void concat_into(OutStringType& out, Arg && arg, Args && ... rest);\n\ntemplate < typename OutStringType, typename Arg, typename... Args,\n           enable_if_t < !detect_string_can_append<OutStringType, Arg>::value\n                         && !detect_string_can_append_op<OutStringType, Arg>::value\n                         && detect_string_can_append_iter<OutStringType, Arg>::value, int > = 0 >\ninline void concat_into(OutStringType& out, const Arg& arg, Args && ... rest);\n\ntemplate < typename OutStringType, typename Arg, typename... Args,\n           enable_if_t < !detect_string_can_append<OutStringType, Arg>::value\n                         && !detect_string_can_append_op<OutStringType, Arg>::value\n                         && !detect_string_can_append_iter<OutStringType, Arg>::value\n                         && detect_string_can_append_data<OutStringType, Arg>::value, int > = 0 >\ninline void concat_into(OutStringType& out, const Arg& arg, Args && ... rest);\n\ntemplate<typename OutStringType, typename Arg, typename... Args,\n         enable_if_t<detect_string_can_append<OutStringType, Arg>::value, int> = 0>\ninline void concat_into(OutStringType& out, Arg && arg, Args && ... rest)\n{\n    out.append(std::forward<Arg>(arg));\n    concat_into(out, std::forward<Args>(rest)...);\n}\n\ntemplate < typename OutStringType, typename Arg, typename... Args,\n           enable_if_t < !detect_string_can_append<OutStringType, Arg>::value\n                         && detect_string_can_append_op<OutStringType, Arg>::value, int > >\ninline void concat_into(OutStringType& out, Arg&& arg, Args&& ... rest)\n{\n    out += std::forward<Arg>(arg);\n    concat_into(out, std::forward<Args>(rest)...);\n}\n\ntemplate < typename OutStringType, typename Arg, typename... Args,\n           enable_if_t < !detect_string_can_append<OutStringType, Arg>::value\n                         && !detect_string_can_append_op<OutStringType, Arg>::value\n                         && detect_string_can_append_iter<OutStringType, Arg>::value, int > >\ninline void concat_into(OutStringType& out, const Arg& arg, Args&& ... rest)\n{\n    out.append(arg.begin(), arg.end());\n    concat_into(out, std::forward<Args>(rest)...);\n}\n\ntemplate < typename OutStringType, typename Arg, typename... Args,\n           enable_if_t < !detect_string_can_append<OutStringType, Arg>::value\n                         && !detect_string_can_append_op<OutStringType, Arg>::value\n                         && !detect_string_can_append_iter<OutStringType, Arg>::value\n                         && detect_string_can_append_data<OutStringType, Arg>::value, int > >\ninline void concat_into(OutStringType& out, const Arg& arg, Args&& ... rest)\n{\n    out.append(arg.data(), arg.size());\n    concat_into(out, std::forward<Args>(rest)...);\n}\n\ntemplate<typename OutStringType = std::string, typename... Args>\ninline OutStringType concat(Args && ... args)\n{\n    OutStringType str;\n    str.reserve(concat_length(args...));\n    concat_into(str, std::forward<Args>(args)...);\n    return str;\n}\n\n}  // namespace detail\nNLOHMANN_JSON_NAMESPACE_END\n\n\nNLOHMANN_JSON_NAMESPACE_BEGIN\nnamespace detail\n{\n\n////////////////\n// exceptions //\n////////////////\n\n/// @brief general exception of the @ref basic_json class\n/// @sa https://json.nlohmann.me/api/basic_json/exception/\nclass exception : public std::exception\n{\n  public:\n    /// returns the explanatory string\n    const char* what() const noexcept override\n    {\n        return m.what();\n    }\n\n    /// the id of the exception\n    const int id; // NOLINT(cppcoreguidelines-non-private-member-variables-in-classes)\n\n  protected:\n    JSON_HEDLEY_NON_NULL(3)\n    exception(int id_, const char* what_arg) : id(id_), m(what_arg) {} // NOLINT(bugprone-throw-keyword-missing)\n\n    static std::string name(const std::string& ename, int id_)\n    {\n        return concat(\"[json.exception.\", ename, '.', std::to_string(id_), \"] \");\n    }\n\n    static std::string diagnostics(std::nullptr_t /*leaf_element*/)\n    {\n        return \"\";\n    }\n\n    template<typename BasicJsonType>\n    static std::string diagnostics(const BasicJsonType* leaf_element)\n    {\n#if JSON_DIAGNOSTICS\n        std::vector<std::string> tokens;\n        for (const auto* current = leaf_element; current != nullptr && current->m_parent != nullptr; current = current->m_parent)\n        {\n            switch (current->m_parent->type())\n            {\n                case value_t::array:\n                {\n                    for (std::size_t i = 0; i < current->m_parent->m_data.m_value.array->size(); ++i)\n                    {\n                        if (&current->m_parent->m_data.m_value.array->operator[](i) == current)\n                        {\n                            tokens.emplace_back(std::to_string(i));\n                            break;\n                        }\n                    }\n                    break;\n                }\n\n                case value_t::object:\n                {\n                    for (const auto& element : *current->m_parent->m_data.m_value.object)\n                    {\n                        if (&element.second == current)\n                        {\n                            tokens.emplace_back(element.first.c_str());\n                            break;\n                        }\n                    }\n                    break;\n                }\n\n                case value_t::null: // LCOV_EXCL_LINE\n                case value_t::string: // LCOV_EXCL_LINE\n                case value_t::boolean: // LCOV_EXCL_LINE\n                case value_t::number_integer: // LCOV_EXCL_LINE\n                case value_t::number_unsigned: // LCOV_EXCL_LINE\n                case value_t::number_float: // LCOV_EXCL_LINE\n                case value_t::binary: // LCOV_EXCL_LINE\n                case value_t::discarded: // LCOV_EXCL_LINE\n                default:   // LCOV_EXCL_LINE\n                    break; // LCOV_EXCL_LINE\n            }\n        }\n\n        if (tokens.empty())\n        {\n            return \"\";\n        }\n\n        auto str = std::accumulate(tokens.rbegin(), tokens.rend(), std::string{},\n                                   [](const std::string & a, const std::string & b)\n        {\n            return concat(a, '/', detail::escape(b));\n        });\n        return concat('(', str, \") \");\n#else\n        static_cast<void>(leaf_element);\n        return \"\";\n#endif\n    }\n\n  private:\n    /// an exception object as storage for error messages\n    std::runtime_error m;\n};\n\n/// @brief exception indicating a parse error\n/// @sa https://json.nlohmann.me/api/basic_json/parse_error/\nclass parse_error : public exception\n{\n  public:\n    /*!\n    @brief create a parse error exception\n    @param[in] id_       the id of the exception\n    @param[in] pos       the position where the error occurred (or with\n                         chars_read_total=0 if the position cannot be\n                         determined)\n    @param[in] what_arg  the explanatory string\n    @return parse_error object\n    */\n    template<typename BasicJsonContext, enable_if_t<is_basic_json_context<BasicJsonContext>::value, int> = 0>\n    static parse_error create(int id_, const position_t& pos, const std::string& what_arg, BasicJsonContext context)\n    {\n        const std::string w = concat(exception::name(\"parse_error\", id_), \"parse error\",\n                                     position_string(pos), \": \", exception::diagnostics(context), what_arg);\n        return {id_, pos.chars_read_total, w.c_str()};\n    }\n\n    template<typename BasicJsonContext, enable_if_t<is_basic_json_context<BasicJsonContext>::value, int> = 0>\n    static parse_error create(int id_, std::size_t byte_, const std::string& what_arg, BasicJsonContext context)\n    {\n        const std::string w = concat(exception::name(\"parse_error\", id_), \"parse error\",\n                                     (byte_ != 0 ? (concat(\" at byte \", std::to_string(byte_))) : \"\"),\n                                     \": \", exception::diagnostics(context), what_arg);\n        return {id_, byte_, w.c_str()};\n    }\n\n    /*!\n    @brief byte index of the parse error\n\n    The byte index of the last read character in the input file.\n\n    @note For an input with n bytes, 1 is the index of the first character and\n          n+1 is the index of the terminating null byte or the end of file.\n          This also holds true when reading a byte vector (CBOR or MessagePack).\n    */\n    const std::size_t byte;\n\n  private:\n    parse_error(int id_, std::size_t byte_, const char* what_arg)\n        : exception(id_, what_arg), byte(byte_) {}\n\n    static std::string position_string(const position_t& pos)\n    {\n        return concat(\" at line \", std::to_string(pos.lines_read + 1),\n                      \", column \", std::to_string(pos.chars_read_current_line));\n    }\n};\n\n/// @brief exception indicating errors with iterators\n/// @sa https://json.nlohmann.me/api/basic_json/invalid_iterator/\nclass invalid_iterator : public exception\n{\n  public:\n    template<typename BasicJsonContext, enable_if_t<is_basic_json_context<BasicJsonContext>::value, int> = 0>\n    static invalid_iterator create(int id_, const std::string& what_arg, BasicJsonContext context)\n    {\n        const std::string w = concat(exception::name(\"invalid_iterator\", id_), exception::diagnostics(context), what_arg);\n        return {id_, w.c_str()};\n    }\n\n  private:\n    JSON_HEDLEY_NON_NULL(3)\n    invalid_iterator(int id_, const char* what_arg)\n        : exception(id_, what_arg) {}\n};\n\n/// @brief exception indicating executing a member function with a wrong type\n/// @sa https://json.nlohmann.me/api/basic_json/type_error/\nclass type_error : public exception\n{\n  public:\n    template<typename BasicJsonContext, enable_if_t<is_basic_json_context<BasicJsonContext>::value, int> = 0>\n    static type_error create(int id_, const std::string& what_arg, BasicJsonContext context)\n    {\n        const std::string w = concat(exception::name(\"type_error\", id_), exception::diagnostics(context), what_arg);\n        return {id_, w.c_str()};\n    }\n\n  private:\n    JSON_HEDLEY_NON_NULL(3)\n    type_error(int id_, const char* what_arg) : exception(id_, what_arg) {}\n};\n\n/// @brief exception indicating access out of the defined range\n/// @sa https://json.nlohmann.me/api/basic_json/out_of_range/\nclass out_of_range : public exception\n{\n  public:\n    template<typename BasicJsonContext, enable_if_t<is_basic_json_context<BasicJsonContext>::value, int> = 0>\n    static out_of_range create(int id_, const std::string& what_arg, BasicJsonContext context)\n    {\n        const std::string w = concat(exception::name(\"out_of_range\", id_), exception::diagnostics(context), what_arg);\n        return {id_, w.c_str()};\n    }\n\n  private:\n    JSON_HEDLEY_NON_NULL(3)\n    out_of_range(int id_, const char* what_arg) : exception(id_, what_arg) {}\n};\n\n/// @brief exception indicating other library errors\n/// @sa https://json.nlohmann.me/api/basic_json/other_error/\nclass other_error : public exception\n{\n  public:\n    template<typename BasicJsonContext, enable_if_t<is_basic_json_context<BasicJsonContext>::value, int> = 0>\n    static other_error create(int id_, const std::string& what_arg, BasicJsonContext context)\n    {\n        const std::string w = concat(exception::name(\"other_error\", id_), exception::diagnostics(context), what_arg);\n        return {id_, w.c_str()};\n    }\n\n  private:\n    JSON_HEDLEY_NON_NULL(3)\n    other_error(int id_, const char* what_arg) : exception(id_, what_arg) {}\n};\n\n}  // namespace detail\nNLOHMANN_JSON_NAMESPACE_END\n\n// #include <nlohmann/detail/macro_scope.hpp>\n\n// #include <nlohmann/detail/meta/cpp_future.hpp>\n\n// #include <nlohmann/detail/meta/identity_tag.hpp>\n//     __ _____ _____ _____\n//  __|  |   __|     |   | |  JSON for Modern C++\n// |  |  |__   |  |  | | | |  version 3.11.3\n// |_____|_____|_____|_|___|  https://github.com/nlohmann/json\n//\n// SPDX-FileCopyrightText: 2013-2023 Niels Lohmann <https://nlohmann.me>\n// SPDX-License-Identifier: MIT\n\n\n\n// #include <nlohmann/detail/abi_macros.hpp>\n\n\nNLOHMANN_JSON_NAMESPACE_BEGIN\nnamespace detail\n{\n\n// dispatching helper struct\ntemplate <class T> struct identity_tag {};\n\n}  // namespace detail\nNLOHMANN_JSON_NAMESPACE_END\n\n// #include <nlohmann/detail/meta/std_fs.hpp>\n//     __ _____ _____ _____\n//  __|  |   __|     |   | |  JSON for Modern C++\n// |  |  |__   |  |  | | | |  version 3.11.3\n// |_____|_____|_____|_|___|  https://github.com/nlohmann/json\n//\n// SPDX-FileCopyrightText: 2013-2023 Niels Lohmann <https://nlohmann.me>\n// SPDX-License-Identifier: MIT\n\n\n\n// #include <nlohmann/detail/macro_scope.hpp>\n\n\n#if JSON_HAS_EXPERIMENTAL_FILESYSTEM\n#include <experimental/filesystem>\nNLOHMANN_JSON_NAMESPACE_BEGIN\nnamespace detail\n{\nnamespace std_fs = std::experimental::filesystem;\n}  // namespace detail\nNLOHMANN_JSON_NAMESPACE_END\n#elif JSON_HAS_FILESYSTEM\n#include <filesystem>\nNLOHMANN_JSON_NAMESPACE_BEGIN\nnamespace detail\n{\nnamespace std_fs = std::filesystem;\n}  // namespace detail\nNLOHMANN_JSON_NAMESPACE_END\n#endif\n\n// #include <nlohmann/detail/meta/type_traits.hpp>\n\n// #include <nlohmann/detail/string_concat.hpp>\n\n// #include <nlohmann/detail/value_t.hpp>\n\n\nNLOHMANN_JSON_NAMESPACE_BEGIN\nnamespace detail\n{\n\ntemplate<typename BasicJsonType>\ninline void from_json(const BasicJsonType& j, typename std::nullptr_t& n)\n{\n    if (JSON_HEDLEY_UNLIKELY(!j.is_null()))\n    {\n        JSON_THROW(type_error::create(302, concat(\"type must be null, but is \", j.type_name()), &j));\n    }\n    n = nullptr;\n}\n\n// overloads for basic_json template parameters\ntemplate < typename BasicJsonType, typename ArithmeticType,\n           enable_if_t < std::is_arithmetic<ArithmeticType>::value&&\n                         !std::is_same<ArithmeticType, typename BasicJsonType::boolean_t>::value,\n                         int > = 0 >\nvoid get_arithmetic_value(const BasicJsonType& j, ArithmeticType& val)\n{\n    switch (static_cast<value_t>(j))\n    {\n        case value_t::number_unsigned:\n        {\n            val = static_cast<ArithmeticType>(*j.template get_ptr<const typename BasicJsonType::number_unsigned_t*>());\n            break;\n        }\n        case value_t::number_integer:\n        {\n            val = static_cast<ArithmeticType>(*j.template get_ptr<const typename BasicJsonType::number_integer_t*>());\n            break;\n        }\n        case value_t::number_float:\n        {\n            val = static_cast<ArithmeticType>(*j.template get_ptr<const typename BasicJsonType::number_float_t*>());\n            break;\n        }\n\n        case value_t::null:\n        case value_t::object:\n        case value_t::array:\n        case value_t::string:\n        case value_t::boolean:\n        case value_t::binary:\n        case value_t::discarded:\n        default:\n            JSON_THROW(type_error::create(302, concat(\"type must be number, but is \", j.type_name()), &j));\n    }\n}\n\ntemplate<typename BasicJsonType>\ninline void from_json(const BasicJsonType& j, typename BasicJsonType::boolean_t& b)\n{\n    if (JSON_HEDLEY_UNLIKELY(!j.is_boolean()))\n    {\n        JSON_THROW(type_error::create(302, concat(\"type must be boolean, but is \", j.type_name()), &j));\n    }\n    b = *j.template get_ptr<const typename BasicJsonType::boolean_t*>();\n}\n\ntemplate<typename BasicJsonType>\ninline void from_json(const BasicJsonType& j, typename BasicJsonType::string_t& s)\n{\n    if (JSON_HEDLEY_UNLIKELY(!j.is_string()))\n    {\n        JSON_THROW(type_error::create(302, concat(\"type must be string, but is \", j.type_name()), &j));\n    }\n    s = *j.template get_ptr<const typename BasicJsonType::string_t*>();\n}\n\ntemplate <\n    typename BasicJsonType, typename StringType,\n    enable_if_t <\n        std::is_assignable<StringType&, const typename BasicJsonType::string_t>::value\n        && is_detected_exact<typename BasicJsonType::string_t::value_type, value_type_t, StringType>::value\n        && !std::is_same<typename BasicJsonType::string_t, StringType>::value\n        && !is_json_ref<StringType>::value, int > = 0 >\ninline void from_json(const BasicJsonType& j, StringType& s)\n{\n    if (JSON_HEDLEY_UNLIKELY(!j.is_string()))\n    {\n        JSON_THROW(type_error::create(302, concat(\"type must be string, but is \", j.type_name()), &j));\n    }\n\n    s = *j.template get_ptr<const typename BasicJsonType::string_t*>();\n}\n\ntemplate<typename BasicJsonType>\ninline void from_json(const BasicJsonType& j, typename BasicJsonType::number_float_t& val)\n{\n    get_arithmetic_value(j, val);\n}\n\ntemplate<typename BasicJsonType>\ninline void from_json(const BasicJsonType& j, typename BasicJsonType::number_unsigned_t& val)\n{\n    get_arithmetic_value(j, val);\n}\n\ntemplate<typename BasicJsonType>\ninline void from_json(const BasicJsonType& j, typename BasicJsonType::number_integer_t& val)\n{\n    get_arithmetic_value(j, val);\n}\n\n#if !JSON_DISABLE_ENUM_SERIALIZATION\ntemplate<typename BasicJsonType, typename EnumType,\n         enable_if_t<std::is_enum<EnumType>::value, int> = 0>\ninline void from_json(const BasicJsonType& j, EnumType& e)\n{\n    typename std::underlying_type<EnumType>::type val;\n    get_arithmetic_value(j, val);\n    e = static_cast<EnumType>(val);\n}\n#endif  // JSON_DISABLE_ENUM_SERIALIZATION\n\n// forward_list doesn't have an insert method\ntemplate<typename BasicJsonType, typename T, typename Allocator,\n         enable_if_t<is_getable<BasicJsonType, T>::value, int> = 0>\ninline void from_json(const BasicJsonType& j, std::forward_list<T, Allocator>& l)\n{\n    if (JSON_HEDLEY_UNLIKELY(!j.is_array()))\n    {\n        JSON_THROW(type_error::create(302, concat(\"type must be array, but is \", j.type_name()), &j));\n    }\n    l.clear();\n    std::transform(j.rbegin(), j.rend(),\n                   std::front_inserter(l), [](const BasicJsonType & i)\n    {\n        return i.template get<T>();\n    });\n}\n\n// valarray doesn't have an insert method\ntemplate<typename BasicJsonType, typename T,\n         enable_if_t<is_getable<BasicJsonType, T>::value, int> = 0>\ninline void from_json(const BasicJsonType& j, std::valarray<T>& l)\n{\n    if (JSON_HEDLEY_UNLIKELY(!j.is_array()))\n    {\n        JSON_THROW(type_error::create(302, concat(\"type must be array, but is \", j.type_name()), &j));\n    }\n    l.resize(j.size());\n    std::transform(j.begin(), j.end(), std::begin(l),\n                   [](const BasicJsonType & elem)\n    {\n        return elem.template get<T>();\n    });\n}\n\ntemplate<typename BasicJsonType, typename T, std::size_t N>\nauto from_json(const BasicJsonType& j, T (&arr)[N])  // NOLINT(cppcoreguidelines-avoid-c-arrays,hicpp-avoid-c-arrays,modernize-avoid-c-arrays)\n-> decltype(j.template get<T>(), void())\n{\n    for (std::size_t i = 0; i < N; ++i)\n    {\n        arr[i] = j.at(i).template get<T>();\n    }\n}\n\ntemplate<typename BasicJsonType>\ninline void from_json_array_impl(const BasicJsonType& j, typename BasicJsonType::array_t& arr, priority_tag<3> /*unused*/)\n{\n    arr = *j.template get_ptr<const typename BasicJsonType::array_t*>();\n}\n\ntemplate<typename BasicJsonType, typename T, std::size_t N>\nauto from_json_array_impl(const BasicJsonType& j, std::array<T, N>& arr,\n                          priority_tag<2> /*unused*/)\n-> decltype(j.template get<T>(), void())\n{\n    for (std::size_t i = 0; i < N; ++i)\n    {\n        arr[i] = j.at(i).template get<T>();\n    }\n}\n\ntemplate<typename BasicJsonType, typename ConstructibleArrayType,\n         enable_if_t<\n             std::is_assignable<ConstructibleArrayType&, ConstructibleArrayType>::value,\n             int> = 0>\nauto from_json_array_impl(const BasicJsonType& j, ConstructibleArrayType& arr, priority_tag<1> /*unused*/)\n-> decltype(\n    arr.reserve(std::declval<typename ConstructibleArrayType::size_type>()),\n    j.template get<typename ConstructibleArrayType::value_type>(),\n    void())\n{\n    using std::end;\n\n    ConstructibleArrayType ret;\n    ret.reserve(j.size());\n    std::transform(j.begin(), j.end(),\n                   std::inserter(ret, end(ret)), [](const BasicJsonType & i)\n    {\n        // get<BasicJsonType>() returns *this, this won't call a from_json\n        // method when value_type is BasicJsonType\n        return i.template get<typename ConstructibleArrayType::value_type>();\n    });\n    arr = std::move(ret);\n}\n\ntemplate<typename BasicJsonType, typename ConstructibleArrayType,\n         enable_if_t<\n             std::is_assignable<ConstructibleArrayType&, ConstructibleArrayType>::value,\n             int> = 0>\ninline void from_json_array_impl(const BasicJsonType& j, ConstructibleArrayType& arr,\n                                 priority_tag<0> /*unused*/)\n{\n    using std::end;\n\n    ConstructibleArrayType ret;\n    std::transform(\n        j.begin(), j.end(), std::inserter(ret, end(ret)),\n        [](const BasicJsonType & i)\n    {\n        // get<BasicJsonType>() returns *this, this won't call a from_json\n        // method when value_type is BasicJsonType\n        return i.template get<typename ConstructibleArrayType::value_type>();\n    });\n    arr = std::move(ret);\n}\n\ntemplate < typename BasicJsonType, typename ConstructibleArrayType,\n           enable_if_t <\n               is_constructible_array_type<BasicJsonType, ConstructibleArrayType>::value&&\n               !is_constructible_object_type<BasicJsonType, ConstructibleArrayType>::value&&\n               !is_constructible_string_type<BasicJsonType, ConstructibleArrayType>::value&&\n               !std::is_same<ConstructibleArrayType, typename BasicJsonType::binary_t>::value&&\n               !is_basic_json<ConstructibleArrayType>::value,\n               int > = 0 >\nauto from_json(const BasicJsonType& j, ConstructibleArrayType& arr)\n-> decltype(from_json_array_impl(j, arr, priority_tag<3> {}),\nj.template get<typename ConstructibleArrayType::value_type>(),\nvoid())\n{\n    if (JSON_HEDLEY_UNLIKELY(!j.is_array()))\n    {\n        JSON_THROW(type_error::create(302, concat(\"type must be array, but is \", j.type_name()), &j));\n    }\n\n    from_json_array_impl(j, arr, priority_tag<3> {});\n}\n\ntemplate < typename BasicJsonType, typename T, std::size_t... Idx >\nstd::array<T, sizeof...(Idx)> from_json_inplace_array_impl(BasicJsonType&& j,\n        identity_tag<std::array<T, sizeof...(Idx)>> /*unused*/, index_sequence<Idx...> /*unused*/)\n{\n    return { { std::forward<BasicJsonType>(j).at(Idx).template get<T>()... } };\n}\n\ntemplate < typename BasicJsonType, typename T, std::size_t N >\nauto from_json(BasicJsonType&& j, identity_tag<std::array<T, N>> tag)\n-> decltype(from_json_inplace_array_impl(std::forward<BasicJsonType>(j), tag, make_index_sequence<N> {}))\n{\n    if (JSON_HEDLEY_UNLIKELY(!j.is_array()))\n    {\n        JSON_THROW(type_error::create(302, concat(\"type must be array, but is \", j.type_name()), &j));\n    }\n\n    return from_json_inplace_array_impl(std::forward<BasicJsonType>(j), tag, make_index_sequence<N> {});\n}\n\ntemplate<typename BasicJsonType>\ninline void from_json(const BasicJsonType& j, typename BasicJsonType::binary_t& bin)\n{\n    if (JSON_HEDLEY_UNLIKELY(!j.is_binary()))\n    {\n        JSON_THROW(type_error::create(302, concat(\"type must be binary, but is \", j.type_name()), &j));\n    }\n\n    bin = *j.template get_ptr<const typename BasicJsonType::binary_t*>();\n}\n\ntemplate<typename BasicJsonType, typename ConstructibleObjectType,\n         enable_if_t<is_constructible_object_type<BasicJsonType, ConstructibleObjectType>::value, int> = 0>\ninline void from_json(const BasicJsonType& j, ConstructibleObjectType& obj)\n{\n    if (JSON_HEDLEY_UNLIKELY(!j.is_object()))\n    {\n        JSON_THROW(type_error::create(302, concat(\"type must be object, but is \", j.type_name()), &j));\n    }\n\n    ConstructibleObjectType ret;\n    const auto* inner_object = j.template get_ptr<const typename BasicJsonType::object_t*>();\n    using value_type = typename ConstructibleObjectType::value_type;\n    std::transform(\n        inner_object->begin(), inner_object->end(),\n        std::inserter(ret, ret.begin()),\n        [](typename BasicJsonType::object_t::value_type const & p)\n    {\n        return value_type(p.first, p.second.template get<typename ConstructibleObjectType::mapped_type>());\n    });\n    obj = std::move(ret);\n}\n\n// overload for arithmetic types, not chosen for basic_json template arguments\n// (BooleanType, etc..); note: Is it really necessary to provide explicit\n// overloads for boolean_t etc. in case of a custom BooleanType which is not\n// an arithmetic type?\ntemplate < typename BasicJsonType, typename ArithmeticType,\n           enable_if_t <\n               std::is_arithmetic<ArithmeticType>::value&&\n               !std::is_same<ArithmeticType, typename BasicJsonType::number_unsigned_t>::value&&\n               !std::is_same<ArithmeticType, typename BasicJsonType::number_integer_t>::value&&\n               !std::is_same<ArithmeticType, typename BasicJsonType::number_float_t>::value&&\n               !std::is_same<ArithmeticType, typename BasicJsonType::boolean_t>::value,\n               int > = 0 >\ninline void from_json(const BasicJsonType& j, ArithmeticType& val)\n{\n    switch (static_cast<value_t>(j))\n    {\n        case value_t::number_unsigned:\n        {\n            val = static_cast<ArithmeticType>(*j.template get_ptr<const typename BasicJsonType::number_unsigned_t*>());\n            break;\n        }\n        case value_t::number_integer:\n        {\n            val = static_cast<ArithmeticType>(*j.template get_ptr<const typename BasicJsonType::number_integer_t*>());\n            break;\n        }\n        case value_t::number_float:\n        {\n            val = static_cast<ArithmeticType>(*j.template get_ptr<const typename BasicJsonType::number_float_t*>());\n            break;\n        }\n        case value_t::boolean:\n        {\n            val = static_cast<ArithmeticType>(*j.template get_ptr<const typename BasicJsonType::boolean_t*>());\n            break;\n        }\n\n        case value_t::null:\n        case value_t::object:\n        case value_t::array:\n        case value_t::string:\n        case value_t::binary:\n        case value_t::discarded:\n        default:\n            JSON_THROW(type_error::create(302, concat(\"type must be number, but is \", j.type_name()), &j));\n    }\n}\n\ntemplate<typename BasicJsonType, typename... Args, std::size_t... Idx>\nstd::tuple<Args...> from_json_tuple_impl_base(BasicJsonType&& j, index_sequence<Idx...> /*unused*/)\n{\n    return std::make_tuple(std::forward<BasicJsonType>(j).at(Idx).template get<Args>()...);\n}\n\ntemplate < typename BasicJsonType, class A1, class A2 >\nstd::pair<A1, A2> from_json_tuple_impl(BasicJsonType&& j, identity_tag<std::pair<A1, A2>> /*unused*/, priority_tag<0> /*unused*/)\n{\n    return {std::forward<BasicJsonType>(j).at(0).template get<A1>(),\n            std::forward<BasicJsonType>(j).at(1).template get<A2>()};\n}\n\ntemplate<typename BasicJsonType, typename A1, typename A2>\ninline void from_json_tuple_impl(BasicJsonType&& j, std::pair<A1, A2>& p, priority_tag<1> /*unused*/)\n{\n    p = from_json_tuple_impl(std::forward<BasicJsonType>(j), identity_tag<std::pair<A1, A2>> {}, priority_tag<0> {});\n}\n\ntemplate<typename BasicJsonType, typename... Args>\nstd::tuple<Args...> from_json_tuple_impl(BasicJsonType&& j, identity_tag<std::tuple<Args...>> /*unused*/, priority_tag<2> /*unused*/)\n{\n    return from_json_tuple_impl_base<BasicJsonType, Args...>(std::forward<BasicJsonType>(j), index_sequence_for<Args...> {});\n}\n\ntemplate<typename BasicJsonType, typename... Args>\ninline void from_json_tuple_impl(BasicJsonType&& j, std::tuple<Args...>& t, priority_tag<3> /*unused*/)\n{\n    t = from_json_tuple_impl_base<BasicJsonType, Args...>(std::forward<BasicJsonType>(j), index_sequence_for<Args...> {});\n}\n\ntemplate<typename BasicJsonType, typename TupleRelated>\nauto from_json(BasicJsonType&& j, TupleRelated&& t)\n-> decltype(from_json_tuple_impl(std::forward<BasicJsonType>(j), std::forward<TupleRelated>(t), priority_tag<3> {}))\n{\n    if (JSON_HEDLEY_UNLIKELY(!j.is_array()))\n    {\n        JSON_THROW(type_error::create(302, concat(\"type must be array, but is \", j.type_name()), &j));\n    }\n\n    return from_json_tuple_impl(std::forward<BasicJsonType>(j), std::forward<TupleRelated>(t), priority_tag<3> {});\n}\n\ntemplate < typename BasicJsonType, typename Key, typename Value, typename Compare, typename Allocator,\n           typename = enable_if_t < !std::is_constructible <\n                                        typename BasicJsonType::string_t, Key >::value >>\ninline void from_json(const BasicJsonType& j, std::map<Key, Value, Compare, Allocator>& m)\n{\n    if (JSON_HEDLEY_UNLIKELY(!j.is_array()))\n    {\n        JSON_THROW(type_error::create(302, concat(\"type must be array, but is \", j.type_name()), &j));\n    }\n    m.clear();\n    for (const auto& p : j)\n    {\n        if (JSON_HEDLEY_UNLIKELY(!p.is_array()))\n        {\n            JSON_THROW(type_error::create(302, concat(\"type must be array, but is \", p.type_name()), &j));\n        }\n        m.emplace(p.at(0).template get<Key>(), p.at(1).template get<Value>());\n    }\n}\n\ntemplate < typename BasicJsonType, typename Key, typename Value, typename Hash, typename KeyEqual, typename Allocator,\n           typename = enable_if_t < !std::is_constructible <\n                                        typename BasicJsonType::string_t, Key >::value >>\ninline void from_json(const BasicJsonType& j, std::unordered_map<Key, Value, Hash, KeyEqual, Allocator>& m)\n{\n    if (JSON_HEDLEY_UNLIKELY(!j.is_array()))\n    {\n        JSON_THROW(type_error::create(302, concat(\"type must be array, but is \", j.type_name()), &j));\n    }\n    m.clear();\n    for (const auto& p : j)\n    {\n        if (JSON_HEDLEY_UNLIKELY(!p.is_array()))\n        {\n            JSON_THROW(type_error::create(302, concat(\"type must be array, but is \", p.type_name()), &j));\n        }\n        m.emplace(p.at(0).template get<Key>(), p.at(1).template get<Value>());\n    }\n}\n\n#if JSON_HAS_FILESYSTEM || JSON_HAS_EXPERIMENTAL_FILESYSTEM\ntemplate<typename BasicJsonType>\ninline void from_json(const BasicJsonType& j, std_fs::path& p)\n{\n    if (JSON_HEDLEY_UNLIKELY(!j.is_string()))\n    {\n        JSON_THROW(type_error::create(302, concat(\"type must be string, but is \", j.type_name()), &j));\n    }\n    p = *j.template get_ptr<const typename BasicJsonType::string_t*>();\n}\n#endif\n\nstruct from_json_fn\n{\n    template<typename BasicJsonType, typename T>\n    auto operator()(const BasicJsonType& j, T&& val) const\n    noexcept(noexcept(from_json(j, std::forward<T>(val))))\n    -> decltype(from_json(j, std::forward<T>(val)))\n    {\n        return from_json(j, std::forward<T>(val));\n    }\n};\n\n}  // namespace detail\n\n#ifndef JSON_HAS_CPP_17\n/// namespace to hold default `from_json` function\n/// to see why this is required:\n/// http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4381.html\nnamespace // NOLINT(cert-dcl59-cpp,fuchsia-header-anon-namespaces,google-build-namespaces)\n{\n#endif\nJSON_INLINE_VARIABLE constexpr const auto& from_json = // NOLINT(misc-definitions-in-headers)\n    detail::static_const<detail::from_json_fn>::value;\n#ifndef JSON_HAS_CPP_17\n}  // namespace\n#endif\n\nNLOHMANN_JSON_NAMESPACE_END\n\n// #include <nlohmann/detail/conversions/to_json.hpp>\n//     __ _____ _____ _____\n//  __|  |   __|     |   | |  JSON for Modern C++\n// |  |  |__   |  |  | | | |  version 3.11.3\n// |_____|_____|_____|_|___|  https://github.com/nlohmann/json\n//\n// SPDX-FileCopyrightText: 2013-2023 Niels Lohmann <https://nlohmann.me>\n// SPDX-License-Identifier: MIT\n\n\n\n#include <algorithm> // copy\n#include <iterator> // begin, end\n#include <string> // string\n#include <tuple> // tuple, get\n#include <type_traits> // is_same, is_constructible, is_floating_point, is_enum, underlying_type\n#include <utility> // move, forward, declval, pair\n#include <valarray> // valarray\n#include <vector> // vector\n\n// #include <nlohmann/detail/iterators/iteration_proxy.hpp>\n//     __ _____ _____ _____\n//  __|  |   __|     |   | |  JSON for Modern C++\n// |  |  |__   |  |  | | | |  version 3.11.3\n// |_____|_____|_____|_|___|  https://github.com/nlohmann/json\n//\n// SPDX-FileCopyrightText: 2013-2023 Niels Lohmann <https://nlohmann.me>\n// SPDX-License-Identifier: MIT\n\n\n\n#include <cstddef> // size_t\n#include <iterator> // input_iterator_tag\n#include <string> // string, to_string\n#include <tuple> // tuple_size, get, tuple_element\n#include <utility> // move\n\n#if JSON_HAS_RANGES\n    #include <ranges> // enable_borrowed_range\n#endif\n\n// #include <nlohmann/detail/abi_macros.hpp>\n\n// #include <nlohmann/detail/meta/type_traits.hpp>\n\n// #include <nlohmann/detail/value_t.hpp>\n\n\nNLOHMANN_JSON_NAMESPACE_BEGIN\nnamespace detail\n{\n\ntemplate<typename string_type>\nvoid int_to_string( string_type& target, std::size_t value )\n{\n    // For ADL\n    using std::to_string;\n    target = to_string(value);\n}\ntemplate<typename IteratorType> class iteration_proxy_value\n{\n  public:\n    using difference_type = std::ptrdiff_t;\n    using value_type = iteration_proxy_value;\n    using pointer = value_type *;\n    using reference = value_type &;\n    using iterator_category = std::input_iterator_tag;\n    using string_type = typename std::remove_cv< typename std::remove_reference<decltype( std::declval<IteratorType>().key() ) >::type >::type;\n\n  private:\n    /// the iterator\n    IteratorType anchor{};\n    /// an index for arrays (used to create key names)\n    std::size_t array_index = 0;\n    /// last stringified array index\n    mutable std::size_t array_index_last = 0;\n    /// a string representation of the array index\n    mutable string_type array_index_str = \"0\";\n    /// an empty string (to return a reference for primitive values)\n    string_type empty_str{};\n\n  public:\n    explicit iteration_proxy_value() = default;\n    explicit iteration_proxy_value(IteratorType it, std::size_t array_index_ = 0)\n    noexcept(std::is_nothrow_move_constructible<IteratorType>::value\n             && std::is_nothrow_default_constructible<string_type>::value)\n        : anchor(std::move(it))\n        , array_index(array_index_)\n    {}\n\n    iteration_proxy_value(iteration_proxy_value const&) = default;\n    iteration_proxy_value& operator=(iteration_proxy_value const&) = default;\n    // older GCCs are a bit fussy and require explicit noexcept specifiers on defaulted functions\n    iteration_proxy_value(iteration_proxy_value&&)\n    noexcept(std::is_nothrow_move_constructible<IteratorType>::value\n             && std::is_nothrow_move_constructible<string_type>::value) = default; // NOLINT(hicpp-noexcept-move,performance-noexcept-move-constructor,cppcoreguidelines-noexcept-move-operations)\n    iteration_proxy_value& operator=(iteration_proxy_value&&)\n    noexcept(std::is_nothrow_move_assignable<IteratorType>::value\n             && std::is_nothrow_move_assignable<string_type>::value) = default; // NOLINT(hicpp-noexcept-move,performance-noexcept-move-constructor,cppcoreguidelines-noexcept-move-operations)\n    ~iteration_proxy_value() = default;\n\n    /// dereference operator (needed for range-based for)\n    const iteration_proxy_value& operator*() const\n    {\n        return *this;\n    }\n\n    /// increment operator (needed for range-based for)\n    iteration_proxy_value& operator++()\n    {\n        ++anchor;\n        ++array_index;\n\n        return *this;\n    }\n\n    iteration_proxy_value operator++(int)& // NOLINT(cert-dcl21-cpp)\n    {\n        auto tmp = iteration_proxy_value(anchor, array_index);\n        ++anchor;\n        ++array_index;\n        return tmp;\n    }\n\n    /// equality operator (needed for InputIterator)\n    bool operator==(const iteration_proxy_value& o) const\n    {\n        return anchor == o.anchor;\n    }\n\n    /// inequality operator (needed for range-based for)\n    bool operator!=(const iteration_proxy_value& o) const\n    {\n        return anchor != o.anchor;\n    }\n\n    /// return key of the iterator\n    const string_type& key() const\n    {\n        JSON_ASSERT(anchor.m_object != nullptr);\n\n        switch (anchor.m_object->type())\n        {\n            // use integer array index as key\n            case value_t::array:\n            {\n                if (array_index != array_index_last)\n                {\n                    int_to_string( array_index_str, array_index );\n                    array_index_last = array_index;\n                }\n                return array_index_str;\n            }\n\n            // use key from the object\n            case value_t::object:\n                return anchor.key();\n\n            // use an empty key for all primitive types\n            case value_t::null:\n            case value_t::string:\n            case value_t::boolean:\n            case value_t::number_integer:\n            case value_t::number_unsigned:\n            case value_t::number_float:\n            case value_t::binary:\n            case value_t::discarded:\n            default:\n                return empty_str;\n        }\n    }\n\n    /// return value of the iterator\n    typename IteratorType::reference value() const\n    {\n        return anchor.value();\n    }\n};\n\n/// proxy class for the items() function\ntemplate<typename IteratorType> class iteration_proxy\n{\n  private:\n    /// the container to iterate\n    typename IteratorType::pointer container = nullptr;\n\n  public:\n    explicit iteration_proxy() = default;\n\n    /// construct iteration proxy from a container\n    explicit iteration_proxy(typename IteratorType::reference cont) noexcept\n        : container(&cont) {}\n\n    iteration_proxy(iteration_proxy const&) = default;\n    iteration_proxy& operator=(iteration_proxy const&) = default;\n    iteration_proxy(iteration_proxy&&) noexcept = default;\n    iteration_proxy& operator=(iteration_proxy&&) noexcept = default;\n    ~iteration_proxy() = default;\n\n    /// return iterator begin (needed for range-based for)\n    iteration_proxy_value<IteratorType> begin() const noexcept\n    {\n        return iteration_proxy_value<IteratorType>(container->begin());\n    }\n\n    /// return iterator end (needed for range-based for)\n    iteration_proxy_value<IteratorType> end() const noexcept\n    {\n        return iteration_proxy_value<IteratorType>(container->end());\n    }\n};\n\n// Structured Bindings Support\n// For further reference see https://blog.tartanllama.xyz/structured-bindings/\n// And see https://github.com/nlohmann/json/pull/1391\ntemplate<std::size_t N, typename IteratorType, enable_if_t<N == 0, int> = 0>\nauto get(const nlohmann::detail::iteration_proxy_value<IteratorType>& i) -> decltype(i.key())\n{\n    return i.key();\n}\n// Structured Bindings Support\n// For further reference see https://blog.tartanllama.xyz/structured-bindings/\n// And see https://github.com/nlohmann/json/pull/1391\ntemplate<std::size_t N, typename IteratorType, enable_if_t<N == 1, int> = 0>\nauto get(const nlohmann::detail::iteration_proxy_value<IteratorType>& i) -> decltype(i.value())\n{\n    return i.value();\n}\n\n}  // namespace detail\nNLOHMANN_JSON_NAMESPACE_END\n\n// The Addition to the STD Namespace is required to add\n// Structured Bindings Support to the iteration_proxy_value class\n// For further reference see https://blog.tartanllama.xyz/structured-bindings/\n// And see https://github.com/nlohmann/json/pull/1391\nnamespace std\n{\n\n#if defined(__clang__)\n    // Fix: https://github.com/nlohmann/json/issues/1401\n    #pragma clang diagnostic push\n    #pragma clang diagnostic ignored \"-Wmismatched-tags\"\n#endif\ntemplate<typename IteratorType>\nclass tuple_size<::nlohmann::detail::iteration_proxy_value<IteratorType>> // NOLINT(cert-dcl58-cpp)\n            : public std::integral_constant<std::size_t, 2> {};\n\ntemplate<std::size_t N, typename IteratorType>\nclass tuple_element<N, ::nlohmann::detail::iteration_proxy_value<IteratorType >> // NOLINT(cert-dcl58-cpp)\n{\n  public:\n    using type = decltype(\n                     get<N>(std::declval <\n                            ::nlohmann::detail::iteration_proxy_value<IteratorType >> ()));\n};\n#if defined(__clang__)\n    #pragma clang diagnostic pop\n#endif\n\n}  // namespace std\n\n#if JSON_HAS_RANGES\n    template <typename IteratorType>\n    inline constexpr bool ::std::ranges::enable_borrowed_range<::nlohmann::detail::iteration_proxy<IteratorType>> = true;\n#endif\n\n// #include <nlohmann/detail/macro_scope.hpp>\n\n// #include <nlohmann/detail/meta/cpp_future.hpp>\n\n// #include <nlohmann/detail/meta/std_fs.hpp>\n\n// #include <nlohmann/detail/meta/type_traits.hpp>\n\n// #include <nlohmann/detail/value_t.hpp>\n\n\nNLOHMANN_JSON_NAMESPACE_BEGIN\nnamespace detail\n{\n\n//////////////////\n// constructors //\n//////////////////\n\n/*\n * Note all external_constructor<>::construct functions need to call\n * j.m_data.m_value.destroy(j.m_data.m_type) to avoid a memory leak in case j contains an\n * allocated value (e.g., a string). See bug issue\n * https://github.com/nlohmann/json/issues/2865 for more information.\n */\n\ntemplate<value_t> struct external_constructor;\n\ntemplate<>\nstruct external_constructor<value_t::boolean>\n{\n    template<typename BasicJsonType>\n    static void construct(BasicJsonType& j, typename BasicJsonType::boolean_t b) noexcept\n    {\n        j.m_data.m_value.destroy(j.m_data.m_type);\n        j.m_data.m_type = value_t::boolean;\n        j.m_data.m_value = b;\n        j.assert_invariant();\n    }\n};\n\ntemplate<>\nstruct external_constructor<value_t::string>\n{\n    template<typename BasicJsonType>\n    static void construct(BasicJsonType& j, const typename BasicJsonType::string_t& s)\n    {\n        j.m_data.m_value.destroy(j.m_data.m_type);\n        j.m_data.m_type = value_t::string;\n        j.m_data.m_value = s;\n        j.assert_invariant();\n    }\n\n    template<typename BasicJsonType>\n    static void construct(BasicJsonType& j, typename BasicJsonType::string_t&& s)\n    {\n        j.m_data.m_value.destroy(j.m_data.m_type);\n        j.m_data.m_type = value_t::string;\n        j.m_data.m_value = std::move(s);\n        j.assert_invariant();\n    }\n\n    template < typename BasicJsonType, typename CompatibleStringType,\n               enable_if_t < !std::is_same<CompatibleStringType, typename BasicJsonType::string_t>::value,\n                             int > = 0 >\n    static void construct(BasicJsonType& j, const CompatibleStringType& str)\n    {\n        j.m_data.m_value.destroy(j.m_data.m_type);\n        j.m_data.m_type = value_t::string;\n        j.m_data.m_value.string = j.template create<typename BasicJsonType::string_t>(str);\n        j.assert_invariant();\n    }\n};\n\ntemplate<>\nstruct external_constructor<value_t::binary>\n{\n    template<typename BasicJsonType>\n    static void construct(BasicJsonType& j, const typename BasicJsonType::binary_t& b)\n    {\n        j.m_data.m_value.destroy(j.m_data.m_type);\n        j.m_data.m_type = value_t::binary;\n        j.m_data.m_value = typename BasicJsonType::binary_t(b);\n        j.assert_invariant();\n    }\n\n    template<typename BasicJsonType>\n    static void construct(BasicJsonType& j, typename BasicJsonType::binary_t&& b)\n    {\n        j.m_data.m_value.destroy(j.m_data.m_type);\n        j.m_data.m_type = value_t::binary;\n        j.m_data.m_value = typename BasicJsonType::binary_t(std::move(b));\n        j.assert_invariant();\n    }\n};\n\ntemplate<>\nstruct external_constructor<value_t::number_float>\n{\n    template<typename BasicJsonType>\n    static void construct(BasicJsonType& j, typename BasicJsonType::number_float_t val) noexcept\n    {\n        j.m_data.m_value.destroy(j.m_data.m_type);\n        j.m_data.m_type = value_t::number_float;\n        j.m_data.m_value = val;\n        j.assert_invariant();\n    }\n};\n\ntemplate<>\nstruct external_constructor<value_t::number_unsigned>\n{\n    template<typename BasicJsonType>\n    static void construct(BasicJsonType& j, typename BasicJsonType::number_unsigned_t val) noexcept\n    {\n        j.m_data.m_value.destroy(j.m_data.m_type);\n        j.m_data.m_type = value_t::number_unsigned;\n        j.m_data.m_value = val;\n        j.assert_invariant();\n    }\n};\n\ntemplate<>\nstruct external_constructor<value_t::number_integer>\n{\n    template<typename BasicJsonType>\n    static void construct(BasicJsonType& j, typename BasicJsonType::number_integer_t val) noexcept\n    {\n        j.m_data.m_value.destroy(j.m_data.m_type);\n        j.m_data.m_type = value_t::number_integer;\n        j.m_data.m_value = val;\n        j.assert_invariant();\n    }\n};\n\ntemplate<>\nstruct external_constructor<value_t::array>\n{\n    template<typename BasicJsonType>\n    static void construct(BasicJsonType& j, const typename BasicJsonType::array_t& arr)\n    {\n        j.m_data.m_value.destroy(j.m_data.m_type);\n        j.m_data.m_type = value_t::array;\n        j.m_data.m_value = arr;\n        j.set_parents();\n        j.assert_invariant();\n    }\n\n    template<typename BasicJsonType>\n    static void construct(BasicJsonType& j, typename BasicJsonType::array_t&& arr)\n    {\n        j.m_data.m_value.destroy(j.m_data.m_type);\n        j.m_data.m_type = value_t::array;\n        j.m_data.m_value = std::move(arr);\n        j.set_parents();\n        j.assert_invariant();\n    }\n\n    template < typename BasicJsonType, typename CompatibleArrayType,\n               enable_if_t < !std::is_same<CompatibleArrayType, typename BasicJsonType::array_t>::value,\n                             int > = 0 >\n    static void construct(BasicJsonType& j, const CompatibleArrayType& arr)\n    {\n        using std::begin;\n        using std::end;\n\n        j.m_data.m_value.destroy(j.m_data.m_type);\n        j.m_data.m_type = value_t::array;\n        j.m_data.m_value.array = j.template create<typename BasicJsonType::array_t>(begin(arr), end(arr));\n        j.set_parents();\n        j.assert_invariant();\n    }\n\n    template<typename BasicJsonType>\n    static void construct(BasicJsonType& j, const std::vector<bool>& arr)\n    {\n        j.m_data.m_value.destroy(j.m_data.m_type);\n        j.m_data.m_type = value_t::array;\n        j.m_data.m_value = value_t::array;\n        j.m_data.m_value.array->reserve(arr.size());\n        for (const bool x : arr)\n        {\n            j.m_data.m_value.array->push_back(x);\n            j.set_parent(j.m_data.m_value.array->back());\n        }\n        j.assert_invariant();\n    }\n\n    template<typename BasicJsonType, typename T,\n             enable_if_t<std::is_convertible<T, BasicJsonType>::value, int> = 0>\n    static void construct(BasicJsonType& j, const std::valarray<T>& arr)\n    {\n        j.m_data.m_value.destroy(j.m_data.m_type);\n        j.m_data.m_type = value_t::array;\n        j.m_data.m_value = value_t::array;\n        j.m_data.m_value.array->resize(arr.size());\n        if (arr.size() > 0)\n        {\n            std::copy(std::begin(arr), std::end(arr), j.m_data.m_value.array->begin());\n        }\n        j.set_parents();\n        j.assert_invariant();\n    }\n};\n\ntemplate<>\nstruct external_constructor<value_t::object>\n{\n    template<typename BasicJsonType>\n    static void construct(BasicJsonType& j, const typename BasicJsonType::object_t& obj)\n    {\n        j.m_data.m_value.destroy(j.m_data.m_type);\n        j.m_data.m_type = value_t::object;\n        j.m_data.m_value = obj;\n        j.set_parents();\n        j.assert_invariant();\n    }\n\n    template<typename BasicJsonType>\n    static void construct(BasicJsonType& j, typename BasicJsonType::object_t&& obj)\n    {\n        j.m_data.m_value.destroy(j.m_data.m_type);\n        j.m_data.m_type = value_t::object;\n        j.m_data.m_value = std::move(obj);\n        j.set_parents();\n        j.assert_invariant();\n    }\n\n    template < typename BasicJsonType, typename CompatibleObjectType,\n               enable_if_t < !std::is_same<CompatibleObjectType, typename BasicJsonType::object_t>::value, int > = 0 >\n    static void construct(BasicJsonType& j, const CompatibleObjectType& obj)\n    {\n        using std::begin;\n        using std::end;\n\n        j.m_data.m_value.destroy(j.m_data.m_type);\n        j.m_data.m_type = value_t::object;\n        j.m_data.m_value.object = j.template create<typename BasicJsonType::object_t>(begin(obj), end(obj));\n        j.set_parents();\n        j.assert_invariant();\n    }\n};\n\n/////////////\n// to_json //\n/////////////\n\ntemplate<typename BasicJsonType, typename T,\n         enable_if_t<std::is_same<T, typename BasicJsonType::boolean_t>::value, int> = 0>\ninline void to_json(BasicJsonType& j, T b) noexcept\n{\n    external_constructor<value_t::boolean>::construct(j, b);\n}\n\ntemplate < typename BasicJsonType, typename BoolRef,\n           enable_if_t <\n               ((std::is_same<std::vector<bool>::reference, BoolRef>::value\n                 && !std::is_same <std::vector<bool>::reference, typename BasicJsonType::boolean_t&>::value)\n                || (std::is_same<std::vector<bool>::const_reference, BoolRef>::value\n                    && !std::is_same <detail::uncvref_t<std::vector<bool>::const_reference>,\n                                      typename BasicJsonType::boolean_t >::value))\n               && std::is_convertible<const BoolRef&, typename BasicJsonType::boolean_t>::value, int > = 0 >\ninline void to_json(BasicJsonType& j, const BoolRef& b) noexcept\n{\n    external_constructor<value_t::boolean>::construct(j, static_cast<typename BasicJsonType::boolean_t>(b));\n}\n\ntemplate<typename BasicJsonType, typename CompatibleString,\n         enable_if_t<std::is_constructible<typename BasicJsonType::string_t, CompatibleString>::value, int> = 0>\ninline void to_json(BasicJsonType& j, const CompatibleString& s)\n{\n    external_constructor<value_t::string>::construct(j, s);\n}\n\ntemplate<typename BasicJsonType>\ninline void to_json(BasicJsonType& j, typename BasicJsonType::string_t&& s)\n{\n    external_constructor<value_t::string>::construct(j, std::move(s));\n}\n\ntemplate<typename BasicJsonType, typename FloatType,\n         enable_if_t<std::is_floating_point<FloatType>::value, int> = 0>\ninline void to_json(BasicJsonType& j, FloatType val) noexcept\n{\n    external_constructor<value_t::number_float>::construct(j, static_cast<typename BasicJsonType::number_float_t>(val));\n}\n\ntemplate<typename BasicJsonType, typename CompatibleNumberUnsignedType,\n         enable_if_t<is_compatible_integer_type<typename BasicJsonType::number_unsigned_t, CompatibleNumberUnsignedType>::value, int> = 0>\ninline void to_json(BasicJsonType& j, CompatibleNumberUnsignedType val) noexcept\n{\n    external_constructor<value_t::number_unsigned>::construct(j, static_cast<typename BasicJsonType::number_unsigned_t>(val));\n}\n\ntemplate<typename BasicJsonType, typename CompatibleNumberIntegerType,\n         enable_if_t<is_compatible_integer_type<typename BasicJsonType::number_integer_t, CompatibleNumberIntegerType>::value, int> = 0>\ninline void to_json(BasicJsonType& j, CompatibleNumberIntegerType val) noexcept\n{\n    external_constructor<value_t::number_integer>::construct(j, static_cast<typename BasicJsonType::number_integer_t>(val));\n}\n\n#if !JSON_DISABLE_ENUM_SERIALIZATION\ntemplate<typename BasicJsonType, typename EnumType,\n         enable_if_t<std::is_enum<EnumType>::value, int> = 0>\ninline void to_json(BasicJsonType& j, EnumType e) noexcept\n{\n    using underlying_type = typename std::underlying_type<EnumType>::type;\n    static constexpr value_t integral_value_t = std::is_unsigned<underlying_type>::value ? value_t::number_unsigned : value_t::number_integer;\n    external_constructor<integral_value_t>::construct(j, static_cast<underlying_type>(e));\n}\n#endif  // JSON_DISABLE_ENUM_SERIALIZATION\n\ntemplate<typename BasicJsonType>\ninline void to_json(BasicJsonType& j, const std::vector<bool>& e)\n{\n    external_constructor<value_t::array>::construct(j, e);\n}\n\ntemplate < typename BasicJsonType, typename CompatibleArrayType,\n           enable_if_t < is_compatible_array_type<BasicJsonType,\n                         CompatibleArrayType>::value&&\n                         !is_compatible_object_type<BasicJsonType, CompatibleArrayType>::value&&\n                         !is_compatible_string_type<BasicJsonType, CompatibleArrayType>::value&&\n                         !std::is_same<typename BasicJsonType::binary_t, CompatibleArrayType>::value&&\n                         !is_basic_json<CompatibleArrayType>::value,\n                         int > = 0 >\ninline void to_json(BasicJsonType& j, const CompatibleArrayType& arr)\n{\n    external_constructor<value_t::array>::construct(j, arr);\n}\n\ntemplate<typename BasicJsonType>\ninline void to_json(BasicJsonType& j, const typename BasicJsonType::binary_t& bin)\n{\n    external_constructor<value_t::binary>::construct(j, bin);\n}\n\ntemplate<typename BasicJsonType, typename T,\n         enable_if_t<std::is_convertible<T, BasicJsonType>::value, int> = 0>\ninline void to_json(BasicJsonType& j, const std::valarray<T>& arr)\n{\n    external_constructor<value_t::array>::construct(j, std::move(arr));\n}\n\ntemplate<typename BasicJsonType>\ninline void to_json(BasicJsonType& j, typename BasicJsonType::array_t&& arr)\n{\n    external_constructor<value_t::array>::construct(j, std::move(arr));\n}\n\ntemplate < typename BasicJsonType, typename CompatibleObjectType,\n           enable_if_t < is_compatible_object_type<BasicJsonType, CompatibleObjectType>::value&& !is_basic_json<CompatibleObjectType>::value, int > = 0 >\ninline void to_json(BasicJsonType& j, const CompatibleObjectType& obj)\n{\n    external_constructor<value_t::object>::construct(j, obj);\n}\n\ntemplate<typename BasicJsonType>\ninline void to_json(BasicJsonType& j, typename BasicJsonType::object_t&& obj)\n{\n    external_constructor<value_t::object>::construct(j, std::move(obj));\n}\n\ntemplate <\n    typename BasicJsonType, typename T, std::size_t N,\n    enable_if_t < !std::is_constructible<typename BasicJsonType::string_t,\n                  const T(&)[N]>::value, // NOLINT(cppcoreguidelines-avoid-c-arrays,hicpp-avoid-c-arrays,modernize-avoid-c-arrays)\n                  int > = 0 >\ninline void to_json(BasicJsonType& j, const T(&arr)[N]) // NOLINT(cppcoreguidelines-avoid-c-arrays,hicpp-avoid-c-arrays,modernize-avoid-c-arrays)\n{\n    external_constructor<value_t::array>::construct(j, arr);\n}\n\ntemplate < typename BasicJsonType, typename T1, typename T2, enable_if_t < std::is_constructible<BasicJsonType, T1>::value&& std::is_constructible<BasicJsonType, T2>::value, int > = 0 >\ninline void to_json(BasicJsonType& j, const std::pair<T1, T2>& p)\n{\n    j = { p.first, p.second };\n}\n\n// for https://github.com/nlohmann/json/pull/1134\ntemplate<typename BasicJsonType, typename T,\n         enable_if_t<std::is_same<T, iteration_proxy_value<typename BasicJsonType::iterator>>::value, int> = 0>\ninline void to_json(BasicJsonType& j, const T& b)\n{\n    j = { {b.key(), b.value()} };\n}\n\ntemplate<typename BasicJsonType, typename Tuple, std::size_t... Idx>\ninline void to_json_tuple_impl(BasicJsonType& j, const Tuple& t, index_sequence<Idx...> /*unused*/)\n{\n    j = { std::get<Idx>(t)... };\n}\n\ntemplate<typename BasicJsonType, typename T, enable_if_t<is_constructible_tuple<BasicJsonType, T>::value, int > = 0>\ninline void to_json(BasicJsonType& j, const T& t)\n{\n    to_json_tuple_impl(j, t, make_index_sequence<std::tuple_size<T>::value> {});\n}\n\n#if JSON_HAS_FILESYSTEM || JSON_HAS_EXPERIMENTAL_FILESYSTEM\ntemplate<typename BasicJsonType>\ninline void to_json(BasicJsonType& j, const std_fs::path& p)\n{\n    j = p.string();\n}\n#endif\n\nstruct to_json_fn\n{\n    template<typename BasicJsonType, typename T>\n    auto operator()(BasicJsonType& j, T&& val) const noexcept(noexcept(to_json(j, std::forward<T>(val))))\n    -> decltype(to_json(j, std::forward<T>(val)), void())\n    {\n        return to_json(j, std::forward<T>(val));\n    }\n};\n}  // namespace detail\n\n#ifndef JSON_HAS_CPP_17\n/// namespace to hold default `to_json` function\n/// to see why this is required:\n/// http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4381.html\nnamespace // NOLINT(cert-dcl59-cpp,fuchsia-header-anon-namespaces,google-build-namespaces)\n{\n#endif\nJSON_INLINE_VARIABLE constexpr const auto& to_json = // NOLINT(misc-definitions-in-headers)\n    detail::static_const<detail::to_json_fn>::value;\n#ifndef JSON_HAS_CPP_17\n}  // namespace\n#endif\n\nNLOHMANN_JSON_NAMESPACE_END\n\n// #include <nlohmann/detail/meta/identity_tag.hpp>\n\n\nNLOHMANN_JSON_NAMESPACE_BEGIN\n\n/// @sa https://json.nlohmann.me/api/adl_serializer/\ntemplate<typename ValueType, typename>\nstruct adl_serializer\n{\n    /// @brief convert a JSON value to any value type\n    /// @sa https://json.nlohmann.me/api/adl_serializer/from_json/\n    template<typename BasicJsonType, typename TargetType = ValueType>\n    static auto from_json(BasicJsonType && j, TargetType& val) noexcept(\n        noexcept(::nlohmann::from_json(std::forward<BasicJsonType>(j), val)))\n    -> decltype(::nlohmann::from_json(std::forward<BasicJsonType>(j), val), void())\n    {\n        ::nlohmann::from_json(std::forward<BasicJsonType>(j), val);\n    }\n\n    /// @brief convert a JSON value to any value type\n    /// @sa https://json.nlohmann.me/api/adl_serializer/from_json/\n    template<typename BasicJsonType, typename TargetType = ValueType>\n    static auto from_json(BasicJsonType && j) noexcept(\n    noexcept(::nlohmann::from_json(std::forward<BasicJsonType>(j), detail::identity_tag<TargetType> {})))\n    -> decltype(::nlohmann::from_json(std::forward<BasicJsonType>(j), detail::identity_tag<TargetType> {}))\n    {\n        return ::nlohmann::from_json(std::forward<BasicJsonType>(j), detail::identity_tag<TargetType> {});\n    }\n\n    /// @brief convert any value type to a JSON value\n    /// @sa https://json.nlohmann.me/api/adl_serializer/to_json/\n    template<typename BasicJsonType, typename TargetType = ValueType>\n    static auto to_json(BasicJsonType& j, TargetType && val) noexcept(\n        noexcept(::nlohmann::to_json(j, std::forward<TargetType>(val))))\n    -> decltype(::nlohmann::to_json(j, std::forward<TargetType>(val)), void())\n    {\n        ::nlohmann::to_json(j, std::forward<TargetType>(val));\n    }\n};\n\nNLOHMANN_JSON_NAMESPACE_END\n\n// #include <nlohmann/byte_container_with_subtype.hpp>\n//     __ _____ _____ _____\n//  __|  |   __|     |   | |  JSON for Modern C++\n// |  |  |__   |  |  | | | |  version 3.11.3\n// |_____|_____|_____|_|___|  https://github.com/nlohmann/json\n//\n// SPDX-FileCopyrightText: 2013-2023 Niels Lohmann <https://nlohmann.me>\n// SPDX-License-Identifier: MIT\n\n\n\n#include <cstdint> // uint8_t, uint64_t\n#include <tuple> // tie\n#include <utility> // move\n\n// #include <nlohmann/detail/abi_macros.hpp>\n\n\nNLOHMANN_JSON_NAMESPACE_BEGIN\n\n/// @brief an internal type for a backed binary type\n/// @sa https://json.nlohmann.me/api/byte_container_with_subtype/\ntemplate<typename BinaryType>\nclass byte_container_with_subtype : public BinaryType\n{\n  public:\n    using container_type = BinaryType;\n    using subtype_type = std::uint64_t;\n\n    /// @sa https://json.nlohmann.me/api/byte_container_with_subtype/byte_container_with_subtype/\n    byte_container_with_subtype() noexcept(noexcept(container_type()))\n        : container_type()\n    {}\n\n    /// @sa https://json.nlohmann.me/api/byte_container_with_subtype/byte_container_with_subtype/\n    byte_container_with_subtype(const container_type& b) noexcept(noexcept(container_type(b)))\n        : container_type(b)\n    {}\n\n    /// @sa https://json.nlohmann.me/api/byte_container_with_subtype/byte_container_with_subtype/\n    byte_container_with_subtype(container_type&& b) noexcept(noexcept(container_type(std::move(b))))\n        : container_type(std::move(b))\n    {}\n\n    /// @sa https://json.nlohmann.me/api/byte_container_with_subtype/byte_container_with_subtype/\n    byte_container_with_subtype(const container_type& b, subtype_type subtype_) noexcept(noexcept(container_type(b)))\n        : container_type(b)\n        , m_subtype(subtype_)\n        , m_has_subtype(true)\n    {}\n\n    /// @sa https://json.nlohmann.me/api/byte_container_with_subtype/byte_container_with_subtype/\n    byte_container_with_subtype(container_type&& b, subtype_type subtype_) noexcept(noexcept(container_type(std::move(b))))\n        : container_type(std::move(b))\n        , m_subtype(subtype_)\n        , m_has_subtype(true)\n    {}\n\n    bool operator==(const byte_container_with_subtype& rhs) const\n    {\n        return std::tie(static_cast<const BinaryType&>(*this), m_subtype, m_has_subtype) ==\n               std::tie(static_cast<const BinaryType&>(rhs), rhs.m_subtype, rhs.m_has_subtype);\n    }\n\n    bool operator!=(const byte_container_with_subtype& rhs) const\n    {\n        return !(rhs == *this);\n    }\n\n    /// @brief sets the binary subtype\n    /// @sa https://json.nlohmann.me/api/byte_container_with_subtype/set_subtype/\n    void set_subtype(subtype_type subtype_) noexcept\n    {\n        m_subtype = subtype_;\n        m_has_subtype = true;\n    }\n\n    /// @brief return the binary subtype\n    /// @sa https://json.nlohmann.me/api/byte_container_with_subtype/subtype/\n    constexpr subtype_type subtype() const noexcept\n    {\n        return m_has_subtype ? m_subtype : static_cast<subtype_type>(-1);\n    }\n\n    /// @brief return whether the value has a subtype\n    /// @sa https://json.nlohmann.me/api/byte_container_with_subtype/has_subtype/\n    constexpr bool has_subtype() const noexcept\n    {\n        return m_has_subtype;\n    }\n\n    /// @brief clears the binary subtype\n    /// @sa https://json.nlohmann.me/api/byte_container_with_subtype/clear_subtype/\n    void clear_subtype() noexcept\n    {\n        m_subtype = 0;\n        m_has_subtype = false;\n    }\n\n  private:\n    subtype_type m_subtype = 0;\n    bool m_has_subtype = false;\n};\n\nNLOHMANN_JSON_NAMESPACE_END\n\n// #include <nlohmann/detail/conversions/from_json.hpp>\n\n// #include <nlohmann/detail/conversions/to_json.hpp>\n\n// #include <nlohmann/detail/exceptions.hpp>\n\n// #include <nlohmann/detail/hash.hpp>\n//     __ _____ _____ _____\n//  __|  |   __|     |   | |  JSON for Modern C++\n// |  |  |__   |  |  | | | |  version 3.11.3\n// |_____|_____|_____|_|___|  https://github.com/nlohmann/json\n//\n// SPDX-FileCopyrightText: 2013-2023 Niels Lohmann <https://nlohmann.me>\n// SPDX-License-Identifier: MIT\n\n\n\n#include <cstdint> // uint8_t\n#include <cstddef> // size_t\n#include <functional> // hash\n\n// #include <nlohmann/detail/abi_macros.hpp>\n\n// #include <nlohmann/detail/value_t.hpp>\n\n\nNLOHMANN_JSON_NAMESPACE_BEGIN\nnamespace detail\n{\n\n// boost::hash_combine\ninline std::size_t combine(std::size_t seed, std::size_t h) noexcept\n{\n    seed ^= h + 0x9e3779b9 + (seed << 6U) + (seed >> 2U);\n    return seed;\n}\n\n/*!\n@brief hash a JSON value\n\nThe hash function tries to rely on std::hash where possible. Furthermore, the\ntype of the JSON value is taken into account to have different hash values for\nnull, 0, 0U, and false, etc.\n\n@tparam BasicJsonType basic_json specialization\n@param j JSON value to hash\n@return hash value of j\n*/\ntemplate<typename BasicJsonType>\nstd::size_t hash(const BasicJsonType& j)\n{\n    using string_t = typename BasicJsonType::string_t;\n    using number_integer_t = typename BasicJsonType::number_integer_t;\n    using number_unsigned_t = typename BasicJsonType::number_unsigned_t;\n    using number_float_t = typename BasicJsonType::number_float_t;\n\n    const auto type = static_cast<std::size_t>(j.type());\n    switch (j.type())\n    {\n        case BasicJsonType::value_t::null:\n        case BasicJsonType::value_t::discarded:\n        {\n            return combine(type, 0);\n        }\n\n        case BasicJsonType::value_t::object:\n        {\n            auto seed = combine(type, j.size());\n            for (const auto& element : j.items())\n            {\n                const auto h = std::hash<string_t> {}(element.key());\n                seed = combine(seed, h);\n                seed = combine(seed, hash(element.value()));\n            }\n            return seed;\n        }\n\n        case BasicJsonType::value_t::array:\n        {\n            auto seed = combine(type, j.size());\n            for (const auto& element : j)\n            {\n                seed = combine(seed, hash(element));\n            }\n            return seed;\n        }\n\n        case BasicJsonType::value_t::string:\n        {\n            const auto h = std::hash<string_t> {}(j.template get_ref<const string_t&>());\n            return combine(type, h);\n        }\n\n        case BasicJsonType::value_t::boolean:\n        {\n            const auto h = std::hash<bool> {}(j.template get<bool>());\n            return combine(type, h);\n        }\n\n        case BasicJsonType::value_t::number_integer:\n        {\n            const auto h = std::hash<number_integer_t> {}(j.template get<number_integer_t>());\n            return combine(type, h);\n        }\n\n        case BasicJsonType::value_t::number_unsigned:\n        {\n            const auto h = std::hash<number_unsigned_t> {}(j.template get<number_unsigned_t>());\n            return combine(type, h);\n        }\n\n        case BasicJsonType::value_t::number_float:\n        {\n            const auto h = std::hash<number_float_t> {}(j.template get<number_float_t>());\n            return combine(type, h);\n        }\n\n        case BasicJsonType::value_t::binary:\n        {\n            auto seed = combine(type, j.get_binary().size());\n            const auto h = std::hash<bool> {}(j.get_binary().has_subtype());\n            seed = combine(seed, h);\n            seed = combine(seed, static_cast<std::size_t>(j.get_binary().subtype()));\n            for (const auto byte : j.get_binary())\n            {\n                seed = combine(seed, std::hash<std::uint8_t> {}(byte));\n            }\n            return seed;\n        }\n\n        default:                   // LCOV_EXCL_LINE\n            JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE\n            return 0;              // LCOV_EXCL_LINE\n    }\n}\n\n}  // namespace detail\nNLOHMANN_JSON_NAMESPACE_END\n\n// #include <nlohmann/detail/input/binary_reader.hpp>\n//     __ _____ _____ _____\n//  __|  |   __|     |   | |  JSON for Modern C++\n// |  |  |__   |  |  | | | |  version 3.11.3\n// |_____|_____|_____|_|___|  https://github.com/nlohmann/json\n//\n// SPDX-FileCopyrightText: 2013-2023 Niels Lohmann <https://nlohmann.me>\n// SPDX-License-Identifier: MIT\n\n\n\n#include <algorithm> // generate_n\n#include <array> // array\n#include <cmath> // ldexp\n#include <cstddef> // size_t\n#include <cstdint> // uint8_t, uint16_t, uint32_t, uint64_t\n#include <cstdio> // snprintf\n#include <cstring> // memcpy\n#include <iterator> // back_inserter\n#include <limits> // numeric_limits\n#include <string> // char_traits, string\n#include <utility> // make_pair, move\n#include <vector> // vector\n\n// #include <nlohmann/detail/exceptions.hpp>\n\n// #include <nlohmann/detail/input/input_adapters.hpp>\n//     __ _____ _____ _____\n//  __|  |   __|     |   | |  JSON for Modern C++\n// |  |  |__   |  |  | | | |  version 3.11.3\n// |_____|_____|_____|_|___|  https://github.com/nlohmann/json\n//\n// SPDX-FileCopyrightText: 2013-2023 Niels Lohmann <https://nlohmann.me>\n// SPDX-License-Identifier: MIT\n\n\n\n#include <array> // array\n#include <cstddef> // size_t\n#include <cstring> // strlen\n#include <iterator> // begin, end, iterator_traits, random_access_iterator_tag, distance, next\n#include <memory> // shared_ptr, make_shared, addressof\n#include <numeric> // accumulate\n#include <string> // string, char_traits\n#include <type_traits> // enable_if, is_base_of, is_pointer, is_integral, remove_pointer\n#include <utility> // pair, declval\n\n#ifndef JSON_NO_IO\n    #include <cstdio>   // FILE *\n    #include <istream>  // istream\n#endif                  // JSON_NO_IO\n\n// #include <nlohmann/detail/iterators/iterator_traits.hpp>\n\n// #include <nlohmann/detail/macro_scope.hpp>\n\n// #include <nlohmann/detail/meta/type_traits.hpp>\n\n\nNLOHMANN_JSON_NAMESPACE_BEGIN\nnamespace detail\n{\n\n/// the supported input formats\nenum class input_format_t { json, cbor, msgpack, ubjson, bson, bjdata };\n\n////////////////////\n// input adapters //\n////////////////////\n\n#ifndef JSON_NO_IO\n/*!\nInput adapter for stdio file access. This adapter read only 1 byte and do not use any\n buffer. This adapter is a very low level adapter.\n*/\nclass file_input_adapter\n{\n  public:\n    using char_type = char;\n\n    JSON_HEDLEY_NON_NULL(2)\n    explicit file_input_adapter(std::FILE* f) noexcept\n        : m_file(f)\n    {\n        JSON_ASSERT(m_file != nullptr);\n    }\n\n    // make class move-only\n    file_input_adapter(const file_input_adapter&) = delete;\n    file_input_adapter(file_input_adapter&&) noexcept = default;\n    file_input_adapter& operator=(const file_input_adapter&) = delete;\n    file_input_adapter& operator=(file_input_adapter&&) = delete;\n    ~file_input_adapter() = default;\n\n    std::char_traits<char>::int_type get_character() noexcept\n    {\n        return std::fgetc(m_file);\n    }\n\n  private:\n    /// the file pointer to read from\n    std::FILE* m_file;\n};\n\n/*!\nInput adapter for a (caching) istream. Ignores a UFT Byte Order Mark at\nbeginning of input. Does not support changing the underlying std::streambuf\nin mid-input. Maintains underlying std::istream and std::streambuf to support\nsubsequent use of standard std::istream operations to process any input\ncharacters following those used in parsing the JSON input.  Clears the\nstd::istream flags; any input errors (e.g., EOF) will be detected by the first\nsubsequent call for input from the std::istream.\n*/\nclass input_stream_adapter\n{\n  public:\n    using char_type = char;\n\n    ~input_stream_adapter()\n    {\n        // clear stream flags; we use underlying streambuf I/O, do not\n        // maintain ifstream flags, except eof\n        if (is != nullptr)\n        {\n            is->clear(is->rdstate() & std::ios::eofbit);\n        }\n    }\n\n    explicit input_stream_adapter(std::istream& i)\n        : is(&i), sb(i.rdbuf())\n    {}\n\n    // delete because of pointer members\n    input_stream_adapter(const input_stream_adapter&) = delete;\n    input_stream_adapter& operator=(input_stream_adapter&) = delete;\n    input_stream_adapter& operator=(input_stream_adapter&&) = delete;\n\n    input_stream_adapter(input_stream_adapter&& rhs) noexcept\n        : is(rhs.is), sb(rhs.sb)\n    {\n        rhs.is = nullptr;\n        rhs.sb = nullptr;\n    }\n\n    // std::istream/std::streambuf use std::char_traits<char>::to_int_type, to\n    // ensure that std::char_traits<char>::eof() and the character 0xFF do not\n    // end up as the same value, e.g. 0xFFFFFFFF.\n    std::char_traits<char>::int_type get_character()\n    {\n        auto res = sb->sbumpc();\n        // set eof manually, as we don't use the istream interface.\n        if (JSON_HEDLEY_UNLIKELY(res == std::char_traits<char>::eof()))\n        {\n            is->clear(is->rdstate() | std::ios::eofbit);\n        }\n        return res;\n    }\n\n  private:\n    /// the associated input stream\n    std::istream* is = nullptr;\n    std::streambuf* sb = nullptr;\n};\n#endif  // JSON_NO_IO\n\n// General-purpose iterator-based adapter. It might not be as fast as\n// theoretically possible for some containers, but it is extremely versatile.\ntemplate<typename IteratorType>\nclass iterator_input_adapter\n{\n  public:\n    using char_type = typename std::iterator_traits<IteratorType>::value_type;\n\n    iterator_input_adapter(IteratorType first, IteratorType last)\n        : current(std::move(first)), end(std::move(last))\n    {}\n\n    typename char_traits<char_type>::int_type get_character()\n    {\n        if (JSON_HEDLEY_LIKELY(current != end))\n        {\n            auto result = char_traits<char_type>::to_int_type(*current);\n            std::advance(current, 1);\n            return result;\n        }\n\n        return char_traits<char_type>::eof();\n    }\n\n  private:\n    IteratorType current;\n    IteratorType end;\n\n    template<typename BaseInputAdapter, size_t T>\n    friend struct wide_string_input_helper;\n\n    bool empty() const\n    {\n        return current == end;\n    }\n};\n\ntemplate<typename BaseInputAdapter, size_t T>\nstruct wide_string_input_helper;\n\ntemplate<typename BaseInputAdapter>\nstruct wide_string_input_helper<BaseInputAdapter, 4>\n{\n    // UTF-32\n    static void fill_buffer(BaseInputAdapter& input,\n                            std::array<std::char_traits<char>::int_type, 4>& utf8_bytes,\n                            size_t& utf8_bytes_index,\n                            size_t& utf8_bytes_filled)\n    {\n        utf8_bytes_index = 0;\n\n        if (JSON_HEDLEY_UNLIKELY(input.empty()))\n        {\n            utf8_bytes[0] = std::char_traits<char>::eof();\n            utf8_bytes_filled = 1;\n        }\n        else\n        {\n            // get the current character\n            const auto wc = input.get_character();\n\n            // UTF-32 to UTF-8 encoding\n            if (wc < 0x80)\n            {\n                utf8_bytes[0] = static_cast<std::char_traits<char>::int_type>(wc);\n                utf8_bytes_filled = 1;\n            }\n            else if (wc <= 0x7FF)\n            {\n                utf8_bytes[0] = static_cast<std::char_traits<char>::int_type>(0xC0u | ((static_cast<unsigned int>(wc) >> 6u) & 0x1Fu));\n                utf8_bytes[1] = static_cast<std::char_traits<char>::int_type>(0x80u | (static_cast<unsigned int>(wc) & 0x3Fu));\n                utf8_bytes_filled = 2;\n            }\n            else if (wc <= 0xFFFF)\n            {\n                utf8_bytes[0] = static_cast<std::char_traits<char>::int_type>(0xE0u | ((static_cast<unsigned int>(wc) >> 12u) & 0x0Fu));\n                utf8_bytes[1] = static_cast<std::char_traits<char>::int_type>(0x80u | ((static_cast<unsigned int>(wc) >> 6u) & 0x3Fu));\n                utf8_bytes[2] = static_cast<std::char_traits<char>::int_type>(0x80u | (static_cast<unsigned int>(wc) & 0x3Fu));\n                utf8_bytes_filled = 3;\n            }\n            else if (wc <= 0x10FFFF)\n            {\n                utf8_bytes[0] = static_cast<std::char_traits<char>::int_type>(0xF0u | ((static_cast<unsigned int>(wc) >> 18u) & 0x07u));\n                utf8_bytes[1] = static_cast<std::char_traits<char>::int_type>(0x80u | ((static_cast<unsigned int>(wc) >> 12u) & 0x3Fu));\n                utf8_bytes[2] = static_cast<std::char_traits<char>::int_type>(0x80u | ((static_cast<unsigned int>(wc) >> 6u) & 0x3Fu));\n                utf8_bytes[3] = static_cast<std::char_traits<char>::int_type>(0x80u | (static_cast<unsigned int>(wc) & 0x3Fu));\n                utf8_bytes_filled = 4;\n            }\n            else\n            {\n                // unknown character\n                utf8_bytes[0] = static_cast<std::char_traits<char>::int_type>(wc);\n                utf8_bytes_filled = 1;\n            }\n        }\n    }\n};\n\ntemplate<typename BaseInputAdapter>\nstruct wide_string_input_helper<BaseInputAdapter, 2>\n{\n    // UTF-16\n    static void fill_buffer(BaseInputAdapter& input,\n                            std::array<std::char_traits<char>::int_type, 4>& utf8_bytes,\n                            size_t& utf8_bytes_index,\n                            size_t& utf8_bytes_filled)\n    {\n        utf8_bytes_index = 0;\n\n        if (JSON_HEDLEY_UNLIKELY(input.empty()))\n        {\n            utf8_bytes[0] = std::char_traits<char>::eof();\n            utf8_bytes_filled = 1;\n        }\n        else\n        {\n            // get the current character\n            const auto wc = input.get_character();\n\n            // UTF-16 to UTF-8 encoding\n            if (wc < 0x80)\n            {\n                utf8_bytes[0] = static_cast<std::char_traits<char>::int_type>(wc);\n                utf8_bytes_filled = 1;\n            }\n            else if (wc <= 0x7FF)\n            {\n                utf8_bytes[0] = static_cast<std::char_traits<char>::int_type>(0xC0u | ((static_cast<unsigned int>(wc) >> 6u)));\n                utf8_bytes[1] = static_cast<std::char_traits<char>::int_type>(0x80u | (static_cast<unsigned int>(wc) & 0x3Fu));\n                utf8_bytes_filled = 2;\n            }\n            else if (0xD800 > wc || wc >= 0xE000)\n            {\n                utf8_bytes[0] = static_cast<std::char_traits<char>::int_type>(0xE0u | ((static_cast<unsigned int>(wc) >> 12u)));\n                utf8_bytes[1] = static_cast<std::char_traits<char>::int_type>(0x80u | ((static_cast<unsigned int>(wc) >> 6u) & 0x3Fu));\n                utf8_bytes[2] = static_cast<std::char_traits<char>::int_type>(0x80u | (static_cast<unsigned int>(wc) & 0x3Fu));\n                utf8_bytes_filled = 3;\n            }\n            else\n            {\n                if (JSON_HEDLEY_UNLIKELY(!input.empty()))\n                {\n                    const auto wc2 = static_cast<unsigned int>(input.get_character());\n                    const auto charcode = 0x10000u + (((static_cast<unsigned int>(wc) & 0x3FFu) << 10u) | (wc2 & 0x3FFu));\n                    utf8_bytes[0] = static_cast<std::char_traits<char>::int_type>(0xF0u | (charcode >> 18u));\n                    utf8_bytes[1] = static_cast<std::char_traits<char>::int_type>(0x80u | ((charcode >> 12u) & 0x3Fu));\n                    utf8_bytes[2] = static_cast<std::char_traits<char>::int_type>(0x80u | ((charcode >> 6u) & 0x3Fu));\n                    utf8_bytes[3] = static_cast<std::char_traits<char>::int_type>(0x80u | (charcode & 0x3Fu));\n                    utf8_bytes_filled = 4;\n                }\n                else\n                {\n                    utf8_bytes[0] = static_cast<std::char_traits<char>::int_type>(wc);\n                    utf8_bytes_filled = 1;\n                }\n            }\n        }\n    }\n};\n\n// Wraps another input adapter to convert wide character types into individual bytes.\ntemplate<typename BaseInputAdapter, typename WideCharType>\nclass wide_string_input_adapter\n{\n  public:\n    using char_type = char;\n\n    wide_string_input_adapter(BaseInputAdapter base)\n        : base_adapter(base) {}\n\n    typename std::char_traits<char>::int_type get_character() noexcept\n    {\n        // check if buffer needs to be filled\n        if (utf8_bytes_index == utf8_bytes_filled)\n        {\n            fill_buffer<sizeof(WideCharType)>();\n\n            JSON_ASSERT(utf8_bytes_filled > 0);\n            JSON_ASSERT(utf8_bytes_index == 0);\n        }\n\n        // use buffer\n        JSON_ASSERT(utf8_bytes_filled > 0);\n        JSON_ASSERT(utf8_bytes_index < utf8_bytes_filled);\n        return utf8_bytes[utf8_bytes_index++];\n    }\n\n  private:\n    BaseInputAdapter base_adapter;\n\n    template<size_t T>\n    void fill_buffer()\n    {\n        wide_string_input_helper<BaseInputAdapter, T>::fill_buffer(base_adapter, utf8_bytes, utf8_bytes_index, utf8_bytes_filled);\n    }\n\n    /// a buffer for UTF-8 bytes\n    std::array<std::char_traits<char>::int_type, 4> utf8_bytes = {{0, 0, 0, 0}};\n\n    /// index to the utf8_codes array for the next valid byte\n    std::size_t utf8_bytes_index = 0;\n    /// number of valid bytes in the utf8_codes array\n    std::size_t utf8_bytes_filled = 0;\n};\n\ntemplate<typename IteratorType, typename Enable = void>\nstruct iterator_input_adapter_factory\n{\n    using iterator_type = IteratorType;\n    using char_type = typename std::iterator_traits<iterator_type>::value_type;\n    using adapter_type = iterator_input_adapter<iterator_type>;\n\n    static adapter_type create(IteratorType first, IteratorType last)\n    {\n        return adapter_type(std::move(first), std::move(last));\n    }\n};\n\ntemplate<typename T>\nstruct is_iterator_of_multibyte\n{\n    using value_type = typename std::iterator_traits<T>::value_type;\n    enum\n    {\n        value = sizeof(value_type) > 1\n    };\n};\n\ntemplate<typename IteratorType>\nstruct iterator_input_adapter_factory<IteratorType, enable_if_t<is_iterator_of_multibyte<IteratorType>::value>>\n{\n    using iterator_type = IteratorType;\n    using char_type = typename std::iterator_traits<iterator_type>::value_type;\n    using base_adapter_type = iterator_input_adapter<iterator_type>;\n    using adapter_type = wide_string_input_adapter<base_adapter_type, char_type>;\n\n    static adapter_type create(IteratorType first, IteratorType last)\n    {\n        return adapter_type(base_adapter_type(std::move(first), std::move(last)));\n    }\n};\n\n// General purpose iterator-based input\ntemplate<typename IteratorType>\ntypename iterator_input_adapter_factory<IteratorType>::adapter_type input_adapter(IteratorType first, IteratorType last)\n{\n    using factory_type = iterator_input_adapter_factory<IteratorType>;\n    return factory_type::create(first, last);\n}\n\n// Convenience shorthand from container to iterator\n// Enables ADL on begin(container) and end(container)\n// Encloses the using declarations in namespace for not to leak them to outside scope\n\nnamespace container_input_adapter_factory_impl\n{\n\nusing std::begin;\nusing std::end;\n\ntemplate<typename ContainerType, typename Enable = void>\nstruct container_input_adapter_factory {};\n\ntemplate<typename ContainerType>\nstruct container_input_adapter_factory< ContainerType,\n       void_t<decltype(begin(std::declval<ContainerType>()), end(std::declval<ContainerType>()))>>\n       {\n           using adapter_type = decltype(input_adapter(begin(std::declval<ContainerType>()), end(std::declval<ContainerType>())));\n\n           static adapter_type create(const ContainerType& container)\n{\n    return input_adapter(begin(container), end(container));\n}\n       };\n\n}  // namespace container_input_adapter_factory_impl\n\ntemplate<typename ContainerType>\ntypename container_input_adapter_factory_impl::container_input_adapter_factory<ContainerType>::adapter_type input_adapter(const ContainerType& container)\n{\n    return container_input_adapter_factory_impl::container_input_adapter_factory<ContainerType>::create(container);\n}\n\n#ifndef JSON_NO_IO\n// Special cases with fast paths\ninline file_input_adapter input_adapter(std::FILE* file)\n{\n    return file_input_adapter(file);\n}\n\ninline input_stream_adapter input_adapter(std::istream& stream)\n{\n    return input_stream_adapter(stream);\n}\n\ninline input_stream_adapter input_adapter(std::istream&& stream)\n{\n    return input_stream_adapter(stream);\n}\n#endif  // JSON_NO_IO\n\nusing contiguous_bytes_input_adapter = decltype(input_adapter(std::declval<const char*>(), std::declval<const char*>()));\n\n// Null-delimited strings, and the like.\ntemplate < typename CharT,\n           typename std::enable_if <\n               std::is_pointer<CharT>::value&&\n               !std::is_array<CharT>::value&&\n               std::is_integral<typename std::remove_pointer<CharT>::type>::value&&\n               sizeof(typename std::remove_pointer<CharT>::type) == 1,\n               int >::type = 0 >\ncontiguous_bytes_input_adapter input_adapter(CharT b)\n{\n    auto length = std::strlen(reinterpret_cast<const char*>(b));\n    const auto* ptr = reinterpret_cast<const char*>(b);\n    return input_adapter(ptr, ptr + length);\n}\n\ntemplate<typename T, std::size_t N>\nauto input_adapter(T (&array)[N]) -> decltype(input_adapter(array, array + N)) // NOLINT(cppcoreguidelines-avoid-c-arrays,hicpp-avoid-c-arrays,modernize-avoid-c-arrays)\n{\n    return input_adapter(array, array + N);\n}\n\n// This class only handles inputs of input_buffer_adapter type.\n// It's required so that expressions like {ptr, len} can be implicitly cast\n// to the correct adapter.\nclass span_input_adapter\n{\n  public:\n    template < typename CharT,\n               typename std::enable_if <\n                   std::is_pointer<CharT>::value&&\n                   std::is_integral<typename std::remove_pointer<CharT>::type>::value&&\n                   sizeof(typename std::remove_pointer<CharT>::type) == 1,\n                   int >::type = 0 >\n    span_input_adapter(CharT b, std::size_t l)\n        : ia(reinterpret_cast<const char*>(b), reinterpret_cast<const char*>(b) + l) {}\n\n    template<class IteratorType,\n             typename std::enable_if<\n                 std::is_same<typename iterator_traits<IteratorType>::iterator_category, std::random_access_iterator_tag>::value,\n                 int>::type = 0>\n    span_input_adapter(IteratorType first, IteratorType last)\n        : ia(input_adapter(first, last)) {}\n\n    contiguous_bytes_input_adapter&& get()\n    {\n        return std::move(ia); // NOLINT(hicpp-move-const-arg,performance-move-const-arg)\n    }\n\n  private:\n    contiguous_bytes_input_adapter ia;\n};\n\n}  // namespace detail\nNLOHMANN_JSON_NAMESPACE_END\n\n// #include <nlohmann/detail/input/json_sax.hpp>\n//     __ _____ _____ _____\n//  __|  |   __|     |   | |  JSON for Modern C++\n// |  |  |__   |  |  | | | |  version 3.11.3\n// |_____|_____|_____|_|___|  https://github.com/nlohmann/json\n//\n// SPDX-FileCopyrightText: 2013-2023 Niels Lohmann <https://nlohmann.me>\n// SPDX-License-Identifier: MIT\n\n\n\n#include <cstddef>\n#include <string> // string\n#include <utility> // move\n#include <vector> // vector\n\n// #include <nlohmann/detail/exceptions.hpp>\n\n// #include <nlohmann/detail/macro_scope.hpp>\n\n// #include <nlohmann/detail/string_concat.hpp>\n\n\nNLOHMANN_JSON_NAMESPACE_BEGIN\n\n/*!\n@brief SAX interface\n\nThis class describes the SAX interface used by @ref nlohmann::json::sax_parse.\nEach function is called in different situations while the input is parsed. The\nboolean return value informs the parser whether to continue processing the\ninput.\n*/\ntemplate<typename BasicJsonType>\nstruct json_sax\n{\n    using number_integer_t = typename BasicJsonType::number_integer_t;\n    using number_unsigned_t = typename BasicJsonType::number_unsigned_t;\n    using number_float_t = typename BasicJsonType::number_float_t;\n    using string_t = typename BasicJsonType::string_t;\n    using binary_t = typename BasicJsonType::binary_t;\n\n    /*!\n    @brief a null value was read\n    @return whether parsing should proceed\n    */\n    virtual bool null() = 0;\n\n    /*!\n    @brief a boolean value was read\n    @param[in] val  boolean value\n    @return whether parsing should proceed\n    */\n    virtual bool boolean(bool val) = 0;\n\n    /*!\n    @brief an integer number was read\n    @param[in] val  integer value\n    @return whether parsing should proceed\n    */\n    virtual bool number_integer(number_integer_t val) = 0;\n\n    /*!\n    @brief an unsigned integer number was read\n    @param[in] val  unsigned integer value\n    @return whether parsing should proceed\n    */\n    virtual bool number_unsigned(number_unsigned_t val) = 0;\n\n    /*!\n    @brief a floating-point number was read\n    @param[in] val  floating-point value\n    @param[in] s    raw token value\n    @return whether parsing should proceed\n    */\n    virtual bool number_float(number_float_t val, const string_t& s) = 0;\n\n    /*!\n    @brief a string value was read\n    @param[in] val  string value\n    @return whether parsing should proceed\n    @note It is safe to move the passed string value.\n    */\n    virtual bool string(string_t& val) = 0;\n\n    /*!\n    @brief a binary value was read\n    @param[in] val  binary value\n    @return whether parsing should proceed\n    @note It is safe to move the passed binary value.\n    */\n    virtual bool binary(binary_t& val) = 0;\n\n    /*!\n    @brief the beginning of an object was read\n    @param[in] elements  number of object elements or -1 if unknown\n    @return whether parsing should proceed\n    @note binary formats may report the number of elements\n    */\n    virtual bool start_object(std::size_t elements) = 0;\n\n    /*!\n    @brief an object key was read\n    @param[in] val  object key\n    @return whether parsing should proceed\n    @note It is safe to move the passed string.\n    */\n    virtual bool key(string_t& val) = 0;\n\n    /*!\n    @brief the end of an object was read\n    @return whether parsing should proceed\n    */\n    virtual bool end_object() = 0;\n\n    /*!\n    @brief the beginning of an array was read\n    @param[in] elements  number of array elements or -1 if unknown\n    @return whether parsing should proceed\n    @note binary formats may report the number of elements\n    */\n    virtual bool start_array(std::size_t elements) = 0;\n\n    /*!\n    @brief the end of an array was read\n    @return whether parsing should proceed\n    */\n    virtual bool end_array() = 0;\n\n    /*!\n    @brief a parse error occurred\n    @param[in] position    the position in the input where the error occurs\n    @param[in] last_token  the last read token\n    @param[in] ex          an exception object describing the error\n    @return whether parsing should proceed (must return false)\n    */\n    virtual bool parse_error(std::size_t position,\n                             const std::string& last_token,\n                             const detail::exception& ex) = 0;\n\n    json_sax() = default;\n    json_sax(const json_sax&) = default;\n    json_sax(json_sax&&) noexcept = default;\n    json_sax& operator=(const json_sax&) = default;\n    json_sax& operator=(json_sax&&) noexcept = default;\n    virtual ~json_sax() = default;\n};\n\nnamespace detail\n{\n/*!\n@brief SAX implementation to create a JSON value from SAX events\n\nThis class implements the @ref json_sax interface and processes the SAX events\nto create a JSON value which makes it basically a DOM parser. The structure or\nhierarchy of the JSON value is managed by the stack `ref_stack` which contains\na pointer to the respective array or object for each recursion depth.\n\nAfter successful parsing, the value that is passed by reference to the\nconstructor contains the parsed value.\n\n@tparam BasicJsonType  the JSON type\n*/\ntemplate<typename BasicJsonType>\nclass json_sax_dom_parser\n{\n  public:\n    using number_integer_t = typename BasicJsonType::number_integer_t;\n    using number_unsigned_t = typename BasicJsonType::number_unsigned_t;\n    using number_float_t = typename BasicJsonType::number_float_t;\n    using string_t = typename BasicJsonType::string_t;\n    using binary_t = typename BasicJsonType::binary_t;\n\n    /*!\n    @param[in,out] r  reference to a JSON value that is manipulated while\n                       parsing\n    @param[in] allow_exceptions_  whether parse errors yield exceptions\n    */\n    explicit json_sax_dom_parser(BasicJsonType& r, const bool allow_exceptions_ = true)\n        : root(r), allow_exceptions(allow_exceptions_)\n    {}\n\n    // make class move-only\n    json_sax_dom_parser(const json_sax_dom_parser&) = delete;\n    json_sax_dom_parser(json_sax_dom_parser&&) = default; // NOLINT(hicpp-noexcept-move,performance-noexcept-move-constructor)\n    json_sax_dom_parser& operator=(const json_sax_dom_parser&) = delete;\n    json_sax_dom_parser& operator=(json_sax_dom_parser&&) = default; // NOLINT(hicpp-noexcept-move,performance-noexcept-move-constructor)\n    ~json_sax_dom_parser() = default;\n\n    bool null()\n    {\n        handle_value(nullptr);\n        return true;\n    }\n\n    bool boolean(bool val)\n    {\n        handle_value(val);\n        return true;\n    }\n\n    bool number_integer(number_integer_t val)\n    {\n        handle_value(val);\n        return true;\n    }\n\n    bool number_unsigned(number_unsigned_t val)\n    {\n        handle_value(val);\n        return true;\n    }\n\n    bool number_float(number_float_t val, const string_t& /*unused*/)\n    {\n        handle_value(val);\n        return true;\n    }\n\n    bool string(string_t& val)\n    {\n        handle_value(val);\n        return true;\n    }\n\n    bool binary(binary_t& val)\n    {\n        handle_value(std::move(val));\n        return true;\n    }\n\n    bool start_object(std::size_t len)\n    {\n        ref_stack.push_back(handle_value(BasicJsonType::value_t::object));\n\n        if (JSON_HEDLEY_UNLIKELY(len != static_cast<std::size_t>(-1) && len > ref_stack.back()->max_size()))\n        {\n            JSON_THROW(out_of_range::create(408, concat(\"excessive object size: \", std::to_string(len)), ref_stack.back()));\n        }\n\n        return true;\n    }\n\n    bool key(string_t& val)\n    {\n        JSON_ASSERT(!ref_stack.empty());\n        JSON_ASSERT(ref_stack.back()->is_object());\n\n        // add null at given key and store the reference for later\n        object_element = &(ref_stack.back()->m_data.m_value.object->operator[](val));\n        return true;\n    }\n\n    bool end_object()\n    {\n        JSON_ASSERT(!ref_stack.empty());\n        JSON_ASSERT(ref_stack.back()->is_object());\n\n        ref_stack.back()->set_parents();\n        ref_stack.pop_back();\n        return true;\n    }\n\n    bool start_array(std::size_t len)\n    {\n        ref_stack.push_back(handle_value(BasicJsonType::value_t::array));\n\n        if (JSON_HEDLEY_UNLIKELY(len != static_cast<std::size_t>(-1) && len > ref_stack.back()->max_size()))\n        {\n            JSON_THROW(out_of_range::create(408, concat(\"excessive array size: \", std::to_string(len)), ref_stack.back()));\n        }\n\n        return true;\n    }\n\n    bool end_array()\n    {\n        JSON_ASSERT(!ref_stack.empty());\n        JSON_ASSERT(ref_stack.back()->is_array());\n\n        ref_stack.back()->set_parents();\n        ref_stack.pop_back();\n        return true;\n    }\n\n    template<class Exception>\n    bool parse_error(std::size_t /*unused*/, const std::string& /*unused*/,\n                     const Exception& ex)\n    {\n        errored = true;\n        static_cast<void>(ex);\n        if (allow_exceptions)\n        {\n            JSON_THROW(ex);\n        }\n        return false;\n    }\n\n    constexpr bool is_errored() const\n    {\n        return errored;\n    }\n\n  private:\n    /*!\n    @invariant If the ref stack is empty, then the passed value will be the new\n               root.\n    @invariant If the ref stack contains a value, then it is an array or an\n               object to which we can add elements\n    */\n    template<typename Value>\n    JSON_HEDLEY_RETURNS_NON_NULL\n    BasicJsonType* handle_value(Value&& v)\n    {\n        if (ref_stack.empty())\n        {\n            root = BasicJsonType(std::forward<Value>(v));\n            return &root;\n        }\n\n        JSON_ASSERT(ref_stack.back()->is_array() || ref_stack.back()->is_object());\n\n        if (ref_stack.back()->is_array())\n        {\n            ref_stack.back()->m_data.m_value.array->emplace_back(std::forward<Value>(v));\n            return &(ref_stack.back()->m_data.m_value.array->back());\n        }\n\n        JSON_ASSERT(ref_stack.back()->is_object());\n        JSON_ASSERT(object_element);\n        *object_element = BasicJsonType(std::forward<Value>(v));\n        return object_element;\n    }\n\n    /// the parsed JSON value\n    BasicJsonType& root;\n    /// stack to model hierarchy of values\n    std::vector<BasicJsonType*> ref_stack {};\n    /// helper to hold the reference for the next object element\n    BasicJsonType* object_element = nullptr;\n    /// whether a syntax error occurred\n    bool errored = false;\n    /// whether to throw exceptions in case of errors\n    const bool allow_exceptions = true;\n};\n\ntemplate<typename BasicJsonType>\nclass json_sax_dom_callback_parser\n{\n  public:\n    using number_integer_t = typename BasicJsonType::number_integer_t;\n    using number_unsigned_t = typename BasicJsonType::number_unsigned_t;\n    using number_float_t = typename BasicJsonType::number_float_t;\n    using string_t = typename BasicJsonType::string_t;\n    using binary_t = typename BasicJsonType::binary_t;\n    using parser_callback_t = typename BasicJsonType::parser_callback_t;\n    using parse_event_t = typename BasicJsonType::parse_event_t;\n\n    json_sax_dom_callback_parser(BasicJsonType& r,\n                                 const parser_callback_t cb,\n                                 const bool allow_exceptions_ = true)\n        : root(r), callback(cb), allow_exceptions(allow_exceptions_)\n    {\n        keep_stack.push_back(true);\n    }\n\n    // make class move-only\n    json_sax_dom_callback_parser(const json_sax_dom_callback_parser&) = delete;\n    json_sax_dom_callback_parser(json_sax_dom_callback_parser&&) = default; // NOLINT(hicpp-noexcept-move,performance-noexcept-move-constructor)\n    json_sax_dom_callback_parser& operator=(const json_sax_dom_callback_parser&) = delete;\n    json_sax_dom_callback_parser& operator=(json_sax_dom_callback_parser&&) = default; // NOLINT(hicpp-noexcept-move,performance-noexcept-move-constructor)\n    ~json_sax_dom_callback_parser() = default;\n\n    bool null()\n    {\n        handle_value(nullptr);\n        return true;\n    }\n\n    bool boolean(bool val)\n    {\n        handle_value(val);\n        return true;\n    }\n\n    bool number_integer(number_integer_t val)\n    {\n        handle_value(val);\n        return true;\n    }\n\n    bool number_unsigned(number_unsigned_t val)\n    {\n        handle_value(val);\n        return true;\n    }\n\n    bool number_float(number_float_t val, const string_t& /*unused*/)\n    {\n        handle_value(val);\n        return true;\n    }\n\n    bool string(string_t& val)\n    {\n        handle_value(val);\n        return true;\n    }\n\n    bool binary(binary_t& val)\n    {\n        handle_value(std::move(val));\n        return true;\n    }\n\n    bool start_object(std::size_t len)\n    {\n        // check callback for object start\n        const bool keep = callback(static_cast<int>(ref_stack.size()), parse_event_t::object_start, discarded);\n        keep_stack.push_back(keep);\n\n        auto val = handle_value(BasicJsonType::value_t::object, true);\n        ref_stack.push_back(val.second);\n\n        // check object limit\n        if (ref_stack.back() && JSON_HEDLEY_UNLIKELY(len != static_cast<std::size_t>(-1) && len > ref_stack.back()->max_size()))\n        {\n            JSON_THROW(out_of_range::create(408, concat(\"excessive object size: \", std::to_string(len)), ref_stack.back()));\n        }\n\n        return true;\n    }\n\n    bool key(string_t& val)\n    {\n        BasicJsonType k = BasicJsonType(val);\n\n        // check callback for key\n        const bool keep = callback(static_cast<int>(ref_stack.size()), parse_event_t::key, k);\n        key_keep_stack.push_back(keep);\n\n        // add discarded value at given key and store the reference for later\n        if (keep && ref_stack.back())\n        {\n            object_element = &(ref_stack.back()->m_data.m_value.object->operator[](val) = discarded);\n        }\n\n        return true;\n    }\n\n    bool end_object()\n    {\n        if (ref_stack.back())\n        {\n            if (!callback(static_cast<int>(ref_stack.size()) - 1, parse_event_t::object_end, *ref_stack.back()))\n            {\n                // discard object\n                *ref_stack.back() = discarded;\n            }\n            else\n            {\n                ref_stack.back()->set_parents();\n            }\n        }\n\n        JSON_ASSERT(!ref_stack.empty());\n        JSON_ASSERT(!keep_stack.empty());\n        ref_stack.pop_back();\n        keep_stack.pop_back();\n\n        if (!ref_stack.empty() && ref_stack.back() && ref_stack.back()->is_structured())\n        {\n            // remove discarded value\n            for (auto it = ref_stack.back()->begin(); it != ref_stack.back()->end(); ++it)\n            {\n                if (it->is_discarded())\n                {\n                    ref_stack.back()->erase(it);\n                    break;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    bool start_array(std::size_t len)\n    {\n        const bool keep = callback(static_cast<int>(ref_stack.size()), parse_event_t::array_start, discarded);\n        keep_stack.push_back(keep);\n\n        auto val = handle_value(BasicJsonType::value_t::array, true);\n        ref_stack.push_back(val.second);\n\n        // check array limit\n        if (ref_stack.back() && JSON_HEDLEY_UNLIKELY(len != static_cast<std::size_t>(-1) && len > ref_stack.back()->max_size()))\n        {\n            JSON_THROW(out_of_range::create(408, concat(\"excessive array size: \", std::to_string(len)), ref_stack.back()));\n        }\n\n        return true;\n    }\n\n    bool end_array()\n    {\n        bool keep = true;\n\n        if (ref_stack.back())\n        {\n            keep = callback(static_cast<int>(ref_stack.size()) - 1, parse_event_t::array_end, *ref_stack.back());\n            if (keep)\n            {\n                ref_stack.back()->set_parents();\n            }\n            else\n            {\n                // discard array\n                *ref_stack.back() = discarded;\n            }\n        }\n\n        JSON_ASSERT(!ref_stack.empty());\n        JSON_ASSERT(!keep_stack.empty());\n        ref_stack.pop_back();\n        keep_stack.pop_back();\n\n        // remove discarded value\n        if (!keep && !ref_stack.empty() && ref_stack.back()->is_array())\n        {\n            ref_stack.back()->m_data.m_value.array->pop_back();\n        }\n\n        return true;\n    }\n\n    template<class Exception>\n    bool parse_error(std::size_t /*unused*/, const std::string& /*unused*/,\n                     const Exception& ex)\n    {\n        errored = true;\n        static_cast<void>(ex);\n        if (allow_exceptions)\n        {\n            JSON_THROW(ex);\n        }\n        return false;\n    }\n\n    constexpr bool is_errored() const\n    {\n        return errored;\n    }\n\n  private:\n    /*!\n    @param[in] v  value to add to the JSON value we build during parsing\n    @param[in] skip_callback  whether we should skip calling the callback\n               function; this is required after start_array() and\n               start_object() SAX events, because otherwise we would call the\n               callback function with an empty array or object, respectively.\n\n    @invariant If the ref stack is empty, then the passed value will be the new\n               root.\n    @invariant If the ref stack contains a value, then it is an array or an\n               object to which we can add elements\n\n    @return pair of boolean (whether value should be kept) and pointer (to the\n            passed value in the ref_stack hierarchy; nullptr if not kept)\n    */\n    template<typename Value>\n    std::pair<bool, BasicJsonType*> handle_value(Value&& v, const bool skip_callback = false)\n    {\n        JSON_ASSERT(!keep_stack.empty());\n\n        // do not handle this value if we know it would be added to a discarded\n        // container\n        if (!keep_stack.back())\n        {\n            return {false, nullptr};\n        }\n\n        // create value\n        auto value = BasicJsonType(std::forward<Value>(v));\n\n        // check callback\n        const bool keep = skip_callback || callback(static_cast<int>(ref_stack.size()), parse_event_t::value, value);\n\n        // do not handle this value if we just learnt it shall be discarded\n        if (!keep)\n        {\n            return {false, nullptr};\n        }\n\n        if (ref_stack.empty())\n        {\n            root = std::move(value);\n            return {true, & root};\n        }\n\n        // skip this value if we already decided to skip the parent\n        // (https://github.com/nlohmann/json/issues/971#issuecomment-413678360)\n        if (!ref_stack.back())\n        {\n            return {false, nullptr};\n        }\n\n        // we now only expect arrays and objects\n        JSON_ASSERT(ref_stack.back()->is_array() || ref_stack.back()->is_object());\n\n        // array\n        if (ref_stack.back()->is_array())\n        {\n            ref_stack.back()->m_data.m_value.array->emplace_back(std::move(value));\n            return {true, & (ref_stack.back()->m_data.m_value.array->back())};\n        }\n\n        // object\n        JSON_ASSERT(ref_stack.back()->is_object());\n        // check if we should store an element for the current key\n        JSON_ASSERT(!key_keep_stack.empty());\n        const bool store_element = key_keep_stack.back();\n        key_keep_stack.pop_back();\n\n        if (!store_element)\n        {\n            return {false, nullptr};\n        }\n\n        JSON_ASSERT(object_element);\n        *object_element = std::move(value);\n        return {true, object_element};\n    }\n\n    /// the parsed JSON value\n    BasicJsonType& root;\n    /// stack to model hierarchy of values\n    std::vector<BasicJsonType*> ref_stack {};\n    /// stack to manage which values to keep\n    std::vector<bool> keep_stack {}; // NOLINT(readability-redundant-member-init)\n    /// stack to manage which object keys to keep\n    std::vector<bool> key_keep_stack {}; // NOLINT(readability-redundant-member-init)\n    /// helper to hold the reference for the next object element\n    BasicJsonType* object_element = nullptr;\n    /// whether a syntax error occurred\n    bool errored = false;\n    /// callback function\n    const parser_callback_t callback = nullptr;\n    /// whether to throw exceptions in case of errors\n    const bool allow_exceptions = true;\n    /// a discarded value for the callback\n    BasicJsonType discarded = BasicJsonType::value_t::discarded;\n};\n\ntemplate<typename BasicJsonType>\nclass json_sax_acceptor\n{\n  public:\n    using number_integer_t = typename BasicJsonType::number_integer_t;\n    using number_unsigned_t = typename BasicJsonType::number_unsigned_t;\n    using number_float_t = typename BasicJsonType::number_float_t;\n    using string_t = typename BasicJsonType::string_t;\n    using binary_t = typename BasicJsonType::binary_t;\n\n    bool null()\n    {\n        return true;\n    }\n\n    bool boolean(bool /*unused*/)\n    {\n        return true;\n    }\n\n    bool number_integer(number_integer_t /*unused*/)\n    {\n        return true;\n    }\n\n    bool number_unsigned(number_unsigned_t /*unused*/)\n    {\n        return true;\n    }\n\n    bool number_float(number_float_t /*unused*/, const string_t& /*unused*/)\n    {\n        return true;\n    }\n\n    bool string(string_t& /*unused*/)\n    {\n        return true;\n    }\n\n    bool binary(binary_t& /*unused*/)\n    {\n        return true;\n    }\n\n    bool start_object(std::size_t /*unused*/ = static_cast<std::size_t>(-1))\n    {\n        return true;\n    }\n\n    bool key(string_t& /*unused*/)\n    {\n        return true;\n    }\n\n    bool end_object()\n    {\n        return true;\n    }\n\n    bool start_array(std::size_t /*unused*/ = static_cast<std::size_t>(-1))\n    {\n        return true;\n    }\n\n    bool end_array()\n    {\n        return true;\n    }\n\n    bool parse_error(std::size_t /*unused*/, const std::string& /*unused*/, const detail::exception& /*unused*/)\n    {\n        return false;\n    }\n};\n\n}  // namespace detail\nNLOHMANN_JSON_NAMESPACE_END\n\n// #include <nlohmann/detail/input/lexer.hpp>\n//     __ _____ _____ _____\n//  __|  |   __|     |   | |  JSON for Modern C++\n// |  |  |__   |  |  | | | |  version 3.11.3\n// |_____|_____|_____|_|___|  https://github.com/nlohmann/json\n//\n// SPDX-FileCopyrightText: 2013-2023 Niels Lohmann <https://nlohmann.me>\n// SPDX-License-Identifier: MIT\n\n\n\n#include <array> // array\n#include <clocale> // localeconv\n#include <cstddef> // size_t\n#include <cstdio> // snprintf\n#include <cstdlib> // strtof, strtod, strtold, strtoll, strtoull\n#include <initializer_list> // initializer_list\n#include <string> // char_traits, string\n#include <utility> // move\n#include <vector> // vector\n\n// #include <nlohmann/detail/input/input_adapters.hpp>\n\n// #include <nlohmann/detail/input/position_t.hpp>\n\n// #include <nlohmann/detail/macro_scope.hpp>\n\n// #include <nlohmann/detail/meta/type_traits.hpp>\n\n\nNLOHMANN_JSON_NAMESPACE_BEGIN\nnamespace detail\n{\n\n///////////\n// lexer //\n///////////\n\ntemplate<typename BasicJsonType>\nclass lexer_base\n{\n  public:\n    /// token types for the parser\n    enum class token_type\n    {\n        uninitialized,    ///< indicating the scanner is uninitialized\n        literal_true,     ///< the `true` literal\n        literal_false,    ///< the `false` literal\n        literal_null,     ///< the `null` literal\n        value_string,     ///< a string -- use get_string() for actual value\n        value_unsigned,   ///< an unsigned integer -- use get_number_unsigned() for actual value\n        value_integer,    ///< a signed integer -- use get_number_integer() for actual value\n        value_float,      ///< an floating point number -- use get_number_float() for actual value\n        begin_array,      ///< the character for array begin `[`\n        begin_object,     ///< the character for object begin `{`\n        end_array,        ///< the character for array end `]`\n        end_object,       ///< the character for object end `}`\n        name_separator,   ///< the name separator `:`\n        value_separator,  ///< the value separator `,`\n        parse_error,      ///< indicating a parse error\n        end_of_input,     ///< indicating the end of the input buffer\n        literal_or_value  ///< a literal or the begin of a value (only for diagnostics)\n    };\n\n    /// return name of values of type token_type (only used for errors)\n    JSON_HEDLEY_RETURNS_NON_NULL\n    JSON_HEDLEY_CONST\n    static const char* token_type_name(const token_type t) noexcept\n    {\n        switch (t)\n        {\n            case token_type::uninitialized:\n                return \"<uninitialized>\";\n            case token_type::literal_true:\n                return \"true literal\";\n            case token_type::literal_false:\n                return \"false literal\";\n            case token_type::literal_null:\n                return \"null literal\";\n            case token_type::value_string:\n                return \"string literal\";\n            case token_type::value_unsigned:\n            case token_type::value_integer:\n            case token_type::value_float:\n                return \"number literal\";\n            case token_type::begin_array:\n                return \"'['\";\n            case token_type::begin_object:\n                return \"'{'\";\n            case token_type::end_array:\n                return \"']'\";\n            case token_type::end_object:\n                return \"'}'\";\n            case token_type::name_separator:\n                return \"':'\";\n            case token_type::value_separator:\n                return \"','\";\n            case token_type::parse_error:\n                return \"<parse error>\";\n            case token_type::end_of_input:\n                return \"end of input\";\n            case token_type::literal_or_value:\n                return \"'[', '{', or a literal\";\n            // LCOV_EXCL_START\n            default: // catch non-enum values\n                return \"unknown token\";\n                // LCOV_EXCL_STOP\n        }\n    }\n};\n/*!\n@brief lexical analysis\n\nThis class organizes the lexical analysis during JSON deserialization.\n*/\ntemplate<typename BasicJsonType, typename InputAdapterType>\nclass lexer : public lexer_base<BasicJsonType>\n{\n    using number_integer_t = typename BasicJsonType::number_integer_t;\n    using number_unsigned_t = typename BasicJsonType::number_unsigned_t;\n    using number_float_t = typename BasicJsonType::number_float_t;\n    using string_t = typename BasicJsonType::string_t;\n    using char_type = typename InputAdapterType::char_type;\n    using char_int_type = typename char_traits<char_type>::int_type;\n\n  public:\n    using token_type = typename lexer_base<BasicJsonType>::token_type;\n\n    explicit lexer(InputAdapterType&& adapter, bool ignore_comments_ = false) noexcept\n        : ia(std::move(adapter))\n        , ignore_comments(ignore_comments_)\n        , decimal_point_char(static_cast<char_int_type>(get_decimal_point()))\n    {}\n\n    // delete because of pointer members\n    lexer(const lexer&) = delete;\n    lexer(lexer&&) = default; // NOLINT(hicpp-noexcept-move,performance-noexcept-move-constructor)\n    lexer& operator=(lexer&) = delete;\n    lexer& operator=(lexer&&) = default; // NOLINT(hicpp-noexcept-move,performance-noexcept-move-constructor)\n    ~lexer() = default;\n\n  private:\n    /////////////////////\n    // locales\n    /////////////////////\n\n    /// return the locale-dependent decimal point\n    JSON_HEDLEY_PURE\n    static char get_decimal_point() noexcept\n    {\n        const auto* loc = localeconv();\n        JSON_ASSERT(loc != nullptr);\n        return (loc->decimal_point == nullptr) ? '.' : *(loc->decimal_point);\n    }\n\n    /////////////////////\n    // scan functions\n    /////////////////////\n\n    /*!\n    @brief get codepoint from 4 hex characters following `\\u`\n\n    For input \"\\u c1 c2 c3 c4\" the codepoint is:\n      (c1 * 0x1000) + (c2 * 0x0100) + (c3 * 0x0010) + c4\n    = (c1 << 12) + (c2 << 8) + (c3 << 4) + (c4 << 0)\n\n    Furthermore, the possible characters '0'..'9', 'A'..'F', and 'a'..'f'\n    must be converted to the integers 0x0..0x9, 0xA..0xF, 0xA..0xF, resp. The\n    conversion is done by subtracting the offset (0x30, 0x37, and 0x57)\n    between the ASCII value of the character and the desired integer value.\n\n    @return codepoint (0x0000..0xFFFF) or -1 in case of an error (e.g. EOF or\n            non-hex character)\n    */\n    int get_codepoint()\n    {\n        // this function only makes sense after reading `\\u`\n        JSON_ASSERT(current == 'u');\n        int codepoint = 0;\n\n        const auto factors = { 12u, 8u, 4u, 0u };\n        for (const auto factor : factors)\n        {\n            get();\n\n            if (current >= '0' && current <= '9')\n            {\n                codepoint += static_cast<int>((static_cast<unsigned int>(current) - 0x30u) << factor);\n            }\n            else if (current >= 'A' && current <= 'F')\n            {\n                codepoint += static_cast<int>((static_cast<unsigned int>(current) - 0x37u) << factor);\n            }\n            else if (current >= 'a' && current <= 'f')\n            {\n                codepoint += static_cast<int>((static_cast<unsigned int>(current) - 0x57u) << factor);\n            }\n            else\n            {\n                return -1;\n            }\n        }\n\n        JSON_ASSERT(0x0000 <= codepoint && codepoint <= 0xFFFF);\n        return codepoint;\n    }\n\n    /*!\n    @brief check if the next byte(s) are inside a given range\n\n    Adds the current byte and, for each passed range, reads a new byte and\n    checks if it is inside the range. If a violation was detected, set up an\n    error message and return false. Otherwise, return true.\n\n    @param[in] ranges  list of integers; interpreted as list of pairs of\n                       inclusive lower and upper bound, respectively\n\n    @pre The passed list @a ranges must have 2, 4, or 6 elements; that is,\n         1, 2, or 3 pairs. This precondition is enforced by an assertion.\n\n    @return true if and only if no range violation was detected\n    */\n    bool next_byte_in_range(std::initializer_list<char_int_type> ranges)\n    {\n        JSON_ASSERT(ranges.size() == 2 || ranges.size() == 4 || ranges.size() == 6);\n        add(current);\n\n        for (auto range = ranges.begin(); range != ranges.end(); ++range)\n        {\n            get();\n            if (JSON_HEDLEY_LIKELY(*range <= current && current <= *(++range))) // NOLINT(bugprone-inc-dec-in-conditions)\n            {\n                add(current);\n            }\n            else\n            {\n                error_message = \"invalid string: ill-formed UTF-8 byte\";\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /*!\n    @brief scan a string literal\n\n    This function scans a string according to Sect. 7 of RFC 8259. While\n    scanning, bytes are escaped and copied into buffer token_buffer. Then the\n    function returns successfully, token_buffer is *not* null-terminated (as it\n    may contain \\0 bytes), and token_buffer.size() is the number of bytes in the\n    string.\n\n    @return token_type::value_string if string could be successfully scanned,\n            token_type::parse_error otherwise\n\n    @note In case of errors, variable error_message contains a textual\n          description.\n    */\n    token_type scan_string()\n    {\n        // reset token_buffer (ignore opening quote)\n        reset();\n\n        // we entered the function by reading an open quote\n        JSON_ASSERT(current == '\\\"');\n\n        while (true)\n        {\n            // get next character\n            switch (get())\n            {\n                // end of file while parsing string\n                case char_traits<char_type>::eof():\n                {\n                    error_message = \"invalid string: missing closing quote\";\n                    return token_type::parse_error;\n                }\n\n                // closing quote\n                case '\\\"':\n                {\n                    return token_type::value_string;\n                }\n\n                // escapes\n                case '\\\\':\n                {\n                    switch (get())\n                    {\n                        // quotation mark\n                        case '\\\"':\n                            add('\\\"');\n                            break;\n                        // reverse solidus\n                        case '\\\\':\n                            add('\\\\');\n                            break;\n                        // solidus\n                        case '/':\n                            add('/');\n                            break;\n                        // backspace\n                        case 'b':\n                            add('\\b');\n                            break;\n                        // form feed\n                        case 'f':\n                            add('\\f');\n                            break;\n                        // line feed\n                        case 'n':\n                            add('\\n');\n                            break;\n                        // carriage return\n                        case 'r':\n                            add('\\r');\n                            break;\n                        // tab\n                        case 't':\n                            add('\\t');\n                            break;\n\n                        // unicode escapes\n                        case 'u':\n                        {\n                            const int codepoint1 = get_codepoint();\n                            int codepoint = codepoint1; // start with codepoint1\n\n                            if (JSON_HEDLEY_UNLIKELY(codepoint1 == -1))\n                            {\n                                error_message = \"invalid string: '\\\\u' must be followed by 4 hex digits\";\n                                return token_type::parse_error;\n                            }\n\n                            // check if code point is a high surrogate\n                            if (0xD800 <= codepoint1 && codepoint1 <= 0xDBFF)\n                            {\n                                // expect next \\uxxxx entry\n                                if (JSON_HEDLEY_LIKELY(get() == '\\\\' && get() == 'u'))\n                                {\n                                    const int codepoint2 = get_codepoint();\n\n                                    if (JSON_HEDLEY_UNLIKELY(codepoint2 == -1))\n                                    {\n                                        error_message = \"invalid string: '\\\\u' must be followed by 4 hex digits\";\n                                        return token_type::parse_error;\n                                    }\n\n                                    // check if codepoint2 is a low surrogate\n                                    if (JSON_HEDLEY_LIKELY(0xDC00 <= codepoint2 && codepoint2 <= 0xDFFF))\n                                    {\n                                        // overwrite codepoint\n                                        codepoint = static_cast<int>(\n                                                        // high surrogate occupies the most significant 22 bits\n                                                        (static_cast<unsigned int>(codepoint1) << 10u)\n                                                        // low surrogate occupies the least significant 15 bits\n                                                        + static_cast<unsigned int>(codepoint2)\n                                                        // there is still the 0xD800, 0xDC00 and 0x10000 noise\n                                                        // in the result, so we have to subtract with:\n                                                        // (0xD800 << 10) + DC00 - 0x10000 = 0x35FDC00\n                                                        - 0x35FDC00u);\n                                    }\n                                    else\n                                    {\n                                        error_message = \"invalid string: surrogate U+D800..U+DBFF must be followed by U+DC00..U+DFFF\";\n                                        return token_type::parse_error;\n                                    }\n                                }\n                                else\n                                {\n                                    error_message = \"invalid string: surrogate U+D800..U+DBFF must be followed by U+DC00..U+DFFF\";\n                                    return token_type::parse_error;\n                                }\n                            }\n                            else\n                            {\n                                if (JSON_HEDLEY_UNLIKELY(0xDC00 <= codepoint1 && codepoint1 <= 0xDFFF))\n                                {\n                                    error_message = \"invalid string: surrogate U+DC00..U+DFFF must follow U+D800..U+DBFF\";\n                                    return token_type::parse_error;\n                                }\n                            }\n\n                            // result of the above calculation yields a proper codepoint\n                            JSON_ASSERT(0x00 <= codepoint && codepoint <= 0x10FFFF);\n\n                            // translate codepoint into bytes\n                            if (codepoint < 0x80)\n                            {\n                                // 1-byte characters: 0xxxxxxx (ASCII)\n                                add(static_cast<char_int_type>(codepoint));\n                            }\n                            else if (codepoint <= 0x7FF)\n                            {\n                                // 2-byte characters: 110xxxxx 10xxxxxx\n                                add(static_cast<char_int_type>(0xC0u | (static_cast<unsigned int>(codepoint) >> 6u)));\n                                add(static_cast<char_int_type>(0x80u | (static_cast<unsigned int>(codepoint) & 0x3Fu)));\n                            }\n                            else if (codepoint <= 0xFFFF)\n                            {\n                                // 3-byte characters: 1110xxxx 10xxxxxx 10xxxxxx\n                                add(static_cast<char_int_type>(0xE0u | (static_cast<unsigned int>(codepoint) >> 12u)));\n                                add(static_cast<char_int_type>(0x80u | ((static_cast<unsigned int>(codepoint) >> 6u) & 0x3Fu)));\n                                add(static_cast<char_int_type>(0x80u | (static_cast<unsigned int>(codepoint) & 0x3Fu)));\n                            }\n                            else\n                            {\n                                // 4-byte characters: 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n                                add(static_cast<char_int_type>(0xF0u | (static_cast<unsigned int>(codepoint) >> 18u)));\n                                add(static_cast<char_int_type>(0x80u | ((static_cast<unsigned int>(codepoint) >> 12u) & 0x3Fu)));\n                                add(static_cast<char_int_type>(0x80u | ((static_cast<unsigned int>(codepoint) >> 6u) & 0x3Fu)));\n                                add(static_cast<char_int_type>(0x80u | (static_cast<unsigned int>(codepoint) & 0x3Fu)));\n                            }\n\n                            break;\n                        }\n\n                        // other characters after escape\n                        default:\n                            error_message = \"invalid string: forbidden character after backslash\";\n                            return token_type::parse_error;\n                    }\n\n                    break;\n                }\n\n                // invalid control characters\n                case 0x00:\n                {\n                    error_message = \"invalid string: control character U+0000 (NUL) must be escaped to \\\\u0000\";\n                    return token_type::parse_error;\n                }\n\n                case 0x01:\n                {\n                    error_message = \"invalid string: control character U+0001 (SOH) must be escaped to \\\\u0001\";\n                    return token_type::parse_error;\n                }\n\n                case 0x02:\n                {\n                    error_message = \"invalid string: control character U+0002 (STX) must be escaped to \\\\u0002\";\n                    return token_type::parse_error;\n                }\n\n                case 0x03:\n                {\n                    error_message = \"invalid string: control character U+0003 (ETX) must be escaped to \\\\u0003\";\n                    return token_type::parse_error;\n                }\n\n                case 0x04:\n                {\n                    error_message = \"invalid string: control character U+0004 (EOT) must be escaped to \\\\u0004\";\n                    return token_type::parse_error;\n                }\n\n                case 0x05:\n                {\n                    error_message = \"invalid string: control character U+0005 (ENQ) must be escaped to \\\\u0005\";\n                    return token_type::parse_error;\n                }\n\n                case 0x06:\n                {\n                    error_message = \"invalid string: control character U+0006 (ACK) must be escaped to \\\\u0006\";\n                    return token_type::parse_error;\n                }\n\n                case 0x07:\n                {\n                    error_message = \"invalid string: control character U+0007 (BEL) must be escaped to \\\\u0007\";\n                    return token_type::parse_error;\n                }\n\n                case 0x08:\n                {\n                    error_message = \"invalid string: control character U+0008 (BS) must be escaped to \\\\u0008 or \\\\b\";\n                    return token_type::parse_error;\n                }\n\n                case 0x09:\n                {\n                    error_message = \"invalid string: control character U+0009 (HT) must be escaped to \\\\u0009 or \\\\t\";\n                    return token_type::parse_error;\n                }\n\n                case 0x0A:\n                {\n                    error_message = \"invalid string: control character U+000A (LF) must be escaped to \\\\u000A or \\\\n\";\n                    return token_type::parse_error;\n                }\n\n                case 0x0B:\n                {\n                    error_message = \"invalid string: control character U+000B (VT) must be escaped to \\\\u000B\";\n                    return token_type::parse_error;\n                }\n\n                case 0x0C:\n                {\n                    error_message = \"invalid string: control character U+000C (FF) must be escaped to \\\\u000C or \\\\f\";\n                    return token_type::parse_error;\n                }\n\n                case 0x0D:\n                {\n                    error_message = \"invalid string: control character U+000D (CR) must be escaped to \\\\u000D or \\\\r\";\n                    return token_type::parse_error;\n                }\n\n                case 0x0E:\n                {\n                    error_message = \"invalid string: control character U+000E (SO) must be escaped to \\\\u000E\";\n                    return token_type::parse_error;\n                }\n\n                case 0x0F:\n                {\n                    error_message = \"invalid string: control character U+000F (SI) must be escaped to \\\\u000F\";\n                    return token_type::parse_error;\n                }\n\n                case 0x10:\n                {\n                    error_message = \"invalid string: control character U+0010 (DLE) must be escaped to \\\\u0010\";\n                    return token_type::parse_error;\n                }\n\n                case 0x11:\n                {\n                    error_message = \"invalid string: control character U+0011 (DC1) must be escaped to \\\\u0011\";\n                    return token_type::parse_error;\n                }\n\n                case 0x12:\n                {\n                    error_message = \"invalid string: control character U+0012 (DC2) must be escaped to \\\\u0012\";\n                    return token_type::parse_error;\n                }\n\n                case 0x13:\n                {\n                    error_message = \"invalid string: control character U+0013 (DC3) must be escaped to \\\\u0013\";\n                    return token_type::parse_error;\n                }\n\n                case 0x14:\n                {\n                    error_message = \"invalid string: control character U+0014 (DC4) must be escaped to \\\\u0014\";\n                    return token_type::parse_error;\n                }\n\n                case 0x15:\n                {\n                    error_message = \"invalid string: control character U+0015 (NAK) must be escaped to \\\\u0015\";\n                    return token_type::parse_error;\n                }\n\n                case 0x16:\n                {\n                    error_message = \"invalid string: control character U+0016 (SYN) must be escaped to \\\\u0016\";\n                    return token_type::parse_error;\n                }\n\n                case 0x17:\n                {\n                    error_message = \"invalid string: control character U+0017 (ETB) must be escaped to \\\\u0017\";\n                    return token_type::parse_error;\n                }\n\n                case 0x18:\n                {\n                    error_message = \"invalid string: control character U+0018 (CAN) must be escaped to \\\\u0018\";\n                    return token_type::parse_error;\n                }\n\n                case 0x19:\n                {\n                    error_message = \"invalid string: control character U+0019 (EM) must be escaped to \\\\u0019\";\n                    return token_type::parse_error;\n                }\n\n                case 0x1A:\n                {\n                    error_message = \"invalid string: control character U+001A (SUB) must be escaped to \\\\u001A\";\n                    return token_type::parse_error;\n                }\n\n                case 0x1B:\n                {\n                    error_message = \"invalid string: control character U+001B (ESC) must be escaped to \\\\u001B\";\n                    return token_type::parse_error;\n                }\n\n                case 0x1C:\n                {\n                    error_message = \"invalid string: control character U+001C (FS) must be escaped to \\\\u001C\";\n                    return token_type::parse_error;\n                }\n\n                case 0x1D:\n                {\n                    error_message = \"invalid string: control character U+001D (GS) must be escaped to \\\\u001D\";\n                    return token_type::parse_error;\n                }\n\n                case 0x1E:\n                {\n                    error_message = \"invalid string: control character U+001E (RS) must be escaped to \\\\u001E\";\n                    return token_type::parse_error;\n                }\n\n                case 0x1F:\n                {\n                    error_message = \"invalid string: control character U+001F (US) must be escaped to \\\\u001F\";\n                    return token_type::parse_error;\n                }\n\n                // U+0020..U+007F (except U+0022 (quote) and U+005C (backspace))\n                case 0x20:\n                case 0x21:\n                case 0x23:\n                case 0x24:\n                case 0x25:\n                case 0x26:\n                case 0x27:\n                case 0x28:\n                case 0x29:\n                case 0x2A:\n                case 0x2B:\n                case 0x2C:\n                case 0x2D:\n                case 0x2E:\n                case 0x2F:\n                case 0x30:\n                case 0x31:\n                case 0x32:\n                case 0x33:\n                case 0x34:\n                case 0x35:\n                case 0x36:\n                case 0x37:\n                case 0x38:\n                case 0x39:\n                case 0x3A:\n                case 0x3B:\n                case 0x3C:\n                case 0x3D:\n                case 0x3E:\n                case 0x3F:\n                case 0x40:\n                case 0x41:\n                case 0x42:\n                case 0x43:\n                case 0x44:\n                case 0x45:\n                case 0x46:\n                case 0x47:\n                case 0x48:\n                case 0x49:\n                case 0x4A:\n                case 0x4B:\n                case 0x4C:\n                case 0x4D:\n                case 0x4E:\n                case 0x4F:\n                case 0x50:\n                case 0x51:\n                case 0x52:\n                case 0x53:\n                case 0x54:\n                case 0x55:\n                case 0x56:\n                case 0x57:\n                case 0x58:\n                case 0x59:\n                case 0x5A:\n                case 0x5B:\n                case 0x5D:\n                case 0x5E:\n                case 0x5F:\n                case 0x60:\n                case 0x61:\n                case 0x62:\n                case 0x63:\n                case 0x64:\n                case 0x65:\n                case 0x66:\n                case 0x67:\n                case 0x68:\n                case 0x69:\n                case 0x6A:\n                case 0x6B:\n                case 0x6C:\n                case 0x6D:\n                case 0x6E:\n                case 0x6F:\n                case 0x70:\n                case 0x71:\n                case 0x72:\n                case 0x73:\n                case 0x74:\n                case 0x75:\n                case 0x76:\n                case 0x77:\n                case 0x78:\n                case 0x79:\n                case 0x7A:\n                case 0x7B:\n                case 0x7C:\n                case 0x7D:\n                case 0x7E:\n                case 0x7F:\n                {\n                    add(current);\n                    break;\n                }\n\n                // U+0080..U+07FF: bytes C2..DF 80..BF\n                case 0xC2:\n                case 0xC3:\n                case 0xC4:\n                case 0xC5:\n                case 0xC6:\n                case 0xC7:\n                case 0xC8:\n                case 0xC9:\n                case 0xCA:\n                case 0xCB:\n                case 0xCC:\n                case 0xCD:\n                case 0xCE:\n                case 0xCF:\n                case 0xD0:\n                case 0xD1:\n                case 0xD2:\n                case 0xD3:\n                case 0xD4:\n                case 0xD5:\n                case 0xD6:\n                case 0xD7:\n                case 0xD8:\n                case 0xD9:\n                case 0xDA:\n                case 0xDB:\n                case 0xDC:\n                case 0xDD:\n                case 0xDE:\n                case 0xDF:\n                {\n                    if (JSON_HEDLEY_UNLIKELY(!next_byte_in_range({0x80, 0xBF})))\n                    {\n                        return token_type::parse_error;\n                    }\n                    break;\n                }\n\n                // U+0800..U+0FFF: bytes E0 A0..BF 80..BF\n                case 0xE0:\n                {\n                    if (JSON_HEDLEY_UNLIKELY(!(next_byte_in_range({0xA0, 0xBF, 0x80, 0xBF}))))\n                    {\n                        return token_type::parse_error;\n                    }\n                    break;\n                }\n\n                // U+1000..U+CFFF: bytes E1..EC 80..BF 80..BF\n                // U+E000..U+FFFF: bytes EE..EF 80..BF 80..BF\n                case 0xE1:\n                case 0xE2:\n                case 0xE3:\n                case 0xE4:\n                case 0xE5:\n                case 0xE6:\n                case 0xE7:\n                case 0xE8:\n                case 0xE9:\n                case 0xEA:\n                case 0xEB:\n                case 0xEC:\n                case 0xEE:\n                case 0xEF:\n                {\n                    if (JSON_HEDLEY_UNLIKELY(!(next_byte_in_range({0x80, 0xBF, 0x80, 0xBF}))))\n                    {\n                        return token_type::parse_error;\n                    }\n                    break;\n                }\n\n                // U+D000..U+D7FF: bytes ED 80..9F 80..BF\n                case 0xED:\n                {\n                    if (JSON_HEDLEY_UNLIKELY(!(next_byte_in_range({0x80, 0x9F, 0x80, 0xBF}))))\n                    {\n                        return token_type::parse_error;\n                    }\n                    break;\n                }\n\n                // U+10000..U+3FFFF F0 90..BF 80..BF 80..BF\n                case 0xF0:\n                {\n                    if (JSON_HEDLEY_UNLIKELY(!(next_byte_in_range({0x90, 0xBF, 0x80, 0xBF, 0x80, 0xBF}))))\n                    {\n                        return token_type::parse_error;\n                    }\n                    break;\n                }\n\n                // U+40000..U+FFFFF F1..F3 80..BF 80..BF 80..BF\n                case 0xF1:\n                case 0xF2:\n                case 0xF3:\n                {\n                    if (JSON_HEDLEY_UNLIKELY(!(next_byte_in_range({0x80, 0xBF, 0x80, 0xBF, 0x80, 0xBF}))))\n                    {\n                        return token_type::parse_error;\n                    }\n                    break;\n                }\n\n                // U+100000..U+10FFFF F4 80..8F 80..BF 80..BF\n                case 0xF4:\n                {\n                    if (JSON_HEDLEY_UNLIKELY(!(next_byte_in_range({0x80, 0x8F, 0x80, 0xBF, 0x80, 0xBF}))))\n                    {\n                        return token_type::parse_error;\n                    }\n                    break;\n                }\n\n                // remaining bytes (80..C1 and F5..FF) are ill-formed\n                default:\n                {\n                    error_message = \"invalid string: ill-formed UTF-8 byte\";\n                    return token_type::parse_error;\n                }\n            }\n        }\n    }\n\n    /*!\n     * @brief scan a comment\n     * @return whether comment could be scanned successfully\n     */\n    bool scan_comment()\n    {\n        switch (get())\n        {\n            // single-line comments skip input until a newline or EOF is read\n            case '/':\n            {\n                while (true)\n                {\n                    switch (get())\n                    {\n                        case '\\n':\n                        case '\\r':\n                        case char_traits<char_type>::eof():\n                        case '\\0':\n                            return true;\n\n                        default:\n                            break;\n                    }\n                }\n            }\n\n            // multi-line comments skip input until */ is read\n            case '*':\n            {\n                while (true)\n                {\n                    switch (get())\n                    {\n                        case char_traits<char_type>::eof():\n                        case '\\0':\n                        {\n                            error_message = \"invalid comment; missing closing '*/'\";\n                            return false;\n                        }\n\n                        case '*':\n                        {\n                            switch (get())\n                            {\n                                case '/':\n                                    return true;\n\n                                default:\n                                {\n                                    unget();\n                                    continue;\n                                }\n                            }\n                        }\n\n                        default:\n                            continue;\n                    }\n                }\n            }\n\n            // unexpected character after reading '/'\n            default:\n            {\n                error_message = \"invalid comment; expecting '/' or '*' after '/'\";\n                return false;\n            }\n        }\n    }\n\n    JSON_HEDLEY_NON_NULL(2)\n    static void strtof(float& f, const char* str, char** endptr) noexcept\n    {\n        f = std::strtof(str, endptr);\n    }\n\n    JSON_HEDLEY_NON_NULL(2)\n    static void strtof(double& f, const char* str, char** endptr) noexcept\n    {\n        f = std::strtod(str, endptr);\n    }\n\n    JSON_HEDLEY_NON_NULL(2)\n    static void strtof(long double& f, const char* str, char** endptr) noexcept\n    {\n        f = std::strtold(str, endptr);\n    }\n\n    /*!\n    @brief scan a number literal\n\n    This function scans a string according to Sect. 6 of RFC 8259.\n\n    The function is realized with a deterministic finite state machine derived\n    from the grammar described in RFC 8259. Starting in state \"init\", the\n    input is read and used to determined the next state. Only state \"done\"\n    accepts the number. State \"error\" is a trap state to model errors. In the\n    table below, \"anything\" means any character but the ones listed before.\n\n    state    | 0        | 1-9      | e E      | +       | -       | .        | anything\n    ---------|----------|----------|----------|---------|---------|----------|-----------\n    init     | zero     | any1     | [error]  | [error] | minus   | [error]  | [error]\n    minus    | zero     | any1     | [error]  | [error] | [error] | [error]  | [error]\n    zero     | done     | done     | exponent | done    | done    | decimal1 | done\n    any1     | any1     | any1     | exponent | done    | done    | decimal1 | done\n    decimal1 | decimal2 | decimal2 | [error]  | [error] | [error] | [error]  | [error]\n    decimal2 | decimal2 | decimal2 | exponent | done    | done    | done     | done\n    exponent | any2     | any2     | [error]  | sign    | sign    | [error]  | [error]\n    sign     | any2     | any2     | [error]  | [error] | [error] | [error]  | [error]\n    any2     | any2     | any2     | done     | done    | done    | done     | done\n\n    The state machine is realized with one label per state (prefixed with\n    \"scan_number_\") and `goto` statements between them. The state machine\n    contains cycles, but any cycle can be left when EOF is read. Therefore,\n    the function is guaranteed to terminate.\n\n    During scanning, the read bytes are stored in token_buffer. This string is\n    then converted to a signed integer, an unsigned integer, or a\n    floating-point number.\n\n    @return token_type::value_unsigned, token_type::value_integer, or\n            token_type::value_float if number could be successfully scanned,\n            token_type::parse_error otherwise\n\n    @note The scanner is independent of the current locale. Internally, the\n          locale's decimal point is used instead of `.` to work with the\n          locale-dependent converters.\n    */\n    token_type scan_number()  // lgtm [cpp/use-of-goto]\n    {\n        // reset token_buffer to store the number's bytes\n        reset();\n\n        // the type of the parsed number; initially set to unsigned; will be\n        // changed if minus sign, decimal point or exponent is read\n        token_type number_type = token_type::value_unsigned;\n\n        // state (init): we just found out we need to scan a number\n        switch (current)\n        {\n            case '-':\n            {\n                add(current);\n                goto scan_number_minus;\n            }\n\n            case '0':\n            {\n                add(current);\n                goto scan_number_zero;\n            }\n\n            case '1':\n            case '2':\n            case '3':\n            case '4':\n            case '5':\n            case '6':\n            case '7':\n            case '8':\n            case '9':\n            {\n                add(current);\n                goto scan_number_any1;\n            }\n\n            // all other characters are rejected outside scan_number()\n            default:            // LCOV_EXCL_LINE\n                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE\n        }\n\nscan_number_minus:\n        // state: we just parsed a leading minus sign\n        number_type = token_type::value_integer;\n        switch (get())\n        {\n            case '0':\n            {\n                add(current);\n                goto scan_number_zero;\n            }\n\n            case '1':\n            case '2':\n            case '3':\n            case '4':\n            case '5':\n            case '6':\n            case '7':\n            case '8':\n            case '9':\n            {\n                add(current);\n                goto scan_number_any1;\n            }\n\n            default:\n            {\n                error_message = \"invalid number; expected digit after '-'\";\n                return token_type::parse_error;\n            }\n        }\n\nscan_number_zero:\n        // state: we just parse a zero (maybe with a leading minus sign)\n        switch (get())\n        {\n            case '.':\n            {\n                add(decimal_point_char);\n                goto scan_number_decimal1;\n            }\n\n            case 'e':\n            case 'E':\n            {\n                add(current);\n                goto scan_number_exponent;\n            }\n\n            default:\n                goto scan_number_done;\n        }\n\nscan_number_any1:\n        // state: we just parsed a number 0-9 (maybe with a leading minus sign)\n        switch (get())\n        {\n            case '0':\n            case '1':\n            case '2':\n            case '3':\n            case '4':\n            case '5':\n            case '6':\n            case '7':\n            case '8':\n            case '9':\n            {\n                add(current);\n                goto scan_number_any1;\n            }\n\n            case '.':\n            {\n                add(decimal_point_char);\n                goto scan_number_decimal1;\n            }\n\n            case 'e':\n            case 'E':\n            {\n                add(current);\n                goto scan_number_exponent;\n            }\n\n            default:\n                goto scan_number_done;\n        }\n\nscan_number_decimal1:\n        // state: we just parsed a decimal point\n        number_type = token_type::value_float;\n        switch (get())\n        {\n            case '0':\n            case '1':\n            case '2':\n            case '3':\n            case '4':\n            case '5':\n            case '6':\n            case '7':\n            case '8':\n            case '9':\n            {\n                add(current);\n                goto scan_number_decimal2;\n            }\n\n            default:\n            {\n                error_message = \"invalid number; expected digit after '.'\";\n                return token_type::parse_error;\n            }\n        }\n\nscan_number_decimal2:\n        // we just parsed at least one number after a decimal point\n        switch (get())\n        {\n            case '0':\n            case '1':\n            case '2':\n            case '3':\n            case '4':\n            case '5':\n            case '6':\n            case '7':\n            case '8':\n            case '9':\n            {\n                add(current);\n                goto scan_number_decimal2;\n            }\n\n            case 'e':\n            case 'E':\n            {\n                add(current);\n                goto scan_number_exponent;\n            }\n\n            default:\n                goto scan_number_done;\n        }\n\nscan_number_exponent:\n        // we just parsed an exponent\n        number_type = token_type::value_float;\n        switch (get())\n        {\n            case '+':\n            case '-':\n            {\n                add(current);\n                goto scan_number_sign;\n            }\n\n            case '0':\n            case '1':\n            case '2':\n            case '3':\n            case '4':\n            case '5':\n            case '6':\n            case '7':\n            case '8':\n            case '9':\n            {\n                add(current);\n                goto scan_number_any2;\n            }\n\n            default:\n            {\n                error_message =\n                    \"invalid number; expected '+', '-', or digit after exponent\";\n                return token_type::parse_error;\n            }\n        }\n\nscan_number_sign:\n        // we just parsed an exponent sign\n        switch (get())\n        {\n            case '0':\n            case '1':\n            case '2':\n            case '3':\n            case '4':\n            case '5':\n            case '6':\n            case '7':\n            case '8':\n            case '9':\n            {\n                add(current);\n                goto scan_number_any2;\n            }\n\n            default:\n            {\n                error_message = \"invalid number; expected digit after exponent sign\";\n                return token_type::parse_error;\n            }\n        }\n\nscan_number_any2:\n        // we just parsed a number after the exponent or exponent sign\n        switch (get())\n        {\n            case '0':\n            case '1':\n            case '2':\n            case '3':\n            case '4':\n            case '5':\n            case '6':\n            case '7':\n            case '8':\n            case '9':\n            {\n                add(current);\n                goto scan_number_any2;\n            }\n\n            default:\n                goto scan_number_done;\n        }\n\nscan_number_done:\n        // unget the character after the number (we only read it to know that\n        // we are done scanning a number)\n        unget();\n\n        char* endptr = nullptr; // NOLINT(cppcoreguidelines-pro-type-vararg,hicpp-vararg)\n        errno = 0;\n\n        // try to parse integers first and fall back to floats\n        if (number_type == token_type::value_unsigned)\n        {\n            const auto x = std::strtoull(token_buffer.data(), &endptr, 10);\n\n            // we checked the number format before\n            JSON_ASSERT(endptr == token_buffer.data() + token_buffer.size());\n\n            if (errno == 0)\n            {\n                value_unsigned = static_cast<number_unsigned_t>(x);\n                if (value_unsigned == x)\n                {\n                    return token_type::value_unsigned;\n                }\n            }\n        }\n        else if (number_type == token_type::value_integer)\n        {\n            const auto x = std::strtoll(token_buffer.data(), &endptr, 10);\n\n            // we checked the number format before\n            JSON_ASSERT(endptr == token_buffer.data() + token_buffer.size());\n\n            if (errno == 0)\n            {\n                value_integer = static_cast<number_integer_t>(x);\n                if (value_integer == x)\n                {\n                    return token_type::value_integer;\n                }\n            }\n        }\n\n        // this code is reached if we parse a floating-point number or if an\n        // integer conversion above failed\n        strtof(value_float, token_buffer.data(), &endptr);\n\n        // we checked the number format before\n        JSON_ASSERT(endptr == token_buffer.data() + token_buffer.size());\n\n        return token_type::value_float;\n    }\n\n    /*!\n    @param[in] literal_text  the literal text to expect\n    @param[in] length        the length of the passed literal text\n    @param[in] return_type   the token type to return on success\n    */\n    JSON_HEDLEY_NON_NULL(2)\n    token_type scan_literal(const char_type* literal_text, const std::size_t length,\n                            token_type return_type)\n    {\n        JSON_ASSERT(char_traits<char_type>::to_char_type(current) == literal_text[0]);\n        for (std::size_t i = 1; i < length; ++i)\n        {\n            if (JSON_HEDLEY_UNLIKELY(char_traits<char_type>::to_char_type(get()) != literal_text[i]))\n            {\n                error_message = \"invalid literal\";\n                return token_type::parse_error;\n            }\n        }\n        return return_type;\n    }\n\n    /////////////////////\n    // input management\n    /////////////////////\n\n    /// reset token_buffer; current character is beginning of token\n    void reset() noexcept\n    {\n        token_buffer.clear();\n        token_string.clear();\n        token_string.push_back(char_traits<char_type>::to_char_type(current));\n    }\n\n    /*\n    @brief get next character from the input\n\n    This function provides the interface to the used input adapter. It does\n    not throw in case the input reached EOF, but returns a\n    `char_traits<char>::eof()` in that case.  Stores the scanned characters\n    for use in error messages.\n\n    @return character read from the input\n    */\n    char_int_type get()\n    {\n        ++position.chars_read_total;\n        ++position.chars_read_current_line;\n\n        if (next_unget)\n        {\n            // just reset the next_unget variable and work with current\n            next_unget = false;\n        }\n        else\n        {\n            current = ia.get_character();\n        }\n\n        if (JSON_HEDLEY_LIKELY(current != char_traits<char_type>::eof()))\n        {\n            token_string.push_back(char_traits<char_type>::to_char_type(current));\n        }\n\n        if (current == '\\n')\n        {\n            ++position.lines_read;\n            position.chars_read_current_line = 0;\n        }\n\n        return current;\n    }\n\n    /*!\n    @brief unget current character (read it again on next get)\n\n    We implement unget by setting variable next_unget to true. The input is not\n    changed - we just simulate ungetting by modifying chars_read_total,\n    chars_read_current_line, and token_string. The next call to get() will\n    behave as if the unget character is read again.\n    */\n    void unget()\n    {\n        next_unget = true;\n\n        --position.chars_read_total;\n\n        // in case we \"unget\" a newline, we have to also decrement the lines_read\n        if (position.chars_read_current_line == 0)\n        {\n            if (position.lines_read > 0)\n            {\n                --position.lines_read;\n            }\n        }\n        else\n        {\n            --position.chars_read_current_line;\n        }\n\n        if (JSON_HEDLEY_LIKELY(current != char_traits<char_type>::eof()))\n        {\n            JSON_ASSERT(!token_string.empty());\n            token_string.pop_back();\n        }\n    }\n\n    /// add a character to token_buffer\n    void add(char_int_type c)\n    {\n        token_buffer.push_back(static_cast<typename string_t::value_type>(c));\n    }\n\n  public:\n    /////////////////////\n    // value getters\n    /////////////////////\n\n    /// return integer value\n    constexpr number_integer_t get_number_integer() const noexcept\n    {\n        return value_integer;\n    }\n\n    /// return unsigned integer value\n    constexpr number_unsigned_t get_number_unsigned() const noexcept\n    {\n        return value_unsigned;\n    }\n\n    /// return floating-point value\n    constexpr number_float_t get_number_float() const noexcept\n    {\n        return value_float;\n    }\n\n    /// return current string value (implicitly resets the token; useful only once)\n    string_t& get_string()\n    {\n        return token_buffer;\n    }\n\n    /////////////////////\n    // diagnostics\n    /////////////////////\n\n    /// return position of last read token\n    constexpr position_t get_position() const noexcept\n    {\n        return position;\n    }\n\n    /// return the last read token (for errors only).  Will never contain EOF\n    /// (an arbitrary value that is not a valid char value, often -1), because\n    /// 255 may legitimately occur.  May contain NUL, which should be escaped.\n    std::string get_token_string() const\n    {\n        // escape control characters\n        std::string result;\n        for (const auto c : token_string)\n        {\n            if (static_cast<unsigned char>(c) <= '\\x1F')\n            {\n                // escape control characters\n                std::array<char, 9> cs{{}};\n                static_cast<void>((std::snprintf)(cs.data(), cs.size(), \"<U+%.4X>\", static_cast<unsigned char>(c))); // NOLINT(cppcoreguidelines-pro-type-vararg,hicpp-vararg)\n                result += cs.data();\n            }\n            else\n            {\n                // add character as is\n                result.push_back(static_cast<std::string::value_type>(c));\n            }\n        }\n\n        return result;\n    }\n\n    /// return syntax error message\n    JSON_HEDLEY_RETURNS_NON_NULL\n    constexpr const char* get_error_message() const noexcept\n    {\n        return error_message;\n    }\n\n    /////////////////////\n    // actual scanner\n    /////////////////////\n\n    /*!\n    @brief skip the UTF-8 byte order mark\n    @return true iff there is no BOM or the correct BOM has been skipped\n    */\n    bool skip_bom()\n    {\n        if (get() == 0xEF)\n        {\n            // check if we completely parse the BOM\n            return get() == 0xBB && get() == 0xBF;\n        }\n\n        // the first character is not the beginning of the BOM; unget it to\n        // process is later\n        unget();\n        return true;\n    }\n\n    void skip_whitespace()\n    {\n        do\n        {\n            get();\n        }\n        while (current == ' ' || current == '\\t' || current == '\\n' || current == '\\r');\n    }\n\n    token_type scan()\n    {\n        // initially, skip the BOM\n        if (position.chars_read_total == 0 && !skip_bom())\n        {\n            error_message = \"invalid BOM; must be 0xEF 0xBB 0xBF if given\";\n            return token_type::parse_error;\n        }\n\n        // read next character and ignore whitespace\n        skip_whitespace();\n\n        // ignore comments\n        while (ignore_comments && current == '/')\n        {\n            if (!scan_comment())\n            {\n                return token_type::parse_error;\n            }\n\n            // skip following whitespace\n            skip_whitespace();\n        }\n\n        switch (current)\n        {\n            // structural characters\n            case '[':\n                return token_type::begin_array;\n            case ']':\n                return token_type::end_array;\n            case '{':\n                return token_type::begin_object;\n            case '}':\n                return token_type::end_object;\n            case ':':\n                return token_type::name_separator;\n            case ',':\n                return token_type::value_separator;\n\n            // literals\n            case 't':\n            {\n                std::array<char_type, 4> true_literal = {{static_cast<char_type>('t'), static_cast<char_type>('r'), static_cast<char_type>('u'), static_cast<char_type>('e')}};\n                return scan_literal(true_literal.data(), true_literal.size(), token_type::literal_true);\n            }\n            case 'f':\n            {\n                std::array<char_type, 5> false_literal = {{static_cast<char_type>('f'), static_cast<char_type>('a'), static_cast<char_type>('l'), static_cast<char_type>('s'), static_cast<char_type>('e')}};\n                return scan_literal(false_literal.data(), false_literal.size(), token_type::literal_false);\n            }\n            case 'n':\n            {\n                std::array<char_type, 4> null_literal = {{static_cast<char_type>('n'), static_cast<char_type>('u'), static_cast<char_type>('l'), static_cast<char_type>('l')}};\n                return scan_literal(null_literal.data(), null_literal.size(), token_type::literal_null);\n            }\n\n            // string\n            case '\\\"':\n                return scan_string();\n\n            // number\n            case '-':\n            case '0':\n            case '1':\n            case '2':\n            case '3':\n            case '4':\n            case '5':\n            case '6':\n            case '7':\n            case '8':\n            case '9':\n                return scan_number();\n\n            // end of input (the null byte is needed when parsing from\n            // string literals)\n            case '\\0':\n            case char_traits<char_type>::eof():\n                return token_type::end_of_input;\n\n            // error\n            default:\n                error_message = \"invalid literal\";\n                return token_type::parse_error;\n        }\n    }\n\n  private:\n    /// input adapter\n    InputAdapterType ia;\n\n    /// whether comments should be ignored (true) or signaled as errors (false)\n    const bool ignore_comments = false;\n\n    /// the current character\n    char_int_type current = char_traits<char_type>::eof();\n\n    /// whether the next get() call should just return current\n    bool next_unget = false;\n\n    /// the start position of the current token\n    position_t position {};\n\n    /// raw input token string (for error messages)\n    std::vector<char_type> token_string {};\n\n    /// buffer for variable-length tokens (numbers, strings)\n    string_t token_buffer {};\n\n    /// a description of occurred lexer errors\n    const char* error_message = \"\";\n\n    // number values\n    number_integer_t value_integer = 0;\n    number_unsigned_t value_unsigned = 0;\n    number_float_t value_float = 0;\n\n    /// the decimal point\n    const char_int_type decimal_point_char = '.';\n};\n\n}  // namespace detail\nNLOHMANN_JSON_NAMESPACE_END\n\n// #include <nlohmann/detail/macro_scope.hpp>\n\n// #include <nlohmann/detail/meta/is_sax.hpp>\n//     __ _____ _____ _____\n//  __|  |   __|     |   | |  JSON for Modern C++\n// |  |  |__   |  |  | | | |  version 3.11.3\n// |_____|_____|_____|_|___|  https://github.com/nlohmann/json\n//\n// SPDX-FileCopyrightText: 2013-2023 Niels Lohmann <https://nlohmann.me>\n// SPDX-License-Identifier: MIT\n\n\n\n#include <cstdint> // size_t\n#include <utility> // declval\n#include <string> // string\n\n// #include <nlohmann/detail/abi_macros.hpp>\n\n// #include <nlohmann/detail/meta/detected.hpp>\n\n// #include <nlohmann/detail/meta/type_traits.hpp>\n\n\nNLOHMANN_JSON_NAMESPACE_BEGIN\nnamespace detail\n{\n\ntemplate<typename T>\nusing null_function_t = decltype(std::declval<T&>().null());\n\ntemplate<typename T>\nusing boolean_function_t =\n    decltype(std::declval<T&>().boolean(std::declval<bool>()));\n\ntemplate<typename T, typename Integer>\nusing number_integer_function_t =\n    decltype(std::declval<T&>().number_integer(std::declval<Integer>()));\n\ntemplate<typename T, typename Unsigned>\nusing number_unsigned_function_t =\n    decltype(std::declval<T&>().number_unsigned(std::declval<Unsigned>()));\n\ntemplate<typename T, typename Float, typename String>\nusing number_float_function_t = decltype(std::declval<T&>().number_float(\n                                    std::declval<Float>(), std::declval<const String&>()));\n\ntemplate<typename T, typename String>\nusing string_function_t =\n    decltype(std::declval<T&>().string(std::declval<String&>()));\n\ntemplate<typename T, typename Binary>\nusing binary_function_t =\n    decltype(std::declval<T&>().binary(std::declval<Binary&>()));\n\ntemplate<typename T>\nusing start_object_function_t =\n    decltype(std::declval<T&>().start_object(std::declval<std::size_t>()));\n\ntemplate<typename T, typename String>\nusing key_function_t =\n    decltype(std::declval<T&>().key(std::declval<String&>()));\n\ntemplate<typename T>\nusing end_object_function_t = decltype(std::declval<T&>().end_object());\n\ntemplate<typename T>\nusing start_array_function_t =\n    decltype(std::declval<T&>().start_array(std::declval<std::size_t>()));\n\ntemplate<typename T>\nusing end_array_function_t = decltype(std::declval<T&>().end_array());\n\ntemplate<typename T, typename Exception>\nusing parse_error_function_t = decltype(std::declval<T&>().parse_error(\n        std::declval<std::size_t>(), std::declval<const std::string&>(),\n        std::declval<const Exception&>()));\n\ntemplate<typename SAX, typename BasicJsonType>\nstruct is_sax\n{\n  private:\n    static_assert(is_basic_json<BasicJsonType>::value,\n                  \"BasicJsonType must be of type basic_json<...>\");\n\n    using number_integer_t = typename BasicJsonType::number_integer_t;\n    using number_unsigned_t = typename BasicJsonType::number_unsigned_t;\n    using number_float_t = typename BasicJsonType::number_float_t;\n    using string_t = typename BasicJsonType::string_t;\n    using binary_t = typename BasicJsonType::binary_t;\n    using exception_t = typename BasicJsonType::exception;\n\n  public:\n    static constexpr bool value =\n        is_detected_exact<bool, null_function_t, SAX>::value &&\n        is_detected_exact<bool, boolean_function_t, SAX>::value &&\n        is_detected_exact<bool, number_integer_function_t, SAX, number_integer_t>::value &&\n        is_detected_exact<bool, number_unsigned_function_t, SAX, number_unsigned_t>::value &&\n        is_detected_exact<bool, number_float_function_t, SAX, number_float_t, string_t>::value &&\n        is_detected_exact<bool, string_function_t, SAX, string_t>::value &&\n        is_detected_exact<bool, binary_function_t, SAX, binary_t>::value &&\n        is_detected_exact<bool, start_object_function_t, SAX>::value &&\n        is_detected_exact<bool, key_function_t, SAX, string_t>::value &&\n        is_detected_exact<bool, end_object_function_t, SAX>::value &&\n        is_detected_exact<bool, start_array_function_t, SAX>::value &&\n        is_detected_exact<bool, end_array_function_t, SAX>::value &&\n        is_detected_exact<bool, parse_error_function_t, SAX, exception_t>::value;\n};\n\ntemplate<typename SAX, typename BasicJsonType>\nstruct is_sax_static_asserts\n{\n  private:\n    static_assert(is_basic_json<BasicJsonType>::value,\n                  \"BasicJsonType must be of type basic_json<...>\");\n\n    using number_integer_t = typename BasicJsonType::number_integer_t;\n    using number_unsigned_t = typename BasicJsonType::number_unsigned_t;\n    using number_float_t = typename BasicJsonType::number_float_t;\n    using string_t = typename BasicJsonType::string_t;\n    using binary_t = typename BasicJsonType::binary_t;\n    using exception_t = typename BasicJsonType::exception;\n\n  public:\n    static_assert(is_detected_exact<bool, null_function_t, SAX>::value,\n                  \"Missing/invalid function: bool null()\");\n    static_assert(is_detected_exact<bool, boolean_function_t, SAX>::value,\n                  \"Missing/invalid function: bool boolean(bool)\");\n    static_assert(is_detected_exact<bool, boolean_function_t, SAX>::value,\n                  \"Missing/invalid function: bool boolean(bool)\");\n    static_assert(\n        is_detected_exact<bool, number_integer_function_t, SAX,\n        number_integer_t>::value,\n        \"Missing/invalid function: bool number_integer(number_integer_t)\");\n    static_assert(\n        is_detected_exact<bool, number_unsigned_function_t, SAX,\n        number_unsigned_t>::value,\n        \"Missing/invalid function: bool number_unsigned(number_unsigned_t)\");\n    static_assert(is_detected_exact<bool, number_float_function_t, SAX,\n                  number_float_t, string_t>::value,\n                  \"Missing/invalid function: bool number_float(number_float_t, const string_t&)\");\n    static_assert(\n        is_detected_exact<bool, string_function_t, SAX, string_t>::value,\n        \"Missing/invalid function: bool string(string_t&)\");\n    static_assert(\n        is_detected_exact<bool, binary_function_t, SAX, binary_t>::value,\n        \"Missing/invalid function: bool binary(binary_t&)\");\n    static_assert(is_detected_exact<bool, start_object_function_t, SAX>::value,\n                  \"Missing/invalid function: bool start_object(std::size_t)\");\n    static_assert(is_detected_exact<bool, key_function_t, SAX, string_t>::value,\n                  \"Missing/invalid function: bool key(string_t&)\");\n    static_assert(is_detected_exact<bool, end_object_function_t, SAX>::value,\n                  \"Missing/invalid function: bool end_object()\");\n    static_assert(is_detected_exact<bool, start_array_function_t, SAX>::value,\n                  \"Missing/invalid function: bool start_array(std::size_t)\");\n    static_assert(is_detected_exact<bool, end_array_function_t, SAX>::value,\n                  \"Missing/invalid function: bool end_array()\");\n    static_assert(\n        is_detected_exact<bool, parse_error_function_t, SAX, exception_t>::value,\n        \"Missing/invalid function: bool parse_error(std::size_t, const \"\n        \"std::string&, const exception&)\");\n};\n\n}  // namespace detail\nNLOHMANN_JSON_NAMESPACE_END\n\n// #include <nlohmann/detail/meta/type_traits.hpp>\n\n// #include <nlohmann/detail/string_concat.hpp>\n\n// #include <nlohmann/detail/value_t.hpp>\n\n\nNLOHMANN_JSON_NAMESPACE_BEGIN\nnamespace detail\n{\n\n/// how to treat CBOR tags\nenum class cbor_tag_handler_t\n{\n    error,   ///< throw a parse_error exception in case of a tag\n    ignore,  ///< ignore tags\n    store    ///< store tags as binary type\n};\n\n/*!\n@brief determine system byte order\n\n@return true if and only if system's byte order is little endian\n\n@note from https://stackoverflow.com/a/1001328/266378\n*/\nstatic inline bool little_endianness(int num = 1) noexcept\n{\n    return *reinterpret_cast<char*>(&num) == 1;\n}\n\n///////////////////\n// binary reader //\n///////////////////\n\n/*!\n@brief deserialization of CBOR, MessagePack, and UBJSON values\n*/\ntemplate<typename BasicJsonType, typename InputAdapterType, typename SAX = json_sax_dom_parser<BasicJsonType>>\nclass binary_reader\n{\n    using number_integer_t = typename BasicJsonType::number_integer_t;\n    using number_unsigned_t = typename BasicJsonType::number_unsigned_t;\n    using number_float_t = typename BasicJsonType::number_float_t;\n    using string_t = typename BasicJsonType::string_t;\n    using binary_t = typename BasicJsonType::binary_t;\n    using json_sax_t = SAX;\n    using char_type = typename InputAdapterType::char_type;\n    using char_int_type = typename char_traits<char_type>::int_type;\n\n  public:\n    /*!\n    @brief create a binary reader\n\n    @param[in] adapter  input adapter to read from\n    */\n    explicit binary_reader(InputAdapterType&& adapter, const input_format_t format = input_format_t::json) noexcept : ia(std::move(adapter)), input_format(format)\n    {\n        (void)detail::is_sax_static_asserts<SAX, BasicJsonType> {};\n    }\n\n    // make class move-only\n    binary_reader(const binary_reader&) = delete;\n    binary_reader(binary_reader&&) = default; // NOLINT(hicpp-noexcept-move,performance-noexcept-move-constructor)\n    binary_reader& operator=(const binary_reader&) = delete;\n    binary_reader& operator=(binary_reader&&) = default; // NOLINT(hicpp-noexcept-move,performance-noexcept-move-constructor)\n    ~binary_reader() = default;\n\n    /*!\n    @param[in] format  the binary format to parse\n    @param[in] sax_    a SAX event processor\n    @param[in] strict  whether to expect the input to be consumed completed\n    @param[in] tag_handler  how to treat CBOR tags\n\n    @return whether parsing was successful\n    */\n    JSON_HEDLEY_NON_NULL(3)\n    bool sax_parse(const input_format_t format,\n                   json_sax_t* sax_,\n                   const bool strict = true,\n                   const cbor_tag_handler_t tag_handler = cbor_tag_handler_t::error)\n    {\n        sax = sax_;\n        bool result = false;\n\n        switch (format)\n        {\n            case input_format_t::bson:\n                result = parse_bson_internal();\n                break;\n\n            case input_format_t::cbor:\n                result = parse_cbor_internal(true, tag_handler);\n                break;\n\n            case input_format_t::msgpack:\n                result = parse_msgpack_internal();\n                break;\n\n            case input_format_t::ubjson:\n            case input_format_t::bjdata:\n                result = parse_ubjson_internal();\n                break;\n\n            case input_format_t::json: // LCOV_EXCL_LINE\n            default:            // LCOV_EXCL_LINE\n                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE\n        }\n\n        // strict mode: next byte must be EOF\n        if (result && strict)\n        {\n            if (input_format == input_format_t::ubjson || input_format == input_format_t::bjdata)\n            {\n                get_ignore_noop();\n            }\n            else\n            {\n                get();\n            }\n\n            if (JSON_HEDLEY_UNLIKELY(current != char_traits<char_type>::eof()))\n            {\n                return sax->parse_error(chars_read, get_token_string(), parse_error::create(110, chars_read,\n                                        exception_message(input_format, concat(\"expected end of input; last byte: 0x\", get_token_string()), \"value\"), nullptr));\n            }\n        }\n\n        return result;\n    }\n\n  private:\n    //////////\n    // BSON //\n    //////////\n\n    /*!\n    @brief Reads in a BSON-object and passes it to the SAX-parser.\n    @return whether a valid BSON-value was passed to the SAX parser\n    */\n    bool parse_bson_internal()\n    {\n        std::int32_t document_size{};\n        get_number<std::int32_t, true>(input_format_t::bson, document_size);\n\n        if (JSON_HEDLEY_UNLIKELY(!sax->start_object(static_cast<std::size_t>(-1))))\n        {\n            return false;\n        }\n\n        if (JSON_HEDLEY_UNLIKELY(!parse_bson_element_list(/*is_array*/false)))\n        {\n            return false;\n        }\n\n        return sax->end_object();\n    }\n\n    /*!\n    @brief Parses a C-style string from the BSON input.\n    @param[in,out] result  A reference to the string variable where the read\n                            string is to be stored.\n    @return `true` if the \\x00-byte indicating the end of the string was\n             encountered before the EOF; false` indicates an unexpected EOF.\n    */\n    bool get_bson_cstr(string_t& result)\n    {\n        auto out = std::back_inserter(result);\n        while (true)\n        {\n            get();\n            if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format_t::bson, \"cstring\")))\n            {\n                return false;\n            }\n            if (current == 0x00)\n            {\n                return true;\n            }\n            *out++ = static_cast<typename string_t::value_type>(current);\n        }\n    }\n\n    /*!\n    @brief Parses a zero-terminated string of length @a len from the BSON\n           input.\n    @param[in] len  The length (including the zero-byte at the end) of the\n                    string to be read.\n    @param[in,out] result  A reference to the string variable where the read\n                            string is to be stored.\n    @tparam NumberType The type of the length @a len\n    @pre len >= 1\n    @return `true` if the string was successfully parsed\n    */\n    template<typename NumberType>\n    bool get_bson_string(const NumberType len, string_t& result)\n    {\n        if (JSON_HEDLEY_UNLIKELY(len < 1))\n        {\n            auto last_token = get_token_string();\n            return sax->parse_error(chars_read, last_token, parse_error::create(112, chars_read,\n                                    exception_message(input_format_t::bson, concat(\"string length must be at least 1, is \", std::to_string(len)), \"string\"), nullptr));\n        }\n\n        return get_string(input_format_t::bson, len - static_cast<NumberType>(1), result) && get() != char_traits<char_type>::eof();\n    }\n\n    /*!\n    @brief Parses a byte array input of length @a len from the BSON input.\n    @param[in] len  The length of the byte array to be read.\n    @param[in,out] result  A reference to the binary variable where the read\n                            array is to be stored.\n    @tparam NumberType The type of the length @a len\n    @pre len >= 0\n    @return `true` if the byte array was successfully parsed\n    */\n    template<typename NumberType>\n    bool get_bson_binary(const NumberType len, binary_t& result)\n    {\n        if (JSON_HEDLEY_UNLIKELY(len < 0))\n        {\n            auto last_token = get_token_string();\n            return sax->parse_error(chars_read, last_token, parse_error::create(112, chars_read,\n                                    exception_message(input_format_t::bson, concat(\"byte array length cannot be negative, is \", std::to_string(len)), \"binary\"), nullptr));\n        }\n\n        // All BSON binary values have a subtype\n        std::uint8_t subtype{};\n        get_number<std::uint8_t>(input_format_t::bson, subtype);\n        result.set_subtype(subtype);\n\n        return get_binary(input_format_t::bson, len, result);\n    }\n\n    /*!\n    @brief Read a BSON document element of the given @a element_type.\n    @param[in] element_type The BSON element type, c.f. http://bsonspec.org/spec.html\n    @param[in] element_type_parse_position The position in the input stream,\n               where the `element_type` was read.\n    @warning Not all BSON element types are supported yet. An unsupported\n             @a element_type will give rise to a parse_error.114:\n             Unsupported BSON record type 0x...\n    @return whether a valid BSON-object/array was passed to the SAX parser\n    */\n    bool parse_bson_element_internal(const char_int_type element_type,\n                                     const std::size_t element_type_parse_position)\n    {\n        switch (element_type)\n        {\n            case 0x01: // double\n            {\n                double number{};\n                return get_number<double, true>(input_format_t::bson, number) && sax->number_float(static_cast<number_float_t>(number), \"\");\n            }\n\n            case 0x02: // string\n            {\n                std::int32_t len{};\n                string_t value;\n                return get_number<std::int32_t, true>(input_format_t::bson, len) && get_bson_string(len, value) && sax->string(value);\n            }\n\n            case 0x03: // object\n            {\n                return parse_bson_internal();\n            }\n\n            case 0x04: // array\n            {\n                return parse_bson_array();\n            }\n\n            case 0x05: // binary\n            {\n                std::int32_t len{};\n                binary_t value;\n                return get_number<std::int32_t, true>(input_format_t::bson, len) && get_bson_binary(len, value) && sax->binary(value);\n            }\n\n            case 0x08: // boolean\n            {\n                return sax->boolean(get() != 0);\n            }\n\n            case 0x0A: // null\n            {\n                return sax->null();\n            }\n\n            case 0x10: // int32\n            {\n                std::int32_t value{};\n                return get_number<std::int32_t, true>(input_format_t::bson, value) && sax->number_integer(value);\n            }\n\n            case 0x12: // int64\n            {\n                std::int64_t value{};\n                return get_number<std::int64_t, true>(input_format_t::bson, value) && sax->number_integer(value);\n            }\n\n            default: // anything else not supported (yet)\n            {\n                std::array<char, 3> cr{{}};\n                static_cast<void>((std::snprintf)(cr.data(), cr.size(), \"%.2hhX\", static_cast<unsigned char>(element_type))); // NOLINT(cppcoreguidelines-pro-type-vararg,hicpp-vararg)\n                const std::string cr_str{cr.data()};\n                return sax->parse_error(element_type_parse_position, cr_str,\n                                        parse_error::create(114, element_type_parse_position, concat(\"Unsupported BSON record type 0x\", cr_str), nullptr));\n            }\n        }\n    }\n\n    /*!\n    @brief Read a BSON element list (as specified in the BSON-spec)\n\n    The same binary layout is used for objects and arrays, hence it must be\n    indicated with the argument @a is_array which one is expected\n    (true --> array, false --> object).\n\n    @param[in] is_array Determines if the element list being read is to be\n                        treated as an object (@a is_array == false), or as an\n                        array (@a is_array == true).\n    @return whether a valid BSON-object/array was passed to the SAX parser\n    */\n    bool parse_bson_element_list(const bool is_array)\n    {\n        string_t key;\n\n        while (auto element_type = get())\n        {\n            if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format_t::bson, \"element list\")))\n            {\n                return false;\n            }\n\n            const std::size_t element_type_parse_position = chars_read;\n            if (JSON_HEDLEY_UNLIKELY(!get_bson_cstr(key)))\n            {\n                return false;\n            }\n\n            if (!is_array && !sax->key(key))\n            {\n                return false;\n            }\n\n            if (JSON_HEDLEY_UNLIKELY(!parse_bson_element_internal(element_type, element_type_parse_position)))\n            {\n                return false;\n            }\n\n            // get_bson_cstr only appends\n            key.clear();\n        }\n\n        return true;\n    }\n\n    /*!\n    @brief Reads an array from the BSON input and passes it to the SAX-parser.\n    @return whether a valid BSON-array was passed to the SAX parser\n    */\n    bool parse_bson_array()\n    {\n        std::int32_t document_size{};\n        get_number<std::int32_t, true>(input_format_t::bson, document_size);\n\n        if (JSON_HEDLEY_UNLIKELY(!sax->start_array(static_cast<std::size_t>(-1))))\n        {\n            return false;\n        }\n\n        if (JSON_HEDLEY_UNLIKELY(!parse_bson_element_list(/*is_array*/true)))\n        {\n            return false;\n        }\n\n        return sax->end_array();\n    }\n\n    //////////\n    // CBOR //\n    //////////\n\n    /*!\n    @param[in] get_char  whether a new character should be retrieved from the\n                         input (true) or whether the last read character should\n                         be considered instead (false)\n    @param[in] tag_handler how CBOR tags should be treated\n\n    @return whether a valid CBOR value was passed to the SAX parser\n    */\n    bool parse_cbor_internal(const bool get_char,\n                             const cbor_tag_handler_t tag_handler)\n    {\n        switch (get_char ? get() : current)\n        {\n            // EOF\n            case char_traits<char_type>::eof():\n                return unexpect_eof(input_format_t::cbor, \"value\");\n\n            // Integer 0x00..0x17 (0..23)\n            case 0x00:\n            case 0x01:\n            case 0x02:\n            case 0x03:\n            case 0x04:\n            case 0x05:\n            case 0x06:\n            case 0x07:\n            case 0x08:\n            case 0x09:\n            case 0x0A:\n            case 0x0B:\n            case 0x0C:\n            case 0x0D:\n            case 0x0E:\n            case 0x0F:\n            case 0x10:\n            case 0x11:\n            case 0x12:\n            case 0x13:\n            case 0x14:\n            case 0x15:\n            case 0x16:\n            case 0x17:\n                return sax->number_unsigned(static_cast<number_unsigned_t>(current));\n\n            case 0x18: // Unsigned integer (one-byte uint8_t follows)\n            {\n                std::uint8_t number{};\n                return get_number(input_format_t::cbor, number) && sax->number_unsigned(number);\n            }\n\n            case 0x19: // Unsigned integer (two-byte uint16_t follows)\n            {\n                std::uint16_t number{};\n                return get_number(input_format_t::cbor, number) && sax->number_unsigned(number);\n            }\n\n            case 0x1A: // Unsigned integer (four-byte uint32_t follows)\n            {\n                std::uint32_t number{};\n                return get_number(input_format_t::cbor, number) && sax->number_unsigned(number);\n            }\n\n            case 0x1B: // Unsigned integer (eight-byte uint64_t follows)\n            {\n                std::uint64_t number{};\n                return get_number(input_format_t::cbor, number) && sax->number_unsigned(number);\n            }\n\n            // Negative integer -1-0x00..-1-0x17 (-1..-24)\n            case 0x20:\n            case 0x21:\n            case 0x22:\n            case 0x23:\n            case 0x24:\n            case 0x25:\n            case 0x26:\n            case 0x27:\n            case 0x28:\n            case 0x29:\n            case 0x2A:\n            case 0x2B:\n            case 0x2C:\n            case 0x2D:\n            case 0x2E:\n            case 0x2F:\n            case 0x30:\n            case 0x31:\n            case 0x32:\n            case 0x33:\n            case 0x34:\n            case 0x35:\n            case 0x36:\n            case 0x37:\n                return sax->number_integer(static_cast<std::int8_t>(0x20 - 1 - current));\n\n            case 0x38: // Negative integer (one-byte uint8_t follows)\n            {\n                std::uint8_t number{};\n                return get_number(input_format_t::cbor, number) && sax->number_integer(static_cast<number_integer_t>(-1) - number);\n            }\n\n            case 0x39: // Negative integer -1-n (two-byte uint16_t follows)\n            {\n                std::uint16_t number{};\n                return get_number(input_format_t::cbor, number) && sax->number_integer(static_cast<number_integer_t>(-1) - number);\n            }\n\n            case 0x3A: // Negative integer -1-n (four-byte uint32_t follows)\n            {\n                std::uint32_t number{};\n                return get_number(input_format_t::cbor, number) && sax->number_integer(static_cast<number_integer_t>(-1) - number);\n            }\n\n            case 0x3B: // Negative integer -1-n (eight-byte uint64_t follows)\n            {\n                std::uint64_t number{};\n                return get_number(input_format_t::cbor, number) && sax->number_integer(static_cast<number_integer_t>(-1)\n                        - static_cast<number_integer_t>(number));\n            }\n\n            // Binary data (0x00..0x17 bytes follow)\n            case 0x40:\n            case 0x41:\n            case 0x42:\n            case 0x43:\n            case 0x44:\n            case 0x45:\n            case 0x46:\n            case 0x47:\n            case 0x48:\n            case 0x49:\n            case 0x4A:\n            case 0x4B:\n            case 0x4C:\n            case 0x4D:\n            case 0x4E:\n            case 0x4F:\n            case 0x50:\n            case 0x51:\n            case 0x52:\n            case 0x53:\n            case 0x54:\n            case 0x55:\n            case 0x56:\n            case 0x57:\n            case 0x58: // Binary data (one-byte uint8_t for n follows)\n            case 0x59: // Binary data (two-byte uint16_t for n follow)\n            case 0x5A: // Binary data (four-byte uint32_t for n follow)\n            case 0x5B: // Binary data (eight-byte uint64_t for n follow)\n            case 0x5F: // Binary data (indefinite length)\n            {\n                binary_t b;\n                return get_cbor_binary(b) && sax->binary(b);\n            }\n\n            // UTF-8 string (0x00..0x17 bytes follow)\n            case 0x60:\n            case 0x61:\n            case 0x62:\n            case 0x63:\n            case 0x64:\n            case 0x65:\n            case 0x66:\n            case 0x67:\n            case 0x68:\n            case 0x69:\n            case 0x6A:\n            case 0x6B:\n            case 0x6C:\n            case 0x6D:\n            case 0x6E:\n            case 0x6F:\n            case 0x70:\n            case 0x71:\n            case 0x72:\n            case 0x73:\n            case 0x74:\n            case 0x75:\n            case 0x76:\n            case 0x77:\n            case 0x78: // UTF-8 string (one-byte uint8_t for n follows)\n            case 0x79: // UTF-8 string (two-byte uint16_t for n follow)\n            case 0x7A: // UTF-8 string (four-byte uint32_t for n follow)\n            case 0x7B: // UTF-8 string (eight-byte uint64_t for n follow)\n            case 0x7F: // UTF-8 string (indefinite length)\n            {\n                string_t s;\n                return get_cbor_string(s) && sax->string(s);\n            }\n\n            // array (0x00..0x17 data items follow)\n            case 0x80:\n            case 0x81:\n            case 0x82:\n            case 0x83:\n            case 0x84:\n            case 0x85:\n            case 0x86:\n            case 0x87:\n            case 0x88:\n            case 0x89:\n            case 0x8A:\n            case 0x8B:\n            case 0x8C:\n            case 0x8D:\n            case 0x8E:\n            case 0x8F:\n            case 0x90:\n            case 0x91:\n            case 0x92:\n            case 0x93:\n            case 0x94:\n            case 0x95:\n            case 0x96:\n            case 0x97:\n                return get_cbor_array(\n                           conditional_static_cast<std::size_t>(static_cast<unsigned int>(current) & 0x1Fu), tag_handler);\n\n            case 0x98: // array (one-byte uint8_t for n follows)\n            {\n                std::uint8_t len{};\n                return get_number(input_format_t::cbor, len) && get_cbor_array(static_cast<std::size_t>(len), tag_handler);\n            }\n\n            case 0x99: // array (two-byte uint16_t for n follow)\n            {\n                std::uint16_t len{};\n                return get_number(input_format_t::cbor, len) && get_cbor_array(static_cast<std::size_t>(len), tag_handler);\n            }\n\n            case 0x9A: // array (four-byte uint32_t for n follow)\n            {\n                std::uint32_t len{};\n                return get_number(input_format_t::cbor, len) && get_cbor_array(conditional_static_cast<std::size_t>(len), tag_handler);\n            }\n\n            case 0x9B: // array (eight-byte uint64_t for n follow)\n            {\n                std::uint64_t len{};\n                return get_number(input_format_t::cbor, len) && get_cbor_array(conditional_static_cast<std::size_t>(len), tag_handler);\n            }\n\n            case 0x9F: // array (indefinite length)\n                return get_cbor_array(static_cast<std::size_t>(-1), tag_handler);\n\n            // map (0x00..0x17 pairs of data items follow)\n            case 0xA0:\n            case 0xA1:\n            case 0xA2:\n            case 0xA3:\n            case 0xA4:\n            case 0xA5:\n            case 0xA6:\n            case 0xA7:\n            case 0xA8:\n            case 0xA9:\n            case 0xAA:\n            case 0xAB:\n            case 0xAC:\n            case 0xAD:\n            case 0xAE:\n            case 0xAF:\n            case 0xB0:\n            case 0xB1:\n            case 0xB2:\n            case 0xB3:\n            case 0xB4:\n            case 0xB5:\n            case 0xB6:\n            case 0xB7:\n                return get_cbor_object(conditional_static_cast<std::size_t>(static_cast<unsigned int>(current) & 0x1Fu), tag_handler);\n\n            case 0xB8: // map (one-byte uint8_t for n follows)\n            {\n                std::uint8_t len{};\n                return get_number(input_format_t::cbor, len) && get_cbor_object(static_cast<std::size_t>(len), tag_handler);\n            }\n\n            case 0xB9: // map (two-byte uint16_t for n follow)\n            {\n                std::uint16_t len{};\n                return get_number(input_format_t::cbor, len) && get_cbor_object(static_cast<std::size_t>(len), tag_handler);\n            }\n\n            case 0xBA: // map (four-byte uint32_t for n follow)\n            {\n                std::uint32_t len{};\n                return get_number(input_format_t::cbor, len) && get_cbor_object(conditional_static_cast<std::size_t>(len), tag_handler);\n            }\n\n            case 0xBB: // map (eight-byte uint64_t for n follow)\n            {\n                std::uint64_t len{};\n                return get_number(input_format_t::cbor, len) && get_cbor_object(conditional_static_cast<std::size_t>(len), tag_handler);\n            }\n\n            case 0xBF: // map (indefinite length)\n                return get_cbor_object(static_cast<std::size_t>(-1), tag_handler);\n\n            case 0xC6: // tagged item\n            case 0xC7:\n            case 0xC8:\n            case 0xC9:\n            case 0xCA:\n            case 0xCB:\n            case 0xCC:\n            case 0xCD:\n            case 0xCE:\n            case 0xCF:\n            case 0xD0:\n            case 0xD1:\n            case 0xD2:\n            case 0xD3:\n            case 0xD4:\n            case 0xD8: // tagged item (1 bytes follow)\n            case 0xD9: // tagged item (2 bytes follow)\n            case 0xDA: // tagged item (4 bytes follow)\n            case 0xDB: // tagged item (8 bytes follow)\n            {\n                switch (tag_handler)\n                {\n                    case cbor_tag_handler_t::error:\n                    {\n                        auto last_token = get_token_string();\n                        return sax->parse_error(chars_read, last_token, parse_error::create(112, chars_read,\n                                                exception_message(input_format_t::cbor, concat(\"invalid byte: 0x\", last_token), \"value\"), nullptr));\n                    }\n\n                    case cbor_tag_handler_t::ignore:\n                    {\n                        // ignore binary subtype\n                        switch (current)\n                        {\n                            case 0xD8:\n                            {\n                                std::uint8_t subtype_to_ignore{};\n                                get_number(input_format_t::cbor, subtype_to_ignore);\n                                break;\n                            }\n                            case 0xD9:\n                            {\n                                std::uint16_t subtype_to_ignore{};\n                                get_number(input_format_t::cbor, subtype_to_ignore);\n                                break;\n                            }\n                            case 0xDA:\n                            {\n                                std::uint32_t subtype_to_ignore{};\n                                get_number(input_format_t::cbor, subtype_to_ignore);\n                                break;\n                            }\n                            case 0xDB:\n                            {\n                                std::uint64_t subtype_to_ignore{};\n                                get_number(input_format_t::cbor, subtype_to_ignore);\n                                break;\n                            }\n                            default:\n                                break;\n                        }\n                        return parse_cbor_internal(true, tag_handler);\n                    }\n\n                    case cbor_tag_handler_t::store:\n                    {\n                        binary_t b;\n                        // use binary subtype and store in binary container\n                        switch (current)\n                        {\n                            case 0xD8:\n                            {\n                                std::uint8_t subtype{};\n                                get_number(input_format_t::cbor, subtype);\n                                b.set_subtype(detail::conditional_static_cast<typename binary_t::subtype_type>(subtype));\n                                break;\n                            }\n                            case 0xD9:\n                            {\n                                std::uint16_t subtype{};\n                                get_number(input_format_t::cbor, subtype);\n                                b.set_subtype(detail::conditional_static_cast<typename binary_t::subtype_type>(subtype));\n                                break;\n                            }\n                            case 0xDA:\n                            {\n                                std::uint32_t subtype{};\n                                get_number(input_format_t::cbor, subtype);\n                                b.set_subtype(detail::conditional_static_cast<typename binary_t::subtype_type>(subtype));\n                                break;\n                            }\n                            case 0xDB:\n                            {\n                                std::uint64_t subtype{};\n                                get_number(input_format_t::cbor, subtype);\n                                b.set_subtype(detail::conditional_static_cast<typename binary_t::subtype_type>(subtype));\n                                break;\n                            }\n                            default:\n                                return parse_cbor_internal(true, tag_handler);\n                        }\n                        get();\n                        return get_cbor_binary(b) && sax->binary(b);\n                    }\n\n                    default:                 // LCOV_EXCL_LINE\n                        JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE\n                        return false;        // LCOV_EXCL_LINE\n                }\n            }\n\n            case 0xF4: // false\n                return sax->boolean(false);\n\n            case 0xF5: // true\n                return sax->boolean(true);\n\n            case 0xF6: // null\n                return sax->null();\n\n            case 0xF9: // Half-Precision Float (two-byte IEEE 754)\n            {\n                const auto byte1_raw = get();\n                if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format_t::cbor, \"number\")))\n                {\n                    return false;\n                }\n                const auto byte2_raw = get();\n                if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format_t::cbor, \"number\")))\n                {\n                    return false;\n                }\n\n                const auto byte1 = static_cast<unsigned char>(byte1_raw);\n                const auto byte2 = static_cast<unsigned char>(byte2_raw);\n\n                // code from RFC 7049, Appendix D, Figure 3:\n                // As half-precision floating-point numbers were only added\n                // to IEEE 754 in 2008, today's programming platforms often\n                // still only have limited support for them. It is very\n                // easy to include at least decoding support for them even\n                // without such support. An example of a small decoder for\n                // half-precision floating-point numbers in the C language\n                // is shown in Fig. 3.\n                const auto half = static_cast<unsigned int>((byte1 << 8u) + byte2);\n                const double val = [&half]\n                {\n                    const int exp = (half >> 10u) & 0x1Fu;\n                    const unsigned int mant = half & 0x3FFu;\n                    JSON_ASSERT(0 <= exp&& exp <= 32);\n                    JSON_ASSERT(mant <= 1024);\n                    switch (exp)\n                    {\n                        case 0:\n                            return std::ldexp(mant, -24);\n                        case 31:\n                            return (mant == 0)\n                            ? std::numeric_limits<double>::infinity()\n                            : std::numeric_limits<double>::quiet_NaN();\n                        default:\n                            return std::ldexp(mant + 1024, exp - 25);\n                    }\n                }();\n                return sax->number_float((half & 0x8000u) != 0\n                                         ? static_cast<number_float_t>(-val)\n                                         : static_cast<number_float_t>(val), \"\");\n            }\n\n            case 0xFA: // Single-Precision Float (four-byte IEEE 754)\n            {\n                float number{};\n                return get_number(input_format_t::cbor, number) && sax->number_float(static_cast<number_float_t>(number), \"\");\n            }\n\n            case 0xFB: // Double-Precision Float (eight-byte IEEE 754)\n            {\n                double number{};\n                return get_number(input_format_t::cbor, number) && sax->number_float(static_cast<number_float_t>(number), \"\");\n            }\n\n            default: // anything else (0xFF is handled inside the other types)\n            {\n                auto last_token = get_token_string();\n                return sax->parse_error(chars_read, last_token, parse_error::create(112, chars_read,\n                                        exception_message(input_format_t::cbor, concat(\"invalid byte: 0x\", last_token), \"value\"), nullptr));\n            }\n        }\n    }\n\n    /*!\n    @brief reads a CBOR string\n\n    This function first reads starting bytes to determine the expected\n    string length and then copies this number of bytes into a string.\n    Additionally, CBOR's strings with indefinite lengths are supported.\n\n    @param[out] result  created string\n\n    @return whether string creation completed\n    */\n    bool get_cbor_string(string_t& result)\n    {\n        if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format_t::cbor, \"string\")))\n        {\n            return false;\n        }\n\n        switch (current)\n        {\n            // UTF-8 string (0x00..0x17 bytes follow)\n            case 0x60:\n            case 0x61:\n            case 0x62:\n            case 0x63:\n            case 0x64:\n            case 0x65:\n            case 0x66:\n            case 0x67:\n            case 0x68:\n            case 0x69:\n            case 0x6A:\n            case 0x6B:\n            case 0x6C:\n            case 0x6D:\n            case 0x6E:\n            case 0x6F:\n            case 0x70:\n            case 0x71:\n            case 0x72:\n            case 0x73:\n            case 0x74:\n            case 0x75:\n            case 0x76:\n            case 0x77:\n            {\n                return get_string(input_format_t::cbor, static_cast<unsigned int>(current) & 0x1Fu, result);\n            }\n\n            case 0x78: // UTF-8 string (one-byte uint8_t for n follows)\n            {\n                std::uint8_t len{};\n                return get_number(input_format_t::cbor, len) && get_string(input_format_t::cbor, len, result);\n            }\n\n            case 0x79: // UTF-8 string (two-byte uint16_t for n follow)\n            {\n                std::uint16_t len{};\n                return get_number(input_format_t::cbor, len) && get_string(input_format_t::cbor, len, result);\n            }\n\n            case 0x7A: // UTF-8 string (four-byte uint32_t for n follow)\n            {\n                std::uint32_t len{};\n                return get_number(input_format_t::cbor, len) && get_string(input_format_t::cbor, len, result);\n            }\n\n            case 0x7B: // UTF-8 string (eight-byte uint64_t for n follow)\n            {\n                std::uint64_t len{};\n                return get_number(input_format_t::cbor, len) && get_string(input_format_t::cbor, len, result);\n            }\n\n            case 0x7F: // UTF-8 string (indefinite length)\n            {\n                while (get() != 0xFF)\n                {\n                    string_t chunk;\n                    if (!get_cbor_string(chunk))\n                    {\n                        return false;\n                    }\n                    result.append(chunk);\n                }\n                return true;\n            }\n\n            default:\n            {\n                auto last_token = get_token_string();\n                return sax->parse_error(chars_read, last_token, parse_error::create(113, chars_read,\n                                        exception_message(input_format_t::cbor, concat(\"expected length specification (0x60-0x7B) or indefinite string type (0x7F); last byte: 0x\", last_token), \"string\"), nullptr));\n            }\n        }\n    }\n\n    /*!\n    @brief reads a CBOR byte array\n\n    This function first reads starting bytes to determine the expected\n    byte array length and then copies this number of bytes into the byte array.\n    Additionally, CBOR's byte arrays with indefinite lengths are supported.\n\n    @param[out] result  created byte array\n\n    @return whether byte array creation completed\n    */\n    bool get_cbor_binary(binary_t& result)\n    {\n        if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format_t::cbor, \"binary\")))\n        {\n            return false;\n        }\n\n        switch (current)\n        {\n            // Binary data (0x00..0x17 bytes follow)\n            case 0x40:\n            case 0x41:\n            case 0x42:\n            case 0x43:\n            case 0x44:\n            case 0x45:\n            case 0x46:\n            case 0x47:\n            case 0x48:\n            case 0x49:\n            case 0x4A:\n            case 0x4B:\n            case 0x4C:\n            case 0x4D:\n            case 0x4E:\n            case 0x4F:\n            case 0x50:\n            case 0x51:\n            case 0x52:\n            case 0x53:\n            case 0x54:\n            case 0x55:\n            case 0x56:\n            case 0x57:\n            {\n                return get_binary(input_format_t::cbor, static_cast<unsigned int>(current) & 0x1Fu, result);\n            }\n\n            case 0x58: // Binary data (one-byte uint8_t for n follows)\n            {\n                std::uint8_t len{};\n                return get_number(input_format_t::cbor, len) &&\n                       get_binary(input_format_t::cbor, len, result);\n            }\n\n            case 0x59: // Binary data (two-byte uint16_t for n follow)\n            {\n                std::uint16_t len{};\n                return get_number(input_format_t::cbor, len) &&\n                       get_binary(input_format_t::cbor, len, result);\n            }\n\n            case 0x5A: // Binary data (four-byte uint32_t for n follow)\n            {\n                std::uint32_t len{};\n                return get_number(input_format_t::cbor, len) &&\n                       get_binary(input_format_t::cbor, len, result);\n            }\n\n            case 0x5B: // Binary data (eight-byte uint64_t for n follow)\n            {\n                std::uint64_t len{};\n                return get_number(input_format_t::cbor, len) &&\n                       get_binary(input_format_t::cbor, len, result);\n            }\n\n            case 0x5F: // Binary data (indefinite length)\n            {\n                while (get() != 0xFF)\n                {\n                    binary_t chunk;\n                    if (!get_cbor_binary(chunk))\n                    {\n                        return false;\n                    }\n                    result.insert(result.end(), chunk.begin(), chunk.end());\n                }\n                return true;\n            }\n\n            default:\n            {\n                auto last_token = get_token_string();\n                return sax->parse_error(chars_read, last_token, parse_error::create(113, chars_read,\n                                        exception_message(input_format_t::cbor, concat(\"expected length specification (0x40-0x5B) or indefinite binary array type (0x5F); last byte: 0x\", last_token), \"binary\"), nullptr));\n            }\n        }\n    }\n\n    /*!\n    @param[in] len  the length of the array or static_cast<std::size_t>(-1) for an\n                    array of indefinite size\n    @param[in] tag_handler how CBOR tags should be treated\n    @return whether array creation completed\n    */\n    bool get_cbor_array(const std::size_t len,\n                        const cbor_tag_handler_t tag_handler)\n    {\n        if (JSON_HEDLEY_UNLIKELY(!sax->start_array(len)))\n        {\n            return false;\n        }\n\n        if (len != static_cast<std::size_t>(-1))\n        {\n            for (std::size_t i = 0; i < len; ++i)\n            {\n                if (JSON_HEDLEY_UNLIKELY(!parse_cbor_internal(true, tag_handler)))\n                {\n                    return false;\n                }\n            }\n        }\n        else\n        {\n            while (get() != 0xFF)\n            {\n                if (JSON_HEDLEY_UNLIKELY(!parse_cbor_internal(false, tag_handler)))\n                {\n                    return false;\n                }\n            }\n        }\n\n        return sax->end_array();\n    }\n\n    /*!\n    @param[in] len  the length of the object or static_cast<std::size_t>(-1) for an\n                    object of indefinite size\n    @param[in] tag_handler how CBOR tags should be treated\n    @return whether object creation completed\n    */\n    bool get_cbor_object(const std::size_t len,\n                         const cbor_tag_handler_t tag_handler)\n    {\n        if (JSON_HEDLEY_UNLIKELY(!sax->start_object(len)))\n        {\n            return false;\n        }\n\n        if (len != 0)\n        {\n            string_t key;\n            if (len != static_cast<std::size_t>(-1))\n            {\n                for (std::size_t i = 0; i < len; ++i)\n                {\n                    get();\n                    if (JSON_HEDLEY_UNLIKELY(!get_cbor_string(key) || !sax->key(key)))\n                    {\n                        return false;\n                    }\n\n                    if (JSON_HEDLEY_UNLIKELY(!parse_cbor_internal(true, tag_handler)))\n                    {\n                        return false;\n                    }\n                    key.clear();\n                }\n            }\n            else\n            {\n                while (get() != 0xFF)\n                {\n                    if (JSON_HEDLEY_UNLIKELY(!get_cbor_string(key) || !sax->key(key)))\n                    {\n                        return false;\n                    }\n\n                    if (JSON_HEDLEY_UNLIKELY(!parse_cbor_internal(true, tag_handler)))\n                    {\n                        return false;\n                    }\n                    key.clear();\n                }\n            }\n        }\n\n        return sax->end_object();\n    }\n\n    /////////////\n    // MsgPack //\n    /////////////\n\n    /*!\n    @return whether a valid MessagePack value was passed to the SAX parser\n    */\n    bool parse_msgpack_internal()\n    {\n        switch (get())\n        {\n            // EOF\n            case char_traits<char_type>::eof():\n                return unexpect_eof(input_format_t::msgpack, \"value\");\n\n            // positive fixint\n            case 0x00:\n            case 0x01:\n            case 0x02:\n            case 0x03:\n            case 0x04:\n            case 0x05:\n            case 0x06:\n            case 0x07:\n            case 0x08:\n            case 0x09:\n            case 0x0A:\n            case 0x0B:\n            case 0x0C:\n            case 0x0D:\n            case 0x0E:\n            case 0x0F:\n            case 0x10:\n            case 0x11:\n            case 0x12:\n            case 0x13:\n            case 0x14:\n            case 0x15:\n            case 0x16:\n            case 0x17:\n            case 0x18:\n            case 0x19:\n            case 0x1A:\n            case 0x1B:\n            case 0x1C:\n            case 0x1D:\n            case 0x1E:\n            case 0x1F:\n            case 0x20:\n            case 0x21:\n            case 0x22:\n            case 0x23:\n            case 0x24:\n            case 0x25:\n            case 0x26:\n            case 0x27:\n            case 0x28:\n            case 0x29:\n            case 0x2A:\n            case 0x2B:\n            case 0x2C:\n            case 0x2D:\n            case 0x2E:\n            case 0x2F:\n            case 0x30:\n            case 0x31:\n            case 0x32:\n            case 0x33:\n            case 0x34:\n            case 0x35:\n            case 0x36:\n            case 0x37:\n            case 0x38:\n            case 0x39:\n            case 0x3A:\n            case 0x3B:\n            case 0x3C:\n            case 0x3D:\n            case 0x3E:\n            case 0x3F:\n            case 0x40:\n            case 0x41:\n            case 0x42:\n            case 0x43:\n            case 0x44:\n            case 0x45:\n            case 0x46:\n            case 0x47:\n            case 0x48:\n            case 0x49:\n            case 0x4A:\n            case 0x4B:\n            case 0x4C:\n            case 0x4D:\n            case 0x4E:\n            case 0x4F:\n            case 0x50:\n            case 0x51:\n            case 0x52:\n            case 0x53:\n            case 0x54:\n            case 0x55:\n            case 0x56:\n            case 0x57:\n            case 0x58:\n            case 0x59:\n            case 0x5A:\n            case 0x5B:\n            case 0x5C:\n            case 0x5D:\n            case 0x5E:\n            case 0x5F:\n            case 0x60:\n            case 0x61:\n            case 0x62:\n            case 0x63:\n            case 0x64:\n            case 0x65:\n            case 0x66:\n            case 0x67:\n            case 0x68:\n            case 0x69:\n            case 0x6A:\n            case 0x6B:\n            case 0x6C:\n            case 0x6D:\n            case 0x6E:\n            case 0x6F:\n            case 0x70:\n            case 0x71:\n            case 0x72:\n            case 0x73:\n            case 0x74:\n            case 0x75:\n            case 0x76:\n            case 0x77:\n            case 0x78:\n            case 0x79:\n            case 0x7A:\n            case 0x7B:\n            case 0x7C:\n            case 0x7D:\n            case 0x7E:\n            case 0x7F:\n                return sax->number_unsigned(static_cast<number_unsigned_t>(current));\n\n            // fixmap\n            case 0x80:\n            case 0x81:\n            case 0x82:\n            case 0x83:\n            case 0x84:\n            case 0x85:\n            case 0x86:\n            case 0x87:\n            case 0x88:\n            case 0x89:\n            case 0x8A:\n            case 0x8B:\n            case 0x8C:\n            case 0x8D:\n            case 0x8E:\n            case 0x8F:\n                return get_msgpack_object(conditional_static_cast<std::size_t>(static_cast<unsigned int>(current) & 0x0Fu));\n\n            // fixarray\n            case 0x90:\n            case 0x91:\n            case 0x92:\n            case 0x93:\n            case 0x94:\n            case 0x95:\n            case 0x96:\n            case 0x97:\n            case 0x98:\n            case 0x99:\n            case 0x9A:\n            case 0x9B:\n            case 0x9C:\n            case 0x9D:\n            case 0x9E:\n            case 0x9F:\n                return get_msgpack_array(conditional_static_cast<std::size_t>(static_cast<unsigned int>(current) & 0x0Fu));\n\n            // fixstr\n            case 0xA0:\n            case 0xA1:\n            case 0xA2:\n            case 0xA3:\n            case 0xA4:\n            case 0xA5:\n            case 0xA6:\n            case 0xA7:\n            case 0xA8:\n            case 0xA9:\n            case 0xAA:\n            case 0xAB:\n            case 0xAC:\n            case 0xAD:\n            case 0xAE:\n            case 0xAF:\n            case 0xB0:\n            case 0xB1:\n            case 0xB2:\n            case 0xB3:\n            case 0xB4:\n            case 0xB5:\n            case 0xB6:\n            case 0xB7:\n            case 0xB8:\n            case 0xB9:\n            case 0xBA:\n            case 0xBB:\n            case 0xBC:\n            case 0xBD:\n            case 0xBE:\n            case 0xBF:\n            case 0xD9: // str 8\n            case 0xDA: // str 16\n            case 0xDB: // str 32\n            {\n                string_t s;\n                return get_msgpack_string(s) && sax->string(s);\n            }\n\n            case 0xC0: // nil\n                return sax->null();\n\n            case 0xC2: // false\n                return sax->boolean(false);\n\n            case 0xC3: // true\n                return sax->boolean(true);\n\n            case 0xC4: // bin 8\n            case 0xC5: // bin 16\n            case 0xC6: // bin 32\n            case 0xC7: // ext 8\n            case 0xC8: // ext 16\n            case 0xC9: // ext 32\n            case 0xD4: // fixext 1\n            case 0xD5: // fixext 2\n            case 0xD6: // fixext 4\n            case 0xD7: // fixext 8\n            case 0xD8: // fixext 16\n            {\n                binary_t b;\n                return get_msgpack_binary(b) && sax->binary(b);\n            }\n\n            case 0xCA: // float 32\n            {\n                float number{};\n                return get_number(input_format_t::msgpack, number) && sax->number_float(static_cast<number_float_t>(number), \"\");\n            }\n\n            case 0xCB: // float 64\n            {\n                double number{};\n                return get_number(input_format_t::msgpack, number) && sax->number_float(static_cast<number_float_t>(number), \"\");\n            }\n\n            case 0xCC: // uint 8\n            {\n                std::uint8_t number{};\n                return get_number(input_format_t::msgpack, number) && sax->number_unsigned(number);\n            }\n\n            case 0xCD: // uint 16\n            {\n                std::uint16_t number{};\n                return get_number(input_format_t::msgpack, number) && sax->number_unsigned(number);\n            }\n\n            case 0xCE: // uint 32\n            {\n                std::uint32_t number{};\n                return get_number(input_format_t::msgpack, number) && sax->number_unsigned(number);\n            }\n\n            case 0xCF: // uint 64\n            {\n                std::uint64_t number{};\n                return get_number(input_format_t::msgpack, number) && sax->number_unsigned(number);\n            }\n\n            case 0xD0: // int 8\n            {\n                std::int8_t number{};\n                return get_number(input_format_t::msgpack, number) && sax->number_integer(number);\n            }\n\n            case 0xD1: // int 16\n            {\n                std::int16_t number{};\n                return get_number(input_format_t::msgpack, number) && sax->number_integer(number);\n            }\n\n            case 0xD2: // int 32\n            {\n                std::int32_t number{};\n                return get_number(input_format_t::msgpack, number) && sax->number_integer(number);\n            }\n\n            case 0xD3: // int 64\n            {\n                std::int64_t number{};\n                return get_number(input_format_t::msgpack, number) && sax->number_integer(number);\n            }\n\n            case 0xDC: // array 16\n            {\n                std::uint16_t len{};\n                return get_number(input_format_t::msgpack, len) && get_msgpack_array(static_cast<std::size_t>(len));\n            }\n\n            case 0xDD: // array 32\n            {\n                std::uint32_t len{};\n                return get_number(input_format_t::msgpack, len) && get_msgpack_array(conditional_static_cast<std::size_t>(len));\n            }\n\n            case 0xDE: // map 16\n            {\n                std::uint16_t len{};\n                return get_number(input_format_t::msgpack, len) && get_msgpack_object(static_cast<std::size_t>(len));\n            }\n\n            case 0xDF: // map 32\n            {\n                std::uint32_t len{};\n                return get_number(input_format_t::msgpack, len) && get_msgpack_object(conditional_static_cast<std::size_t>(len));\n            }\n\n            // negative fixint\n            case 0xE0:\n            case 0xE1:\n            case 0xE2:\n            case 0xE3:\n            case 0xE4:\n            case 0xE5:\n            case 0xE6:\n            case 0xE7:\n            case 0xE8:\n            case 0xE9:\n            case 0xEA:\n            case 0xEB:\n            case 0xEC:\n            case 0xED:\n            case 0xEE:\n            case 0xEF:\n            case 0xF0:\n            case 0xF1:\n            case 0xF2:\n            case 0xF3:\n            case 0xF4:\n            case 0xF5:\n            case 0xF6:\n            case 0xF7:\n            case 0xF8:\n            case 0xF9:\n            case 0xFA:\n            case 0xFB:\n            case 0xFC:\n            case 0xFD:\n            case 0xFE:\n            case 0xFF:\n                return sax->number_integer(static_cast<std::int8_t>(current));\n\n            default: // anything else\n            {\n                auto last_token = get_token_string();\n                return sax->parse_error(chars_read, last_token, parse_error::create(112, chars_read,\n                                        exception_message(input_format_t::msgpack, concat(\"invalid byte: 0x\", last_token), \"value\"), nullptr));\n            }\n        }\n    }\n\n    /*!\n    @brief reads a MessagePack string\n\n    This function first reads starting bytes to determine the expected\n    string length and then copies this number of bytes into a string.\n\n    @param[out] result  created string\n\n    @return whether string creation completed\n    */\n    bool get_msgpack_string(string_t& result)\n    {\n        if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format_t::msgpack, \"string\")))\n        {\n            return false;\n        }\n\n        switch (current)\n        {\n            // fixstr\n            case 0xA0:\n            case 0xA1:\n            case 0xA2:\n            case 0xA3:\n            case 0xA4:\n            case 0xA5:\n            case 0xA6:\n            case 0xA7:\n            case 0xA8:\n            case 0xA9:\n            case 0xAA:\n            case 0xAB:\n            case 0xAC:\n            case 0xAD:\n            case 0xAE:\n            case 0xAF:\n            case 0xB0:\n            case 0xB1:\n            case 0xB2:\n            case 0xB3:\n            case 0xB4:\n            case 0xB5:\n            case 0xB6:\n            case 0xB7:\n            case 0xB8:\n            case 0xB9:\n            case 0xBA:\n            case 0xBB:\n            case 0xBC:\n            case 0xBD:\n            case 0xBE:\n            case 0xBF:\n            {\n                return get_string(input_format_t::msgpack, static_cast<unsigned int>(current) & 0x1Fu, result);\n            }\n\n            case 0xD9: // str 8\n            {\n                std::uint8_t len{};\n                return get_number(input_format_t::msgpack, len) && get_string(input_format_t::msgpack, len, result);\n            }\n\n            case 0xDA: // str 16\n            {\n                std::uint16_t len{};\n                return get_number(input_format_t::msgpack, len) && get_string(input_format_t::msgpack, len, result);\n            }\n\n            case 0xDB: // str 32\n            {\n                std::uint32_t len{};\n                return get_number(input_format_t::msgpack, len) && get_string(input_format_t::msgpack, len, result);\n            }\n\n            default:\n            {\n                auto last_token = get_token_string();\n                return sax->parse_error(chars_read, last_token, parse_error::create(113, chars_read,\n                                        exception_message(input_format_t::msgpack, concat(\"expected length specification (0xA0-0xBF, 0xD9-0xDB); last byte: 0x\", last_token), \"string\"), nullptr));\n            }\n        }\n    }\n\n    /*!\n    @brief reads a MessagePack byte array\n\n    This function first reads starting bytes to determine the expected\n    byte array length and then copies this number of bytes into a byte array.\n\n    @param[out] result  created byte array\n\n    @return whether byte array creation completed\n    */\n    bool get_msgpack_binary(binary_t& result)\n    {\n        // helper function to set the subtype\n        auto assign_and_return_true = [&result](std::int8_t subtype)\n        {\n            result.set_subtype(static_cast<std::uint8_t>(subtype));\n            return true;\n        };\n\n        switch (current)\n        {\n            case 0xC4: // bin 8\n            {\n                std::uint8_t len{};\n                return get_number(input_format_t::msgpack, len) &&\n                       get_binary(input_format_t::msgpack, len, result);\n            }\n\n            case 0xC5: // bin 16\n            {\n                std::uint16_t len{};\n                return get_number(input_format_t::msgpack, len) &&\n                       get_binary(input_format_t::msgpack, len, result);\n            }\n\n            case 0xC6: // bin 32\n            {\n                std::uint32_t len{};\n                return get_number(input_format_t::msgpack, len) &&\n                       get_binary(input_format_t::msgpack, len, result);\n            }\n\n            case 0xC7: // ext 8\n            {\n                std::uint8_t len{};\n                std::int8_t subtype{};\n                return get_number(input_format_t::msgpack, len) &&\n                       get_number(input_format_t::msgpack, subtype) &&\n                       get_binary(input_format_t::msgpack, len, result) &&\n                       assign_and_return_true(subtype);\n            }\n\n            case 0xC8: // ext 16\n            {\n                std::uint16_t len{};\n                std::int8_t subtype{};\n                return get_number(input_format_t::msgpack, len) &&\n                       get_number(input_format_t::msgpack, subtype) &&\n                       get_binary(input_format_t::msgpack, len, result) &&\n                       assign_and_return_true(subtype);\n            }\n\n            case 0xC9: // ext 32\n            {\n                std::uint32_t len{};\n                std::int8_t subtype{};\n                return get_number(input_format_t::msgpack, len) &&\n                       get_number(input_format_t::msgpack, subtype) &&\n                       get_binary(input_format_t::msgpack, len, result) &&\n                       assign_and_return_true(subtype);\n            }\n\n            case 0xD4: // fixext 1\n            {\n                std::int8_t subtype{};\n                return get_number(input_format_t::msgpack, subtype) &&\n                       get_binary(input_format_t::msgpack, 1, result) &&\n                       assign_and_return_true(subtype);\n            }\n\n            case 0xD5: // fixext 2\n            {\n                std::int8_t subtype{};\n                return get_number(input_format_t::msgpack, subtype) &&\n                       get_binary(input_format_t::msgpack, 2, result) &&\n                       assign_and_return_true(subtype);\n            }\n\n            case 0xD6: // fixext 4\n            {\n                std::int8_t subtype{};\n                return get_number(input_format_t::msgpack, subtype) &&\n                       get_binary(input_format_t::msgpack, 4, result) &&\n                       assign_and_return_true(subtype);\n            }\n\n            case 0xD7: // fixext 8\n            {\n                std::int8_t subtype{};\n                return get_number(input_format_t::msgpack, subtype) &&\n                       get_binary(input_format_t::msgpack, 8, result) &&\n                       assign_and_return_true(subtype);\n            }\n\n            case 0xD8: // fixext 16\n            {\n                std::int8_t subtype{};\n                return get_number(input_format_t::msgpack, subtype) &&\n                       get_binary(input_format_t::msgpack, 16, result) &&\n                       assign_and_return_true(subtype);\n            }\n\n            default:           // LCOV_EXCL_LINE\n                return false;  // LCOV_EXCL_LINE\n        }\n    }\n\n    /*!\n    @param[in] len  the length of the array\n    @return whether array creation completed\n    */\n    bool get_msgpack_array(const std::size_t len)\n    {\n        if (JSON_HEDLEY_UNLIKELY(!sax->start_array(len)))\n        {\n            return false;\n        }\n\n        for (std::size_t i = 0; i < len; ++i)\n        {\n            if (JSON_HEDLEY_UNLIKELY(!parse_msgpack_internal()))\n            {\n                return false;\n            }\n        }\n\n        return sax->end_array();\n    }\n\n    /*!\n    @param[in] len  the length of the object\n    @return whether object creation completed\n    */\n    bool get_msgpack_object(const std::size_t len)\n    {\n        if (JSON_HEDLEY_UNLIKELY(!sax->start_object(len)))\n        {\n            return false;\n        }\n\n        string_t key;\n        for (std::size_t i = 0; i < len; ++i)\n        {\n            get();\n            if (JSON_HEDLEY_UNLIKELY(!get_msgpack_string(key) || !sax->key(key)))\n            {\n                return false;\n            }\n\n            if (JSON_HEDLEY_UNLIKELY(!parse_msgpack_internal()))\n            {\n                return false;\n            }\n            key.clear();\n        }\n\n        return sax->end_object();\n    }\n\n    ////////////\n    // UBJSON //\n    ////////////\n\n    /*!\n    @param[in] get_char  whether a new character should be retrieved from the\n                         input (true, default) or whether the last read\n                         character should be considered instead\n\n    @return whether a valid UBJSON value was passed to the SAX parser\n    */\n    bool parse_ubjson_internal(const bool get_char = true)\n    {\n        return get_ubjson_value(get_char ? get_ignore_noop() : current);\n    }\n\n    /*!\n    @brief reads a UBJSON string\n\n    This function is either called after reading the 'S' byte explicitly\n    indicating a string, or in case of an object key where the 'S' byte can be\n    left out.\n\n    @param[out] result   created string\n    @param[in] get_char  whether a new character should be retrieved from the\n                         input (true, default) or whether the last read\n                         character should be considered instead\n\n    @return whether string creation completed\n    */\n    bool get_ubjson_string(string_t& result, const bool get_char = true)\n    {\n        if (get_char)\n        {\n            get();  // TODO(niels): may we ignore N here?\n        }\n\n        if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format, \"value\")))\n        {\n            return false;\n        }\n\n        switch (current)\n        {\n            case 'U':\n            {\n                std::uint8_t len{};\n                return get_number(input_format, len) && get_string(input_format, len, result);\n            }\n\n            case 'i':\n            {\n                std::int8_t len{};\n                return get_number(input_format, len) && get_string(input_format, len, result);\n            }\n\n            case 'I':\n            {\n                std::int16_t len{};\n                return get_number(input_format, len) && get_string(input_format, len, result);\n            }\n\n            case 'l':\n            {\n                std::int32_t len{};\n                return get_number(input_format, len) && get_string(input_format, len, result);\n            }\n\n            case 'L':\n            {\n                std::int64_t len{};\n                return get_number(input_format, len) && get_string(input_format, len, result);\n            }\n\n            case 'u':\n            {\n                if (input_format != input_format_t::bjdata)\n                {\n                    break;\n                }\n                std::uint16_t len{};\n                return get_number(input_format, len) && get_string(input_format, len, result);\n            }\n\n            case 'm':\n            {\n                if (input_format != input_format_t::bjdata)\n                {\n                    break;\n                }\n                std::uint32_t len{};\n                return get_number(input_format, len) && get_string(input_format, len, result);\n            }\n\n            case 'M':\n            {\n                if (input_format != input_format_t::bjdata)\n                {\n                    break;\n                }\n                std::uint64_t len{};\n                return get_number(input_format, len) && get_string(input_format, len, result);\n            }\n\n            default:\n                break;\n        }\n        auto last_token = get_token_string();\n        std::string message;\n\n        if (input_format != input_format_t::bjdata)\n        {\n            message = \"expected length type specification (U, i, I, l, L); last byte: 0x\" + last_token;\n        }\n        else\n        {\n            message = \"expected length type specification (U, i, u, I, m, l, M, L); last byte: 0x\" + last_token;\n        }\n        return sax->parse_error(chars_read, last_token, parse_error::create(113, chars_read, exception_message(input_format, message, \"string\"), nullptr));\n    }\n\n    /*!\n    @param[out] dim  an integer vector storing the ND array dimensions\n    @return whether reading ND array size vector is successful\n    */\n    bool get_ubjson_ndarray_size(std::vector<size_t>& dim)\n    {\n        std::pair<std::size_t, char_int_type> size_and_type;\n        size_t dimlen = 0;\n        bool no_ndarray = true;\n\n        if (JSON_HEDLEY_UNLIKELY(!get_ubjson_size_type(size_and_type, no_ndarray)))\n        {\n            return false;\n        }\n\n        if (size_and_type.first != npos)\n        {\n            if (size_and_type.second != 0)\n            {\n                if (size_and_type.second != 'N')\n                {\n                    for (std::size_t i = 0; i < size_and_type.first; ++i)\n                    {\n                        if (JSON_HEDLEY_UNLIKELY(!get_ubjson_size_value(dimlen, no_ndarray, size_and_type.second)))\n                        {\n                            return false;\n                        }\n                        dim.push_back(dimlen);\n                    }\n                }\n            }\n            else\n            {\n                for (std::size_t i = 0; i < size_and_type.first; ++i)\n                {\n                    if (JSON_HEDLEY_UNLIKELY(!get_ubjson_size_value(dimlen, no_ndarray)))\n                    {\n                        return false;\n                    }\n                    dim.push_back(dimlen);\n                }\n            }\n        }\n        else\n        {\n            while (current != ']')\n            {\n                if (JSON_HEDLEY_UNLIKELY(!get_ubjson_size_value(dimlen, no_ndarray, current)))\n                {\n                    return false;\n                }\n                dim.push_back(dimlen);\n                get_ignore_noop();\n            }\n        }\n        return true;\n    }\n\n    /*!\n    @param[out] result  determined size\n    @param[in,out] is_ndarray  for input, `true` means already inside an ndarray vector\n                               or ndarray dimension is not allowed; `false` means ndarray\n                               is allowed; for output, `true` means an ndarray is found;\n                               is_ndarray can only return `true` when its initial value\n                               is `false`\n    @param[in] prefix  type marker if already read, otherwise set to 0\n\n    @return whether size determination completed\n    */\n    bool get_ubjson_size_value(std::size_t& result, bool& is_ndarray, char_int_type prefix = 0)\n    {\n        if (prefix == 0)\n        {\n            prefix = get_ignore_noop();\n        }\n\n        switch (prefix)\n        {\n            case 'U':\n            {\n                std::uint8_t number{};\n                if (JSON_HEDLEY_UNLIKELY(!get_number(input_format, number)))\n                {\n                    return false;\n                }\n                result = static_cast<std::size_t>(number);\n                return true;\n            }\n\n            case 'i':\n            {\n                std::int8_t number{};\n                if (JSON_HEDLEY_UNLIKELY(!get_number(input_format, number)))\n                {\n                    return false;\n                }\n                if (number < 0)\n                {\n                    return sax->parse_error(chars_read, get_token_string(), parse_error::create(113, chars_read,\n                                            exception_message(input_format, \"count in an optimized container must be positive\", \"size\"), nullptr));\n                }\n                result = static_cast<std::size_t>(number); // NOLINT(bugprone-signed-char-misuse,cert-str34-c): number is not a char\n                return true;\n            }\n\n            case 'I':\n            {\n                std::int16_t number{};\n                if (JSON_HEDLEY_UNLIKELY(!get_number(input_format, number)))\n                {\n                    return false;\n                }\n                if (number < 0)\n                {\n                    return sax->parse_error(chars_read, get_token_string(), parse_error::create(113, chars_read,\n                                            exception_message(input_format, \"count in an optimized container must be positive\", \"size\"), nullptr));\n                }\n                result = static_cast<std::size_t>(number);\n                return true;\n            }\n\n            case 'l':\n            {\n                std::int32_t number{};\n                if (JSON_HEDLEY_UNLIKELY(!get_number(input_format, number)))\n                {\n                    return false;\n                }\n                if (number < 0)\n                {\n                    return sax->parse_error(chars_read, get_token_string(), parse_error::create(113, chars_read,\n                                            exception_message(input_format, \"count in an optimized container must be positive\", \"size\"), nullptr));\n                }\n                result = static_cast<std::size_t>(number);\n                return true;\n            }\n\n            case 'L':\n            {\n                std::int64_t number{};\n                if (JSON_HEDLEY_UNLIKELY(!get_number(input_format, number)))\n                {\n                    return false;\n                }\n                if (number < 0)\n                {\n                    return sax->parse_error(chars_read, get_token_string(), parse_error::create(113, chars_read,\n                                            exception_message(input_format, \"count in an optimized container must be positive\", \"size\"), nullptr));\n                }\n                if (!value_in_range_of<std::size_t>(number))\n                {\n                    return sax->parse_error(chars_read, get_token_string(), out_of_range::create(408,\n                                            exception_message(input_format, \"integer value overflow\", \"size\"), nullptr));\n                }\n                result = static_cast<std::size_t>(number);\n                return true;\n            }\n\n            case 'u':\n            {\n                if (input_format != input_format_t::bjdata)\n                {\n                    break;\n                }\n                std::uint16_t number{};\n                if (JSON_HEDLEY_UNLIKELY(!get_number(input_format, number)))\n                {\n                    return false;\n                }\n                result = static_cast<std::size_t>(number);\n                return true;\n            }\n\n            case 'm':\n            {\n                if (input_format != input_format_t::bjdata)\n                {\n                    break;\n                }\n                std::uint32_t number{};\n                if (JSON_HEDLEY_UNLIKELY(!get_number(input_format, number)))\n                {\n                    return false;\n                }\n                result = conditional_static_cast<std::size_t>(number);\n                return true;\n            }\n\n            case 'M':\n            {\n                if (input_format != input_format_t::bjdata)\n                {\n                    break;\n                }\n                std::uint64_t number{};\n                if (JSON_HEDLEY_UNLIKELY(!get_number(input_format, number)))\n                {\n                    return false;\n                }\n                if (!value_in_range_of<std::size_t>(number))\n                {\n                    return sax->parse_error(chars_read, get_token_string(), out_of_range::create(408,\n                                            exception_message(input_format, \"integer value overflow\", \"size\"), nullptr));\n                }\n                result = detail::conditional_static_cast<std::size_t>(number);\n                return true;\n            }\n\n            case '[':\n            {\n                if (input_format != input_format_t::bjdata)\n                {\n                    break;\n                }\n                if (is_ndarray) // ndarray dimensional vector can only contain integers, and can not embed another array\n                {\n                    return sax->parse_error(chars_read, get_token_string(), parse_error::create(113, chars_read, exception_message(input_format, \"ndarray dimensional vector is not allowed\", \"size\"), nullptr));\n                }\n                std::vector<size_t> dim;\n                if (JSON_HEDLEY_UNLIKELY(!get_ubjson_ndarray_size(dim)))\n                {\n                    return false;\n                }\n                if (dim.size() == 1 || (dim.size() == 2 && dim.at(0) == 1)) // return normal array size if 1D row vector\n                {\n                    result = dim.at(dim.size() - 1);\n                    return true;\n                }\n                if (!dim.empty())  // if ndarray, convert to an object in JData annotated array format\n                {\n                    for (auto i : dim) // test if any dimension in an ndarray is 0, if so, return a 1D empty container\n                    {\n                        if ( i == 0 )\n                        {\n                            result = 0;\n                            return true;\n                        }\n                    }\n\n                    string_t key = \"_ArraySize_\";\n                    if (JSON_HEDLEY_UNLIKELY(!sax->start_object(3) || !sax->key(key) || !sax->start_array(dim.size())))\n                    {\n                        return false;\n                    }\n                    result = 1;\n                    for (auto i : dim)\n                    {\n                        result *= i;\n                        if (result == 0 || result == npos) // because dim elements shall not have zeros, result = 0 means overflow happened; it also can't be npos as it is used to initialize size in get_ubjson_size_type()\n                        {\n                            return sax->parse_error(chars_read, get_token_string(), out_of_range::create(408, exception_message(input_format, \"excessive ndarray size caused overflow\", \"size\"), nullptr));\n                        }\n                        if (JSON_HEDLEY_UNLIKELY(!sax->number_unsigned(static_cast<number_unsigned_t>(i))))\n                        {\n                            return false;\n                        }\n                    }\n                    is_ndarray = true;\n                    return sax->end_array();\n                }\n                result = 0;\n                return true;\n            }\n\n            default:\n                break;\n        }\n        auto last_token = get_token_string();\n        std::string message;\n\n        if (input_format != input_format_t::bjdata)\n        {\n            message = \"expected length type specification (U, i, I, l, L) after '#'; last byte: 0x\" + last_token;\n        }\n        else\n        {\n            message = \"expected length type specification (U, i, u, I, m, l, M, L) after '#'; last byte: 0x\" + last_token;\n        }\n        return sax->parse_error(chars_read, last_token, parse_error::create(113, chars_read, exception_message(input_format, message, \"size\"), nullptr));\n    }\n\n    /*!\n    @brief determine the type and size for a container\n\n    In the optimized UBJSON format, a type and a size can be provided to allow\n    for a more compact representation.\n\n    @param[out] result  pair of the size and the type\n    @param[in] inside_ndarray  whether the parser is parsing an ND array dimensional vector\n\n    @return whether pair creation completed\n    */\n    bool get_ubjson_size_type(std::pair<std::size_t, char_int_type>& result, bool inside_ndarray = false)\n    {\n        result.first = npos; // size\n        result.second = 0; // type\n        bool is_ndarray = false;\n\n        get_ignore_noop();\n\n        if (current == '$')\n        {\n            result.second = get();  // must not ignore 'N', because 'N' maybe the type\n            if (input_format == input_format_t::bjdata\n                    && JSON_HEDLEY_UNLIKELY(std::binary_search(bjd_optimized_type_markers.begin(), bjd_optimized_type_markers.end(), result.second)))\n            {\n                auto last_token = get_token_string();\n                return sax->parse_error(chars_read, last_token, parse_error::create(112, chars_read,\n                                        exception_message(input_format, concat(\"marker 0x\", last_token, \" is not a permitted optimized array type\"), \"type\"), nullptr));\n            }\n\n            if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format, \"type\")))\n            {\n                return false;\n            }\n\n            get_ignore_noop();\n            if (JSON_HEDLEY_UNLIKELY(current != '#'))\n            {\n                if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format, \"value\")))\n                {\n                    return false;\n                }\n                auto last_token = get_token_string();\n                return sax->parse_error(chars_read, last_token, parse_error::create(112, chars_read,\n                                        exception_message(input_format, concat(\"expected '#' after type information; last byte: 0x\", last_token), \"size\"), nullptr));\n            }\n\n            const bool is_error = get_ubjson_size_value(result.first, is_ndarray);\n            if (input_format == input_format_t::bjdata && is_ndarray)\n            {\n                if (inside_ndarray)\n                {\n                    return sax->parse_error(chars_read, get_token_string(), parse_error::create(112, chars_read,\n                                            exception_message(input_format, \"ndarray can not be recursive\", \"size\"), nullptr));\n                }\n                result.second |= (1 << 8); // use bit 8 to indicate ndarray, all UBJSON and BJData markers should be ASCII letters\n            }\n            return is_error;\n        }\n\n        if (current == '#')\n        {\n            const bool is_error = get_ubjson_size_value(result.first, is_ndarray);\n            if (input_format == input_format_t::bjdata && is_ndarray)\n            {\n                return sax->parse_error(chars_read, get_token_string(), parse_error::create(112, chars_read,\n                                        exception_message(input_format, \"ndarray requires both type and size\", \"size\"), nullptr));\n            }\n            return is_error;\n        }\n\n        return true;\n    }\n\n    /*!\n    @param prefix  the previously read or set type prefix\n    @return whether value creation completed\n    */\n    bool get_ubjson_value(const char_int_type prefix)\n    {\n        switch (prefix)\n        {\n            case char_traits<char_type>::eof():  // EOF\n                return unexpect_eof(input_format, \"value\");\n\n            case 'T':  // true\n                return sax->boolean(true);\n            case 'F':  // false\n                return sax->boolean(false);\n\n            case 'Z':  // null\n                return sax->null();\n\n            case 'U':\n            {\n                std::uint8_t number{};\n                return get_number(input_format, number) && sax->number_unsigned(number);\n            }\n\n            case 'i':\n            {\n                std::int8_t number{};\n                return get_number(input_format, number) && sax->number_integer(number);\n            }\n\n            case 'I':\n            {\n                std::int16_t number{};\n                return get_number(input_format, number) && sax->number_integer(number);\n            }\n\n            case 'l':\n            {\n                std::int32_t number{};\n                return get_number(input_format, number) && sax->number_integer(number);\n            }\n\n            case 'L':\n            {\n                std::int64_t number{};\n                return get_number(input_format, number) && sax->number_integer(number);\n            }\n\n            case 'u':\n            {\n                if (input_format != input_format_t::bjdata)\n                {\n                    break;\n                }\n                std::uint16_t number{};\n                return get_number(input_format, number) && sax->number_unsigned(number);\n            }\n\n            case 'm':\n            {\n                if (input_format != input_format_t::bjdata)\n                {\n                    break;\n                }\n                std::uint32_t number{};\n                return get_number(input_format, number) && sax->number_unsigned(number);\n            }\n\n            case 'M':\n            {\n                if (input_format != input_format_t::bjdata)\n                {\n                    break;\n                }\n                std::uint64_t number{};\n                return get_number(input_format, number) && sax->number_unsigned(number);\n            }\n\n            case 'h':\n            {\n                if (input_format != input_format_t::bjdata)\n                {\n                    break;\n                }\n                const auto byte1_raw = get();\n                if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format, \"number\")))\n                {\n                    return false;\n                }\n                const auto byte2_raw = get();\n                if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format, \"number\")))\n                {\n                    return false;\n                }\n\n                const auto byte1 = static_cast<unsigned char>(byte1_raw);\n                const auto byte2 = static_cast<unsigned char>(byte2_raw);\n\n                // code from RFC 7049, Appendix D, Figure 3:\n                // As half-precision floating-point numbers were only added\n                // to IEEE 754 in 2008, today's programming platforms often\n                // still only have limited support for them. It is very\n                // easy to include at least decoding support for them even\n                // without such support. An example of a small decoder for\n                // half-precision floating-point numbers in the C language\n                // is shown in Fig. 3.\n                const auto half = static_cast<unsigned int>((byte2 << 8u) + byte1);\n                const double val = [&half]\n                {\n                    const int exp = (half >> 10u) & 0x1Fu;\n                    const unsigned int mant = half & 0x3FFu;\n                    JSON_ASSERT(0 <= exp&& exp <= 32);\n                    JSON_ASSERT(mant <= 1024);\n                    switch (exp)\n                    {\n                        case 0:\n                            return std::ldexp(mant, -24);\n                        case 31:\n                            return (mant == 0)\n                            ? std::numeric_limits<double>::infinity()\n                            : std::numeric_limits<double>::quiet_NaN();\n                        default:\n                            return std::ldexp(mant + 1024, exp - 25);\n                    }\n                }();\n                return sax->number_float((half & 0x8000u) != 0\n                                         ? static_cast<number_float_t>(-val)\n                                         : static_cast<number_float_t>(val), \"\");\n            }\n\n            case 'd':\n            {\n                float number{};\n                return get_number(input_format, number) && sax->number_float(static_cast<number_float_t>(number), \"\");\n            }\n\n            case 'D':\n            {\n                double number{};\n                return get_number(input_format, number) && sax->number_float(static_cast<number_float_t>(number), \"\");\n            }\n\n            case 'H':\n            {\n                return get_ubjson_high_precision_number();\n            }\n\n            case 'C':  // char\n            {\n                get();\n                if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format, \"char\")))\n                {\n                    return false;\n                }\n                if (JSON_HEDLEY_UNLIKELY(current > 127))\n                {\n                    auto last_token = get_token_string();\n                    return sax->parse_error(chars_read, last_token, parse_error::create(113, chars_read,\n                                            exception_message(input_format, concat(\"byte after 'C' must be in range 0x00..0x7F; last byte: 0x\", last_token), \"char\"), nullptr));\n                }\n                string_t s(1, static_cast<typename string_t::value_type>(current));\n                return sax->string(s);\n            }\n\n            case 'S':  // string\n            {\n                string_t s;\n                return get_ubjson_string(s) && sax->string(s);\n            }\n\n            case '[':  // array\n                return get_ubjson_array();\n\n            case '{':  // object\n                return get_ubjson_object();\n\n            default: // anything else\n                break;\n        }\n        auto last_token = get_token_string();\n        return sax->parse_error(chars_read, last_token, parse_error::create(112, chars_read, exception_message(input_format, \"invalid byte: 0x\" + last_token, \"value\"), nullptr));\n    }\n\n    /*!\n    @return whether array creation completed\n    */\n    bool get_ubjson_array()\n    {\n        std::pair<std::size_t, char_int_type> size_and_type;\n        if (JSON_HEDLEY_UNLIKELY(!get_ubjson_size_type(size_and_type)))\n        {\n            return false;\n        }\n\n        // if bit-8 of size_and_type.second is set to 1, encode bjdata ndarray as an object in JData annotated array format (https://github.com/NeuroJSON/jdata):\n        // {\"_ArrayType_\" : \"typeid\", \"_ArraySize_\" : [n1, n2, ...], \"_ArrayData_\" : [v1, v2, ...]}\n\n        if (input_format == input_format_t::bjdata && size_and_type.first != npos && (size_and_type.second & (1 << 8)) != 0)\n        {\n            size_and_type.second &= ~(static_cast<char_int_type>(1) << 8);  // use bit 8 to indicate ndarray, here we remove the bit to restore the type marker\n            auto it = std::lower_bound(bjd_types_map.begin(), bjd_types_map.end(), size_and_type.second, [](const bjd_type & p, char_int_type t)\n            {\n                return p.first < t;\n            });\n            string_t key = \"_ArrayType_\";\n            if (JSON_HEDLEY_UNLIKELY(it == bjd_types_map.end() || it->first != size_and_type.second))\n            {\n                auto last_token = get_token_string();\n                return sax->parse_error(chars_read, last_token, parse_error::create(112, chars_read,\n                                        exception_message(input_format, \"invalid byte: 0x\" + last_token, \"type\"), nullptr));\n            }\n\n            string_t type = it->second; // sax->string() takes a reference\n            if (JSON_HEDLEY_UNLIKELY(!sax->key(key) || !sax->string(type)))\n            {\n                return false;\n            }\n\n            if (size_and_type.second == 'C')\n            {\n                size_and_type.second = 'U';\n            }\n\n            key = \"_ArrayData_\";\n            if (JSON_HEDLEY_UNLIKELY(!sax->key(key) || !sax->start_array(size_and_type.first) ))\n            {\n                return false;\n            }\n\n            for (std::size_t i = 0; i < size_and_type.first; ++i)\n            {\n                if (JSON_HEDLEY_UNLIKELY(!get_ubjson_value(size_and_type.second)))\n                {\n                    return false;\n                }\n            }\n\n            return (sax->end_array() && sax->end_object());\n        }\n\n        if (size_and_type.first != npos)\n        {\n            if (JSON_HEDLEY_UNLIKELY(!sax->start_array(size_and_type.first)))\n            {\n                return false;\n            }\n\n            if (size_and_type.second != 0)\n            {\n                if (size_and_type.second != 'N')\n                {\n                    for (std::size_t i = 0; i < size_and_type.first; ++i)\n                    {\n                        if (JSON_HEDLEY_UNLIKELY(!get_ubjson_value(size_and_type.second)))\n                        {\n                            return false;\n                        }\n                    }\n                }\n            }\n            else\n            {\n                for (std::size_t i = 0; i < size_and_type.first; ++i)\n                {\n                    if (JSON_HEDLEY_UNLIKELY(!parse_ubjson_internal()))\n                    {\n                        return false;\n                    }\n                }\n            }\n        }\n        else\n        {\n            if (JSON_HEDLEY_UNLIKELY(!sax->start_array(static_cast<std::size_t>(-1))))\n            {\n                return false;\n            }\n\n            while (current != ']')\n            {\n                if (JSON_HEDLEY_UNLIKELY(!parse_ubjson_internal(false)))\n                {\n                    return false;\n                }\n                get_ignore_noop();\n            }\n        }\n\n        return sax->end_array();\n    }\n\n    /*!\n    @return whether object creation completed\n    */\n    bool get_ubjson_object()\n    {\n        std::pair<std::size_t, char_int_type> size_and_type;\n        if (JSON_HEDLEY_UNLIKELY(!get_ubjson_size_type(size_and_type)))\n        {\n            return false;\n        }\n\n        // do not accept ND-array size in objects in BJData\n        if (input_format == input_format_t::bjdata && size_and_type.first != npos && (size_and_type.second & (1 << 8)) != 0)\n        {\n            auto last_token = get_token_string();\n            return sax->parse_error(chars_read, last_token, parse_error::create(112, chars_read,\n                                    exception_message(input_format, \"BJData object does not support ND-array size in optimized format\", \"object\"), nullptr));\n        }\n\n        string_t key;\n        if (size_and_type.first != npos)\n        {\n            if (JSON_HEDLEY_UNLIKELY(!sax->start_object(size_and_type.first)))\n            {\n                return false;\n            }\n\n            if (size_and_type.second != 0)\n            {\n                for (std::size_t i = 0; i < size_and_type.first; ++i)\n                {\n                    if (JSON_HEDLEY_UNLIKELY(!get_ubjson_string(key) || !sax->key(key)))\n                    {\n                        return false;\n                    }\n                    if (JSON_HEDLEY_UNLIKELY(!get_ubjson_value(size_and_type.second)))\n                    {\n                        return false;\n                    }\n                    key.clear();\n                }\n            }\n            else\n            {\n                for (std::size_t i = 0; i < size_and_type.first; ++i)\n                {\n                    if (JSON_HEDLEY_UNLIKELY(!get_ubjson_string(key) || !sax->key(key)))\n                    {\n                        return false;\n                    }\n                    if (JSON_HEDLEY_UNLIKELY(!parse_ubjson_internal()))\n                    {\n                        return false;\n                    }\n                    key.clear();\n                }\n            }\n        }\n        else\n        {\n            if (JSON_HEDLEY_UNLIKELY(!sax->start_object(static_cast<std::size_t>(-1))))\n            {\n                return false;\n            }\n\n            while (current != '}')\n            {\n                if (JSON_HEDLEY_UNLIKELY(!get_ubjson_string(key, false) || !sax->key(key)))\n                {\n                    return false;\n                }\n                if (JSON_HEDLEY_UNLIKELY(!parse_ubjson_internal()))\n                {\n                    return false;\n                }\n                get_ignore_noop();\n                key.clear();\n            }\n        }\n\n        return sax->end_object();\n    }\n\n    // Note, no reader for UBJSON binary types is implemented because they do\n    // not exist\n\n    bool get_ubjson_high_precision_number()\n    {\n        // get size of following number string\n        std::size_t size{};\n        bool no_ndarray = true;\n        auto res = get_ubjson_size_value(size, no_ndarray);\n        if (JSON_HEDLEY_UNLIKELY(!res))\n        {\n            return res;\n        }\n\n        // get number string\n        std::vector<char> number_vector;\n        for (std::size_t i = 0; i < size; ++i)\n        {\n            get();\n            if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format, \"number\")))\n            {\n                return false;\n            }\n            number_vector.push_back(static_cast<char>(current));\n        }\n\n        // parse number string\n        using ia_type = decltype(detail::input_adapter(number_vector));\n        auto number_lexer = detail::lexer<BasicJsonType, ia_type>(detail::input_adapter(number_vector), false);\n        const auto result_number = number_lexer.scan();\n        const auto number_string = number_lexer.get_token_string();\n        const auto result_remainder = number_lexer.scan();\n\n        using token_type = typename detail::lexer_base<BasicJsonType>::token_type;\n\n        if (JSON_HEDLEY_UNLIKELY(result_remainder != token_type::end_of_input))\n        {\n            return sax->parse_error(chars_read, number_string, parse_error::create(115, chars_read,\n                                    exception_message(input_format, concat(\"invalid number text: \", number_lexer.get_token_string()), \"high-precision number\"), nullptr));\n        }\n\n        switch (result_number)\n        {\n            case token_type::value_integer:\n                return sax->number_integer(number_lexer.get_number_integer());\n            case token_type::value_unsigned:\n                return sax->number_unsigned(number_lexer.get_number_unsigned());\n            case token_type::value_float:\n                return sax->number_float(number_lexer.get_number_float(), std::move(number_string));\n            case token_type::uninitialized:\n            case token_type::literal_true:\n            case token_type::literal_false:\n            case token_type::literal_null:\n            case token_type::value_string:\n            case token_type::begin_array:\n            case token_type::begin_object:\n            case token_type::end_array:\n            case token_type::end_object:\n            case token_type::name_separator:\n            case token_type::value_separator:\n            case token_type::parse_error:\n            case token_type::end_of_input:\n            case token_type::literal_or_value:\n            default:\n                return sax->parse_error(chars_read, number_string, parse_error::create(115, chars_read,\n                                        exception_message(input_format, concat(\"invalid number text: \", number_lexer.get_token_string()), \"high-precision number\"), nullptr));\n        }\n    }\n\n    ///////////////////////\n    // Utility functions //\n    ///////////////////////\n\n    /*!\n    @brief get next character from the input\n\n    This function provides the interface to the used input adapter. It does\n    not throw in case the input reached EOF, but returns a -'ve valued\n    `char_traits<char_type>::eof()` in that case.\n\n    @return character read from the input\n    */\n    char_int_type get()\n    {\n        ++chars_read;\n        return current = ia.get_character();\n    }\n\n    /*!\n    @return character read from the input after ignoring all 'N' entries\n    */\n    char_int_type get_ignore_noop()\n    {\n        do\n        {\n            get();\n        }\n        while (current == 'N');\n\n        return current;\n    }\n\n    /*\n    @brief read a number from the input\n\n    @tparam NumberType the type of the number\n    @param[in] format   the current format (for diagnostics)\n    @param[out] result  number of type @a NumberType\n\n    @return whether conversion completed\n\n    @note This function needs to respect the system's endianness, because\n          bytes in CBOR, MessagePack, and UBJSON are stored in network order\n          (big endian) and therefore need reordering on little endian systems.\n          On the other hand, BSON and BJData use little endian and should reorder\n          on big endian systems.\n    */\n    template<typename NumberType, bool InputIsLittleEndian = false>\n    bool get_number(const input_format_t format, NumberType& result)\n    {\n        // step 1: read input into array with system's byte order\n        std::array<std::uint8_t, sizeof(NumberType)> vec{};\n        for (std::size_t i = 0; i < sizeof(NumberType); ++i)\n        {\n            get();\n            if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(format, \"number\")))\n            {\n                return false;\n            }\n\n            // reverse byte order prior to conversion if necessary\n            if (is_little_endian != (InputIsLittleEndian || format == input_format_t::bjdata))\n            {\n                vec[sizeof(NumberType) - i - 1] = static_cast<std::uint8_t>(current);\n            }\n            else\n            {\n                vec[i] = static_cast<std::uint8_t>(current); // LCOV_EXCL_LINE\n            }\n        }\n\n        // step 2: convert array into number of type T and return\n        std::memcpy(&result, vec.data(), sizeof(NumberType));\n        return true;\n    }\n\n    /*!\n    @brief create a string by reading characters from the input\n\n    @tparam NumberType the type of the number\n    @param[in] format the current format (for diagnostics)\n    @param[in] len number of characters to read\n    @param[out] result string created by reading @a len bytes\n\n    @return whether string creation completed\n\n    @note We can not reserve @a len bytes for the result, because @a len\n          may be too large. Usually, @ref unexpect_eof() detects the end of\n          the input before we run out of string memory.\n    */\n    template<typename NumberType>\n    bool get_string(const input_format_t format,\n                    const NumberType len,\n                    string_t& result)\n    {\n        bool success = true;\n        for (NumberType i = 0; i < len; i++)\n        {\n            get();\n            if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(format, \"string\")))\n            {\n                success = false;\n                break;\n            }\n            result.push_back(static_cast<typename string_t::value_type>(current));\n        }\n        return success;\n    }\n\n    /*!\n    @brief create a byte array by reading bytes from the input\n\n    @tparam NumberType the type of the number\n    @param[in] format the current format (for diagnostics)\n    @param[in] len number of bytes to read\n    @param[out] result byte array created by reading @a len bytes\n\n    @return whether byte array creation completed\n\n    @note We can not reserve @a len bytes for the result, because @a len\n          may be too large. Usually, @ref unexpect_eof() detects the end of\n          the input before we run out of memory.\n    */\n    template<typename NumberType>\n    bool get_binary(const input_format_t format,\n                    const NumberType len,\n                    binary_t& result)\n    {\n        bool success = true;\n        for (NumberType i = 0; i < len; i++)\n        {\n            get();\n            if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(format, \"binary\")))\n            {\n                success = false;\n                break;\n            }\n            result.push_back(static_cast<std::uint8_t>(current));\n        }\n        return success;\n    }\n\n    /*!\n    @param[in] format   the current format (for diagnostics)\n    @param[in] context  further context information (for diagnostics)\n    @return whether the last read character is not EOF\n    */\n    JSON_HEDLEY_NON_NULL(3)\n    bool unexpect_eof(const input_format_t format, const char* context) const\n    {\n        if (JSON_HEDLEY_UNLIKELY(current == char_traits<char_type>::eof()))\n        {\n            return sax->parse_error(chars_read, \"<end of file>\",\n                                    parse_error::create(110, chars_read, exception_message(format, \"unexpected end of input\", context), nullptr));\n        }\n        return true;\n    }\n\n    /*!\n    @return a string representation of the last read byte\n    */\n    std::string get_token_string() const\n    {\n        std::array<char, 3> cr{{}};\n        static_cast<void>((std::snprintf)(cr.data(), cr.size(), \"%.2hhX\", static_cast<unsigned char>(current))); // NOLINT(cppcoreguidelines-pro-type-vararg,hicpp-vararg)\n        return std::string{cr.data()};\n    }\n\n    /*!\n    @param[in] format   the current format\n    @param[in] detail   a detailed error message\n    @param[in] context  further context information\n    @return a message string to use in the parse_error exceptions\n    */\n    std::string exception_message(const input_format_t format,\n                                  const std::string& detail,\n                                  const std::string& context) const\n    {\n        std::string error_msg = \"syntax error while parsing \";\n\n        switch (format)\n        {\n            case input_format_t::cbor:\n                error_msg += \"CBOR\";\n                break;\n\n            case input_format_t::msgpack:\n                error_msg += \"MessagePack\";\n                break;\n\n            case input_format_t::ubjson:\n                error_msg += \"UBJSON\";\n                break;\n\n            case input_format_t::bson:\n                error_msg += \"BSON\";\n                break;\n\n            case input_format_t::bjdata:\n                error_msg += \"BJData\";\n                break;\n\n            case input_format_t::json: // LCOV_EXCL_LINE\n            default:            // LCOV_EXCL_LINE\n                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE\n        }\n\n        return concat(error_msg, ' ', context, \": \", detail);\n    }\n\n  private:\n    static JSON_INLINE_VARIABLE constexpr std::size_t npos = static_cast<std::size_t>(-1);\n\n    /// input adapter\n    InputAdapterType ia;\n\n    /// the current character\n    char_int_type current = char_traits<char_type>::eof();\n\n    /// the number of characters read\n    std::size_t chars_read = 0;\n\n    /// whether we can assume little endianness\n    const bool is_little_endian = little_endianness();\n\n    /// input format\n    const input_format_t input_format = input_format_t::json;\n\n    /// the SAX parser\n    json_sax_t* sax = nullptr;\n\n    // excluded markers in bjdata optimized type\n#define JSON_BINARY_READER_MAKE_BJD_OPTIMIZED_TYPE_MARKERS_ \\\n    make_array<char_int_type>('F', 'H', 'N', 'S', 'T', 'Z', '[', '{')\n\n#define JSON_BINARY_READER_MAKE_BJD_TYPES_MAP_ \\\n    make_array<bjd_type>(                      \\\n    bjd_type{'C', \"char\"},                     \\\n    bjd_type{'D', \"double\"},                   \\\n    bjd_type{'I', \"int16\"},                    \\\n    bjd_type{'L', \"int64\"},                    \\\n    bjd_type{'M', \"uint64\"},                   \\\n    bjd_type{'U', \"uint8\"},                    \\\n    bjd_type{'d', \"single\"},                   \\\n    bjd_type{'i', \"int8\"},                     \\\n    bjd_type{'l', \"int32\"},                    \\\n    bjd_type{'m', \"uint32\"},                   \\\n    bjd_type{'u', \"uint16\"})\n\n  JSON_PRIVATE_UNLESS_TESTED:\n    // lookup tables\n    // NOLINTNEXTLINE(cppcoreguidelines-non-private-member-variables-in-classes)\n    const decltype(JSON_BINARY_READER_MAKE_BJD_OPTIMIZED_TYPE_MARKERS_) bjd_optimized_type_markers =\n        JSON_BINARY_READER_MAKE_BJD_OPTIMIZED_TYPE_MARKERS_;\n\n    using bjd_type = std::pair<char_int_type, string_t>;\n    // NOLINTNEXTLINE(cppcoreguidelines-non-private-member-variables-in-classes)\n    const decltype(JSON_BINARY_READER_MAKE_BJD_TYPES_MAP_) bjd_types_map =\n        JSON_BINARY_READER_MAKE_BJD_TYPES_MAP_;\n\n#undef JSON_BINARY_READER_MAKE_BJD_OPTIMIZED_TYPE_MARKERS_\n#undef JSON_BINARY_READER_MAKE_BJD_TYPES_MAP_\n};\n\n#ifndef JSON_HAS_CPP_17\n    template<typename BasicJsonType, typename InputAdapterType, typename SAX>\n    constexpr std::size_t binary_reader<BasicJsonType, InputAdapterType, SAX>::npos;\n#endif\n\n}  // namespace detail\nNLOHMANN_JSON_NAMESPACE_END\n\n// #include <nlohmann/detail/input/input_adapters.hpp>\n\n// #include <nlohmann/detail/input/lexer.hpp>\n\n// #include <nlohmann/detail/input/parser.hpp>\n//     __ _____ _____ _____\n//  __|  |   __|     |   | |  JSON for Modern C++\n// |  |  |__   |  |  | | | |  version 3.11.3\n// |_____|_____|_____|_|___|  https://github.com/nlohmann/json\n//\n// SPDX-FileCopyrightText: 2013-2023 Niels Lohmann <https://nlohmann.me>\n// SPDX-License-Identifier: MIT\n\n\n\n#include <cmath> // isfinite\n#include <cstdint> // uint8_t\n#include <functional> // function\n#include <string> // string\n#include <utility> // move\n#include <vector> // vector\n\n// #include <nlohmann/detail/exceptions.hpp>\n\n// #include <nlohmann/detail/input/input_adapters.hpp>\n\n// #include <nlohmann/detail/input/json_sax.hpp>\n\n// #include <nlohmann/detail/input/lexer.hpp>\n\n// #include <nlohmann/detail/macro_scope.hpp>\n\n// #include <nlohmann/detail/meta/is_sax.hpp>\n\n// #include <nlohmann/detail/string_concat.hpp>\n\n// #include <nlohmann/detail/value_t.hpp>\n\n\nNLOHMANN_JSON_NAMESPACE_BEGIN\nnamespace detail\n{\n////////////\n// parser //\n////////////\n\nenum class parse_event_t : std::uint8_t\n{\n    /// the parser read `{` and started to process a JSON object\n    object_start,\n    /// the parser read `}` and finished processing a JSON object\n    object_end,\n    /// the parser read `[` and started to process a JSON array\n    array_start,\n    /// the parser read `]` and finished processing a JSON array\n    array_end,\n    /// the parser read a key of a value in an object\n    key,\n    /// the parser finished reading a JSON value\n    value\n};\n\ntemplate<typename BasicJsonType>\nusing parser_callback_t =\n    std::function<bool(int /*depth*/, parse_event_t /*event*/, BasicJsonType& /*parsed*/)>;\n\n/*!\n@brief syntax analysis\n\nThis class implements a recursive descent parser.\n*/\ntemplate<typename BasicJsonType, typename InputAdapterType>\nclass parser\n{\n    using number_integer_t = typename BasicJsonType::number_integer_t;\n    using number_unsigned_t = typename BasicJsonType::number_unsigned_t;\n    using number_float_t = typename BasicJsonType::number_float_t;\n    using string_t = typename BasicJsonType::string_t;\n    using lexer_t = lexer<BasicJsonType, InputAdapterType>;\n    using token_type = typename lexer_t::token_type;\n\n  public:\n    /// a parser reading from an input adapter\n    explicit parser(InputAdapterType&& adapter,\n                    const parser_callback_t<BasicJsonType> cb = nullptr,\n                    const bool allow_exceptions_ = true,\n                    const bool skip_comments = false)\n        : callback(cb)\n        , m_lexer(std::move(adapter), skip_comments)\n        , allow_exceptions(allow_exceptions_)\n    {\n        // read first token\n        get_token();\n    }\n\n    /*!\n    @brief public parser interface\n\n    @param[in] strict      whether to expect the last token to be EOF\n    @param[in,out] result  parsed JSON value\n\n    @throw parse_error.101 in case of an unexpected token\n    @throw parse_error.102 if to_unicode fails or surrogate error\n    @throw parse_error.103 if to_unicode fails\n    */\n    void parse(const bool strict, BasicJsonType& result)\n    {\n        if (callback)\n        {\n            json_sax_dom_callback_parser<BasicJsonType> sdp(result, callback, allow_exceptions);\n            sax_parse_internal(&sdp);\n\n            // in strict mode, input must be completely read\n            if (strict && (get_token() != token_type::end_of_input))\n            {\n                sdp.parse_error(m_lexer.get_position(),\n                                m_lexer.get_token_string(),\n                                parse_error::create(101, m_lexer.get_position(),\n                                                    exception_message(token_type::end_of_input, \"value\"), nullptr));\n            }\n\n            // in case of an error, return discarded value\n            if (sdp.is_errored())\n            {\n                result = value_t::discarded;\n                return;\n            }\n\n            // set top-level value to null if it was discarded by the callback\n            // function\n            if (result.is_discarded())\n            {\n                result = nullptr;\n            }\n        }\n        else\n        {\n            json_sax_dom_parser<BasicJsonType> sdp(result, allow_exceptions);\n            sax_parse_internal(&sdp);\n\n            // in strict mode, input must be completely read\n            if (strict && (get_token() != token_type::end_of_input))\n            {\n                sdp.parse_error(m_lexer.get_position(),\n                                m_lexer.get_token_string(),\n                                parse_error::create(101, m_lexer.get_position(), exception_message(token_type::end_of_input, \"value\"), nullptr));\n            }\n\n            // in case of an error, return discarded value\n            if (sdp.is_errored())\n            {\n                result = value_t::discarded;\n                return;\n            }\n        }\n\n        result.assert_invariant();\n    }\n\n    /*!\n    @brief public accept interface\n\n    @param[in] strict  whether to expect the last token to be EOF\n    @return whether the input is a proper JSON text\n    */\n    bool accept(const bool strict = true)\n    {\n        json_sax_acceptor<BasicJsonType> sax_acceptor;\n        return sax_parse(&sax_acceptor, strict);\n    }\n\n    template<typename SAX>\n    JSON_HEDLEY_NON_NULL(2)\n    bool sax_parse(SAX* sax, const bool strict = true)\n    {\n        (void)detail::is_sax_static_asserts<SAX, BasicJsonType> {};\n        const bool result = sax_parse_internal(sax);\n\n        // strict mode: next byte must be EOF\n        if (result && strict && (get_token() != token_type::end_of_input))\n        {\n            return sax->parse_error(m_lexer.get_position(),\n                                    m_lexer.get_token_string(),\n                                    parse_error::create(101, m_lexer.get_position(), exception_message(token_type::end_of_input, \"value\"), nullptr));\n        }\n\n        return result;\n    }\n\n  private:\n    template<typename SAX>\n    JSON_HEDLEY_NON_NULL(2)\n    bool sax_parse_internal(SAX* sax)\n    {\n        // stack to remember the hierarchy of structured values we are parsing\n        // true = array; false = object\n        std::vector<bool> states;\n        // value to avoid a goto (see comment where set to true)\n        bool skip_to_state_evaluation = false;\n\n        while (true)\n        {\n            if (!skip_to_state_evaluation)\n            {\n                // invariant: get_token() was called before each iteration\n                switch (last_token)\n                {\n                    case token_type::begin_object:\n                    {\n                        if (JSON_HEDLEY_UNLIKELY(!sax->start_object(static_cast<std::size_t>(-1))))\n                        {\n                            return false;\n                        }\n\n                        // closing } -> we are done\n                        if (get_token() == token_type::end_object)\n                        {\n                            if (JSON_HEDLEY_UNLIKELY(!sax->end_object()))\n                            {\n                                return false;\n                            }\n                            break;\n                        }\n\n                        // parse key\n                        if (JSON_HEDLEY_UNLIKELY(last_token != token_type::value_string))\n                        {\n                            return sax->parse_error(m_lexer.get_position(),\n                                                    m_lexer.get_token_string(),\n                                                    parse_error::create(101, m_lexer.get_position(), exception_message(token_type::value_string, \"object key\"), nullptr));\n                        }\n                        if (JSON_HEDLEY_UNLIKELY(!sax->key(m_lexer.get_string())))\n                        {\n                            return false;\n                        }\n\n                        // parse separator (:)\n                        if (JSON_HEDLEY_UNLIKELY(get_token() != token_type::name_separator))\n                        {\n                            return sax->parse_error(m_lexer.get_position(),\n                                                    m_lexer.get_token_string(),\n                                                    parse_error::create(101, m_lexer.get_position(), exception_message(token_type::name_separator, \"object separator\"), nullptr));\n                        }\n\n                        // remember we are now inside an object\n                        states.push_back(false);\n\n                        // parse values\n                        get_token();\n                        continue;\n                    }\n\n                    case token_type::begin_array:\n                    {\n                        if (JSON_HEDLEY_UNLIKELY(!sax->start_array(static_cast<std::size_t>(-1))))\n                        {\n                            return false;\n                        }\n\n                        // closing ] -> we are done\n                        if (get_token() == token_type::end_array)\n                        {\n                            if (JSON_HEDLEY_UNLIKELY(!sax->end_array()))\n                            {\n                                return false;\n                            }\n                            break;\n                        }\n\n                        // remember we are now inside an array\n                        states.push_back(true);\n\n                        // parse values (no need to call get_token)\n                        continue;\n                    }\n\n                    case token_type::value_float:\n                    {\n                        const auto res = m_lexer.get_number_float();\n\n                        if (JSON_HEDLEY_UNLIKELY(!std::isfinite(res)))\n                        {\n                            return sax->parse_error(m_lexer.get_position(),\n                                                    m_lexer.get_token_string(),\n                                                    out_of_range::create(406, concat(\"number overflow parsing '\", m_lexer.get_token_string(), '\\''), nullptr));\n                        }\n\n                        if (JSON_HEDLEY_UNLIKELY(!sax->number_float(res, m_lexer.get_string())))\n                        {\n                            return false;\n                        }\n\n                        break;\n                    }\n\n                    case token_type::literal_false:\n                    {\n                        if (JSON_HEDLEY_UNLIKELY(!sax->boolean(false)))\n                        {\n                            return false;\n                        }\n                        break;\n                    }\n\n                    case token_type::literal_null:\n                    {\n                        if (JSON_HEDLEY_UNLIKELY(!sax->null()))\n                        {\n                            return false;\n                        }\n                        break;\n                    }\n\n                    case token_type::literal_true:\n                    {\n                        if (JSON_HEDLEY_UNLIKELY(!sax->boolean(true)))\n                        {\n                            return false;\n                        }\n                        break;\n                    }\n\n                    case token_type::value_integer:\n                    {\n                        if (JSON_HEDLEY_UNLIKELY(!sax->number_integer(m_lexer.get_number_integer())))\n                        {\n                            return false;\n                        }\n                        break;\n                    }\n\n                    case token_type::value_string:\n                    {\n                        if (JSON_HEDLEY_UNLIKELY(!sax->string(m_lexer.get_string())))\n                        {\n                            return false;\n                        }\n                        break;\n                    }\n\n                    case token_type::value_unsigned:\n                    {\n                        if (JSON_HEDLEY_UNLIKELY(!sax->number_unsigned(m_lexer.get_number_unsigned())))\n                        {\n                            return false;\n                        }\n                        break;\n                    }\n\n                    case token_type::parse_error:\n                    {\n                        // using \"uninitialized\" to avoid \"expected\" message\n                        return sax->parse_error(m_lexer.get_position(),\n                                                m_lexer.get_token_string(),\n                                                parse_error::create(101, m_lexer.get_position(), exception_message(token_type::uninitialized, \"value\"), nullptr));\n                    }\n                    case token_type::end_of_input:\n                    {\n                        if (JSON_HEDLEY_UNLIKELY(m_lexer.get_position().chars_read_total == 1))\n                        {\n                            return sax->parse_error(m_lexer.get_position(),\n                                                    m_lexer.get_token_string(),\n                                                    parse_error::create(101, m_lexer.get_position(),\n                                                            \"attempting to parse an empty input; check that your input string or stream contains the expected JSON\", nullptr));\n                        }\n\n                        return sax->parse_error(m_lexer.get_position(),\n                                                m_lexer.get_token_string(),\n                                                parse_error::create(101, m_lexer.get_position(), exception_message(token_type::literal_or_value, \"value\"), nullptr));\n                    }\n                    case token_type::uninitialized:\n                    case token_type::end_array:\n                    case token_type::end_object:\n                    case token_type::name_separator:\n                    case token_type::value_separator:\n                    case token_type::literal_or_value:\n                    default: // the last token was unexpected\n                    {\n                        return sax->parse_error(m_lexer.get_position(),\n                                                m_lexer.get_token_string(),\n                                                parse_error::create(101, m_lexer.get_position(), exception_message(token_type::literal_or_value, \"value\"), nullptr));\n                    }\n                }\n            }\n            else\n            {\n                skip_to_state_evaluation = false;\n            }\n\n            // we reached this line after we successfully parsed a value\n            if (states.empty())\n            {\n                // empty stack: we reached the end of the hierarchy: done\n                return true;\n            }\n\n            if (states.back())  // array\n            {\n                // comma -> next value\n                if (get_token() == token_type::value_separator)\n                {\n                    // parse a new value\n                    get_token();\n                    continue;\n                }\n\n                // closing ]\n                if (JSON_HEDLEY_LIKELY(last_token == token_type::end_array))\n                {\n                    if (JSON_HEDLEY_UNLIKELY(!sax->end_array()))\n                    {\n                        return false;\n                    }\n\n                    // We are done with this array. Before we can parse a\n                    // new value, we need to evaluate the new state first.\n                    // By setting skip_to_state_evaluation to false, we\n                    // are effectively jumping to the beginning of this if.\n                    JSON_ASSERT(!states.empty());\n                    states.pop_back();\n                    skip_to_state_evaluation = true;\n                    continue;\n                }\n\n                return sax->parse_error(m_lexer.get_position(),\n                                        m_lexer.get_token_string(),\n                                        parse_error::create(101, m_lexer.get_position(), exception_message(token_type::end_array, \"array\"), nullptr));\n            }\n\n            // states.back() is false -> object\n\n            // comma -> next value\n            if (get_token() == token_type::value_separator)\n            {\n                // parse key\n                if (JSON_HEDLEY_UNLIKELY(get_token() != token_type::value_string))\n                {\n                    return sax->parse_error(m_lexer.get_position(),\n                                            m_lexer.get_token_string(),\n                                            parse_error::create(101, m_lexer.get_position(), exception_message(token_type::value_string, \"object key\"), nullptr));\n                }\n\n                if (JSON_HEDLEY_UNLIKELY(!sax->key(m_lexer.get_string())))\n                {\n                    return false;\n                }\n\n                // parse separator (:)\n                if (JSON_HEDLEY_UNLIKELY(get_token() != token_type::name_separator))\n                {\n                    return sax->parse_error(m_lexer.get_position(),\n                                            m_lexer.get_token_string(),\n                                            parse_error::create(101, m_lexer.get_position(), exception_message(token_type::name_separator, \"object separator\"), nullptr));\n                }\n\n                // parse values\n                get_token();\n                continue;\n            }\n\n            // closing }\n            if (JSON_HEDLEY_LIKELY(last_token == token_type::end_object))\n            {\n                if (JSON_HEDLEY_UNLIKELY(!sax->end_object()))\n                {\n                    return false;\n                }\n\n                // We are done with this object. Before we can parse a\n                // new value, we need to evaluate the new state first.\n                // By setting skip_to_state_evaluation to false, we\n                // are effectively jumping to the beginning of this if.\n                JSON_ASSERT(!states.empty());\n                states.pop_back();\n                skip_to_state_evaluation = true;\n                continue;\n            }\n\n            return sax->parse_error(m_lexer.get_position(),\n                                    m_lexer.get_token_string(),\n                                    parse_error::create(101, m_lexer.get_position(), exception_message(token_type::end_object, \"object\"), nullptr));\n        }\n    }\n\n    /// get next token from lexer\n    token_type get_token()\n    {\n        return last_token = m_lexer.scan();\n    }\n\n    std::string exception_message(const token_type expected, const std::string& context)\n    {\n        std::string error_msg = \"syntax error \";\n\n        if (!context.empty())\n        {\n            error_msg += concat(\"while parsing \", context, ' ');\n        }\n\n        error_msg += \"- \";\n\n        if (last_token == token_type::parse_error)\n        {\n            error_msg += concat(m_lexer.get_error_message(), \"; last read: '\",\n                                m_lexer.get_token_string(), '\\'');\n        }\n        else\n        {\n            error_msg += concat(\"unexpected \", lexer_t::token_type_name(last_token));\n        }\n\n        if (expected != token_type::uninitialized)\n        {\n            error_msg += concat(\"; expected \", lexer_t::token_type_name(expected));\n        }\n\n        return error_msg;\n    }\n\n  private:\n    /// callback function\n    const parser_callback_t<BasicJsonType> callback = nullptr;\n    /// the type of the last read token\n    token_type last_token = token_type::uninitialized;\n    /// the lexer\n    lexer_t m_lexer;\n    /// whether to throw exceptions in case of errors\n    const bool allow_exceptions = true;\n};\n\n}  // namespace detail\nNLOHMANN_JSON_NAMESPACE_END\n\n// #include <nlohmann/detail/iterators/internal_iterator.hpp>\n//     __ _____ _____ _____\n//  __|  |   __|     |   | |  JSON for Modern C++\n// |  |  |__   |  |  | | | |  version 3.11.3\n// |_____|_____|_____|_|___|  https://github.com/nlohmann/json\n//\n// SPDX-FileCopyrightText: 2013-2023 Niels Lohmann <https://nlohmann.me>\n// SPDX-License-Identifier: MIT\n\n\n\n// #include <nlohmann/detail/abi_macros.hpp>\n\n// #include <nlohmann/detail/iterators/primitive_iterator.hpp>\n//     __ _____ _____ _____\n//  __|  |   __|     |   | |  JSON for Modern C++\n// |  |  |__   |  |  | | | |  version 3.11.3\n// |_____|_____|_____|_|___|  https://github.com/nlohmann/json\n//\n// SPDX-FileCopyrightText: 2013-2023 Niels Lohmann <https://nlohmann.me>\n// SPDX-License-Identifier: MIT\n\n\n\n#include <cstddef> // ptrdiff_t\n#include <limits>  // numeric_limits\n\n// #include <nlohmann/detail/macro_scope.hpp>\n\n\nNLOHMANN_JSON_NAMESPACE_BEGIN\nnamespace detail\n{\n\n/*\n@brief an iterator for primitive JSON types\n\nThis class models an iterator for primitive JSON types (boolean, number,\nstring). It's only purpose is to allow the iterator/const_iterator classes\nto \"iterate\" over primitive values. Internally, the iterator is modeled by\na `difference_type` variable. Value begin_value (`0`) models the begin,\nend_value (`1`) models past the end.\n*/\nclass primitive_iterator_t\n{\n  private:\n    using difference_type = std::ptrdiff_t;\n    static constexpr difference_type begin_value = 0;\n    static constexpr difference_type end_value = begin_value + 1;\n\n  JSON_PRIVATE_UNLESS_TESTED:\n    /// iterator as signed integer type\n    difference_type m_it = (std::numeric_limits<std::ptrdiff_t>::min)();\n\n  public:\n    constexpr difference_type get_value() const noexcept\n    {\n        return m_it;\n    }\n\n    /// set iterator to a defined beginning\n    void set_begin() noexcept\n    {\n        m_it = begin_value;\n    }\n\n    /// set iterator to a defined past the end\n    void set_end() noexcept\n    {\n        m_it = end_value;\n    }\n\n    /// return whether the iterator can be dereferenced\n    constexpr bool is_begin() const noexcept\n    {\n        return m_it == begin_value;\n    }\n\n    /// return whether the iterator is at end\n    constexpr bool is_end() const noexcept\n    {\n        return m_it == end_value;\n    }\n\n    friend constexpr bool operator==(primitive_iterator_t lhs, primitive_iterator_t rhs) noexcept\n    {\n        return lhs.m_it == rhs.m_it;\n    }\n\n    friend constexpr bool operator<(primitive_iterator_t lhs, primitive_iterator_t rhs) noexcept\n    {\n        return lhs.m_it < rhs.m_it;\n    }\n\n    primitive_iterator_t operator+(difference_type n) noexcept\n    {\n        auto result = *this;\n        result += n;\n        return result;\n    }\n\n    friend constexpr difference_type operator-(primitive_iterator_t lhs, primitive_iterator_t rhs) noexcept\n    {\n        return lhs.m_it - rhs.m_it;\n    }\n\n    primitive_iterator_t& operator++() noexcept\n    {\n        ++m_it;\n        return *this;\n    }\n\n    primitive_iterator_t operator++(int)& noexcept // NOLINT(cert-dcl21-cpp)\n    {\n        auto result = *this;\n        ++m_it;\n        return result;\n    }\n\n    primitive_iterator_t& operator--() noexcept\n    {\n        --m_it;\n        return *this;\n    }\n\n    primitive_iterator_t operator--(int)& noexcept // NOLINT(cert-dcl21-cpp)\n    {\n        auto result = *this;\n        --m_it;\n        return result;\n    }\n\n    primitive_iterator_t& operator+=(difference_type n) noexcept\n    {\n        m_it += n;\n        return *this;\n    }\n\n    primitive_iterator_t& operator-=(difference_type n) noexcept\n    {\n        m_it -= n;\n        return *this;\n    }\n};\n\n}  // namespace detail\nNLOHMANN_JSON_NAMESPACE_END\n\n\nNLOHMANN_JSON_NAMESPACE_BEGIN\nnamespace detail\n{\n\n/*!\n@brief an iterator value\n\n@note This structure could easily be a union, but MSVC currently does not allow\nunions members with complex constructors, see https://github.com/nlohmann/json/pull/105.\n*/\ntemplate<typename BasicJsonType> struct internal_iterator\n{\n    /// iterator for JSON objects\n    typename BasicJsonType::object_t::iterator object_iterator {};\n    /// iterator for JSON arrays\n    typename BasicJsonType::array_t::iterator array_iterator {};\n    /// generic iterator for all other types\n    primitive_iterator_t primitive_iterator {};\n};\n\n}  // namespace detail\nNLOHMANN_JSON_NAMESPACE_END\n\n// #include <nlohmann/detail/iterators/iter_impl.hpp>\n//     __ _____ _____ _____\n//  __|  |   __|     |   | |  JSON for Modern C++\n// |  |  |__   |  |  | | | |  version 3.11.3\n// |_____|_____|_____|_|___|  https://github.com/nlohmann/json\n//\n// SPDX-FileCopyrightText: 2013-2023 Niels Lohmann <https://nlohmann.me>\n// SPDX-License-Identifier: MIT\n\n\n\n#include <iterator> // iterator, random_access_iterator_tag, bidirectional_iterator_tag, advance, next\n#include <type_traits> // conditional, is_const, remove_const\n\n// #include <nlohmann/detail/exceptions.hpp>\n\n// #include <nlohmann/detail/iterators/internal_iterator.hpp>\n\n// #include <nlohmann/detail/iterators/primitive_iterator.hpp>\n\n// #include <nlohmann/detail/macro_scope.hpp>\n\n// #include <nlohmann/detail/meta/cpp_future.hpp>\n\n// #include <nlohmann/detail/meta/type_traits.hpp>\n\n// #include <nlohmann/detail/value_t.hpp>\n\n\nNLOHMANN_JSON_NAMESPACE_BEGIN\nnamespace detail\n{\n\n// forward declare, to be able to friend it later on\ntemplate<typename IteratorType> class iteration_proxy;\ntemplate<typename IteratorType> class iteration_proxy_value;\n\n/*!\n@brief a template for a bidirectional iterator for the @ref basic_json class\nThis class implements a both iterators (iterator and const_iterator) for the\n@ref basic_json class.\n@note An iterator is called *initialized* when a pointer to a JSON value has\n      been set (e.g., by a constructor or a copy assignment). If the iterator is\n      default-constructed, it is *uninitialized* and most methods are undefined.\n      **The library uses assertions to detect calls on uninitialized iterators.**\n@requirement The class satisfies the following concept requirements:\n-\n[BidirectionalIterator](https://en.cppreference.com/w/cpp/named_req/BidirectionalIterator):\n  The iterator that can be moved can be moved in both directions (i.e.\n  incremented and decremented).\n@since version 1.0.0, simplified in version 2.0.9, change to bidirectional\n       iterators in version 3.0.0 (see https://github.com/nlohmann/json/issues/593)\n*/\ntemplate<typename BasicJsonType>\nclass iter_impl // NOLINT(cppcoreguidelines-special-member-functions,hicpp-special-member-functions)\n{\n    /// the iterator with BasicJsonType of different const-ness\n    using other_iter_impl = iter_impl<typename std::conditional<std::is_const<BasicJsonType>::value, typename std::remove_const<BasicJsonType>::type, const BasicJsonType>::type>;\n    /// allow basic_json to access private members\n    friend other_iter_impl;\n    friend BasicJsonType;\n    friend iteration_proxy<iter_impl>;\n    friend iteration_proxy_value<iter_impl>;\n\n    using object_t = typename BasicJsonType::object_t;\n    using array_t = typename BasicJsonType::array_t;\n    // make sure BasicJsonType is basic_json or const basic_json\n    static_assert(is_basic_json<typename std::remove_const<BasicJsonType>::type>::value,\n                  \"iter_impl only accepts (const) basic_json\");\n    // superficial check for the LegacyBidirectionalIterator named requirement\n    static_assert(std::is_base_of<std::bidirectional_iterator_tag, std::bidirectional_iterator_tag>::value\n                  &&  std::is_base_of<std::bidirectional_iterator_tag, typename std::iterator_traits<typename array_t::iterator>::iterator_category>::value,\n                  \"basic_json iterator assumes array and object type iterators satisfy the LegacyBidirectionalIterator named requirement.\");\n\n  public:\n    /// The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17.\n    /// The C++ Standard has never required user-defined iterators to derive from std::iterator.\n    /// A user-defined iterator should provide publicly accessible typedefs named\n    /// iterator_category, value_type, difference_type, pointer, and reference.\n    /// Note that value_type is required to be non-const, even for constant iterators.\n    using iterator_category = std::bidirectional_iterator_tag;\n\n    /// the type of the values when the iterator is dereferenced\n    using value_type = typename BasicJsonType::value_type;\n    /// a type to represent differences between iterators\n    using difference_type = typename BasicJsonType::difference_type;\n    /// defines a pointer to the type iterated over (value_type)\n    using pointer = typename std::conditional<std::is_const<BasicJsonType>::value,\n          typename BasicJsonType::const_pointer,\n          typename BasicJsonType::pointer>::type;\n    /// defines a reference to the type iterated over (value_type)\n    using reference =\n        typename std::conditional<std::is_const<BasicJsonType>::value,\n        typename BasicJsonType::const_reference,\n        typename BasicJsonType::reference>::type;\n\n    iter_impl() = default;\n    ~iter_impl() = default;\n    iter_impl(iter_impl&&) noexcept = default;\n    iter_impl& operator=(iter_impl&&) noexcept = default;\n\n    /*!\n    @brief constructor for a given JSON instance\n    @param[in] object  pointer to a JSON object for this iterator\n    @pre object != nullptr\n    @post The iterator is initialized; i.e. `m_object != nullptr`.\n    */\n    explicit iter_impl(pointer object) noexcept : m_object(object)\n    {\n        JSON_ASSERT(m_object != nullptr);\n\n        switch (m_object->m_data.m_type)\n        {\n            case value_t::object:\n            {\n                m_it.object_iterator = typename object_t::iterator();\n                break;\n            }\n\n            case value_t::array:\n            {\n                m_it.array_iterator = typename array_t::iterator();\n                break;\n            }\n\n            case value_t::null:\n            case value_t::string:\n            case value_t::boolean:\n            case value_t::number_integer:\n            case value_t::number_unsigned:\n            case value_t::number_float:\n            case value_t::binary:\n            case value_t::discarded:\n            default:\n            {\n                m_it.primitive_iterator = primitive_iterator_t();\n                break;\n            }\n        }\n    }\n\n    /*!\n    @note The conventional copy constructor and copy assignment are implicitly\n          defined. Combined with the following converting constructor and\n          assignment, they support: (1) copy from iterator to iterator, (2)\n          copy from const iterator to const iterator, and (3) conversion from\n          iterator to const iterator. However conversion from const iterator\n          to iterator is not defined.\n    */\n\n    /*!\n    @brief const copy constructor\n    @param[in] other const iterator to copy from\n    @note This copy constructor had to be defined explicitly to circumvent a bug\n          occurring on msvc v19.0 compiler (VS 2015) debug build. For more\n          information refer to: https://github.com/nlohmann/json/issues/1608\n    */\n    iter_impl(const iter_impl<const BasicJsonType>& other) noexcept\n        : m_object(other.m_object), m_it(other.m_it)\n    {}\n\n    /*!\n    @brief converting assignment\n    @param[in] other const iterator to copy from\n    @return const/non-const iterator\n    @note It is not checked whether @a other is initialized.\n    */\n    iter_impl& operator=(const iter_impl<const BasicJsonType>& other) noexcept\n    {\n        if (&other != this)\n        {\n            m_object = other.m_object;\n            m_it = other.m_it;\n        }\n        return *this;\n    }\n\n    /*!\n    @brief converting constructor\n    @param[in] other  non-const iterator to copy from\n    @note It is not checked whether @a other is initialized.\n    */\n    iter_impl(const iter_impl<typename std::remove_const<BasicJsonType>::type>& other) noexcept\n        : m_object(other.m_object), m_it(other.m_it)\n    {}\n\n    /*!\n    @brief converting assignment\n    @param[in] other  non-const iterator to copy from\n    @return const/non-const iterator\n    @note It is not checked whether @a other is initialized.\n    */\n    iter_impl& operator=(const iter_impl<typename std::remove_const<BasicJsonType>::type>& other) noexcept // NOLINT(cert-oop54-cpp)\n    {\n        m_object = other.m_object;\n        m_it = other.m_it;\n        return *this;\n    }\n\n  JSON_PRIVATE_UNLESS_TESTED:\n    /*!\n    @brief set the iterator to the first value\n    @pre The iterator is initialized; i.e. `m_object != nullptr`.\n    */\n    void set_begin() noexcept\n    {\n        JSON_ASSERT(m_object != nullptr);\n\n        switch (m_object->m_data.m_type)\n        {\n            case value_t::object:\n            {\n                m_it.object_iterator = m_object->m_data.m_value.object->begin();\n                break;\n            }\n\n            case value_t::array:\n            {\n                m_it.array_iterator = m_object->m_data.m_value.array->begin();\n                break;\n            }\n\n            case value_t::null:\n            {\n                // set to end so begin()==end() is true: null is empty\n                m_it.primitive_iterator.set_end();\n                break;\n            }\n\n            case value_t::string:\n            case value_t::boolean:\n            case value_t::number_integer:\n            case value_t::number_unsigned:\n            case value_t::number_float:\n            case value_t::binary:\n            case value_t::discarded:\n            default:\n            {\n                m_it.primitive_iterator.set_begin();\n                break;\n            }\n        }\n    }\n\n    /*!\n    @brief set the iterator past the last value\n    @pre The iterator is initialized; i.e. `m_object != nullptr`.\n    */\n    void set_end() noexcept\n    {\n        JSON_ASSERT(m_object != nullptr);\n\n        switch (m_object->m_data.m_type)\n        {\n            case value_t::object:\n            {\n                m_it.object_iterator = m_object->m_data.m_value.object->end();\n                break;\n            }\n\n            case value_t::array:\n            {\n                m_it.array_iterator = m_object->m_data.m_value.array->end();\n                break;\n            }\n\n            case value_t::null:\n            case value_t::string:\n            case value_t::boolean:\n            case value_t::number_integer:\n            case value_t::number_unsigned:\n            case value_t::number_float:\n            case value_t::binary:\n            case value_t::discarded:\n            default:\n            {\n                m_it.primitive_iterator.set_end();\n                break;\n            }\n        }\n    }\n\n  public:\n    /*!\n    @brief return a reference to the value pointed to by the iterator\n    @pre The iterator is initialized; i.e. `m_object != nullptr`.\n    */\n    reference operator*() const\n    {\n        JSON_ASSERT(m_object != nullptr);\n\n        switch (m_object->m_data.m_type)\n        {\n            case value_t::object:\n            {\n                JSON_ASSERT(m_it.object_iterator != m_object->m_data.m_value.object->end());\n                return m_it.object_iterator->second;\n            }\n\n            case value_t::array:\n            {\n                JSON_ASSERT(m_it.array_iterator != m_object->m_data.m_value.array->end());\n                return *m_it.array_iterator;\n            }\n\n            case value_t::null:\n                JSON_THROW(invalid_iterator::create(214, \"cannot get value\", m_object));\n\n            case value_t::string:\n            case value_t::boolean:\n            case value_t::number_integer:\n            case value_t::number_unsigned:\n            case value_t::number_float:\n            case value_t::binary:\n            case value_t::discarded:\n            default:\n            {\n                if (JSON_HEDLEY_LIKELY(m_it.primitive_iterator.is_begin()))\n                {\n                    return *m_object;\n                }\n\n                JSON_THROW(invalid_iterator::create(214, \"cannot get value\", m_object));\n            }\n        }\n    }\n\n    /*!\n    @brief dereference the iterator\n    @pre The iterator is initialized; i.e. `m_object != nullptr`.\n    */\n    pointer operator->() const\n    {\n        JSON_ASSERT(m_object != nullptr);\n\n        switch (m_object->m_data.m_type)\n        {\n            case value_t::object:\n            {\n                JSON_ASSERT(m_it.object_iterator != m_object->m_data.m_value.object->end());\n                return &(m_it.object_iterator->second);\n            }\n\n            case value_t::array:\n            {\n                JSON_ASSERT(m_it.array_iterator != m_object->m_data.m_value.array->end());\n                return &*m_it.array_iterator;\n            }\n\n            case value_t::null:\n            case value_t::string:\n            case value_t::boolean:\n            case value_t::number_integer:\n            case value_t::number_unsigned:\n            case value_t::number_float:\n            case value_t::binary:\n            case value_t::discarded:\n            default:\n            {\n                if (JSON_HEDLEY_LIKELY(m_it.primitive_iterator.is_begin()))\n                {\n                    return m_object;\n                }\n\n                JSON_THROW(invalid_iterator::create(214, \"cannot get value\", m_object));\n            }\n        }\n    }\n\n    /*!\n    @brief post-increment (it++)\n    @pre The iterator is initialized; i.e. `m_object != nullptr`.\n    */\n    iter_impl operator++(int)& // NOLINT(cert-dcl21-cpp)\n    {\n        auto result = *this;\n        ++(*this);\n        return result;\n    }\n\n    /*!\n    @brief pre-increment (++it)\n    @pre The iterator is initialized; i.e. `m_object != nullptr`.\n    */\n    iter_impl& operator++()\n    {\n        JSON_ASSERT(m_object != nullptr);\n\n        switch (m_object->m_data.m_type)\n        {\n            case value_t::object:\n            {\n                std::advance(m_it.object_iterator, 1);\n                break;\n            }\n\n            case value_t::array:\n            {\n                std::advance(m_it.array_iterator, 1);\n                break;\n            }\n\n            case value_t::null:\n            case value_t::string:\n            case value_t::boolean:\n            case value_t::number_integer:\n            case value_t::number_unsigned:\n            case value_t::number_float:\n            case value_t::binary:\n            case value_t::discarded:\n            default:\n            {\n                ++m_it.primitive_iterator;\n                break;\n            }\n        }\n\n        return *this;\n    }\n\n    /*!\n    @brief post-decrement (it--)\n    @pre The iterator is initialized; i.e. `m_object != nullptr`.\n    */\n    iter_impl operator--(int)& // NOLINT(cert-dcl21-cpp)\n    {\n        auto result = *this;\n        --(*this);\n        return result;\n    }\n\n    /*!\n    @brief pre-decrement (--it)\n    @pre The iterator is initialized; i.e. `m_object != nullptr`.\n    */\n    iter_impl& operator--()\n    {\n        JSON_ASSERT(m_object != nullptr);\n\n        switch (m_object->m_data.m_type)\n        {\n            case value_t::object:\n            {\n                std::advance(m_it.object_iterator, -1);\n                break;\n            }\n\n            case value_t::array:\n            {\n                std::advance(m_it.array_iterator, -1);\n                break;\n            }\n\n            case value_t::null:\n            case value_t::string:\n            case value_t::boolean:\n            case value_t::number_integer:\n            case value_t::number_unsigned:\n            case value_t::number_float:\n            case value_t::binary:\n            case value_t::discarded:\n            default:\n            {\n                --m_it.primitive_iterator;\n                break;\n            }\n        }\n\n        return *this;\n    }\n\n    /*!\n    @brief comparison: equal\n    @pre The iterator is initialized; i.e. `m_object != nullptr`.\n    */\n    template < typename IterImpl, detail::enable_if_t < (std::is_same<IterImpl, iter_impl>::value || std::is_same<IterImpl, other_iter_impl>::value), std::nullptr_t > = nullptr >\n    bool operator==(const IterImpl& other) const\n    {\n        // if objects are not the same, the comparison is undefined\n        if (JSON_HEDLEY_UNLIKELY(m_object != other.m_object))\n        {\n            JSON_THROW(invalid_iterator::create(212, \"cannot compare iterators of different containers\", m_object));\n        }\n\n        JSON_ASSERT(m_object != nullptr);\n\n        switch (m_object->m_data.m_type)\n        {\n            case value_t::object:\n                return (m_it.object_iterator == other.m_it.object_iterator);\n\n            case value_t::array:\n                return (m_it.array_iterator == other.m_it.array_iterator);\n\n            case value_t::null:\n            case value_t::string:\n            case value_t::boolean:\n            case value_t::number_integer:\n            case value_t::number_unsigned:\n            case value_t::number_float:\n            case value_t::binary:\n            case value_t::discarded:\n            default:\n                return (m_it.primitive_iterator == other.m_it.primitive_iterator);\n        }\n    }\n\n    /*!\n    @brief comparison: not equal\n    @pre The iterator is initialized; i.e. `m_object != nullptr`.\n    */\n    template < typename IterImpl, detail::enable_if_t < (std::is_same<IterImpl, iter_impl>::value || std::is_same<IterImpl, other_iter_impl>::value), std::nullptr_t > = nullptr >\n    bool operator!=(const IterImpl& other) const\n    {\n        return !operator==(other);\n    }\n\n    /*!\n    @brief comparison: smaller\n    @pre The iterator is initialized; i.e. `m_object != nullptr`.\n    */\n    bool operator<(const iter_impl& other) const\n    {\n        // if objects are not the same, the comparison is undefined\n        if (JSON_HEDLEY_UNLIKELY(m_object != other.m_object))\n        {\n            JSON_THROW(invalid_iterator::create(212, \"cannot compare iterators of different containers\", m_object));\n        }\n\n        JSON_ASSERT(m_object != nullptr);\n\n        switch (m_object->m_data.m_type)\n        {\n            case value_t::object:\n                JSON_THROW(invalid_iterator::create(213, \"cannot compare order of object iterators\", m_object));\n\n            case value_t::array:\n                return (m_it.array_iterator < other.m_it.array_iterator);\n\n            case value_t::null:\n            case value_t::string:\n            case value_t::boolean:\n            case value_t::number_integer:\n            case value_t::number_unsigned:\n            case value_t::number_float:\n            case value_t::binary:\n            case value_t::discarded:\n            default:\n                return (m_it.primitive_iterator < other.m_it.primitive_iterator);\n        }\n    }\n\n    /*!\n    @brief comparison: less than or equal\n    @pre The iterator is initialized; i.e. `m_object != nullptr`.\n    */\n    bool operator<=(const iter_impl& other) const\n    {\n        return !other.operator < (*this);\n    }\n\n    /*!\n    @brief comparison: greater than\n    @pre The iterator is initialized; i.e. `m_object != nullptr`.\n    */\n    bool operator>(const iter_impl& other) const\n    {\n        return !operator<=(other);\n    }\n\n    /*!\n    @brief comparison: greater than or equal\n    @pre The iterator is initialized; i.e. `m_object != nullptr`.\n    */\n    bool operator>=(const iter_impl& other) const\n    {\n        return !operator<(other);\n    }\n\n    /*!\n    @brief add to iterator\n    @pre The iterator is initialized; i.e. `m_object != nullptr`.\n    */\n    iter_impl& operator+=(difference_type i)\n    {\n        JSON_ASSERT(m_object != nullptr);\n\n        switch (m_object->m_data.m_type)\n        {\n            case value_t::object:\n                JSON_THROW(invalid_iterator::create(209, \"cannot use offsets with object iterators\", m_object));\n\n            case value_t::array:\n            {\n                std::advance(m_it.array_iterator, i);\n                break;\n            }\n\n            case value_t::null:\n            case value_t::string:\n            case value_t::boolean:\n            case value_t::number_integer:\n            case value_t::number_unsigned:\n            case value_t::number_float:\n            case value_t::binary:\n            case value_t::discarded:\n            default:\n            {\n                m_it.primitive_iterator += i;\n                break;\n            }\n        }\n\n        return *this;\n    }\n\n    /*!\n    @brief subtract from iterator\n    @pre The iterator is initialized; i.e. `m_object != nullptr`.\n    */\n    iter_impl& operator-=(difference_type i)\n    {\n        return operator+=(-i);\n    }\n\n    /*!\n    @brief add to iterator\n    @pre The iterator is initialized; i.e. `m_object != nullptr`.\n    */\n    iter_impl operator+(difference_type i) const\n    {\n        auto result = *this;\n        result += i;\n        return result;\n    }\n\n    /*!\n    @brief addition of distance and iterator\n    @pre The iterator is initialized; i.e. `m_object != nullptr`.\n    */\n    friend iter_impl operator+(difference_type i, const iter_impl& it)\n    {\n        auto result = it;\n        result += i;\n        return result;\n    }\n\n    /*!\n    @brief subtract from iterator\n    @pre The iterator is initialized; i.e. `m_object != nullptr`.\n    */\n    iter_impl operator-(difference_type i) const\n    {\n        auto result = *this;\n        result -= i;\n        return result;\n    }\n\n    /*!\n    @brief return difference\n    @pre The iterator is initialized; i.e. `m_object != nullptr`.\n    */\n    difference_type operator-(const iter_impl& other) const\n    {\n        JSON_ASSERT(m_object != nullptr);\n\n        switch (m_object->m_data.m_type)\n        {\n            case value_t::object:\n                JSON_THROW(invalid_iterator::create(209, \"cannot use offsets with object iterators\", m_object));\n\n            case value_t::array:\n                return m_it.array_iterator - other.m_it.array_iterator;\n\n            case value_t::null:\n            case value_t::string:\n            case value_t::boolean:\n            case value_t::number_integer:\n            case value_t::number_unsigned:\n            case value_t::number_float:\n            case value_t::binary:\n            case value_t::discarded:\n            default:\n                return m_it.primitive_iterator - other.m_it.primitive_iterator;\n        }\n    }\n\n    /*!\n    @brief access to successor\n    @pre The iterator is initialized; i.e. `m_object != nullptr`.\n    */\n    reference operator[](difference_type n) const\n    {\n        JSON_ASSERT(m_object != nullptr);\n\n        switch (m_object->m_data.m_type)\n        {\n            case value_t::object:\n                JSON_THROW(invalid_iterator::create(208, \"cannot use operator[] for object iterators\", m_object));\n\n            case value_t::array:\n                return *std::next(m_it.array_iterator, n);\n\n            case value_t::null:\n                JSON_THROW(invalid_iterator::create(214, \"cannot get value\", m_object));\n\n            case value_t::string:\n            case value_t::boolean:\n            case value_t::number_integer:\n            case value_t::number_unsigned:\n            case value_t::number_float:\n            case value_t::binary:\n            case value_t::discarded:\n            default:\n            {\n                if (JSON_HEDLEY_LIKELY(m_it.primitive_iterator.get_value() == -n))\n                {\n                    return *m_object;\n                }\n\n                JSON_THROW(invalid_iterator::create(214, \"cannot get value\", m_object));\n            }\n        }\n    }\n\n    /*!\n    @brief return the key of an object iterator\n    @pre The iterator is initialized; i.e. `m_object != nullptr`.\n    */\n    const typename object_t::key_type& key() const\n    {\n        JSON_ASSERT(m_object != nullptr);\n\n        if (JSON_HEDLEY_LIKELY(m_object->is_object()))\n        {\n            return m_it.object_iterator->first;\n        }\n\n        JSON_THROW(invalid_iterator::create(207, \"cannot use key() for non-object iterators\", m_object));\n    }\n\n    /*!\n    @brief return the value of an iterator\n    @pre The iterator is initialized; i.e. `m_object != nullptr`.\n    */\n    reference value() const\n    {\n        return operator*();\n    }\n\n  JSON_PRIVATE_UNLESS_TESTED:\n    /// associated JSON instance\n    pointer m_object = nullptr;\n    /// the actual iterator of the associated instance\n    internal_iterator<typename std::remove_const<BasicJsonType>::type> m_it {};\n};\n\n}  // namespace detail\nNLOHMANN_JSON_NAMESPACE_END\n\n// #include <nlohmann/detail/iterators/iteration_proxy.hpp>\n\n// #include <nlohmann/detail/iterators/json_reverse_iterator.hpp>\n//     __ _____ _____ _____\n//  __|  |   __|     |   | |  JSON for Modern C++\n// |  |  |__   |  |  | | | |  version 3.11.3\n// |_____|_____|_____|_|___|  https://github.com/nlohmann/json\n//\n// SPDX-FileCopyrightText: 2013-2023 Niels Lohmann <https://nlohmann.me>\n// SPDX-License-Identifier: MIT\n\n\n\n#include <cstddef> // ptrdiff_t\n#include <iterator> // reverse_iterator\n#include <utility> // declval\n\n// #include <nlohmann/detail/abi_macros.hpp>\n\n\nNLOHMANN_JSON_NAMESPACE_BEGIN\nnamespace detail\n{\n\n//////////////////////\n// reverse_iterator //\n//////////////////////\n\n/*!\n@brief a template for a reverse iterator class\n\n@tparam Base the base iterator type to reverse. Valid types are @ref\niterator (to create @ref reverse_iterator) and @ref const_iterator (to\ncreate @ref const_reverse_iterator).\n\n@requirement The class satisfies the following concept requirements:\n-\n[BidirectionalIterator](https://en.cppreference.com/w/cpp/named_req/BidirectionalIterator):\n  The iterator that can be moved can be moved in both directions (i.e.\n  incremented and decremented).\n- [OutputIterator](https://en.cppreference.com/w/cpp/named_req/OutputIterator):\n  It is possible to write to the pointed-to element (only if @a Base is\n  @ref iterator).\n\n@since version 1.0.0\n*/\ntemplate<typename Base>\nclass json_reverse_iterator : public std::reverse_iterator<Base>\n{\n  public:\n    using difference_type = std::ptrdiff_t;\n    /// shortcut to the reverse iterator adapter\n    using base_iterator = std::reverse_iterator<Base>;\n    /// the reference type for the pointed-to element\n    using reference = typename Base::reference;\n\n    /// create reverse iterator from iterator\n    explicit json_reverse_iterator(const typename base_iterator::iterator_type& it) noexcept\n        : base_iterator(it) {}\n\n    /// create reverse iterator from base class\n    explicit json_reverse_iterator(const base_iterator& it) noexcept : base_iterator(it) {}\n\n    /// post-increment (it++)\n    json_reverse_iterator operator++(int)& // NOLINT(cert-dcl21-cpp)\n    {\n        return static_cast<json_reverse_iterator>(base_iterator::operator++(1));\n    }\n\n    /// pre-increment (++it)\n    json_reverse_iterator& operator++()\n    {\n        return static_cast<json_reverse_iterator&>(base_iterator::operator++());\n    }\n\n    /// post-decrement (it--)\n    json_reverse_iterator operator--(int)& // NOLINT(cert-dcl21-cpp)\n    {\n        return static_cast<json_reverse_iterator>(base_iterator::operator--(1));\n    }\n\n    /// pre-decrement (--it)\n    json_reverse_iterator& operator--()\n    {\n        return static_cast<json_reverse_iterator&>(base_iterator::operator--());\n    }\n\n    /// add to iterator\n    json_reverse_iterator& operator+=(difference_type i)\n    {\n        return static_cast<json_reverse_iterator&>(base_iterator::operator+=(i));\n    }\n\n    /// add to iterator\n    json_reverse_iterator operator+(difference_type i) const\n    {\n        return static_cast<json_reverse_iterator>(base_iterator::operator+(i));\n    }\n\n    /// subtract from iterator\n    json_reverse_iterator operator-(difference_type i) const\n    {\n        return static_cast<json_reverse_iterator>(base_iterator::operator-(i));\n    }\n\n    /// return difference\n    difference_type operator-(const json_reverse_iterator& other) const\n    {\n        return base_iterator(*this) - base_iterator(other);\n    }\n\n    /// access to successor\n    reference operator[](difference_type n) const\n    {\n        return *(this->operator+(n));\n    }\n\n    /// return the key of an object iterator\n    auto key() const -> decltype(std::declval<Base>().key())\n    {\n        auto it = --this->base();\n        return it.key();\n    }\n\n    /// return the value of an iterator\n    reference value() const\n    {\n        auto it = --this->base();\n        return it.operator * ();\n    }\n};\n\n}  // namespace detail\nNLOHMANN_JSON_NAMESPACE_END\n\n// #include <nlohmann/detail/iterators/primitive_iterator.hpp>\n\n// #include <nlohmann/detail/json_custom_base_class.hpp>\n//     __ _____ _____ _____\n//  __|  |   __|     |   | |  JSON for Modern C++\n// |  |  |__   |  |  | | | |  version 3.11.3\n// |_____|_____|_____|_|___|  https://github.com/nlohmann/json\n//\n// SPDX-FileCopyrightText: 2013-2023 Niels Lohmann <https://nlohmann.me>\n// SPDX-License-Identifier: MIT\n\n\n\n#include <type_traits> // conditional, is_same\n\n// #include <nlohmann/detail/abi_macros.hpp>\n\n\nNLOHMANN_JSON_NAMESPACE_BEGIN\nnamespace detail\n{\n\n/*!\n@brief Default base class of the @ref basic_json class.\n\nSo that the correct implementations of the copy / move ctors / assign operators\nof @ref basic_json do not require complex case distinctions\n(no base class / custom base class used as customization point),\n@ref basic_json always has a base class.\nBy default, this class is used because it is empty and thus has no effect\non the behavior of @ref basic_json.\n*/\nstruct json_default_base {};\n\ntemplate<class T>\nusing json_base_class = typename std::conditional <\n                        std::is_same<T, void>::value,\n                        json_default_base,\n                        T\n                        >::type;\n\n}  // namespace detail\nNLOHMANN_JSON_NAMESPACE_END\n\n// #include <nlohmann/detail/json_pointer.hpp>\n//     __ _____ _____ _____\n//  __|  |   __|     |   | |  JSON for Modern C++\n// |  |  |__   |  |  | | | |  version 3.11.3\n// |_____|_____|_____|_|___|  https://github.com/nlohmann/json\n//\n// SPDX-FileCopyrightText: 2013-2023 Niels Lohmann <https://nlohmann.me>\n// SPDX-License-Identifier: MIT\n\n\n\n#include <algorithm> // all_of\n#include <cctype> // isdigit\n#include <cerrno> // errno, ERANGE\n#include <cstdlib> // strtoull\n#ifndef JSON_NO_IO\n    #include <iosfwd> // ostream\n#endif  // JSON_NO_IO\n#include <limits> // max\n#include <numeric> // accumulate\n#include <string> // string\n#include <utility> // move\n#include <vector> // vector\n\n// #include <nlohmann/detail/exceptions.hpp>\n\n// #include <nlohmann/detail/macro_scope.hpp>\n\n// #include <nlohmann/detail/string_concat.hpp>\n\n// #include <nlohmann/detail/string_escape.hpp>\n\n// #include <nlohmann/detail/value_t.hpp>\n\n\nNLOHMANN_JSON_NAMESPACE_BEGIN\n\n/// @brief JSON Pointer defines a string syntax for identifying a specific value within a JSON document\n/// @sa https://json.nlohmann.me/api/json_pointer/\ntemplate<typename RefStringType>\nclass json_pointer\n{\n    // allow basic_json to access private members\n    NLOHMANN_BASIC_JSON_TPL_DECLARATION\n    friend class basic_json;\n\n    template<typename>\n    friend class json_pointer;\n\n    template<typename T>\n    struct string_t_helper\n    {\n        using type = T;\n    };\n\n    NLOHMANN_BASIC_JSON_TPL_DECLARATION\n    struct string_t_helper<NLOHMANN_BASIC_JSON_TPL>\n    {\n        using type = StringType;\n    };\n\n  public:\n    // for backwards compatibility accept BasicJsonType\n    using string_t = typename string_t_helper<RefStringType>::type;\n\n    /// @brief create JSON pointer\n    /// @sa https://json.nlohmann.me/api/json_pointer/json_pointer/\n    explicit json_pointer(const string_t& s = \"\")\n        : reference_tokens(split(s))\n    {}\n\n    /// @brief return a string representation of the JSON pointer\n    /// @sa https://json.nlohmann.me/api/json_pointer/to_string/\n    string_t to_string() const\n    {\n        return std::accumulate(reference_tokens.begin(), reference_tokens.end(),\n                               string_t{},\n                               [](const string_t& a, const string_t& b)\n        {\n            return detail::concat(a, '/', detail::escape(b));\n        });\n    }\n\n    /// @brief return a string representation of the JSON pointer\n    /// @sa https://json.nlohmann.me/api/json_pointer/operator_string/\n    JSON_HEDLEY_DEPRECATED_FOR(3.11.0, to_string())\n    operator string_t() const\n    {\n        return to_string();\n    }\n\n#ifndef JSON_NO_IO\n    /// @brief write string representation of the JSON pointer to stream\n    /// @sa https://json.nlohmann.me/api/basic_json/operator_ltlt/\n    friend std::ostream& operator<<(std::ostream& o, const json_pointer& ptr)\n    {\n        o << ptr.to_string();\n        return o;\n    }\n#endif\n\n    /// @brief append another JSON pointer at the end of this JSON pointer\n    /// @sa https://json.nlohmann.me/api/json_pointer/operator_slasheq/\n    json_pointer& operator/=(const json_pointer& ptr)\n    {\n        reference_tokens.insert(reference_tokens.end(),\n                                ptr.reference_tokens.begin(),\n                                ptr.reference_tokens.end());\n        return *this;\n    }\n\n    /// @brief append an unescaped reference token at the end of this JSON pointer\n    /// @sa https://json.nlohmann.me/api/json_pointer/operator_slasheq/\n    json_pointer& operator/=(string_t token)\n    {\n        push_back(std::move(token));\n        return *this;\n    }\n\n    /// @brief append an array index at the end of this JSON pointer\n    /// @sa https://json.nlohmann.me/api/json_pointer/operator_slasheq/\n    json_pointer& operator/=(std::size_t array_idx)\n    {\n        return *this /= std::to_string(array_idx);\n    }\n\n    /// @brief create a new JSON pointer by appending the right JSON pointer at the end of the left JSON pointer\n    /// @sa https://json.nlohmann.me/api/json_pointer/operator_slash/\n    friend json_pointer operator/(const json_pointer& lhs,\n                                  const json_pointer& rhs)\n    {\n        return json_pointer(lhs) /= rhs;\n    }\n\n    /// @brief create a new JSON pointer by appending the unescaped token at the end of the JSON pointer\n    /// @sa https://json.nlohmann.me/api/json_pointer/operator_slash/\n    friend json_pointer operator/(const json_pointer& lhs, string_t token) // NOLINT(performance-unnecessary-value-param)\n    {\n        return json_pointer(lhs) /= std::move(token);\n    }\n\n    /// @brief create a new JSON pointer by appending the array-index-token at the end of the JSON pointer\n    /// @sa https://json.nlohmann.me/api/json_pointer/operator_slash/\n    friend json_pointer operator/(const json_pointer& lhs, std::size_t array_idx)\n    {\n        return json_pointer(lhs) /= array_idx;\n    }\n\n    /// @brief returns the parent of this JSON pointer\n    /// @sa https://json.nlohmann.me/api/json_pointer/parent_pointer/\n    json_pointer parent_pointer() const\n    {\n        if (empty())\n        {\n            return *this;\n        }\n\n        json_pointer res = *this;\n        res.pop_back();\n        return res;\n    }\n\n    /// @brief remove last reference token\n    /// @sa https://json.nlohmann.me/api/json_pointer/pop_back/\n    void pop_back()\n    {\n        if (JSON_HEDLEY_UNLIKELY(empty()))\n        {\n            JSON_THROW(detail::out_of_range::create(405, \"JSON pointer has no parent\", nullptr));\n        }\n\n        reference_tokens.pop_back();\n    }\n\n    /// @brief return last reference token\n    /// @sa https://json.nlohmann.me/api/json_pointer/back/\n    const string_t& back() const\n    {\n        if (JSON_HEDLEY_UNLIKELY(empty()))\n        {\n            JSON_THROW(detail::out_of_range::create(405, \"JSON pointer has no parent\", nullptr));\n        }\n\n        return reference_tokens.back();\n    }\n\n    /// @brief append an unescaped token at the end of the reference pointer\n    /// @sa https://json.nlohmann.me/api/json_pointer/push_back/\n    void push_back(const string_t& token)\n    {\n        reference_tokens.push_back(token);\n    }\n\n    /// @brief append an unescaped token at the end of the reference pointer\n    /// @sa https://json.nlohmann.me/api/json_pointer/push_back/\n    void push_back(string_t&& token)\n    {\n        reference_tokens.push_back(std::move(token));\n    }\n\n    /// @brief return whether pointer points to the root document\n    /// @sa https://json.nlohmann.me/api/json_pointer/empty/\n    bool empty() const noexcept\n    {\n        return reference_tokens.empty();\n    }\n\n  private:\n    /*!\n    @param[in] s  reference token to be converted into an array index\n\n    @return integer representation of @a s\n\n    @throw parse_error.106  if an array index begins with '0'\n    @throw parse_error.109  if an array index begins not with a digit\n    @throw out_of_range.404 if string @a s could not be converted to an integer\n    @throw out_of_range.410 if an array index exceeds size_type\n    */\n    template<typename BasicJsonType>\n    static typename BasicJsonType::size_type array_index(const string_t& s)\n    {\n        using size_type = typename BasicJsonType::size_type;\n\n        // error condition (cf. RFC 6901, Sect. 4)\n        if (JSON_HEDLEY_UNLIKELY(s.size() > 1 && s[0] == '0'))\n        {\n            JSON_THROW(detail::parse_error::create(106, 0, detail::concat(\"array index '\", s, \"' must not begin with '0'\"), nullptr));\n        }\n\n        // error condition (cf. RFC 6901, Sect. 4)\n        if (JSON_HEDLEY_UNLIKELY(s.size() > 1 && !(s[0] >= '1' && s[0] <= '9')))\n        {\n            JSON_THROW(detail::parse_error::create(109, 0, detail::concat(\"array index '\", s, \"' is not a number\"), nullptr));\n        }\n\n        const char* p = s.c_str();\n        char* p_end = nullptr;\n        errno = 0; // strtoull doesn't reset errno\n        const unsigned long long res = std::strtoull(p, &p_end, 10); // NOLINT(runtime/int)\n        if (p == p_end // invalid input or empty string\n                || errno == ERANGE // out of range\n                || JSON_HEDLEY_UNLIKELY(static_cast<std::size_t>(p_end - p) != s.size())) // incomplete read\n        {\n            JSON_THROW(detail::out_of_range::create(404, detail::concat(\"unresolved reference token '\", s, \"'\"), nullptr));\n        }\n\n        // only triggered on special platforms (like 32bit), see also\n        // https://github.com/nlohmann/json/pull/2203\n        if (res >= static_cast<unsigned long long>((std::numeric_limits<size_type>::max)()))  // NOLINT(runtime/int)\n        {\n            JSON_THROW(detail::out_of_range::create(410, detail::concat(\"array index \", s, \" exceeds size_type\"), nullptr));   // LCOV_EXCL_LINE\n        }\n\n        return static_cast<size_type>(res);\n    }\n\n  JSON_PRIVATE_UNLESS_TESTED:\n    json_pointer top() const\n    {\n        if (JSON_HEDLEY_UNLIKELY(empty()))\n        {\n            JSON_THROW(detail::out_of_range::create(405, \"JSON pointer has no parent\", nullptr));\n        }\n\n        json_pointer result = *this;\n        result.reference_tokens = {reference_tokens[0]};\n        return result;\n    }\n\n  private:\n    /*!\n    @brief create and return a reference to the pointed to value\n\n    @complexity Linear in the number of reference tokens.\n\n    @throw parse_error.109 if array index is not a number\n    @throw type_error.313 if value cannot be unflattened\n    */\n    template<typename BasicJsonType>\n    BasicJsonType& get_and_create(BasicJsonType& j) const\n    {\n        auto* result = &j;\n\n        // in case no reference tokens exist, return a reference to the JSON value\n        // j which will be overwritten by a primitive value\n        for (const auto& reference_token : reference_tokens)\n        {\n            switch (result->type())\n            {\n                case detail::value_t::null:\n                {\n                    if (reference_token == \"0\")\n                    {\n                        // start a new array if reference token is 0\n                        result = &result->operator[](0);\n                    }\n                    else\n                    {\n                        // start a new object otherwise\n                        result = &result->operator[](reference_token);\n                    }\n                    break;\n                }\n\n                case detail::value_t::object:\n                {\n                    // create an entry in the object\n                    result = &result->operator[](reference_token);\n                    break;\n                }\n\n                case detail::value_t::array:\n                {\n                    // create an entry in the array\n                    result = &result->operator[](array_index<BasicJsonType>(reference_token));\n                    break;\n                }\n\n                /*\n                The following code is only reached if there exists a reference\n                token _and_ the current value is primitive. In this case, we have\n                an error situation, because primitive values may only occur as\n                single value; that is, with an empty list of reference tokens.\n                */\n                case detail::value_t::string:\n                case detail::value_t::boolean:\n                case detail::value_t::number_integer:\n                case detail::value_t::number_unsigned:\n                case detail::value_t::number_float:\n                case detail::value_t::binary:\n                case detail::value_t::discarded:\n                default:\n                    JSON_THROW(detail::type_error::create(313, \"invalid value to unflatten\", &j));\n            }\n        }\n\n        return *result;\n    }\n\n    /*!\n    @brief return a reference to the pointed to value\n\n    @note This version does not throw if a value is not present, but tries to\n          create nested values instead. For instance, calling this function\n          with pointer `\"/this/that\"` on a null value is equivalent to calling\n          `operator[](\"this\").operator[](\"that\")` on that value, effectively\n          changing the null value to an object.\n\n    @param[in] ptr  a JSON value\n\n    @return reference to the JSON value pointed to by the JSON pointer\n\n    @complexity Linear in the length of the JSON pointer.\n\n    @throw parse_error.106   if an array index begins with '0'\n    @throw parse_error.109   if an array index was not a number\n    @throw out_of_range.404  if the JSON pointer can not be resolved\n    */\n    template<typename BasicJsonType>\n    BasicJsonType& get_unchecked(BasicJsonType* ptr) const\n    {\n        for (const auto& reference_token : reference_tokens)\n        {\n            // convert null values to arrays or objects before continuing\n            if (ptr->is_null())\n            {\n                // check if reference token is a number\n                const bool nums =\n                    std::all_of(reference_token.begin(), reference_token.end(),\n                                [](const unsigned char x)\n                {\n                    return std::isdigit(x);\n                });\n\n                // change value to array for numbers or \"-\" or to object otherwise\n                *ptr = (nums || reference_token == \"-\")\n                       ? detail::value_t::array\n                       : detail::value_t::object;\n            }\n\n            switch (ptr->type())\n            {\n                case detail::value_t::object:\n                {\n                    // use unchecked object access\n                    ptr = &ptr->operator[](reference_token);\n                    break;\n                }\n\n                case detail::value_t::array:\n                {\n                    if (reference_token == \"-\")\n                    {\n                        // explicitly treat \"-\" as index beyond the end\n                        ptr = &ptr->operator[](ptr->m_data.m_value.array->size());\n                    }\n                    else\n                    {\n                        // convert array index to number; unchecked access\n                        ptr = &ptr->operator[](array_index<BasicJsonType>(reference_token));\n                    }\n                    break;\n                }\n\n                case detail::value_t::null:\n                case detail::value_t::string:\n                case detail::value_t::boolean:\n                case detail::value_t::number_integer:\n                case detail::value_t::number_unsigned:\n                case detail::value_t::number_float:\n                case detail::value_t::binary:\n                case detail::value_t::discarded:\n                default:\n                    JSON_THROW(detail::out_of_range::create(404, detail::concat(\"unresolved reference token '\", reference_token, \"'\"), ptr));\n            }\n        }\n\n        return *ptr;\n    }\n\n    /*!\n    @throw parse_error.106   if an array index begins with '0'\n    @throw parse_error.109   if an array index was not a number\n    @throw out_of_range.402  if the array index '-' is used\n    @throw out_of_range.404  if the JSON pointer can not be resolved\n    */\n    template<typename BasicJsonType>\n    BasicJsonType& get_checked(BasicJsonType* ptr) const\n    {\n        for (const auto& reference_token : reference_tokens)\n        {\n            switch (ptr->type())\n            {\n                case detail::value_t::object:\n                {\n                    // note: at performs range check\n                    ptr = &ptr->at(reference_token);\n                    break;\n                }\n\n                case detail::value_t::array:\n                {\n                    if (JSON_HEDLEY_UNLIKELY(reference_token == \"-\"))\n                    {\n                        // \"-\" always fails the range check\n                        JSON_THROW(detail::out_of_range::create(402, detail::concat(\n                                \"array index '-' (\", std::to_string(ptr->m_data.m_value.array->size()),\n                                \") is out of range\"), ptr));\n                    }\n\n                    // note: at performs range check\n                    ptr = &ptr->at(array_index<BasicJsonType>(reference_token));\n                    break;\n                }\n\n                case detail::value_t::null:\n                case detail::value_t::string:\n                case detail::value_t::boolean:\n                case detail::value_t::number_integer:\n                case detail::value_t::number_unsigned:\n                case detail::value_t::number_float:\n                case detail::value_t::binary:\n                case detail::value_t::discarded:\n                default:\n                    JSON_THROW(detail::out_of_range::create(404, detail::concat(\"unresolved reference token '\", reference_token, \"'\"), ptr));\n            }\n        }\n\n        return *ptr;\n    }\n\n    /*!\n    @brief return a const reference to the pointed to value\n\n    @param[in] ptr  a JSON value\n\n    @return const reference to the JSON value pointed to by the JSON\n    pointer\n\n    @throw parse_error.106   if an array index begins with '0'\n    @throw parse_error.109   if an array index was not a number\n    @throw out_of_range.402  if the array index '-' is used\n    @throw out_of_range.404  if the JSON pointer can not be resolved\n    */\n    template<typename BasicJsonType>\n    const BasicJsonType& get_unchecked(const BasicJsonType* ptr) const\n    {\n        for (const auto& reference_token : reference_tokens)\n        {\n            switch (ptr->type())\n            {\n                case detail::value_t::object:\n                {\n                    // use unchecked object access\n                    ptr = &ptr->operator[](reference_token);\n                    break;\n                }\n\n                case detail::value_t::array:\n                {\n                    if (JSON_HEDLEY_UNLIKELY(reference_token == \"-\"))\n                    {\n                        // \"-\" cannot be used for const access\n                        JSON_THROW(detail::out_of_range::create(402, detail::concat(\"array index '-' (\", std::to_string(ptr->m_data.m_value.array->size()), \") is out of range\"), ptr));\n                    }\n\n                    // use unchecked array access\n                    ptr = &ptr->operator[](array_index<BasicJsonType>(reference_token));\n                    break;\n                }\n\n                case detail::value_t::null:\n                case detail::value_t::string:\n                case detail::value_t::boolean:\n                case detail::value_t::number_integer:\n                case detail::value_t::number_unsigned:\n                case detail::value_t::number_float:\n                case detail::value_t::binary:\n                case detail::value_t::discarded:\n                default:\n                    JSON_THROW(detail::out_of_range::create(404, detail::concat(\"unresolved reference token '\", reference_token, \"'\"), ptr));\n            }\n        }\n\n        return *ptr;\n    }\n\n    /*!\n    @throw parse_error.106   if an array index begins with '0'\n    @throw parse_error.109   if an array index was not a number\n    @throw out_of_range.402  if the array index '-' is used\n    @throw out_of_range.404  if the JSON pointer can not be resolved\n    */\n    template<typename BasicJsonType>\n    const BasicJsonType& get_checked(const BasicJsonType* ptr) const\n    {\n        for (const auto& reference_token : reference_tokens)\n        {\n            switch (ptr->type())\n            {\n                case detail::value_t::object:\n                {\n                    // note: at performs range check\n                    ptr = &ptr->at(reference_token);\n                    break;\n                }\n\n                case detail::value_t::array:\n                {\n                    if (JSON_HEDLEY_UNLIKELY(reference_token == \"-\"))\n                    {\n                        // \"-\" always fails the range check\n                        JSON_THROW(detail::out_of_range::create(402, detail::concat(\n                                \"array index '-' (\", std::to_string(ptr->m_data.m_value.array->size()),\n                                \") is out of range\"), ptr));\n                    }\n\n                    // note: at performs range check\n                    ptr = &ptr->at(array_index<BasicJsonType>(reference_token));\n                    break;\n                }\n\n                case detail::value_t::null:\n                case detail::value_t::string:\n                case detail::value_t::boolean:\n                case detail::value_t::number_integer:\n                case detail::value_t::number_unsigned:\n                case detail::value_t::number_float:\n                case detail::value_t::binary:\n                case detail::value_t::discarded:\n                default:\n                    JSON_THROW(detail::out_of_range::create(404, detail::concat(\"unresolved reference token '\", reference_token, \"'\"), ptr));\n            }\n        }\n\n        return *ptr;\n    }\n\n    /*!\n    @throw parse_error.106   if an array index begins with '0'\n    @throw parse_error.109   if an array index was not a number\n    */\n    template<typename BasicJsonType>\n    bool contains(const BasicJsonType* ptr) const\n    {\n        for (const auto& reference_token : reference_tokens)\n        {\n            switch (ptr->type())\n            {\n                case detail::value_t::object:\n                {\n                    if (!ptr->contains(reference_token))\n                    {\n                        // we did not find the key in the object\n                        return false;\n                    }\n\n                    ptr = &ptr->operator[](reference_token);\n                    break;\n                }\n\n                case detail::value_t::array:\n                {\n                    if (JSON_HEDLEY_UNLIKELY(reference_token == \"-\"))\n                    {\n                        // \"-\" always fails the range check\n                        return false;\n                    }\n                    if (JSON_HEDLEY_UNLIKELY(reference_token.size() == 1 && !(\"0\" <= reference_token && reference_token <= \"9\")))\n                    {\n                        // invalid char\n                        return false;\n                    }\n                    if (JSON_HEDLEY_UNLIKELY(reference_token.size() > 1))\n                    {\n                        if (JSON_HEDLEY_UNLIKELY(!('1' <= reference_token[0] && reference_token[0] <= '9')))\n                        {\n                            // first char should be between '1' and '9'\n                            return false;\n                        }\n                        for (std::size_t i = 1; i < reference_token.size(); i++)\n                        {\n                            if (JSON_HEDLEY_UNLIKELY(!('0' <= reference_token[i] && reference_token[i] <= '9')))\n                            {\n                                // other char should be between '0' and '9'\n                                return false;\n                            }\n                        }\n                    }\n\n                    const auto idx = array_index<BasicJsonType>(reference_token);\n                    if (idx >= ptr->size())\n                    {\n                        // index out of range\n                        return false;\n                    }\n\n                    ptr = &ptr->operator[](idx);\n                    break;\n                }\n\n                case detail::value_t::null:\n                case detail::value_t::string:\n                case detail::value_t::boolean:\n                case detail::value_t::number_integer:\n                case detail::value_t::number_unsigned:\n                case detail::value_t::number_float:\n                case detail::value_t::binary:\n                case detail::value_t::discarded:\n                default:\n                {\n                    // we do not expect primitive values if there is still a\n                    // reference token to process\n                    return false;\n                }\n            }\n        }\n\n        // no reference token left means we found a primitive value\n        return true;\n    }\n\n    /*!\n    @brief split the string input to reference tokens\n\n    @note This function is only called by the json_pointer constructor.\n          All exceptions below are documented there.\n\n    @throw parse_error.107  if the pointer is not empty or begins with '/'\n    @throw parse_error.108  if character '~' is not followed by '0' or '1'\n    */\n    static std::vector<string_t> split(const string_t& reference_string)\n    {\n        std::vector<string_t> result;\n\n        // special case: empty reference string -> no reference tokens\n        if (reference_string.empty())\n        {\n            return result;\n        }\n\n        // check if nonempty reference string begins with slash\n        if (JSON_HEDLEY_UNLIKELY(reference_string[0] != '/'))\n        {\n            JSON_THROW(detail::parse_error::create(107, 1, detail::concat(\"JSON pointer must be empty or begin with '/' - was: '\", reference_string, \"'\"), nullptr));\n        }\n\n        // extract the reference tokens:\n        // - slash: position of the last read slash (or end of string)\n        // - start: position after the previous slash\n        for (\n            // search for the first slash after the first character\n            std::size_t slash = reference_string.find_first_of('/', 1),\n            // set the beginning of the first reference token\n            start = 1;\n            // we can stop if start == 0 (if slash == string_t::npos)\n            start != 0;\n            // set the beginning of the next reference token\n            // (will eventually be 0 if slash == string_t::npos)\n            start = (slash == string_t::npos) ? 0 : slash + 1,\n            // find next slash\n            slash = reference_string.find_first_of('/', start))\n        {\n            // use the text between the beginning of the reference token\n            // (start) and the last slash (slash).\n            auto reference_token = reference_string.substr(start, slash - start);\n\n            // check reference tokens are properly escaped\n            for (std::size_t pos = reference_token.find_first_of('~');\n                    pos != string_t::npos;\n                    pos = reference_token.find_first_of('~', pos + 1))\n            {\n                JSON_ASSERT(reference_token[pos] == '~');\n\n                // ~ must be followed by 0 or 1\n                if (JSON_HEDLEY_UNLIKELY(pos == reference_token.size() - 1 ||\n                                         (reference_token[pos + 1] != '0' &&\n                                          reference_token[pos + 1] != '1')))\n                {\n                    JSON_THROW(detail::parse_error::create(108, 0, \"escape character '~' must be followed with '0' or '1'\", nullptr));\n                }\n            }\n\n            // finally, store the reference token\n            detail::unescape(reference_token);\n            result.push_back(reference_token);\n        }\n\n        return result;\n    }\n\n  private:\n    /*!\n    @param[in] reference_string  the reference string to the current value\n    @param[in] value             the value to consider\n    @param[in,out] result        the result object to insert values to\n\n    @note Empty objects or arrays are flattened to `null`.\n    */\n    template<typename BasicJsonType>\n    static void flatten(const string_t& reference_string,\n                        const BasicJsonType& value,\n                        BasicJsonType& result)\n    {\n        switch (value.type())\n        {\n            case detail::value_t::array:\n            {\n                if (value.m_data.m_value.array->empty())\n                {\n                    // flatten empty array as null\n                    result[reference_string] = nullptr;\n                }\n                else\n                {\n                    // iterate array and use index as reference string\n                    for (std::size_t i = 0; i < value.m_data.m_value.array->size(); ++i)\n                    {\n                        flatten(detail::concat(reference_string, '/', std::to_string(i)),\n                                value.m_data.m_value.array->operator[](i), result);\n                    }\n                }\n                break;\n            }\n\n            case detail::value_t::object:\n            {\n                if (value.m_data.m_value.object->empty())\n                {\n                    // flatten empty object as null\n                    result[reference_string] = nullptr;\n                }\n                else\n                {\n                    // iterate object and use keys as reference string\n                    for (const auto& element : *value.m_data.m_value.object)\n                    {\n                        flatten(detail::concat(reference_string, '/', detail::escape(element.first)), element.second, result);\n                    }\n                }\n                break;\n            }\n\n            case detail::value_t::null:\n            case detail::value_t::string:\n            case detail::value_t::boolean:\n            case detail::value_t::number_integer:\n            case detail::value_t::number_unsigned:\n            case detail::value_t::number_float:\n            case detail::value_t::binary:\n            case detail::value_t::discarded:\n            default:\n            {\n                // add primitive value with its reference string\n                result[reference_string] = value;\n                break;\n            }\n        }\n    }\n\n    /*!\n    @param[in] value  flattened JSON\n\n    @return unflattened JSON\n\n    @throw parse_error.109 if array index is not a number\n    @throw type_error.314  if value is not an object\n    @throw type_error.315  if object values are not primitive\n    @throw type_error.313  if value cannot be unflattened\n    */\n    template<typename BasicJsonType>\n    static BasicJsonType\n    unflatten(const BasicJsonType& value)\n    {\n        if (JSON_HEDLEY_UNLIKELY(!value.is_object()))\n        {\n            JSON_THROW(detail::type_error::create(314, \"only objects can be unflattened\", &value));\n        }\n\n        BasicJsonType result;\n\n        // iterate the JSON object values\n        for (const auto& element : *value.m_data.m_value.object)\n        {\n            if (JSON_HEDLEY_UNLIKELY(!element.second.is_primitive()))\n            {\n                JSON_THROW(detail::type_error::create(315, \"values in object must be primitive\", &element.second));\n            }\n\n            // assign value to reference pointed to by JSON pointer; Note that if\n            // the JSON pointer is \"\" (i.e., points to the whole value), function\n            // get_and_create returns a reference to result itself. An assignment\n            // will then create a primitive value.\n            json_pointer(element.first).get_and_create(result) = element.second;\n        }\n\n        return result;\n    }\n\n    // can't use conversion operator because of ambiguity\n    json_pointer<string_t> convert() const&\n    {\n        json_pointer<string_t> result;\n        result.reference_tokens = reference_tokens;\n        return result;\n    }\n\n    json_pointer<string_t> convert()&&\n    {\n        json_pointer<string_t> result;\n        result.reference_tokens = std::move(reference_tokens);\n        return result;\n    }\n\n  public:\n#if JSON_HAS_THREE_WAY_COMPARISON\n    /// @brief compares two JSON pointers for equality\n    /// @sa https://json.nlohmann.me/api/json_pointer/operator_eq/\n    template<typename RefStringTypeRhs>\n    bool operator==(const json_pointer<RefStringTypeRhs>& rhs) const noexcept\n    {\n        return reference_tokens == rhs.reference_tokens;\n    }\n\n    /// @brief compares JSON pointer and string for equality\n    /// @sa https://json.nlohmann.me/api/json_pointer/operator_eq/\n    JSON_HEDLEY_DEPRECATED_FOR(3.11.2, operator==(json_pointer))\n    bool operator==(const string_t& rhs) const\n    {\n        return *this == json_pointer(rhs);\n    }\n\n    /// @brief 3-way compares two JSON pointers\n    template<typename RefStringTypeRhs>\n    std::strong_ordering operator<=>(const json_pointer<RefStringTypeRhs>& rhs) const noexcept // *NOPAD*\n    {\n        return  reference_tokens <=> rhs.reference_tokens; // *NOPAD*\n    }\n#else\n    /// @brief compares two JSON pointers for equality\n    /// @sa https://json.nlohmann.me/api/json_pointer/operator_eq/\n    template<typename RefStringTypeLhs, typename RefStringTypeRhs>\n    // NOLINTNEXTLINE(readability-redundant-declaration)\n    friend bool operator==(const json_pointer<RefStringTypeLhs>& lhs,\n                           const json_pointer<RefStringTypeRhs>& rhs) noexcept;\n\n    /// @brief compares JSON pointer and string for equality\n    /// @sa https://json.nlohmann.me/api/json_pointer/operator_eq/\n    template<typename RefStringTypeLhs, typename StringType>\n    // NOLINTNEXTLINE(readability-redundant-declaration)\n    friend bool operator==(const json_pointer<RefStringTypeLhs>& lhs,\n                           const StringType& rhs);\n\n    /// @brief compares string and JSON pointer for equality\n    /// @sa https://json.nlohmann.me/api/json_pointer/operator_eq/\n    template<typename RefStringTypeRhs, typename StringType>\n    // NOLINTNEXTLINE(readability-redundant-declaration)\n    friend bool operator==(const StringType& lhs,\n                           const json_pointer<RefStringTypeRhs>& rhs);\n\n    /// @brief compares two JSON pointers for inequality\n    /// @sa https://json.nlohmann.me/api/json_pointer/operator_ne/\n    template<typename RefStringTypeLhs, typename RefStringTypeRhs>\n    // NOLINTNEXTLINE(readability-redundant-declaration)\n    friend bool operator!=(const json_pointer<RefStringTypeLhs>& lhs,\n                           const json_pointer<RefStringTypeRhs>& rhs) noexcept;\n\n    /// @brief compares JSON pointer and string for inequality\n    /// @sa https://json.nlohmann.me/api/json_pointer/operator_ne/\n    template<typename RefStringTypeLhs, typename StringType>\n    // NOLINTNEXTLINE(readability-redundant-declaration)\n    friend bool operator!=(const json_pointer<RefStringTypeLhs>& lhs,\n                           const StringType& rhs);\n\n    /// @brief compares string and JSON pointer for inequality\n    /// @sa https://json.nlohmann.me/api/json_pointer/operator_ne/\n    template<typename RefStringTypeRhs, typename StringType>\n    // NOLINTNEXTLINE(readability-redundant-declaration)\n    friend bool operator!=(const StringType& lhs,\n                           const json_pointer<RefStringTypeRhs>& rhs);\n\n    /// @brief compares two JSON pointer for less-than\n    template<typename RefStringTypeLhs, typename RefStringTypeRhs>\n    // NOLINTNEXTLINE(readability-redundant-declaration)\n    friend bool operator<(const json_pointer<RefStringTypeLhs>& lhs,\n                          const json_pointer<RefStringTypeRhs>& rhs) noexcept;\n#endif\n\n  private:\n    /// the reference tokens\n    std::vector<string_t> reference_tokens;\n};\n\n#if !JSON_HAS_THREE_WAY_COMPARISON\n// functions cannot be defined inside class due to ODR violations\ntemplate<typename RefStringTypeLhs, typename RefStringTypeRhs>\ninline bool operator==(const json_pointer<RefStringTypeLhs>& lhs,\n                       const json_pointer<RefStringTypeRhs>& rhs) noexcept\n{\n    return lhs.reference_tokens == rhs.reference_tokens;\n}\n\ntemplate<typename RefStringTypeLhs,\n         typename StringType = typename json_pointer<RefStringTypeLhs>::string_t>\nJSON_HEDLEY_DEPRECATED_FOR(3.11.2, operator==(json_pointer, json_pointer))\ninline bool operator==(const json_pointer<RefStringTypeLhs>& lhs,\n                       const StringType& rhs)\n{\n    return lhs == json_pointer<RefStringTypeLhs>(rhs);\n}\n\ntemplate<typename RefStringTypeRhs,\n         typename StringType = typename json_pointer<RefStringTypeRhs>::string_t>\nJSON_HEDLEY_DEPRECATED_FOR(3.11.2, operator==(json_pointer, json_pointer))\ninline bool operator==(const StringType& lhs,\n                       const json_pointer<RefStringTypeRhs>& rhs)\n{\n    return json_pointer<RefStringTypeRhs>(lhs) == rhs;\n}\n\ntemplate<typename RefStringTypeLhs, typename RefStringTypeRhs>\ninline bool operator!=(const json_pointer<RefStringTypeLhs>& lhs,\n                       const json_pointer<RefStringTypeRhs>& rhs) noexcept\n{\n    return !(lhs == rhs);\n}\n\ntemplate<typename RefStringTypeLhs,\n         typename StringType = typename json_pointer<RefStringTypeLhs>::string_t>\nJSON_HEDLEY_DEPRECATED_FOR(3.11.2, operator!=(json_pointer, json_pointer))\ninline bool operator!=(const json_pointer<RefStringTypeLhs>& lhs,\n                       const StringType& rhs)\n{\n    return !(lhs == rhs);\n}\n\ntemplate<typename RefStringTypeRhs,\n         typename StringType = typename json_pointer<RefStringTypeRhs>::string_t>\nJSON_HEDLEY_DEPRECATED_FOR(3.11.2, operator!=(json_pointer, json_pointer))\ninline bool operator!=(const StringType& lhs,\n                       const json_pointer<RefStringTypeRhs>& rhs)\n{\n    return !(lhs == rhs);\n}\n\ntemplate<typename RefStringTypeLhs, typename RefStringTypeRhs>\ninline bool operator<(const json_pointer<RefStringTypeLhs>& lhs,\n                      const json_pointer<RefStringTypeRhs>& rhs) noexcept\n{\n    return lhs.reference_tokens < rhs.reference_tokens;\n}\n#endif\n\nNLOHMANN_JSON_NAMESPACE_END\n\n// #include <nlohmann/detail/json_ref.hpp>\n//     __ _____ _____ _____\n//  __|  |   __|     |   | |  JSON for Modern C++\n// |  |  |__   |  |  | | | |  version 3.11.3\n// |_____|_____|_____|_|___|  https://github.com/nlohmann/json\n//\n// SPDX-FileCopyrightText: 2013-2023 Niels Lohmann <https://nlohmann.me>\n// SPDX-License-Identifier: MIT\n\n\n\n#include <initializer_list>\n#include <utility>\n\n// #include <nlohmann/detail/abi_macros.hpp>\n\n// #include <nlohmann/detail/meta/type_traits.hpp>\n\n\nNLOHMANN_JSON_NAMESPACE_BEGIN\nnamespace detail\n{\n\ntemplate<typename BasicJsonType>\nclass json_ref\n{\n  public:\n    using value_type = BasicJsonType;\n\n    json_ref(value_type&& value)\n        : owned_value(std::move(value))\n    {}\n\n    json_ref(const value_type& value)\n        : value_ref(&value)\n    {}\n\n    json_ref(std::initializer_list<json_ref> init)\n        : owned_value(init)\n    {}\n\n    template <\n        class... Args,\n        enable_if_t<std::is_constructible<value_type, Args...>::value, int> = 0 >\n    json_ref(Args && ... args)\n        : owned_value(std::forward<Args>(args)...)\n    {}\n\n    // class should be movable only\n    json_ref(json_ref&&) noexcept = default;\n    json_ref(const json_ref&) = delete;\n    json_ref& operator=(const json_ref&) = delete;\n    json_ref& operator=(json_ref&&) = delete;\n    ~json_ref() = default;\n\n    value_type moved_or_copied() const\n    {\n        if (value_ref == nullptr)\n        {\n            return std::move(owned_value);\n        }\n        return *value_ref;\n    }\n\n    value_type const& operator*() const\n    {\n        return value_ref ? *value_ref : owned_value;\n    }\n\n    value_type const* operator->() const\n    {\n        return &** this;\n    }\n\n  private:\n    mutable value_type owned_value = nullptr;\n    value_type const* value_ref = nullptr;\n};\n\n}  // namespace detail\nNLOHMANN_JSON_NAMESPACE_END\n\n// #include <nlohmann/detail/macro_scope.hpp>\n\n// #include <nlohmann/detail/string_concat.hpp>\n\n// #include <nlohmann/detail/string_escape.hpp>\n\n// #include <nlohmann/detail/meta/cpp_future.hpp>\n\n// #include <nlohmann/detail/meta/type_traits.hpp>\n\n// #include <nlohmann/detail/output/binary_writer.hpp>\n//     __ _____ _____ _____\n//  __|  |   __|     |   | |  JSON for Modern C++\n// |  |  |__   |  |  | | | |  version 3.11.3\n// |_____|_____|_____|_|___|  https://github.com/nlohmann/json\n//\n// SPDX-FileCopyrightText: 2013-2023 Niels Lohmann <https://nlohmann.me>\n// SPDX-License-Identifier: MIT\n\n\n\n#include <algorithm> // reverse\n#include <array> // array\n#include <map> // map\n#include <cmath> // isnan, isinf\n#include <cstdint> // uint8_t, uint16_t, uint32_t, uint64_t\n#include <cstring> // memcpy\n#include <limits> // numeric_limits\n#include <string> // string\n#include <utility> // move\n#include <vector> // vector\n\n// #include <nlohmann/detail/input/binary_reader.hpp>\n\n// #include <nlohmann/detail/macro_scope.hpp>\n\n// #include <nlohmann/detail/output/output_adapters.hpp>\n//     __ _____ _____ _____\n//  __|  |   __|     |   | |  JSON for Modern C++\n// |  |  |__   |  |  | | | |  version 3.11.3\n// |_____|_____|_____|_|___|  https://github.com/nlohmann/json\n//\n// SPDX-FileCopyrightText: 2013-2023 Niels Lohmann <https://nlohmann.me>\n// SPDX-License-Identifier: MIT\n\n\n\n#include <algorithm> // copy\n#include <cstddef> // size_t\n#include <iterator> // back_inserter\n#include <memory> // shared_ptr, make_shared\n#include <string> // basic_string\n#include <vector> // vector\n\n#ifndef JSON_NO_IO\n    #include <ios>      // streamsize\n    #include <ostream>  // basic_ostream\n#endif  // JSON_NO_IO\n\n// #include <nlohmann/detail/macro_scope.hpp>\n\n\nNLOHMANN_JSON_NAMESPACE_BEGIN\nnamespace detail\n{\n\n/// abstract output adapter interface\ntemplate<typename CharType> struct output_adapter_protocol\n{\n    virtual void write_character(CharType c) = 0;\n    virtual void write_characters(const CharType* s, std::size_t length) = 0;\n    virtual ~output_adapter_protocol() = default;\n\n    output_adapter_protocol() = default;\n    output_adapter_protocol(const output_adapter_protocol&) = default;\n    output_adapter_protocol(output_adapter_protocol&&) noexcept = default;\n    output_adapter_protocol& operator=(const output_adapter_protocol&) = default;\n    output_adapter_protocol& operator=(output_adapter_protocol&&) noexcept = default;\n};\n\n/// a type to simplify interfaces\ntemplate<typename CharType>\nusing output_adapter_t = std::shared_ptr<output_adapter_protocol<CharType>>;\n\n/// output adapter for byte vectors\ntemplate<typename CharType, typename AllocatorType = std::allocator<CharType>>\nclass output_vector_adapter : public output_adapter_protocol<CharType>\n{\n  public:\n    explicit output_vector_adapter(std::vector<CharType, AllocatorType>& vec) noexcept\n        : v(vec)\n    {}\n\n    void write_character(CharType c) override\n    {\n        v.push_back(c);\n    }\n\n    JSON_HEDLEY_NON_NULL(2)\n    void write_characters(const CharType* s, std::size_t length) override\n    {\n        v.insert(v.end(), s, s + length);\n    }\n\n  private:\n    std::vector<CharType, AllocatorType>& v;\n};\n\n#ifndef JSON_NO_IO\n/// output adapter for output streams\ntemplate<typename CharType>\nclass output_stream_adapter : public output_adapter_protocol<CharType>\n{\n  public:\n    explicit output_stream_adapter(std::basic_ostream<CharType>& s) noexcept\n        : stream(s)\n    {}\n\n    void write_character(CharType c) override\n    {\n        stream.put(c);\n    }\n\n    JSON_HEDLEY_NON_NULL(2)\n    void write_characters(const CharType* s, std::size_t length) override\n    {\n        stream.write(s, static_cast<std::streamsize>(length));\n    }\n\n  private:\n    std::basic_ostream<CharType>& stream;\n};\n#endif  // JSON_NO_IO\n\n/// output adapter for basic_string\ntemplate<typename CharType, typename StringType = std::basic_string<CharType>>\nclass output_string_adapter : public output_adapter_protocol<CharType>\n{\n  public:\n    explicit output_string_adapter(StringType& s) noexcept\n        : str(s)\n    {}\n\n    void write_character(CharType c) override\n    {\n        str.push_back(c);\n    }\n\n    JSON_HEDLEY_NON_NULL(2)\n    void write_characters(const CharType* s, std::size_t length) override\n    {\n        str.append(s, length);\n    }\n\n  private:\n    StringType& str;\n};\n\ntemplate<typename CharType, typename StringType = std::basic_string<CharType>>\nclass output_adapter\n{\n  public:\n    template<typename AllocatorType = std::allocator<CharType>>\n    output_adapter(std::vector<CharType, AllocatorType>& vec)\n        : oa(std::make_shared<output_vector_adapter<CharType, AllocatorType>>(vec)) {}\n\n#ifndef JSON_NO_IO\n    output_adapter(std::basic_ostream<CharType>& s)\n        : oa(std::make_shared<output_stream_adapter<CharType>>(s)) {}\n#endif  // JSON_NO_IO\n\n    output_adapter(StringType& s)\n        : oa(std::make_shared<output_string_adapter<CharType, StringType>>(s)) {}\n\n    operator output_adapter_t<CharType>()\n    {\n        return oa;\n    }\n\n  private:\n    output_adapter_t<CharType> oa = nullptr;\n};\n\n}  // namespace detail\nNLOHMANN_JSON_NAMESPACE_END\n\n// #include <nlohmann/detail/string_concat.hpp>\n\n\nNLOHMANN_JSON_NAMESPACE_BEGIN\nnamespace detail\n{\n\n///////////////////\n// binary writer //\n///////////////////\n\n/*!\n@brief serialization to CBOR and MessagePack values\n*/\ntemplate<typename BasicJsonType, typename CharType>\nclass binary_writer\n{\n    using string_t = typename BasicJsonType::string_t;\n    using binary_t = typename BasicJsonType::binary_t;\n    using number_float_t = typename BasicJsonType::number_float_t;\n\n  public:\n    /*!\n    @brief create a binary writer\n\n    @param[in] adapter  output adapter to write to\n    */\n    explicit binary_writer(output_adapter_t<CharType> adapter) : oa(std::move(adapter))\n    {\n        JSON_ASSERT(oa);\n    }\n\n    /*!\n    @param[in] j  JSON value to serialize\n    @pre       j.type() == value_t::object\n    */\n    void write_bson(const BasicJsonType& j)\n    {\n        switch (j.type())\n        {\n            case value_t::object:\n            {\n                write_bson_object(*j.m_data.m_value.object);\n                break;\n            }\n\n            case value_t::null:\n            case value_t::array:\n            case value_t::string:\n            case value_t::boolean:\n            case value_t::number_integer:\n            case value_t::number_unsigned:\n            case value_t::number_float:\n            case value_t::binary:\n            case value_t::discarded:\n            default:\n            {\n                JSON_THROW(type_error::create(317, concat(\"to serialize to BSON, top-level type must be object, but is \", j.type_name()), &j));\n            }\n        }\n    }\n\n    /*!\n    @param[in] j  JSON value to serialize\n    */\n    void write_cbor(const BasicJsonType& j)\n    {\n        switch (j.type())\n        {\n            case value_t::null:\n            {\n                oa->write_character(to_char_type(0xF6));\n                break;\n            }\n\n            case value_t::boolean:\n            {\n                oa->write_character(j.m_data.m_value.boolean\n                                    ? to_char_type(0xF5)\n                                    : to_char_type(0xF4));\n                break;\n            }\n\n            case value_t::number_integer:\n            {\n                if (j.m_data.m_value.number_integer >= 0)\n                {\n                    // CBOR does not differentiate between positive signed\n                    // integers and unsigned integers. Therefore, we used the\n                    // code from the value_t::number_unsigned case here.\n                    if (j.m_data.m_value.number_integer <= 0x17)\n                    {\n                        write_number(static_cast<std::uint8_t>(j.m_data.m_value.number_integer));\n                    }\n                    else if (j.m_data.m_value.number_integer <= (std::numeric_limits<std::uint8_t>::max)())\n                    {\n                        oa->write_character(to_char_type(0x18));\n                        write_number(static_cast<std::uint8_t>(j.m_data.m_value.number_integer));\n                    }\n                    else if (j.m_data.m_value.number_integer <= (std::numeric_limits<std::uint16_t>::max)())\n                    {\n                        oa->write_character(to_char_type(0x19));\n                        write_number(static_cast<std::uint16_t>(j.m_data.m_value.number_integer));\n                    }\n                    else if (j.m_data.m_value.number_integer <= (std::numeric_limits<std::uint32_t>::max)())\n                    {\n                        oa->write_character(to_char_type(0x1A));\n                        write_number(static_cast<std::uint32_t>(j.m_data.m_value.number_integer));\n                    }\n                    else\n                    {\n                        oa->write_character(to_char_type(0x1B));\n                        write_number(static_cast<std::uint64_t>(j.m_data.m_value.number_integer));\n                    }\n                }\n                else\n                {\n                    // The conversions below encode the sign in the first\n                    // byte, and the value is converted to a positive number.\n                    const auto positive_number = -1 - j.m_data.m_value.number_integer;\n                    if (j.m_data.m_value.number_integer >= -24)\n                    {\n                        write_number(static_cast<std::uint8_t>(0x20 + positive_number));\n                    }\n                    else if (positive_number <= (std::numeric_limits<std::uint8_t>::max)())\n                    {\n                        oa->write_character(to_char_type(0x38));\n                        write_number(static_cast<std::uint8_t>(positive_number));\n                    }\n                    else if (positive_number <= (std::numeric_limits<std::uint16_t>::max)())\n                    {\n                        oa->write_character(to_char_type(0x39));\n                        write_number(static_cast<std::uint16_t>(positive_number));\n                    }\n                    else if (positive_number <= (std::numeric_limits<std::uint32_t>::max)())\n                    {\n                        oa->write_character(to_char_type(0x3A));\n                        write_number(static_cast<std::uint32_t>(positive_number));\n                    }\n                    else\n                    {\n                        oa->write_character(to_char_type(0x3B));\n                        write_number(static_cast<std::uint64_t>(positive_number));\n                    }\n                }\n                break;\n            }\n\n            case value_t::number_unsigned:\n            {\n                if (j.m_data.m_value.number_unsigned <= 0x17)\n                {\n                    write_number(static_cast<std::uint8_t>(j.m_data.m_value.number_unsigned));\n                }\n                else if (j.m_data.m_value.number_unsigned <= (std::numeric_limits<std::uint8_t>::max)())\n                {\n                    oa->write_character(to_char_type(0x18));\n                    write_number(static_cast<std::uint8_t>(j.m_data.m_value.number_unsigned));\n                }\n                else if (j.m_data.m_value.number_unsigned <= (std::numeric_limits<std::uint16_t>::max)())\n                {\n                    oa->write_character(to_char_type(0x19));\n                    write_number(static_cast<std::uint16_t>(j.m_data.m_value.number_unsigned));\n                }\n                else if (j.m_data.m_value.number_unsigned <= (std::numeric_limits<std::uint32_t>::max)())\n                {\n                    oa->write_character(to_char_type(0x1A));\n                    write_number(static_cast<std::uint32_t>(j.m_data.m_value.number_unsigned));\n                }\n                else\n                {\n                    oa->write_character(to_char_type(0x1B));\n                    write_number(static_cast<std::uint64_t>(j.m_data.m_value.number_unsigned));\n                }\n                break;\n            }\n\n            case value_t::number_float:\n            {\n                if (std::isnan(j.m_data.m_value.number_float))\n                {\n                    // NaN is 0xf97e00 in CBOR\n                    oa->write_character(to_char_type(0xF9));\n                    oa->write_character(to_char_type(0x7E));\n                    oa->write_character(to_char_type(0x00));\n                }\n                else if (std::isinf(j.m_data.m_value.number_float))\n                {\n                    // Infinity is 0xf97c00, -Infinity is 0xf9fc00\n                    oa->write_character(to_char_type(0xf9));\n                    oa->write_character(j.m_data.m_value.number_float > 0 ? to_char_type(0x7C) : to_char_type(0xFC));\n                    oa->write_character(to_char_type(0x00));\n                }\n                else\n                {\n                    write_compact_float(j.m_data.m_value.number_float, detail::input_format_t::cbor);\n                }\n                break;\n            }\n\n            case value_t::string:\n            {\n                // step 1: write control byte and the string length\n                const auto N = j.m_data.m_value.string->size();\n                if (N <= 0x17)\n                {\n                    write_number(static_cast<std::uint8_t>(0x60 + N));\n                }\n                else if (N <= (std::numeric_limits<std::uint8_t>::max)())\n                {\n                    oa->write_character(to_char_type(0x78));\n                    write_number(static_cast<std::uint8_t>(N));\n                }\n                else if (N <= (std::numeric_limits<std::uint16_t>::max)())\n                {\n                    oa->write_character(to_char_type(0x79));\n                    write_number(static_cast<std::uint16_t>(N));\n                }\n                else if (N <= (std::numeric_limits<std::uint32_t>::max)())\n                {\n                    oa->write_character(to_char_type(0x7A));\n                    write_number(static_cast<std::uint32_t>(N));\n                }\n                // LCOV_EXCL_START\n                else if (N <= (std::numeric_limits<std::uint64_t>::max)())\n                {\n                    oa->write_character(to_char_type(0x7B));\n                    write_number(static_cast<std::uint64_t>(N));\n                }\n                // LCOV_EXCL_STOP\n\n                // step 2: write the string\n                oa->write_characters(\n                    reinterpret_cast<const CharType*>(j.m_data.m_value.string->c_str()),\n                    j.m_data.m_value.string->size());\n                break;\n            }\n\n            case value_t::array:\n            {\n                // step 1: write control byte and the array size\n                const auto N = j.m_data.m_value.array->size();\n                if (N <= 0x17)\n                {\n                    write_number(static_cast<std::uint8_t>(0x80 + N));\n                }\n                else if (N <= (std::numeric_limits<std::uint8_t>::max)())\n                {\n                    oa->write_character(to_char_type(0x98));\n                    write_number(static_cast<std::uint8_t>(N));\n                }\n                else if (N <= (std::numeric_limits<std::uint16_t>::max)())\n                {\n                    oa->write_character(to_char_type(0x99));\n                    write_number(static_cast<std::uint16_t>(N));\n                }\n                else if (N <= (std::numeric_limits<std::uint32_t>::max)())\n                {\n                    oa->write_character(to_char_type(0x9A));\n                    write_number(static_cast<std::uint32_t>(N));\n                }\n                // LCOV_EXCL_START\n                else if (N <= (std::numeric_limits<std::uint64_t>::max)())\n                {\n                    oa->write_character(to_char_type(0x9B));\n                    write_number(static_cast<std::uint64_t>(N));\n                }\n                // LCOV_EXCL_STOP\n\n                // step 2: write each element\n                for (const auto& el : *j.m_data.m_value.array)\n                {\n                    write_cbor(el);\n                }\n                break;\n            }\n\n            case value_t::binary:\n            {\n                if (j.m_data.m_value.binary->has_subtype())\n                {\n                    if (j.m_data.m_value.binary->subtype() <= (std::numeric_limits<std::uint8_t>::max)())\n                    {\n                        write_number(static_cast<std::uint8_t>(0xd8));\n                        write_number(static_cast<std::uint8_t>(j.m_data.m_value.binary->subtype()));\n                    }\n                    else if (j.m_data.m_value.binary->subtype() <= (std::numeric_limits<std::uint16_t>::max)())\n                    {\n                        write_number(static_cast<std::uint8_t>(0xd9));\n                        write_number(static_cast<std::uint16_t>(j.m_data.m_value.binary->subtype()));\n                    }\n                    else if (j.m_data.m_value.binary->subtype() <= (std::numeric_limits<std::uint32_t>::max)())\n                    {\n                        write_number(static_cast<std::uint8_t>(0xda));\n                        write_number(static_cast<std::uint32_t>(j.m_data.m_value.binary->subtype()));\n                    }\n                    else if (j.m_data.m_value.binary->subtype() <= (std::numeric_limits<std::uint64_t>::max)())\n                    {\n                        write_number(static_cast<std::uint8_t>(0xdb));\n                        write_number(static_cast<std::uint64_t>(j.m_data.m_value.binary->subtype()));\n                    }\n                }\n\n                // step 1: write control byte and the binary array size\n                const auto N = j.m_data.m_value.binary->size();\n                if (N <= 0x17)\n                {\n                    write_number(static_cast<std::uint8_t>(0x40 + N));\n                }\n                else if (N <= (std::numeric_limits<std::uint8_t>::max)())\n                {\n                    oa->write_character(to_char_type(0x58));\n                    write_number(static_cast<std::uint8_t>(N));\n                }\n                else if (N <= (std::numeric_limits<std::uint16_t>::max)())\n                {\n                    oa->write_character(to_char_type(0x59));\n                    write_number(static_cast<std::uint16_t>(N));\n                }\n                else if (N <= (std::numeric_limits<std::uint32_t>::max)())\n                {\n                    oa->write_character(to_char_type(0x5A));\n                    write_number(static_cast<std::uint32_t>(N));\n                }\n                // LCOV_EXCL_START\n                else if (N <= (std::numeric_limits<std::uint64_t>::max)())\n                {\n                    oa->write_character(to_char_type(0x5B));\n                    write_number(static_cast<std::uint64_t>(N));\n                }\n                // LCOV_EXCL_STOP\n\n                // step 2: write each element\n                oa->write_characters(\n                    reinterpret_cast<const CharType*>(j.m_data.m_value.binary->data()),\n                    N);\n\n                break;\n            }\n\n            case value_t::object:\n            {\n                // step 1: write control byte and the object size\n                const auto N = j.m_data.m_value.object->size();\n                if (N <= 0x17)\n                {\n                    write_number(static_cast<std::uint8_t>(0xA0 + N));\n                }\n                else if (N <= (std::numeric_limits<std::uint8_t>::max)())\n                {\n                    oa->write_character(to_char_type(0xB8));\n                    write_number(static_cast<std::uint8_t>(N));\n                }\n                else if (N <= (std::numeric_limits<std::uint16_t>::max)())\n                {\n                    oa->write_character(to_char_type(0xB9));\n                    write_number(static_cast<std::uint16_t>(N));\n                }\n                else if (N <= (std::numeric_limits<std::uint32_t>::max)())\n                {\n                    oa->write_character(to_char_type(0xBA));\n                    write_number(static_cast<std::uint32_t>(N));\n                }\n                // LCOV_EXCL_START\n                else if (N <= (std::numeric_limits<std::uint64_t>::max)())\n                {\n                    oa->write_character(to_char_type(0xBB));\n                    write_number(static_cast<std::uint64_t>(N));\n                }\n                // LCOV_EXCL_STOP\n\n                // step 2: write each element\n                for (const auto& el : *j.m_data.m_value.object)\n                {\n                    write_cbor(el.first);\n                    write_cbor(el.second);\n                }\n                break;\n            }\n\n            case value_t::discarded:\n            default:\n                break;\n        }\n    }\n\n    /*!\n    @param[in] j  JSON value to serialize\n    */\n    void write_msgpack(const BasicJsonType& j)\n    {\n        switch (j.type())\n        {\n            case value_t::null: // nil\n            {\n                oa->write_character(to_char_type(0xC0));\n                break;\n            }\n\n            case value_t::boolean: // true and false\n            {\n                oa->write_character(j.m_data.m_value.boolean\n                                    ? to_char_type(0xC3)\n                                    : to_char_type(0xC2));\n                break;\n            }\n\n            case value_t::number_integer:\n            {\n                if (j.m_data.m_value.number_integer >= 0)\n                {\n                    // MessagePack does not differentiate between positive\n                    // signed integers and unsigned integers. Therefore, we used\n                    // the code from the value_t::number_unsigned case here.\n                    if (j.m_data.m_value.number_unsigned < 128)\n                    {\n                        // positive fixnum\n                        write_number(static_cast<std::uint8_t>(j.m_data.m_value.number_integer));\n                    }\n                    else if (j.m_data.m_value.number_unsigned <= (std::numeric_limits<std::uint8_t>::max)())\n                    {\n                        // uint 8\n                        oa->write_character(to_char_type(0xCC));\n                        write_number(static_cast<std::uint8_t>(j.m_data.m_value.number_integer));\n                    }\n                    else if (j.m_data.m_value.number_unsigned <= (std::numeric_limits<std::uint16_t>::max)())\n                    {\n                        // uint 16\n                        oa->write_character(to_char_type(0xCD));\n                        write_number(static_cast<std::uint16_t>(j.m_data.m_value.number_integer));\n                    }\n                    else if (j.m_data.m_value.number_unsigned <= (std::numeric_limits<std::uint32_t>::max)())\n                    {\n                        // uint 32\n                        oa->write_character(to_char_type(0xCE));\n                        write_number(static_cast<std::uint32_t>(j.m_data.m_value.number_integer));\n                    }\n                    else if (j.m_data.m_value.number_unsigned <= (std::numeric_limits<std::uint64_t>::max)())\n                    {\n                        // uint 64\n                        oa->write_character(to_char_type(0xCF));\n                        write_number(static_cast<std::uint64_t>(j.m_data.m_value.number_integer));\n                    }\n                }\n                else\n                {\n                    if (j.m_data.m_value.number_integer >= -32)\n                    {\n                        // negative fixnum\n                        write_number(static_cast<std::int8_t>(j.m_data.m_value.number_integer));\n                    }\n                    else if (j.m_data.m_value.number_integer >= (std::numeric_limits<std::int8_t>::min)() &&\n                             j.m_data.m_value.number_integer <= (std::numeric_limits<std::int8_t>::max)())\n                    {\n                        // int 8\n                        oa->write_character(to_char_type(0xD0));\n                        write_number(static_cast<std::int8_t>(j.m_data.m_value.number_integer));\n                    }\n                    else if (j.m_data.m_value.number_integer >= (std::numeric_limits<std::int16_t>::min)() &&\n                             j.m_data.m_value.number_integer <= (std::numeric_limits<std::int16_t>::max)())\n                    {\n                        // int 16\n                        oa->write_character(to_char_type(0xD1));\n                        write_number(static_cast<std::int16_t>(j.m_data.m_value.number_integer));\n                    }\n                    else if (j.m_data.m_value.number_integer >= (std::numeric_limits<std::int32_t>::min)() &&\n                             j.m_data.m_value.number_integer <= (std::numeric_limits<std::int32_t>::max)())\n                    {\n                        // int 32\n                        oa->write_character(to_char_type(0xD2));\n                        write_number(static_cast<std::int32_t>(j.m_data.m_value.number_integer));\n                    }\n                    else if (j.m_data.m_value.number_integer >= (std::numeric_limits<std::int64_t>::min)() &&\n                             j.m_data.m_value.number_integer <= (std::numeric_limits<std::int64_t>::max)())\n                    {\n                        // int 64\n                        oa->write_character(to_char_type(0xD3));\n                        write_number(static_cast<std::int64_t>(j.m_data.m_value.number_integer));\n                    }\n                }\n                break;\n            }\n\n            case value_t::number_unsigned:\n            {\n                if (j.m_data.m_value.number_unsigned < 128)\n                {\n                    // positive fixnum\n                    write_number(static_cast<std::uint8_t>(j.m_data.m_value.number_integer));\n                }\n                else if (j.m_data.m_value.number_unsigned <= (std::numeric_limits<std::uint8_t>::max)())\n                {\n                    // uint 8\n                    oa->write_character(to_char_type(0xCC));\n                    write_number(static_cast<std::uint8_t>(j.m_data.m_value.number_integer));\n                }\n                else if (j.m_data.m_value.number_unsigned <= (std::numeric_limits<std::uint16_t>::max)())\n                {\n                    // uint 16\n                    oa->write_character(to_char_type(0xCD));\n                    write_number(static_cast<std::uint16_t>(j.m_data.m_value.number_integer));\n                }\n                else if (j.m_data.m_value.number_unsigned <= (std::numeric_limits<std::uint32_t>::max)())\n                {\n                    // uint 32\n                    oa->write_character(to_char_type(0xCE));\n                    write_number(static_cast<std::uint32_t>(j.m_data.m_value.number_integer));\n                }\n                else if (j.m_data.m_value.number_unsigned <= (std::numeric_limits<std::uint64_t>::max)())\n                {\n                    // uint 64\n                    oa->write_character(to_char_type(0xCF));\n                    write_number(static_cast<std::uint64_t>(j.m_data.m_value.number_integer));\n                }\n                break;\n            }\n\n            case value_t::number_float:\n            {\n                write_compact_float(j.m_data.m_value.number_float, detail::input_format_t::msgpack);\n                break;\n            }\n\n            case value_t::string:\n            {\n                // step 1: write control byte and the string length\n                const auto N = j.m_data.m_value.string->size();\n                if (N <= 31)\n                {\n                    // fixstr\n                    write_number(static_cast<std::uint8_t>(0xA0 | N));\n                }\n                else if (N <= (std::numeric_limits<std::uint8_t>::max)())\n                {\n                    // str 8\n                    oa->write_character(to_char_type(0xD9));\n                    write_number(static_cast<std::uint8_t>(N));\n                }\n                else if (N <= (std::numeric_limits<std::uint16_t>::max)())\n                {\n                    // str 16\n                    oa->write_character(to_char_type(0xDA));\n                    write_number(static_cast<std::uint16_t>(N));\n                }\n                else if (N <= (std::numeric_limits<std::uint32_t>::max)())\n                {\n                    // str 32\n                    oa->write_character(to_char_type(0xDB));\n                    write_number(static_cast<std::uint32_t>(N));\n                }\n\n                // step 2: write the string\n                oa->write_characters(\n                    reinterpret_cast<const CharType*>(j.m_data.m_value.string->c_str()),\n                    j.m_data.m_value.string->size());\n                break;\n            }\n\n            case value_t::array:\n            {\n                // step 1: write control byte and the array size\n                const auto N = j.m_data.m_value.array->size();\n                if (N <= 15)\n                {\n                    // fixarray\n                    write_number(static_cast<std::uint8_t>(0x90 | N));\n                }\n                else if (N <= (std::numeric_limits<std::uint16_t>::max)())\n                {\n                    // array 16\n                    oa->write_character(to_char_type(0xDC));\n                    write_number(static_cast<std::uint16_t>(N));\n                }\n                else if (N <= (std::numeric_limits<std::uint32_t>::max)())\n                {\n                    // array 32\n                    oa->write_character(to_char_type(0xDD));\n                    write_number(static_cast<std::uint32_t>(N));\n                }\n\n                // step 2: write each element\n                for (const auto& el : *j.m_data.m_value.array)\n                {\n                    write_msgpack(el);\n                }\n                break;\n            }\n\n            case value_t::binary:\n            {\n                // step 0: determine if the binary type has a set subtype to\n                // determine whether or not to use the ext or fixext types\n                const bool use_ext = j.m_data.m_value.binary->has_subtype();\n\n                // step 1: write control byte and the byte string length\n                const auto N = j.m_data.m_value.binary->size();\n                if (N <= (std::numeric_limits<std::uint8_t>::max)())\n                {\n                    std::uint8_t output_type{};\n                    bool fixed = true;\n                    if (use_ext)\n                    {\n                        switch (N)\n                        {\n                            case 1:\n                                output_type = 0xD4; // fixext 1\n                                break;\n                            case 2:\n                                output_type = 0xD5; // fixext 2\n                                break;\n                            case 4:\n                                output_type = 0xD6; // fixext 4\n                                break;\n                            case 8:\n                                output_type = 0xD7; // fixext 8\n                                break;\n                            case 16:\n                                output_type = 0xD8; // fixext 16\n                                break;\n                            default:\n                                output_type = 0xC7; // ext 8\n                                fixed = false;\n                                break;\n                        }\n\n                    }\n                    else\n                    {\n                        output_type = 0xC4; // bin 8\n                        fixed = false;\n                    }\n\n                    oa->write_character(to_char_type(output_type));\n                    if (!fixed)\n                    {\n                        write_number(static_cast<std::uint8_t>(N));\n                    }\n                }\n                else if (N <= (std::numeric_limits<std::uint16_t>::max)())\n                {\n                    const std::uint8_t output_type = use_ext\n                                                     ? 0xC8 // ext 16\n                                                     : 0xC5; // bin 16\n\n                    oa->write_character(to_char_type(output_type));\n                    write_number(static_cast<std::uint16_t>(N));\n                }\n                else if (N <= (std::numeric_limits<std::uint32_t>::max)())\n                {\n                    const std::uint8_t output_type = use_ext\n                                                     ? 0xC9 // ext 32\n                                                     : 0xC6; // bin 32\n\n                    oa->write_character(to_char_type(output_type));\n                    write_number(static_cast<std::uint32_t>(N));\n                }\n\n                // step 1.5: if this is an ext type, write the subtype\n                if (use_ext)\n                {\n                    write_number(static_cast<std::int8_t>(j.m_data.m_value.binary->subtype()));\n                }\n\n                // step 2: write the byte string\n                oa->write_characters(\n                    reinterpret_cast<const CharType*>(j.m_data.m_value.binary->data()),\n                    N);\n\n                break;\n            }\n\n            case value_t::object:\n            {\n                // step 1: write control byte and the object size\n                const auto N = j.m_data.m_value.object->size();\n                if (N <= 15)\n                {\n                    // fixmap\n                    write_number(static_cast<std::uint8_t>(0x80 | (N & 0xF)));\n                }\n                else if (N <= (std::numeric_limits<std::uint16_t>::max)())\n                {\n                    // map 16\n                    oa->write_character(to_char_type(0xDE));\n                    write_number(static_cast<std::uint16_t>(N));\n                }\n                else if (N <= (std::numeric_limits<std::uint32_t>::max)())\n                {\n                    // map 32\n                    oa->write_character(to_char_type(0xDF));\n                    write_number(static_cast<std::uint32_t>(N));\n                }\n\n                // step 2: write each element\n                for (const auto& el : *j.m_data.m_value.object)\n                {\n                    write_msgpack(el.first);\n                    write_msgpack(el.second);\n                }\n                break;\n            }\n\n            case value_t::discarded:\n            default:\n                break;\n        }\n    }\n\n    /*!\n    @param[in] j  JSON value to serialize\n    @param[in] use_count   whether to use '#' prefixes (optimized format)\n    @param[in] use_type    whether to use '$' prefixes (optimized format)\n    @param[in] add_prefix  whether prefixes need to be used for this value\n    @param[in] use_bjdata  whether write in BJData format, default is false\n    */\n    void write_ubjson(const BasicJsonType& j, const bool use_count,\n                      const bool use_type, const bool add_prefix = true,\n                      const bool use_bjdata = false)\n    {\n        switch (j.type())\n        {\n            case value_t::null:\n            {\n                if (add_prefix)\n                {\n                    oa->write_character(to_char_type('Z'));\n                }\n                break;\n            }\n\n            case value_t::boolean:\n            {\n                if (add_prefix)\n                {\n                    oa->write_character(j.m_data.m_value.boolean\n                                        ? to_char_type('T')\n                                        : to_char_type('F'));\n                }\n                break;\n            }\n\n            case value_t::number_integer:\n            {\n                write_number_with_ubjson_prefix(j.m_data.m_value.number_integer, add_prefix, use_bjdata);\n                break;\n            }\n\n            case value_t::number_unsigned:\n            {\n                write_number_with_ubjson_prefix(j.m_data.m_value.number_unsigned, add_prefix, use_bjdata);\n                break;\n            }\n\n            case value_t::number_float:\n            {\n                write_number_with_ubjson_prefix(j.m_data.m_value.number_float, add_prefix, use_bjdata);\n                break;\n            }\n\n            case value_t::string:\n            {\n                if (add_prefix)\n                {\n                    oa->write_character(to_char_type('S'));\n                }\n                write_number_with_ubjson_prefix(j.m_data.m_value.string->size(), true, use_bjdata);\n                oa->write_characters(\n                    reinterpret_cast<const CharType*>(j.m_data.m_value.string->c_str()),\n                    j.m_data.m_value.string->size());\n                break;\n            }\n\n            case value_t::array:\n            {\n                if (add_prefix)\n                {\n                    oa->write_character(to_char_type('['));\n                }\n\n                bool prefix_required = true;\n                if (use_type && !j.m_data.m_value.array->empty())\n                {\n                    JSON_ASSERT(use_count);\n                    const CharType first_prefix = ubjson_prefix(j.front(), use_bjdata);\n                    const bool same_prefix = std::all_of(j.begin() + 1, j.end(),\n                                                         [this, first_prefix, use_bjdata](const BasicJsonType & v)\n                    {\n                        return ubjson_prefix(v, use_bjdata) == first_prefix;\n                    });\n\n                    std::vector<CharType> bjdx = {'[', '{', 'S', 'H', 'T', 'F', 'N', 'Z'}; // excluded markers in bjdata optimized type\n\n                    if (same_prefix && !(use_bjdata && std::find(bjdx.begin(), bjdx.end(), first_prefix) != bjdx.end()))\n                    {\n                        prefix_required = false;\n                        oa->write_character(to_char_type('$'));\n                        oa->write_character(first_prefix);\n                    }\n                }\n\n                if (use_count)\n                {\n                    oa->write_character(to_char_type('#'));\n                    write_number_with_ubjson_prefix(j.m_data.m_value.array->size(), true, use_bjdata);\n                }\n\n                for (const auto& el : *j.m_data.m_value.array)\n                {\n                    write_ubjson(el, use_count, use_type, prefix_required, use_bjdata);\n                }\n\n                if (!use_count)\n                {\n                    oa->write_character(to_char_type(']'));\n                }\n\n                break;\n            }\n\n            case value_t::binary:\n            {\n                if (add_prefix)\n                {\n                    oa->write_character(to_char_type('['));\n                }\n\n                if (use_type && !j.m_data.m_value.binary->empty())\n                {\n                    JSON_ASSERT(use_count);\n                    oa->write_character(to_char_type('$'));\n                    oa->write_character('U');\n                }\n\n                if (use_count)\n                {\n                    oa->write_character(to_char_type('#'));\n                    write_number_with_ubjson_prefix(j.m_data.m_value.binary->size(), true, use_bjdata);\n                }\n\n                if (use_type)\n                {\n                    oa->write_characters(\n                        reinterpret_cast<const CharType*>(j.m_data.m_value.binary->data()),\n                        j.m_data.m_value.binary->size());\n                }\n                else\n                {\n                    for (size_t i = 0; i < j.m_data.m_value.binary->size(); ++i)\n                    {\n                        oa->write_character(to_char_type('U'));\n                        oa->write_character(j.m_data.m_value.binary->data()[i]);\n                    }\n                }\n\n                if (!use_count)\n                {\n                    oa->write_character(to_char_type(']'));\n                }\n\n                break;\n            }\n\n            case value_t::object:\n            {\n                if (use_bjdata && j.m_data.m_value.object->size() == 3 && j.m_data.m_value.object->find(\"_ArrayType_\") != j.m_data.m_value.object->end() && j.m_data.m_value.object->find(\"_ArraySize_\") != j.m_data.m_value.object->end() && j.m_data.m_value.object->find(\"_ArrayData_\") != j.m_data.m_value.object->end())\n                {\n                    if (!write_bjdata_ndarray(*j.m_data.m_value.object, use_count, use_type))  // decode bjdata ndarray in the JData format (https://github.com/NeuroJSON/jdata)\n                    {\n                        break;\n                    }\n                }\n\n                if (add_prefix)\n                {\n                    oa->write_character(to_char_type('{'));\n                }\n\n                bool prefix_required = true;\n                if (use_type && !j.m_data.m_value.object->empty())\n                {\n                    JSON_ASSERT(use_count);\n                    const CharType first_prefix = ubjson_prefix(j.front(), use_bjdata);\n                    const bool same_prefix = std::all_of(j.begin(), j.end(),\n                                                         [this, first_prefix, use_bjdata](const BasicJsonType & v)\n                    {\n                        return ubjson_prefix(v, use_bjdata) == first_prefix;\n                    });\n\n                    std::vector<CharType> bjdx = {'[', '{', 'S', 'H', 'T', 'F', 'N', 'Z'}; // excluded markers in bjdata optimized type\n\n                    if (same_prefix && !(use_bjdata && std::find(bjdx.begin(), bjdx.end(), first_prefix) != bjdx.end()))\n                    {\n                        prefix_required = false;\n                        oa->write_character(to_char_type('$'));\n                        oa->write_character(first_prefix);\n                    }\n                }\n\n                if (use_count)\n                {\n                    oa->write_character(to_char_type('#'));\n                    write_number_with_ubjson_prefix(j.m_data.m_value.object->size(), true, use_bjdata);\n                }\n\n                for (const auto& el : *j.m_data.m_value.object)\n                {\n                    write_number_with_ubjson_prefix(el.first.size(), true, use_bjdata);\n                    oa->write_characters(\n                        reinterpret_cast<const CharType*>(el.first.c_str()),\n                        el.first.size());\n                    write_ubjson(el.second, use_count, use_type, prefix_required, use_bjdata);\n                }\n\n                if (!use_count)\n                {\n                    oa->write_character(to_char_type('}'));\n                }\n\n                break;\n            }\n\n            case value_t::discarded:\n            default:\n                break;\n        }\n    }\n\n  private:\n    //////////\n    // BSON //\n    //////////\n\n    /*!\n    @return The size of a BSON document entry header, including the id marker\n            and the entry name size (and its null-terminator).\n    */\n    static std::size_t calc_bson_entry_header_size(const string_t& name, const BasicJsonType& j)\n    {\n        const auto it = name.find(static_cast<typename string_t::value_type>(0));\n        if (JSON_HEDLEY_UNLIKELY(it != BasicJsonType::string_t::npos))\n        {\n            JSON_THROW(out_of_range::create(409, concat(\"BSON key cannot contain code point U+0000 (at byte \", std::to_string(it), \")\"), &j));\n            static_cast<void>(j);\n        }\n\n        return /*id*/ 1ul + name.size() + /*zero-terminator*/1u;\n    }\n\n    /*!\n    @brief Writes the given @a element_type and @a name to the output adapter\n    */\n    void write_bson_entry_header(const string_t& name,\n                                 const std::uint8_t element_type)\n    {\n        oa->write_character(to_char_type(element_type)); // boolean\n        oa->write_characters(\n            reinterpret_cast<const CharType*>(name.c_str()),\n            name.size() + 1u);\n    }\n\n    /*!\n    @brief Writes a BSON element with key @a name and boolean value @a value\n    */\n    void write_bson_boolean(const string_t& name,\n                            const bool value)\n    {\n        write_bson_entry_header(name, 0x08);\n        oa->write_character(value ? to_char_type(0x01) : to_char_type(0x00));\n    }\n\n    /*!\n    @brief Writes a BSON element with key @a name and double value @a value\n    */\n    void write_bson_double(const string_t& name,\n                           const double value)\n    {\n        write_bson_entry_header(name, 0x01);\n        write_number<double>(value, true);\n    }\n\n    /*!\n    @return The size of the BSON-encoded string in @a value\n    */\n    static std::size_t calc_bson_string_size(const string_t& value)\n    {\n        return sizeof(std::int32_t) + value.size() + 1ul;\n    }\n\n    /*!\n    @brief Writes a BSON element with key @a name and string value @a value\n    */\n    void write_bson_string(const string_t& name,\n                           const string_t& value)\n    {\n        write_bson_entry_header(name, 0x02);\n\n        write_number<std::int32_t>(static_cast<std::int32_t>(value.size() + 1ul), true);\n        oa->write_characters(\n            reinterpret_cast<const CharType*>(value.c_str()),\n            value.size() + 1);\n    }\n\n    /*!\n    @brief Writes a BSON element with key @a name and null value\n    */\n    void write_bson_null(const string_t& name)\n    {\n        write_bson_entry_header(name, 0x0A);\n    }\n\n    /*!\n    @return The size of the BSON-encoded integer @a value\n    */\n    static std::size_t calc_bson_integer_size(const std::int64_t value)\n    {\n        return (std::numeric_limits<std::int32_t>::min)() <= value && value <= (std::numeric_limits<std::int32_t>::max)()\n               ? sizeof(std::int32_t)\n               : sizeof(std::int64_t);\n    }\n\n    /*!\n    @brief Writes a BSON element with key @a name and integer @a value\n    */\n    void write_bson_integer(const string_t& name,\n                            const std::int64_t value)\n    {\n        if ((std::numeric_limits<std::int32_t>::min)() <= value && value <= (std::numeric_limits<std::int32_t>::max)())\n        {\n            write_bson_entry_header(name, 0x10); // int32\n            write_number<std::int32_t>(static_cast<std::int32_t>(value), true);\n        }\n        else\n        {\n            write_bson_entry_header(name, 0x12); // int64\n            write_number<std::int64_t>(static_cast<std::int64_t>(value), true);\n        }\n    }\n\n    /*!\n    @return The size of the BSON-encoded unsigned integer in @a j\n    */\n    static constexpr std::size_t calc_bson_unsigned_size(const std::uint64_t value) noexcept\n    {\n        return (value <= static_cast<std::uint64_t>((std::numeric_limits<std::int32_t>::max)()))\n               ? sizeof(std::int32_t)\n               : sizeof(std::int64_t);\n    }\n\n    /*!\n    @brief Writes a BSON element with key @a name and unsigned @a value\n    */\n    void write_bson_unsigned(const string_t& name,\n                             const BasicJsonType& j)\n    {\n        if (j.m_data.m_value.number_unsigned <= static_cast<std::uint64_t>((std::numeric_limits<std::int32_t>::max)()))\n        {\n            write_bson_entry_header(name, 0x10 /* int32 */);\n            write_number<std::int32_t>(static_cast<std::int32_t>(j.m_data.m_value.number_unsigned), true);\n        }\n        else if (j.m_data.m_value.number_unsigned <= static_cast<std::uint64_t>((std::numeric_limits<std::int64_t>::max)()))\n        {\n            write_bson_entry_header(name, 0x12 /* int64 */);\n            write_number<std::int64_t>(static_cast<std::int64_t>(j.m_data.m_value.number_unsigned), true);\n        }\n        else\n        {\n            JSON_THROW(out_of_range::create(407, concat(\"integer number \", std::to_string(j.m_data.m_value.number_unsigned), \" cannot be represented by BSON as it does not fit int64\"), &j));\n        }\n    }\n\n    /*!\n    @brief Writes a BSON element with key @a name and object @a value\n    */\n    void write_bson_object_entry(const string_t& name,\n                                 const typename BasicJsonType::object_t& value)\n    {\n        write_bson_entry_header(name, 0x03); // object\n        write_bson_object(value);\n    }\n\n    /*!\n    @return The size of the BSON-encoded array @a value\n    */\n    static std::size_t calc_bson_array_size(const typename BasicJsonType::array_t& value)\n    {\n        std::size_t array_index = 0ul;\n\n        const std::size_t embedded_document_size = std::accumulate(std::begin(value), std::end(value), static_cast<std::size_t>(0), [&array_index](std::size_t result, const typename BasicJsonType::array_t::value_type & el)\n        {\n            return result + calc_bson_element_size(std::to_string(array_index++), el);\n        });\n\n        return sizeof(std::int32_t) + embedded_document_size + 1ul;\n    }\n\n    /*!\n    @return The size of the BSON-encoded binary array @a value\n    */\n    static std::size_t calc_bson_binary_size(const typename BasicJsonType::binary_t& value)\n    {\n        return sizeof(std::int32_t) + value.size() + 1ul;\n    }\n\n    /*!\n    @brief Writes a BSON element with key @a name and array @a value\n    */\n    void write_bson_array(const string_t& name,\n                          const typename BasicJsonType::array_t& value)\n    {\n        write_bson_entry_header(name, 0x04); // array\n        write_number<std::int32_t>(static_cast<std::int32_t>(calc_bson_array_size(value)), true);\n\n        std::size_t array_index = 0ul;\n\n        for (const auto& el : value)\n        {\n            write_bson_element(std::to_string(array_index++), el);\n        }\n\n        oa->write_character(to_char_type(0x00));\n    }\n\n    /*!\n    @brief Writes a BSON element with key @a name and binary value @a value\n    */\n    void write_bson_binary(const string_t& name,\n                           const binary_t& value)\n    {\n        write_bson_entry_header(name, 0x05);\n\n        write_number<std::int32_t>(static_cast<std::int32_t>(value.size()), true);\n        write_number(value.has_subtype() ? static_cast<std::uint8_t>(value.subtype()) : static_cast<std::uint8_t>(0x00));\n\n        oa->write_characters(reinterpret_cast<const CharType*>(value.data()), value.size());\n    }\n\n    /*!\n    @brief Calculates the size necessary to serialize the JSON value @a j with its @a name\n    @return The calculated size for the BSON document entry for @a j with the given @a name.\n    */\n    static std::size_t calc_bson_element_size(const string_t& name,\n            const BasicJsonType& j)\n    {\n        const auto header_size = calc_bson_entry_header_size(name, j);\n        switch (j.type())\n        {\n            case value_t::object:\n                return header_size + calc_bson_object_size(*j.m_data.m_value.object);\n\n            case value_t::array:\n                return header_size + calc_bson_array_size(*j.m_data.m_value.array);\n\n            case value_t::binary:\n                return header_size + calc_bson_binary_size(*j.m_data.m_value.binary);\n\n            case value_t::boolean:\n                return header_size + 1ul;\n\n            case value_t::number_float:\n                return header_size + 8ul;\n\n            case value_t::number_integer:\n                return header_size + calc_bson_integer_size(j.m_data.m_value.number_integer);\n\n            case value_t::number_unsigned:\n                return header_size + calc_bson_unsigned_size(j.m_data.m_value.number_unsigned);\n\n            case value_t::string:\n                return header_size + calc_bson_string_size(*j.m_data.m_value.string);\n\n            case value_t::null:\n                return header_size + 0ul;\n\n            // LCOV_EXCL_START\n            case value_t::discarded:\n            default:\n                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert)\n                return 0ul;\n                // LCOV_EXCL_STOP\n        }\n    }\n\n    /*!\n    @brief Serializes the JSON value @a j to BSON and associates it with the\n           key @a name.\n    @param name The name to associate with the JSON entity @a j within the\n                current BSON document\n    */\n    void write_bson_element(const string_t& name,\n                            const BasicJsonType& j)\n    {\n        switch (j.type())\n        {\n            case value_t::object:\n                return write_bson_object_entry(name, *j.m_data.m_value.object);\n\n            case value_t::array:\n                return write_bson_array(name, *j.m_data.m_value.array);\n\n            case value_t::binary:\n                return write_bson_binary(name, *j.m_data.m_value.binary);\n\n            case value_t::boolean:\n                return write_bson_boolean(name, j.m_data.m_value.boolean);\n\n            case value_t::number_float:\n                return write_bson_double(name, j.m_data.m_value.number_float);\n\n            case value_t::number_integer:\n                return write_bson_integer(name, j.m_data.m_value.number_integer);\n\n            case value_t::number_unsigned:\n                return write_bson_unsigned(name, j);\n\n            case value_t::string:\n                return write_bson_string(name, *j.m_data.m_value.string);\n\n            case value_t::null:\n                return write_bson_null(name);\n\n            // LCOV_EXCL_START\n            case value_t::discarded:\n            default:\n                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert)\n                return;\n                // LCOV_EXCL_STOP\n        }\n    }\n\n    /*!\n    @brief Calculates the size of the BSON serialization of the given\n           JSON-object @a j.\n    @param[in] value  JSON value to serialize\n    @pre       value.type() == value_t::object\n    */\n    static std::size_t calc_bson_object_size(const typename BasicJsonType::object_t& value)\n    {\n        const std::size_t document_size = std::accumulate(value.begin(), value.end(), static_cast<std::size_t>(0),\n                                          [](size_t result, const typename BasicJsonType::object_t::value_type & el)\n        {\n            return result += calc_bson_element_size(el.first, el.second);\n        });\n\n        return sizeof(std::int32_t) + document_size + 1ul;\n    }\n\n    /*!\n    @param[in] value  JSON value to serialize\n    @pre       value.type() == value_t::object\n    */\n    void write_bson_object(const typename BasicJsonType::object_t& value)\n    {\n        write_number<std::int32_t>(static_cast<std::int32_t>(calc_bson_object_size(value)), true);\n\n        for (const auto& el : value)\n        {\n            write_bson_element(el.first, el.second);\n        }\n\n        oa->write_character(to_char_type(0x00));\n    }\n\n    //////////\n    // CBOR //\n    //////////\n\n    static constexpr CharType get_cbor_float_prefix(float /*unused*/)\n    {\n        return to_char_type(0xFA);  // Single-Precision Float\n    }\n\n    static constexpr CharType get_cbor_float_prefix(double /*unused*/)\n    {\n        return to_char_type(0xFB);  // Double-Precision Float\n    }\n\n    /////////////\n    // MsgPack //\n    /////////////\n\n    static constexpr CharType get_msgpack_float_prefix(float /*unused*/)\n    {\n        return to_char_type(0xCA);  // float 32\n    }\n\n    static constexpr CharType get_msgpack_float_prefix(double /*unused*/)\n    {\n        return to_char_type(0xCB);  // float 64\n    }\n\n    ////////////\n    // UBJSON //\n    ////////////\n\n    // UBJSON: write number (floating point)\n    template<typename NumberType, typename std::enable_if<\n                 std::is_floating_point<NumberType>::value, int>::type = 0>\n    void write_number_with_ubjson_prefix(const NumberType n,\n                                         const bool add_prefix,\n                                         const bool use_bjdata)\n    {\n        if (add_prefix)\n        {\n            oa->write_character(get_ubjson_float_prefix(n));\n        }\n        write_number(n, use_bjdata);\n    }\n\n    // UBJSON: write number (unsigned integer)\n    template<typename NumberType, typename std::enable_if<\n                 std::is_unsigned<NumberType>::value, int>::type = 0>\n    void write_number_with_ubjson_prefix(const NumberType n,\n                                         const bool add_prefix,\n                                         const bool use_bjdata)\n    {\n        if (n <= static_cast<std::uint64_t>((std::numeric_limits<std::int8_t>::max)()))\n        {\n            if (add_prefix)\n            {\n                oa->write_character(to_char_type('i'));  // int8\n            }\n            write_number(static_cast<std::uint8_t>(n), use_bjdata);\n        }\n        else if (n <= (std::numeric_limits<std::uint8_t>::max)())\n        {\n            if (add_prefix)\n            {\n                oa->write_character(to_char_type('U'));  // uint8\n            }\n            write_number(static_cast<std::uint8_t>(n), use_bjdata);\n        }\n        else if (n <= static_cast<std::uint64_t>((std::numeric_limits<std::int16_t>::max)()))\n        {\n            if (add_prefix)\n            {\n                oa->write_character(to_char_type('I'));  // int16\n            }\n            write_number(static_cast<std::int16_t>(n), use_bjdata);\n        }\n        else if (use_bjdata && n <= static_cast<uint64_t>((std::numeric_limits<uint16_t>::max)()))\n        {\n            if (add_prefix)\n            {\n                oa->write_character(to_char_type('u'));  // uint16 - bjdata only\n            }\n            write_number(static_cast<std::uint16_t>(n), use_bjdata);\n        }\n        else if (n <= static_cast<std::uint64_t>((std::numeric_limits<std::int32_t>::max)()))\n        {\n            if (add_prefix)\n            {\n                oa->write_character(to_char_type('l'));  // int32\n            }\n            write_number(static_cast<std::int32_t>(n), use_bjdata);\n        }\n        else if (use_bjdata && n <= static_cast<uint64_t>((std::numeric_limits<uint32_t>::max)()))\n        {\n            if (add_prefix)\n            {\n                oa->write_character(to_char_type('m'));  // uint32 - bjdata only\n            }\n            write_number(static_cast<std::uint32_t>(n), use_bjdata);\n        }\n        else if (n <= static_cast<std::uint64_t>((std::numeric_limits<std::int64_t>::max)()))\n        {\n            if (add_prefix)\n            {\n                oa->write_character(to_char_type('L'));  // int64\n            }\n            write_number(static_cast<std::int64_t>(n), use_bjdata);\n        }\n        else if (use_bjdata && n <= (std::numeric_limits<uint64_t>::max)())\n        {\n            if (add_prefix)\n            {\n                oa->write_character(to_char_type('M'));  // uint64 - bjdata only\n            }\n            write_number(static_cast<std::uint64_t>(n), use_bjdata);\n        }\n        else\n        {\n            if (add_prefix)\n            {\n                oa->write_character(to_char_type('H'));  // high-precision number\n            }\n\n            const auto number = BasicJsonType(n).dump();\n            write_number_with_ubjson_prefix(number.size(), true, use_bjdata);\n            for (std::size_t i = 0; i < number.size(); ++i)\n            {\n                oa->write_character(to_char_type(static_cast<std::uint8_t>(number[i])));\n            }\n        }\n    }\n\n    // UBJSON: write number (signed integer)\n    template < typename NumberType, typename std::enable_if <\n                   std::is_signed<NumberType>::value&&\n                   !std::is_floating_point<NumberType>::value, int >::type = 0 >\n    void write_number_with_ubjson_prefix(const NumberType n,\n                                         const bool add_prefix,\n                                         const bool use_bjdata)\n    {\n        if ((std::numeric_limits<std::int8_t>::min)() <= n && n <= (std::numeric_limits<std::int8_t>::max)())\n        {\n            if (add_prefix)\n            {\n                oa->write_character(to_char_type('i'));  // int8\n            }\n            write_number(static_cast<std::int8_t>(n), use_bjdata);\n        }\n        else if (static_cast<std::int64_t>((std::numeric_limits<std::uint8_t>::min)()) <= n && n <= static_cast<std::int64_t>((std::numeric_limits<std::uint8_t>::max)()))\n        {\n            if (add_prefix)\n            {\n                oa->write_character(to_char_type('U'));  // uint8\n            }\n            write_number(static_cast<std::uint8_t>(n), use_bjdata);\n        }\n        else if ((std::numeric_limits<std::int16_t>::min)() <= n && n <= (std::numeric_limits<std::int16_t>::max)())\n        {\n            if (add_prefix)\n            {\n                oa->write_character(to_char_type('I'));  // int16\n            }\n            write_number(static_cast<std::int16_t>(n), use_bjdata);\n        }\n        else if (use_bjdata && (static_cast<std::int64_t>((std::numeric_limits<std::uint16_t>::min)()) <= n && n <= static_cast<std::int64_t>((std::numeric_limits<std::uint16_t>::max)())))\n        {\n            if (add_prefix)\n            {\n                oa->write_character(to_char_type('u'));  // uint16 - bjdata only\n            }\n            write_number(static_cast<uint16_t>(n), use_bjdata);\n        }\n        else if ((std::numeric_limits<std::int32_t>::min)() <= n && n <= (std::numeric_limits<std::int32_t>::max)())\n        {\n            if (add_prefix)\n            {\n                oa->write_character(to_char_type('l'));  // int32\n            }\n            write_number(static_cast<std::int32_t>(n), use_bjdata);\n        }\n        else if (use_bjdata && (static_cast<std::int64_t>((std::numeric_limits<std::uint32_t>::min)()) <= n && n <= static_cast<std::int64_t>((std::numeric_limits<std::uint32_t>::max)())))\n        {\n            if (add_prefix)\n            {\n                oa->write_character(to_char_type('m'));  // uint32 - bjdata only\n            }\n            write_number(static_cast<uint32_t>(n), use_bjdata);\n        }\n        else if ((std::numeric_limits<std::int64_t>::min)() <= n && n <= (std::numeric_limits<std::int64_t>::max)())\n        {\n            if (add_prefix)\n            {\n                oa->write_character(to_char_type('L'));  // int64\n            }\n            write_number(static_cast<std::int64_t>(n), use_bjdata);\n        }\n        // LCOV_EXCL_START\n        else\n        {\n            if (add_prefix)\n            {\n                oa->write_character(to_char_type('H'));  // high-precision number\n            }\n\n            const auto number = BasicJsonType(n).dump();\n            write_number_with_ubjson_prefix(number.size(), true, use_bjdata);\n            for (std::size_t i = 0; i < number.size(); ++i)\n            {\n                oa->write_character(to_char_type(static_cast<std::uint8_t>(number[i])));\n            }\n        }\n        // LCOV_EXCL_STOP\n    }\n\n    /*!\n    @brief determine the type prefix of container values\n    */\n    CharType ubjson_prefix(const BasicJsonType& j, const bool use_bjdata) const noexcept\n    {\n        switch (j.type())\n        {\n            case value_t::null:\n                return 'Z';\n\n            case value_t::boolean:\n                return j.m_data.m_value.boolean ? 'T' : 'F';\n\n            case value_t::number_integer:\n            {\n                if ((std::numeric_limits<std::int8_t>::min)() <= j.m_data.m_value.number_integer && j.m_data.m_value.number_integer <= (std::numeric_limits<std::int8_t>::max)())\n                {\n                    return 'i';\n                }\n                if ((std::numeric_limits<std::uint8_t>::min)() <= j.m_data.m_value.number_integer && j.m_data.m_value.number_integer <= (std::numeric_limits<std::uint8_t>::max)())\n                {\n                    return 'U';\n                }\n                if ((std::numeric_limits<std::int16_t>::min)() <= j.m_data.m_value.number_integer && j.m_data.m_value.number_integer <= (std::numeric_limits<std::int16_t>::max)())\n                {\n                    return 'I';\n                }\n                if (use_bjdata && ((std::numeric_limits<std::uint16_t>::min)() <= j.m_data.m_value.number_integer && j.m_data.m_value.number_integer <= (std::numeric_limits<std::uint16_t>::max)()))\n                {\n                    return 'u';\n                }\n                if ((std::numeric_limits<std::int32_t>::min)() <= j.m_data.m_value.number_integer && j.m_data.m_value.number_integer <= (std::numeric_limits<std::int32_t>::max)())\n                {\n                    return 'l';\n                }\n                if (use_bjdata && ((std::numeric_limits<std::uint32_t>::min)() <= j.m_data.m_value.number_integer && j.m_data.m_value.number_integer <= (std::numeric_limits<std::uint32_t>::max)()))\n                {\n                    return 'm';\n                }\n                if ((std::numeric_limits<std::int64_t>::min)() <= j.m_data.m_value.number_integer && j.m_data.m_value.number_integer <= (std::numeric_limits<std::int64_t>::max)())\n                {\n                    return 'L';\n                }\n                // anything else is treated as high-precision number\n                return 'H'; // LCOV_EXCL_LINE\n            }\n\n            case value_t::number_unsigned:\n            {\n                if (j.m_data.m_value.number_unsigned <= static_cast<std::uint64_t>((std::numeric_limits<std::int8_t>::max)()))\n                {\n                    return 'i';\n                }\n                if (j.m_data.m_value.number_unsigned <= static_cast<std::uint64_t>((std::numeric_limits<std::uint8_t>::max)()))\n                {\n                    return 'U';\n                }\n                if (j.m_data.m_value.number_unsigned <= static_cast<std::uint64_t>((std::numeric_limits<std::int16_t>::max)()))\n                {\n                    return 'I';\n                }\n                if (use_bjdata && j.m_data.m_value.number_unsigned <= static_cast<std::uint64_t>((std::numeric_limits<std::uint16_t>::max)()))\n                {\n                    return 'u';\n                }\n                if (j.m_data.m_value.number_unsigned <= static_cast<std::uint64_t>((std::numeric_limits<std::int32_t>::max)()))\n                {\n                    return 'l';\n                }\n                if (use_bjdata && j.m_data.m_value.number_unsigned <= static_cast<std::uint64_t>((std::numeric_limits<std::uint32_t>::max)()))\n                {\n                    return 'm';\n                }\n                if (j.m_data.m_value.number_unsigned <= static_cast<std::uint64_t>((std::numeric_limits<std::int64_t>::max)()))\n                {\n                    return 'L';\n                }\n                if (use_bjdata && j.m_data.m_value.number_unsigned <= (std::numeric_limits<std::uint64_t>::max)())\n                {\n                    return 'M';\n                }\n                // anything else is treated as high-precision number\n                return 'H'; // LCOV_EXCL_LINE\n            }\n\n            case value_t::number_float:\n                return get_ubjson_float_prefix(j.m_data.m_value.number_float);\n\n            case value_t::string:\n                return 'S';\n\n            case value_t::array: // fallthrough\n            case value_t::binary:\n                return '[';\n\n            case value_t::object:\n                return '{';\n\n            case value_t::discarded:\n            default:  // discarded values\n                return 'N';\n        }\n    }\n\n    static constexpr CharType get_ubjson_float_prefix(float /*unused*/)\n    {\n        return 'd';  // float 32\n    }\n\n    static constexpr CharType get_ubjson_float_prefix(double /*unused*/)\n    {\n        return 'D';  // float 64\n    }\n\n    /*!\n    @return false if the object is successfully converted to a bjdata ndarray, true if the type or size is invalid\n    */\n    bool write_bjdata_ndarray(const typename BasicJsonType::object_t& value, const bool use_count, const bool use_type)\n    {\n        std::map<string_t, CharType> bjdtype = {{\"uint8\", 'U'},  {\"int8\", 'i'},  {\"uint16\", 'u'}, {\"int16\", 'I'},\n            {\"uint32\", 'm'}, {\"int32\", 'l'}, {\"uint64\", 'M'}, {\"int64\", 'L'}, {\"single\", 'd'}, {\"double\", 'D'}, {\"char\", 'C'}\n        };\n\n        string_t key = \"_ArrayType_\";\n        auto it = bjdtype.find(static_cast<string_t>(value.at(key)));\n        if (it == bjdtype.end())\n        {\n            return true;\n        }\n        CharType dtype = it->second;\n\n        key = \"_ArraySize_\";\n        std::size_t len = (value.at(key).empty() ? 0 : 1);\n        for (const auto& el : value.at(key))\n        {\n            len *= static_cast<std::size_t>(el.m_data.m_value.number_unsigned);\n        }\n\n        key = \"_ArrayData_\";\n        if (value.at(key).size() != len)\n        {\n            return true;\n        }\n\n        oa->write_character('[');\n        oa->write_character('$');\n        oa->write_character(dtype);\n        oa->write_character('#');\n\n        key = \"_ArraySize_\";\n        write_ubjson(value.at(key), use_count, use_type, true,  true);\n\n        key = \"_ArrayData_\";\n        if (dtype == 'U' || dtype == 'C')\n        {\n            for (const auto& el : value.at(key))\n            {\n                write_number(static_cast<std::uint8_t>(el.m_data.m_value.number_unsigned), true);\n            }\n        }\n        else if (dtype == 'i')\n        {\n            for (const auto& el : value.at(key))\n            {\n                write_number(static_cast<std::int8_t>(el.m_data.m_value.number_integer), true);\n            }\n        }\n        else if (dtype == 'u')\n        {\n            for (const auto& el : value.at(key))\n            {\n                write_number(static_cast<std::uint16_t>(el.m_data.m_value.number_unsigned), true);\n            }\n        }\n        else if (dtype == 'I')\n        {\n            for (const auto& el : value.at(key))\n            {\n                write_number(static_cast<std::int16_t>(el.m_data.m_value.number_integer), true);\n            }\n        }\n        else if (dtype == 'm')\n        {\n            for (const auto& el : value.at(key))\n            {\n                write_number(static_cast<std::uint32_t>(el.m_data.m_value.number_unsigned), true);\n            }\n        }\n        else if (dtype == 'l')\n        {\n            for (const auto& el : value.at(key))\n            {\n                write_number(static_cast<std::int32_t>(el.m_data.m_value.number_integer), true);\n            }\n        }\n        else if (dtype == 'M')\n        {\n            for (const auto& el : value.at(key))\n            {\n                write_number(static_cast<std::uint64_t>(el.m_data.m_value.number_unsigned), true);\n            }\n        }\n        else if (dtype == 'L')\n        {\n            for (const auto& el : value.at(key))\n            {\n                write_number(static_cast<std::int64_t>(el.m_data.m_value.number_integer), true);\n            }\n        }\n        else if (dtype == 'd')\n        {\n            for (const auto& el : value.at(key))\n            {\n                write_number(static_cast<float>(el.m_data.m_value.number_float), true);\n            }\n        }\n        else if (dtype == 'D')\n        {\n            for (const auto& el : value.at(key))\n            {\n                write_number(static_cast<double>(el.m_data.m_value.number_float), true);\n            }\n        }\n        return false;\n    }\n\n    ///////////////////////\n    // Utility functions //\n    ///////////////////////\n\n    /*\n    @brief write a number to output input\n    @param[in] n number of type @a NumberType\n    @param[in] OutputIsLittleEndian Set to true if output data is\n                                 required to be little endian\n    @tparam NumberType the type of the number\n\n    @note This function needs to respect the system's endianness, because bytes\n          in CBOR, MessagePack, and UBJSON are stored in network order (big\n          endian) and therefore need reordering on little endian systems.\n          On the other hand, BSON and BJData use little endian and should reorder\n          on big endian systems.\n    */\n    template<typename NumberType>\n    void write_number(const NumberType n, const bool OutputIsLittleEndian = false)\n    {\n        // step 1: write number to array of length NumberType\n        std::array<CharType, sizeof(NumberType)> vec{};\n        std::memcpy(vec.data(), &n, sizeof(NumberType));\n\n        // step 2: write array to output (with possible reordering)\n        if (is_little_endian != OutputIsLittleEndian)\n        {\n            // reverse byte order prior to conversion if necessary\n            std::reverse(vec.begin(), vec.end());\n        }\n\n        oa->write_characters(vec.data(), sizeof(NumberType));\n    }\n\n    void write_compact_float(const number_float_t n, detail::input_format_t format)\n    {\n#ifdef __GNUC__\n#pragma GCC diagnostic push\n#pragma GCC diagnostic ignored \"-Wfloat-equal\"\n#endif\n        if (static_cast<double>(n) >= static_cast<double>(std::numeric_limits<float>::lowest()) &&\n                static_cast<double>(n) <= static_cast<double>((std::numeric_limits<float>::max)()) &&\n                static_cast<double>(static_cast<float>(n)) == static_cast<double>(n))\n        {\n            oa->write_character(format == detail::input_format_t::cbor\n                                ? get_cbor_float_prefix(static_cast<float>(n))\n                                : get_msgpack_float_prefix(static_cast<float>(n)));\n            write_number(static_cast<float>(n));\n        }\n        else\n        {\n            oa->write_character(format == detail::input_format_t::cbor\n                                ? get_cbor_float_prefix(n)\n                                : get_msgpack_float_prefix(n));\n            write_number(n);\n        }\n#ifdef __GNUC__\n#pragma GCC diagnostic pop\n#endif\n    }\n\n  public:\n    // The following to_char_type functions are implement the conversion\n    // between uint8_t and CharType. In case CharType is not unsigned,\n    // such a conversion is required to allow values greater than 128.\n    // See <https://github.com/nlohmann/json/issues/1286> for a discussion.\n    template < typename C = CharType,\n               enable_if_t < std::is_signed<C>::value && std::is_signed<char>::value > * = nullptr >\n    static constexpr CharType to_char_type(std::uint8_t x) noexcept\n    {\n        return *reinterpret_cast<char*>(&x);\n    }\n\n    template < typename C = CharType,\n               enable_if_t < std::is_signed<C>::value && std::is_unsigned<char>::value > * = nullptr >\n    static CharType to_char_type(std::uint8_t x) noexcept\n    {\n        static_assert(sizeof(std::uint8_t) == sizeof(CharType), \"size of CharType must be equal to std::uint8_t\");\n        static_assert(std::is_trivial<CharType>::value, \"CharType must be trivial\");\n        CharType result;\n        std::memcpy(&result, &x, sizeof(x));\n        return result;\n    }\n\n    template<typename C = CharType,\n             enable_if_t<std::is_unsigned<C>::value>* = nullptr>\n    static constexpr CharType to_char_type(std::uint8_t x) noexcept\n    {\n        return x;\n    }\n\n    template < typename InputCharType, typename C = CharType,\n               enable_if_t <\n                   std::is_signed<C>::value &&\n                   std::is_signed<char>::value &&\n                   std::is_same<char, typename std::remove_cv<InputCharType>::type>::value\n                   > * = nullptr >\n    static constexpr CharType to_char_type(InputCharType x) noexcept\n    {\n        return x;\n    }\n\n  private:\n    /// whether we can assume little endianness\n    const bool is_little_endian = little_endianness();\n\n    /// the output\n    output_adapter_t<CharType> oa = nullptr;\n};\n\n}  // namespace detail\nNLOHMANN_JSON_NAMESPACE_END\n\n// #include <nlohmann/detail/output/output_adapters.hpp>\n\n// #include <nlohmann/detail/output/serializer.hpp>\n//     __ _____ _____ _____\n//  __|  |   __|     |   | |  JSON for Modern C++\n// |  |  |__   |  |  | | | |  version 3.11.3\n// |_____|_____|_____|_|___|  https://github.com/nlohmann/json\n//\n// SPDX-FileCopyrightText: 2008-2009 Bj\u00f6rn Hoehrmann <bjoern@hoehrmann.de>\n// SPDX-FileCopyrightText: 2013-2023 Niels Lohmann <https://nlohmann.me>\n// SPDX-License-Identifier: MIT\n\n\n\n#include <algorithm> // reverse, remove, fill, find, none_of\n#include <array> // array\n#include <clocale> // localeconv, lconv\n#include <cmath> // labs, isfinite, isnan, signbit\n#include <cstddef> // size_t, ptrdiff_t\n#include <cstdint> // uint8_t\n#include <cstdio> // snprintf\n#include <limits> // numeric_limits\n#include <string> // string, char_traits\n#include <iomanip> // setfill, setw\n#include <type_traits> // is_same\n#include <utility> // move\n\n// #include <nlohmann/detail/conversions/to_chars.hpp>\n//     __ _____ _____ _____\n//  __|  |   __|     |   | |  JSON for Modern C++\n// |  |  |__   |  |  | | | |  version 3.11.3\n// |_____|_____|_____|_|___|  https://github.com/nlohmann/json\n//\n// SPDX-FileCopyrightText: 2009 Florian Loitsch <https://florian.loitsch.com/>\n// SPDX-FileCopyrightText: 2013-2023 Niels Lohmann <https://nlohmann.me>\n// SPDX-License-Identifier: MIT\n\n\n\n#include <array> // array\n#include <cmath>   // signbit, isfinite\n#include <cstdint> // intN_t, uintN_t\n#include <cstring> // memcpy, memmove\n#include <limits> // numeric_limits\n#include <type_traits> // conditional\n\n// #include <nlohmann/detail/macro_scope.hpp>\n\n\nNLOHMANN_JSON_NAMESPACE_BEGIN\nnamespace detail\n{\n\n/*!\n@brief implements the Grisu2 algorithm for binary to decimal floating-point\nconversion.\n\nThis implementation is a slightly modified version of the reference\nimplementation which may be obtained from\nhttp://florian.loitsch.com/publications (bench.tar.gz).\n\nThe code is distributed under the MIT license, Copyright (c) 2009 Florian Loitsch.\n\nFor a detailed description of the algorithm see:\n\n[1] Loitsch, \"Printing Floating-Point Numbers Quickly and Accurately with\n    Integers\", Proceedings of the ACM SIGPLAN 2010 Conference on Programming\n    Language Design and Implementation, PLDI 2010\n[2] Burger, Dybvig, \"Printing Floating-Point Numbers Quickly and Accurately\",\n    Proceedings of the ACM SIGPLAN 1996 Conference on Programming Language\n    Design and Implementation, PLDI 1996\n*/\nnamespace dtoa_impl\n{\n\ntemplate<typename Target, typename Source>\nTarget reinterpret_bits(const Source source)\n{\n    static_assert(sizeof(Target) == sizeof(Source), \"size mismatch\");\n\n    Target target;\n    std::memcpy(&target, &source, sizeof(Source));\n    return target;\n}\n\nstruct diyfp // f * 2^e\n{\n    static constexpr int kPrecision = 64; // = q\n\n    std::uint64_t f = 0;\n    int e = 0;\n\n    constexpr diyfp(std::uint64_t f_, int e_) noexcept : f(f_), e(e_) {}\n\n    /*!\n    @brief returns x - y\n    @pre x.e == y.e and x.f >= y.f\n    */\n    static diyfp sub(const diyfp& x, const diyfp& y) noexcept\n    {\n        JSON_ASSERT(x.e == y.e);\n        JSON_ASSERT(x.f >= y.f);\n\n        return {x.f - y.f, x.e};\n    }\n\n    /*!\n    @brief returns x * y\n    @note The result is rounded. (Only the upper q bits are returned.)\n    */\n    static diyfp mul(const diyfp& x, const diyfp& y) noexcept\n    {\n        static_assert(kPrecision == 64, \"internal error\");\n\n        // Computes:\n        //  f = round((x.f * y.f) / 2^q)\n        //  e = x.e + y.e + q\n\n        // Emulate the 64-bit * 64-bit multiplication:\n        //\n        // p = u * v\n        //   = (u_lo + 2^32 u_hi) (v_lo + 2^32 v_hi)\n        //   = (u_lo v_lo         ) + 2^32 ((u_lo v_hi         ) + (u_hi v_lo         )) + 2^64 (u_hi v_hi         )\n        //   = (p0                ) + 2^32 ((p1                ) + (p2                )) + 2^64 (p3                )\n        //   = (p0_lo + 2^32 p0_hi) + 2^32 ((p1_lo + 2^32 p1_hi) + (p2_lo + 2^32 p2_hi)) + 2^64 (p3                )\n        //   = (p0_lo             ) + 2^32 (p0_hi + p1_lo + p2_lo                      ) + 2^64 (p1_hi + p2_hi + p3)\n        //   = (p0_lo             ) + 2^32 (Q                                          ) + 2^64 (H                 )\n        //   = (p0_lo             ) + 2^32 (Q_lo + 2^32 Q_hi                           ) + 2^64 (H                 )\n        //\n        // (Since Q might be larger than 2^32 - 1)\n        //\n        //   = (p0_lo + 2^32 Q_lo) + 2^64 (Q_hi + H)\n        //\n        // (Q_hi + H does not overflow a 64-bit int)\n        //\n        //   = p_lo + 2^64 p_hi\n\n        const std::uint64_t u_lo = x.f & 0xFFFFFFFFu;\n        const std::uint64_t u_hi = x.f >> 32u;\n        const std::uint64_t v_lo = y.f & 0xFFFFFFFFu;\n        const std::uint64_t v_hi = y.f >> 32u;\n\n        const std::uint64_t p0 = u_lo * v_lo;\n        const std::uint64_t p1 = u_lo * v_hi;\n        const std::uint64_t p2 = u_hi * v_lo;\n        const std::uint64_t p3 = u_hi * v_hi;\n\n        const std::uint64_t p0_hi = p0 >> 32u;\n        const std::uint64_t p1_lo = p1 & 0xFFFFFFFFu;\n        const std::uint64_t p1_hi = p1 >> 32u;\n        const std::uint64_t p2_lo = p2 & 0xFFFFFFFFu;\n        const std::uint64_t p2_hi = p2 >> 32u;\n\n        std::uint64_t Q = p0_hi + p1_lo + p2_lo;\n\n        // The full product might now be computed as\n        //\n        // p_hi = p3 + p2_hi + p1_hi + (Q >> 32)\n        // p_lo = p0_lo + (Q << 32)\n        //\n        // But in this particular case here, the full p_lo is not required.\n        // Effectively we only need to add the highest bit in p_lo to p_hi (and\n        // Q_hi + 1 does not overflow).\n\n        Q += std::uint64_t{1} << (64u - 32u - 1u); // round, ties up\n\n        const std::uint64_t h = p3 + p2_hi + p1_hi + (Q >> 32u);\n\n        return {h, x.e + y.e + 64};\n    }\n\n    /*!\n    @brief normalize x such that the significand is >= 2^(q-1)\n    @pre x.f != 0\n    */\n    static diyfp normalize(diyfp x) noexcept\n    {\n        JSON_ASSERT(x.f != 0);\n\n        while ((x.f >> 63u) == 0)\n        {\n            x.f <<= 1u;\n            x.e--;\n        }\n\n        return x;\n    }\n\n    /*!\n    @brief normalize x such that the result has the exponent E\n    @pre e >= x.e and the upper e - x.e bits of x.f must be zero.\n    */\n    static diyfp normalize_to(const diyfp& x, const int target_exponent) noexcept\n    {\n        const int delta = x.e - target_exponent;\n\n        JSON_ASSERT(delta >= 0);\n        JSON_ASSERT(((x.f << delta) >> delta) == x.f);\n\n        return {x.f << delta, target_exponent};\n    }\n};\n\nstruct boundaries\n{\n    diyfp w;\n    diyfp minus;\n    diyfp plus;\n};\n\n/*!\nCompute the (normalized) diyfp representing the input number 'value' and its\nboundaries.\n\n@pre value must be finite and positive\n*/\ntemplate<typename FloatType>\nboundaries compute_boundaries(FloatType value)\n{\n    JSON_ASSERT(std::isfinite(value));\n    JSON_ASSERT(value > 0);\n\n    // Convert the IEEE representation into a diyfp.\n    //\n    // If v is denormal:\n    //      value = 0.F * 2^(1 - bias) = (          F) * 2^(1 - bias - (p-1))\n    // If v is normalized:\n    //      value = 1.F * 2^(E - bias) = (2^(p-1) + F) * 2^(E - bias - (p-1))\n\n    static_assert(std::numeric_limits<FloatType>::is_iec559,\n                  \"internal error: dtoa_short requires an IEEE-754 floating-point implementation\");\n\n    constexpr int      kPrecision = std::numeric_limits<FloatType>::digits; // = p (includes the hidden bit)\n    constexpr int      kBias      = std::numeric_limits<FloatType>::max_exponent - 1 + (kPrecision - 1);\n    constexpr int      kMinExp    = 1 - kBias;\n    constexpr std::uint64_t kHiddenBit = std::uint64_t{1} << (kPrecision - 1); // = 2^(p-1)\n\n    using bits_type = typename std::conditional<kPrecision == 24, std::uint32_t, std::uint64_t >::type;\n\n    const auto bits = static_cast<std::uint64_t>(reinterpret_bits<bits_type>(value));\n    const std::uint64_t E = bits >> (kPrecision - 1);\n    const std::uint64_t F = bits & (kHiddenBit - 1);\n\n    const bool is_denormal = E == 0;\n    const diyfp v = is_denormal\n                    ? diyfp(F, kMinExp)\n                    : diyfp(F + kHiddenBit, static_cast<int>(E) - kBias);\n\n    // Compute the boundaries m- and m+ of the floating-point value\n    // v = f * 2^e.\n    //\n    // Determine v- and v+, the floating-point predecessor and successor if v,\n    // respectively.\n    //\n    //      v- = v - 2^e        if f != 2^(p-1) or e == e_min                (A)\n    //         = v - 2^(e-1)    if f == 2^(p-1) and e > e_min                (B)\n    //\n    //      v+ = v + 2^e\n    //\n    // Let m- = (v- + v) / 2 and m+ = (v + v+) / 2. All real numbers _strictly_\n    // between m- and m+ round to v, regardless of how the input rounding\n    // algorithm breaks ties.\n    //\n    //      ---+-------------+-------------+-------------+-------------+---  (A)\n    //         v-            m-            v             m+            v+\n    //\n    //      -----------------+------+------+-------------+-------------+---  (B)\n    //                       v-     m-     v             m+            v+\n\n    const bool lower_boundary_is_closer = F == 0 && E > 1;\n    const diyfp m_plus = diyfp(2 * v.f + 1, v.e - 1);\n    const diyfp m_minus = lower_boundary_is_closer\n                          ? diyfp(4 * v.f - 1, v.e - 2)  // (B)\n                          : diyfp(2 * v.f - 1, v.e - 1); // (A)\n\n    // Determine the normalized w+ = m+.\n    const diyfp w_plus = diyfp::normalize(m_plus);\n\n    // Determine w- = m- such that e_(w-) = e_(w+).\n    const diyfp w_minus = diyfp::normalize_to(m_minus, w_plus.e);\n\n    return {diyfp::normalize(v), w_minus, w_plus};\n}\n\n// Given normalized diyfp w, Grisu needs to find a (normalized) cached\n// power-of-ten c, such that the exponent of the product c * w = f * 2^e lies\n// within a certain range [alpha, gamma] (Definition 3.2 from [1])\n//\n//      alpha <= e = e_c + e_w + q <= gamma\n//\n// or\n//\n//      f_c * f_w * 2^alpha <= f_c 2^(e_c) * f_w 2^(e_w) * 2^q\n//                          <= f_c * f_w * 2^gamma\n//\n// Since c and w are normalized, i.e. 2^(q-1) <= f < 2^q, this implies\n//\n//      2^(q-1) * 2^(q-1) * 2^alpha <= c * w * 2^q < 2^q * 2^q * 2^gamma\n//\n// or\n//\n//      2^(q - 2 + alpha) <= c * w < 2^(q + gamma)\n//\n// The choice of (alpha,gamma) determines the size of the table and the form of\n// the digit generation procedure. Using (alpha,gamma)=(-60,-32) works out well\n// in practice:\n//\n// The idea is to cut the number c * w = f * 2^e into two parts, which can be\n// processed independently: An integral part p1, and a fractional part p2:\n//\n//      f * 2^e = ( (f div 2^-e) * 2^-e + (f mod 2^-e) ) * 2^e\n//              = (f div 2^-e) + (f mod 2^-e) * 2^e\n//              = p1 + p2 * 2^e\n//\n// The conversion of p1 into decimal form requires a series of divisions and\n// modulos by (a power of) 10. These operations are faster for 32-bit than for\n// 64-bit integers, so p1 should ideally fit into a 32-bit integer. This can be\n// achieved by choosing\n//\n//      -e >= 32   or   e <= -32 := gamma\n//\n// In order to convert the fractional part\n//\n//      p2 * 2^e = p2 / 2^-e = d[-1] / 10^1 + d[-2] / 10^2 + ...\n//\n// into decimal form, the fraction is repeatedly multiplied by 10 and the digits\n// d[-i] are extracted in order:\n//\n//      (10 * p2) div 2^-e = d[-1]\n//      (10 * p2) mod 2^-e = d[-2] / 10^1 + ...\n//\n// The multiplication by 10 must not overflow. It is sufficient to choose\n//\n//      10 * p2 < 16 * p2 = 2^4 * p2 <= 2^64.\n//\n// Since p2 = f mod 2^-e < 2^-e,\n//\n//      -e <= 60   or   e >= -60 := alpha\n\nconstexpr int kAlpha = -60;\nconstexpr int kGamma = -32;\n\nstruct cached_power // c = f * 2^e ~= 10^k\n{\n    std::uint64_t f;\n    int e;\n    int k;\n};\n\n/*!\nFor a normalized diyfp w = f * 2^e, this function returns a (normalized) cached\npower-of-ten c = f_c * 2^e_c, such that the exponent of the product w * c\nsatisfies (Definition 3.2 from [1])\n\n     alpha <= e_c + e + q <= gamma.\n*/\ninline cached_power get_cached_power_for_binary_exponent(int e)\n{\n    // Now\n    //\n    //      alpha <= e_c + e + q <= gamma                                    (1)\n    //      ==> f_c * 2^alpha <= c * 2^e * 2^q\n    //\n    // and since the c's are normalized, 2^(q-1) <= f_c,\n    //\n    //      ==> 2^(q - 1 + alpha) <= c * 2^(e + q)\n    //      ==> 2^(alpha - e - 1) <= c\n    //\n    // If c were an exact power of ten, i.e. c = 10^k, one may determine k as\n    //\n    //      k = ceil( log_10( 2^(alpha - e - 1) ) )\n    //        = ceil( (alpha - e - 1) * log_10(2) )\n    //\n    // From the paper:\n    // \"In theory the result of the procedure could be wrong since c is rounded,\n    //  and the computation itself is approximated [...]. In practice, however,\n    //  this simple function is sufficient.\"\n    //\n    // For IEEE double precision floating-point numbers converted into\n    // normalized diyfp's w = f * 2^e, with q = 64,\n    //\n    //      e >= -1022      (min IEEE exponent)\n    //           -52        (p - 1)\n    //           -52        (p - 1, possibly normalize denormal IEEE numbers)\n    //           -11        (normalize the diyfp)\n    //         = -1137\n    //\n    // and\n    //\n    //      e <= +1023      (max IEEE exponent)\n    //           -52        (p - 1)\n    //           -11        (normalize the diyfp)\n    //         = 960\n    //\n    // This binary exponent range [-1137,960] results in a decimal exponent\n    // range [-307,324]. One does not need to store a cached power for each\n    // k in this range. For each such k it suffices to find a cached power\n    // such that the exponent of the product lies in [alpha,gamma].\n    // This implies that the difference of the decimal exponents of adjacent\n    // table entries must be less than or equal to\n    //\n    //      floor( (gamma - alpha) * log_10(2) ) = 8.\n    //\n    // (A smaller distance gamma-alpha would require a larger table.)\n\n    // NB:\n    // Actually this function returns c, such that -60 <= e_c + e + 64 <= -34.\n\n    constexpr int kCachedPowersMinDecExp = -300;\n    constexpr int kCachedPowersDecStep = 8;\n\n    static constexpr std::array<cached_power, 79> kCachedPowers =\n    {\n        {\n            { 0xAB70FE17C79AC6CA, -1060, -300 },\n            { 0xFF77B1FCBEBCDC4F, -1034, -292 },\n            { 0xBE5691EF416BD60C, -1007, -284 },\n            { 0x8DD01FAD907FFC3C,  -980, -276 },\n            { 0xD3515C2831559A83,  -954, -268 },\n            { 0x9D71AC8FADA6C9B5,  -927, -260 },\n            { 0xEA9C227723EE8BCB,  -901, -252 },\n            { 0xAECC49914078536D,  -874, -244 },\n            { 0x823C12795DB6CE57,  -847, -236 },\n            { 0xC21094364DFB5637,  -821, -228 },\n            { 0x9096EA6F3848984F,  -794, -220 },\n            { 0xD77485CB25823AC7,  -768, -212 },\n            { 0xA086CFCD97BF97F4,  -741, -204 },\n            { 0xEF340A98172AACE5,  -715, -196 },\n            { 0xB23867FB2A35B28E,  -688, -188 },\n            { 0x84C8D4DFD2C63F3B,  -661, -180 },\n            { 0xC5DD44271AD3CDBA,  -635, -172 },\n            { 0x936B9FCEBB25C996,  -608, -164 },\n            { 0xDBAC6C247D62A584,  -582, -156 },\n            { 0xA3AB66580D5FDAF6,  -555, -148 },\n            { 0xF3E2F893DEC3F126,  -529, -140 },\n            { 0xB5B5ADA8AAFF80B8,  -502, -132 },\n            { 0x87625F056C7C4A8B,  -475, -124 },\n            { 0xC9BCFF6034C13053,  -449, -116 },\n            { 0x964E858C91BA2655,  -422, -108 },\n            { 0xDFF9772470297EBD,  -396, -100 },\n            { 0xA6DFBD9FB8E5B88F,  -369,  -92 },\n            { 0xF8A95FCF88747D94,  -343,  -84 },\n            { 0xB94470938FA89BCF,  -316,  -76 },\n            { 0x8A08F0F8BF0F156B,  -289,  -68 },\n            { 0xCDB02555653131B6,  -263,  -60 },\n            { 0x993FE2C6D07B7FAC,  -236,  -52 },\n            { 0xE45C10C42A2B3B06,  -210,  -44 },\n            { 0xAA242499697392D3,  -183,  -36 },\n            { 0xFD87B5F28300CA0E,  -157,  -28 },\n            { 0xBCE5086492111AEB,  -130,  -20 },\n            { 0x8CBCCC096F5088CC,  -103,  -12 },\n            { 0xD1B71758E219652C,   -77,   -4 },\n            { 0x9C40000000000000,   -50,    4 },\n            { 0xE8D4A51000000000,   -24,   12 },\n            { 0xAD78EBC5AC620000,     3,   20 },\n            { 0x813F3978F8940984,    30,   28 },\n            { 0xC097CE7BC90715B3,    56,   36 },\n            { 0x8F7E32CE7BEA5C70,    83,   44 },\n            { 0xD5D238A4ABE98068,   109,   52 },\n            { 0x9F4F2726179A2245,   136,   60 },\n            { 0xED63A231D4C4FB27,   162,   68 },\n            { 0xB0DE65388CC8ADA8,   189,   76 },\n            { 0x83C7088E1AAB65DB,   216,   84 },\n            { 0xC45D1DF942711D9A,   242,   92 },\n            { 0x924D692CA61BE758,   269,  100 },\n            { 0xDA01EE641A708DEA,   295,  108 },\n            { 0xA26DA3999AEF774A,   322,  116 },\n            { 0xF209787BB47D6B85,   348,  124 },\n            { 0xB454E4A179DD1877,   375,  132 },\n            { 0x865B86925B9BC5C2,   402,  140 },\n            { 0xC83553C5C8965D3D,   428,  148 },\n            { 0x952AB45CFA97A0B3,   455,  156 },\n            { 0xDE469FBD99A05FE3,   481,  164 },\n            { 0xA59BC234DB398C25,   508,  172 },\n            { 0xF6C69A72A3989F5C,   534,  180 },\n            { 0xB7DCBF5354E9BECE,   561,  188 },\n            { 0x88FCF317F22241E2,   588,  196 },\n            { 0xCC20CE9BD35C78A5,   614,  204 },\n            { 0x98165AF37B2153DF,   641,  212 },\n            { 0xE2A0B5DC971F303A,   667,  220 },\n            { 0xA8D9D1535CE3B396,   694,  228 },\n            { 0xFB9B7CD9A4A7443C,   720,  236 },\n            { 0xBB764C4CA7A44410,   747,  244 },\n            { 0x8BAB8EEFB6409C1A,   774,  252 },\n            { 0xD01FEF10A657842C,   800,  260 },\n            { 0x9B10A4E5E9913129,   827,  268 },\n            { 0xE7109BFBA19C0C9D,   853,  276 },\n            { 0xAC2820D9623BF429,   880,  284 },\n            { 0x80444B5E7AA7CF85,   907,  292 },\n            { 0xBF21E44003ACDD2D,   933,  300 },\n            { 0x8E679C2F5E44FF8F,   960,  308 },\n            { 0xD433179D9C8CB841,   986,  316 },\n            { 0x9E19DB92B4E31BA9,  1013,  324 },\n        }\n    };\n\n    // This computation gives exactly the same results for k as\n    //      k = ceil((kAlpha - e - 1) * 0.30102999566398114)\n    // for |e| <= 1500, but doesn't require floating-point operations.\n    // NB: log_10(2) ~= 78913 / 2^18\n    JSON_ASSERT(e >= -1500);\n    JSON_ASSERT(e <=  1500);\n    const int f = kAlpha - e - 1;\n    const int k = (f * 78913) / (1 << 18) + static_cast<int>(f > 0);\n\n    const int index = (-kCachedPowersMinDecExp + k + (kCachedPowersDecStep - 1)) / kCachedPowersDecStep;\n    JSON_ASSERT(index >= 0);\n    JSON_ASSERT(static_cast<std::size_t>(index) < kCachedPowers.size());\n\n    const cached_power cached = kCachedPowers[static_cast<std::size_t>(index)];\n    JSON_ASSERT(kAlpha <= cached.e + e + 64);\n    JSON_ASSERT(kGamma >= cached.e + e + 64);\n\n    return cached;\n}\n\n/*!\nFor n != 0, returns k, such that pow10 := 10^(k-1) <= n < 10^k.\nFor n == 0, returns 1 and sets pow10 := 1.\n*/\ninline int find_largest_pow10(const std::uint32_t n, std::uint32_t& pow10)\n{\n    // LCOV_EXCL_START\n    if (n >= 1000000000)\n    {\n        pow10 = 1000000000;\n        return 10;\n    }\n    // LCOV_EXCL_STOP\n    if (n >= 100000000)\n    {\n        pow10 = 100000000;\n        return  9;\n    }\n    if (n >= 10000000)\n    {\n        pow10 = 10000000;\n        return  8;\n    }\n    if (n >= 1000000)\n    {\n        pow10 = 1000000;\n        return  7;\n    }\n    if (n >= 100000)\n    {\n        pow10 = 100000;\n        return  6;\n    }\n    if (n >= 10000)\n    {\n        pow10 = 10000;\n        return  5;\n    }\n    if (n >= 1000)\n    {\n        pow10 = 1000;\n        return  4;\n    }\n    if (n >= 100)\n    {\n        pow10 = 100;\n        return  3;\n    }\n    if (n >= 10)\n    {\n        pow10 = 10;\n        return  2;\n    }\n\n    pow10 = 1;\n    return 1;\n}\n\ninline void grisu2_round(char* buf, int len, std::uint64_t dist, std::uint64_t delta,\n                         std::uint64_t rest, std::uint64_t ten_k)\n{\n    JSON_ASSERT(len >= 1);\n    JSON_ASSERT(dist <= delta);\n    JSON_ASSERT(rest <= delta);\n    JSON_ASSERT(ten_k > 0);\n\n    //               <--------------------------- delta ---->\n    //                                  <---- dist --------->\n    // --------------[------------------+-------------------]--------------\n    //               M-                 w                   M+\n    //\n    //                                  ten_k\n    //                                <------>\n    //                                       <---- rest ---->\n    // --------------[------------------+----+--------------]--------------\n    //                                  w    V\n    //                                       = buf * 10^k\n    //\n    // ten_k represents a unit-in-the-last-place in the decimal representation\n    // stored in buf.\n    // Decrement buf by ten_k while this takes buf closer to w.\n\n    // The tests are written in this order to avoid overflow in unsigned\n    // integer arithmetic.\n\n    while (rest < dist\n            && delta - rest >= ten_k\n            && (rest + ten_k < dist || dist - rest > rest + ten_k - dist))\n    {\n        JSON_ASSERT(buf[len - 1] != '0');\n        buf[len - 1]--;\n        rest += ten_k;\n    }\n}\n\n/*!\nGenerates V = buffer * 10^decimal_exponent, such that M- <= V <= M+.\nM- and M+ must be normalized and share the same exponent -60 <= e <= -32.\n*/\ninline void grisu2_digit_gen(char* buffer, int& length, int& decimal_exponent,\n                             diyfp M_minus, diyfp w, diyfp M_plus)\n{\n    static_assert(kAlpha >= -60, \"internal error\");\n    static_assert(kGamma <= -32, \"internal error\");\n\n    // Generates the digits (and the exponent) of a decimal floating-point\n    // number V = buffer * 10^decimal_exponent in the range [M-, M+]. The diyfp's\n    // w, M- and M+ share the same exponent e, which satisfies alpha <= e <= gamma.\n    //\n    //               <--------------------------- delta ---->\n    //                                  <---- dist --------->\n    // --------------[------------------+-------------------]--------------\n    //               M-                 w                   M+\n    //\n    // Grisu2 generates the digits of M+ from left to right and stops as soon as\n    // V is in [M-,M+].\n\n    JSON_ASSERT(M_plus.e >= kAlpha);\n    JSON_ASSERT(M_plus.e <= kGamma);\n\n    std::uint64_t delta = diyfp::sub(M_plus, M_minus).f; // (significand of (M+ - M-), implicit exponent is e)\n    std::uint64_t dist  = diyfp::sub(M_plus, w      ).f; // (significand of (M+ - w ), implicit exponent is e)\n\n    // Split M+ = f * 2^e into two parts p1 and p2 (note: e < 0):\n    //\n    //      M+ = f * 2^e\n    //         = ((f div 2^-e) * 2^-e + (f mod 2^-e)) * 2^e\n    //         = ((p1        ) * 2^-e + (p2        )) * 2^e\n    //         = p1 + p2 * 2^e\n\n    const diyfp one(std::uint64_t{1} << -M_plus.e, M_plus.e);\n\n    auto p1 = static_cast<std::uint32_t>(M_plus.f >> -one.e); // p1 = f div 2^-e (Since -e >= 32, p1 fits into a 32-bit int.)\n    std::uint64_t p2 = M_plus.f & (one.f - 1);                    // p2 = f mod 2^-e\n\n    // 1)\n    //\n    // Generate the digits of the integral part p1 = d[n-1]...d[1]d[0]\n\n    JSON_ASSERT(p1 > 0);\n\n    std::uint32_t pow10{};\n    const int k = find_largest_pow10(p1, pow10);\n\n    //      10^(k-1) <= p1 < 10^k, pow10 = 10^(k-1)\n    //\n    //      p1 = (p1 div 10^(k-1)) * 10^(k-1) + (p1 mod 10^(k-1))\n    //         = (d[k-1]         ) * 10^(k-1) + (p1 mod 10^(k-1))\n    //\n    //      M+ = p1                                             + p2 * 2^e\n    //         = d[k-1] * 10^(k-1) + (p1 mod 10^(k-1))          + p2 * 2^e\n    //         = d[k-1] * 10^(k-1) + ((p1 mod 10^(k-1)) * 2^-e + p2) * 2^e\n    //         = d[k-1] * 10^(k-1) + (                         rest) * 2^e\n    //\n    // Now generate the digits d[n] of p1 from left to right (n = k-1,...,0)\n    //\n    //      p1 = d[k-1]...d[n] * 10^n + d[n-1]...d[0]\n    //\n    // but stop as soon as\n    //\n    //      rest * 2^e = (d[n-1]...d[0] * 2^-e + p2) * 2^e <= delta * 2^e\n\n    int n = k;\n    while (n > 0)\n    {\n        // Invariants:\n        //      M+ = buffer * 10^n + (p1 + p2 * 2^e)    (buffer = 0 for n = k)\n        //      pow10 = 10^(n-1) <= p1 < 10^n\n        //\n        const std::uint32_t d = p1 / pow10;  // d = p1 div 10^(n-1)\n        const std::uint32_t r = p1 % pow10;  // r = p1 mod 10^(n-1)\n        //\n        //      M+ = buffer * 10^n + (d * 10^(n-1) + r) + p2 * 2^e\n        //         = (buffer * 10 + d) * 10^(n-1) + (r + p2 * 2^e)\n        //\n        JSON_ASSERT(d <= 9);\n        buffer[length++] = static_cast<char>('0' + d); // buffer := buffer * 10 + d\n        //\n        //      M+ = buffer * 10^(n-1) + (r + p2 * 2^e)\n        //\n        p1 = r;\n        n--;\n        //\n        //      M+ = buffer * 10^n + (p1 + p2 * 2^e)\n        //      pow10 = 10^n\n        //\n\n        // Now check if enough digits have been generated.\n        // Compute\n        //\n        //      p1 + p2 * 2^e = (p1 * 2^-e + p2) * 2^e = rest * 2^e\n        //\n        // Note:\n        // Since rest and delta share the same exponent e, it suffices to\n        // compare the significands.\n        const std::uint64_t rest = (std::uint64_t{p1} << -one.e) + p2;\n        if (rest <= delta)\n        {\n            // V = buffer * 10^n, with M- <= V <= M+.\n\n            decimal_exponent += n;\n\n            // We may now just stop. But instead look if the buffer could be\n            // decremented to bring V closer to w.\n            //\n            // pow10 = 10^n is now 1 ulp in the decimal representation V.\n            // The rounding procedure works with diyfp's with an implicit\n            // exponent of e.\n            //\n            //      10^n = (10^n * 2^-e) * 2^e = ulp * 2^e\n            //\n            const std::uint64_t ten_n = std::uint64_t{pow10} << -one.e;\n            grisu2_round(buffer, length, dist, delta, rest, ten_n);\n\n            return;\n        }\n\n        pow10 /= 10;\n        //\n        //      pow10 = 10^(n-1) <= p1 < 10^n\n        // Invariants restored.\n    }\n\n    // 2)\n    //\n    // The digits of the integral part have been generated:\n    //\n    //      M+ = d[k-1]...d[1]d[0] + p2 * 2^e\n    //         = buffer            + p2 * 2^e\n    //\n    // Now generate the digits of the fractional part p2 * 2^e.\n    //\n    // Note:\n    // No decimal point is generated: the exponent is adjusted instead.\n    //\n    // p2 actually represents the fraction\n    //\n    //      p2 * 2^e\n    //          = p2 / 2^-e\n    //          = d[-1] / 10^1 + d[-2] / 10^2 + ...\n    //\n    // Now generate the digits d[-m] of p1 from left to right (m = 1,2,...)\n    //\n    //      p2 * 2^e = d[-1]d[-2]...d[-m] * 10^-m\n    //                      + 10^-m * (d[-m-1] / 10^1 + d[-m-2] / 10^2 + ...)\n    //\n    // using\n    //\n    //      10^m * p2 = ((10^m * p2) div 2^-e) * 2^-e + ((10^m * p2) mod 2^-e)\n    //                = (                   d) * 2^-e + (                   r)\n    //\n    // or\n    //      10^m * p2 * 2^e = d + r * 2^e\n    //\n    // i.e.\n    //\n    //      M+ = buffer + p2 * 2^e\n    //         = buffer + 10^-m * (d + r * 2^e)\n    //         = (buffer * 10^m + d) * 10^-m + 10^-m * r * 2^e\n    //\n    // and stop as soon as 10^-m * r * 2^e <= delta * 2^e\n\n    JSON_ASSERT(p2 > delta);\n\n    int m = 0;\n    for (;;)\n    {\n        // Invariant:\n        //      M+ = buffer * 10^-m + 10^-m * (d[-m-1] / 10 + d[-m-2] / 10^2 + ...) * 2^e\n        //         = buffer * 10^-m + 10^-m * (p2                                 ) * 2^e\n        //         = buffer * 10^-m + 10^-m * (1/10 * (10 * p2)                   ) * 2^e\n        //         = buffer * 10^-m + 10^-m * (1/10 * ((10*p2 div 2^-e) * 2^-e + (10*p2 mod 2^-e)) * 2^e\n        //\n        JSON_ASSERT(p2 <= (std::numeric_limits<std::uint64_t>::max)() / 10);\n        p2 *= 10;\n        const std::uint64_t d = p2 >> -one.e;     // d = (10 * p2) div 2^-e\n        const std::uint64_t r = p2 & (one.f - 1); // r = (10 * p2) mod 2^-e\n        //\n        //      M+ = buffer * 10^-m + 10^-m * (1/10 * (d * 2^-e + r) * 2^e\n        //         = buffer * 10^-m + 10^-m * (1/10 * (d + r * 2^e))\n        //         = (buffer * 10 + d) * 10^(-m-1) + 10^(-m-1) * r * 2^e\n        //\n        JSON_ASSERT(d <= 9);\n        buffer[length++] = static_cast<char>('0' + d); // buffer := buffer * 10 + d\n        //\n        //      M+ = buffer * 10^(-m-1) + 10^(-m-1) * r * 2^e\n        //\n        p2 = r;\n        m++;\n        //\n        //      M+ = buffer * 10^-m + 10^-m * p2 * 2^e\n        // Invariant restored.\n\n        // Check if enough digits have been generated.\n        //\n        //      10^-m * p2 * 2^e <= delta * 2^e\n        //              p2 * 2^e <= 10^m * delta * 2^e\n        //                    p2 <= 10^m * delta\n        delta *= 10;\n        dist  *= 10;\n        if (p2 <= delta)\n        {\n            break;\n        }\n    }\n\n    // V = buffer * 10^-m, with M- <= V <= M+.\n\n    decimal_exponent -= m;\n\n    // 1 ulp in the decimal representation is now 10^-m.\n    // Since delta and dist are now scaled by 10^m, we need to do the\n    // same with ulp in order to keep the units in sync.\n    //\n    //      10^m * 10^-m = 1 = 2^-e * 2^e = ten_m * 2^e\n    //\n    const std::uint64_t ten_m = one.f;\n    grisu2_round(buffer, length, dist, delta, p2, ten_m);\n\n    // By construction this algorithm generates the shortest possible decimal\n    // number (Loitsch, Theorem 6.2) which rounds back to w.\n    // For an input number of precision p, at least\n    //\n    //      N = 1 + ceil(p * log_10(2))\n    //\n    // decimal digits are sufficient to identify all binary floating-point\n    // numbers (Matula, \"In-and-Out conversions\").\n    // This implies that the algorithm does not produce more than N decimal\n    // digits.\n    //\n    //      N = 17 for p = 53 (IEEE double precision)\n    //      N = 9  for p = 24 (IEEE single precision)\n}\n\n/*!\nv = buf * 10^decimal_exponent\nlen is the length of the buffer (number of decimal digits)\nThe buffer must be large enough, i.e. >= max_digits10.\n*/\nJSON_HEDLEY_NON_NULL(1)\ninline void grisu2(char* buf, int& len, int& decimal_exponent,\n                   diyfp m_minus, diyfp v, diyfp m_plus)\n{\n    JSON_ASSERT(m_plus.e == m_minus.e);\n    JSON_ASSERT(m_plus.e == v.e);\n\n    //  --------(-----------------------+-----------------------)--------    (A)\n    //          m-                      v                       m+\n    //\n    //  --------------------(-----------+-----------------------)--------    (B)\n    //                      m-          v                       m+\n    //\n    // First scale v (and m- and m+) such that the exponent is in the range\n    // [alpha, gamma].\n\n    const cached_power cached = get_cached_power_for_binary_exponent(m_plus.e);\n\n    const diyfp c_minus_k(cached.f, cached.e); // = c ~= 10^-k\n\n    // The exponent of the products is = v.e + c_minus_k.e + q and is in the range [alpha,gamma]\n    const diyfp w       = diyfp::mul(v,       c_minus_k);\n    const diyfp w_minus = diyfp::mul(m_minus, c_minus_k);\n    const diyfp w_plus  = diyfp::mul(m_plus,  c_minus_k);\n\n    //  ----(---+---)---------------(---+---)---------------(---+---)----\n    //          w-                      w                       w+\n    //          = c*m-                  = c*v                   = c*m+\n    //\n    // diyfp::mul rounds its result and c_minus_k is approximated too. w, w- and\n    // w+ are now off by a small amount.\n    // In fact:\n    //\n    //      w - v * 10^k < 1 ulp\n    //\n    // To account for this inaccuracy, add resp. subtract 1 ulp.\n    //\n    //  --------+---[---------------(---+---)---------------]---+--------\n    //          w-  M-                  w                   M+  w+\n    //\n    // Now any number in [M-, M+] (bounds included) will round to w when input,\n    // regardless of how the input rounding algorithm breaks ties.\n    //\n    // And digit_gen generates the shortest possible such number in [M-, M+].\n    // Note that this does not mean that Grisu2 always generates the shortest\n    // possible number in the interval (m-, m+).\n    const diyfp M_minus(w_minus.f + 1, w_minus.e);\n    const diyfp M_plus (w_plus.f  - 1, w_plus.e );\n\n    decimal_exponent = -cached.k; // = -(-k) = k\n\n    grisu2_digit_gen(buf, len, decimal_exponent, M_minus, w, M_plus);\n}\n\n/*!\nv = buf * 10^decimal_exponent\nlen is the length of the buffer (number of decimal digits)\nThe buffer must be large enough, i.e. >= max_digits10.\n*/\ntemplate<typename FloatType>\nJSON_HEDLEY_NON_NULL(1)\nvoid grisu2(char* buf, int& len, int& decimal_exponent, FloatType value)\n{\n    static_assert(diyfp::kPrecision >= std::numeric_limits<FloatType>::digits + 3,\n                  \"internal error: not enough precision\");\n\n    JSON_ASSERT(std::isfinite(value));\n    JSON_ASSERT(value > 0);\n\n    // If the neighbors (and boundaries) of 'value' are always computed for double-precision\n    // numbers, all float's can be recovered using strtod (and strtof). However, the resulting\n    // decimal representations are not exactly \"short\".\n    //\n    // The documentation for 'std::to_chars' (https://en.cppreference.com/w/cpp/utility/to_chars)\n    // says \"value is converted to a string as if by std::sprintf in the default (\"C\") locale\"\n    // and since sprintf promotes floats to doubles, I think this is exactly what 'std::to_chars'\n    // does.\n    // On the other hand, the documentation for 'std::to_chars' requires that \"parsing the\n    // representation using the corresponding std::from_chars function recovers value exactly\". That\n    // indicates that single precision floating-point numbers should be recovered using\n    // 'std::strtof'.\n    //\n    // NB: If the neighbors are computed for single-precision numbers, there is a single float\n    //     (7.0385307e-26f) which can't be recovered using strtod. The resulting double precision\n    //     value is off by 1 ulp.\n#if 0 // NOLINT(readability-avoid-unconditional-preprocessor-if)\n    const boundaries w = compute_boundaries(static_cast<double>(value));\n#else\n    const boundaries w = compute_boundaries(value);\n#endif\n\n    grisu2(buf, len, decimal_exponent, w.minus, w.w, w.plus);\n}\n\n/*!\n@brief appends a decimal representation of e to buf\n@return a pointer to the element following the exponent.\n@pre -1000 < e < 1000\n*/\nJSON_HEDLEY_NON_NULL(1)\nJSON_HEDLEY_RETURNS_NON_NULL\ninline char* append_exponent(char* buf, int e)\n{\n    JSON_ASSERT(e > -1000);\n    JSON_ASSERT(e <  1000);\n\n    if (e < 0)\n    {\n        e = -e;\n        *buf++ = '-';\n    }\n    else\n    {\n        *buf++ = '+';\n    }\n\n    auto k = static_cast<std::uint32_t>(e);\n    if (k < 10)\n    {\n        // Always print at least two digits in the exponent.\n        // This is for compatibility with printf(\"%g\").\n        *buf++ = '0';\n        *buf++ = static_cast<char>('0' + k);\n    }\n    else if (k < 100)\n    {\n        *buf++ = static_cast<char>('0' + k / 10);\n        k %= 10;\n        *buf++ = static_cast<char>('0' + k);\n    }\n    else\n    {\n        *buf++ = static_cast<char>('0' + k / 100);\n        k %= 100;\n        *buf++ = static_cast<char>('0' + k / 10);\n        k %= 10;\n        *buf++ = static_cast<char>('0' + k);\n    }\n\n    return buf;\n}\n\n/*!\n@brief prettify v = buf * 10^decimal_exponent\n\nIf v is in the range [10^min_exp, 10^max_exp) it will be printed in fixed-point\nnotation. Otherwise it will be printed in exponential notation.\n\n@pre min_exp < 0\n@pre max_exp > 0\n*/\nJSON_HEDLEY_NON_NULL(1)\nJSON_HEDLEY_RETURNS_NON_NULL\ninline char* format_buffer(char* buf, int len, int decimal_exponent,\n                           int min_exp, int max_exp)\n{\n    JSON_ASSERT(min_exp < 0);\n    JSON_ASSERT(max_exp > 0);\n\n    const int k = len;\n    const int n = len + decimal_exponent;\n\n    // v = buf * 10^(n-k)\n    // k is the length of the buffer (number of decimal digits)\n    // n is the position of the decimal point relative to the start of the buffer.\n\n    if (k <= n && n <= max_exp)\n    {\n        // digits[000]\n        // len <= max_exp + 2\n\n        std::memset(buf + k, '0', static_cast<size_t>(n) - static_cast<size_t>(k));\n        // Make it look like a floating-point number (#362, #378)\n        buf[n + 0] = '.';\n        buf[n + 1] = '0';\n        return buf + (static_cast<size_t>(n) + 2);\n    }\n\n    if (0 < n && n <= max_exp)\n    {\n        // dig.its\n        // len <= max_digits10 + 1\n\n        JSON_ASSERT(k > n);\n\n        std::memmove(buf + (static_cast<size_t>(n) + 1), buf + n, static_cast<size_t>(k) - static_cast<size_t>(n));\n        buf[n] = '.';\n        return buf + (static_cast<size_t>(k) + 1U);\n    }\n\n    if (min_exp < n && n <= 0)\n    {\n        // 0.[000]digits\n        // len <= 2 + (-min_exp - 1) + max_digits10\n\n        std::memmove(buf + (2 + static_cast<size_t>(-n)), buf, static_cast<size_t>(k));\n        buf[0] = '0';\n        buf[1] = '.';\n        std::memset(buf + 2, '0', static_cast<size_t>(-n));\n        return buf + (2U + static_cast<size_t>(-n) + static_cast<size_t>(k));\n    }\n\n    if (k == 1)\n    {\n        // dE+123\n        // len <= 1 + 5\n\n        buf += 1;\n    }\n    else\n    {\n        // d.igitsE+123\n        // len <= max_digits10 + 1 + 5\n\n        std::memmove(buf + 2, buf + 1, static_cast<size_t>(k) - 1);\n        buf[1] = '.';\n        buf += 1 + static_cast<size_t>(k);\n    }\n\n    *buf++ = 'e';\n    return append_exponent(buf, n - 1);\n}\n\n}  // namespace dtoa_impl\n\n/*!\n@brief generates a decimal representation of the floating-point number value in [first, last).\n\nThe format of the resulting decimal representation is similar to printf's %g\nformat. Returns an iterator pointing past-the-end of the decimal representation.\n\n@note The input number must be finite, i.e. NaN's and Inf's are not supported.\n@note The buffer must be large enough.\n@note The result is NOT null-terminated.\n*/\ntemplate<typename FloatType>\nJSON_HEDLEY_NON_NULL(1, 2)\nJSON_HEDLEY_RETURNS_NON_NULL\nchar* to_chars(char* first, const char* last, FloatType value)\n{\n    static_cast<void>(last); // maybe unused - fix warning\n    JSON_ASSERT(std::isfinite(value));\n\n    // Use signbit(value) instead of (value < 0) since signbit works for -0.\n    if (std::signbit(value))\n    {\n        value = -value;\n        *first++ = '-';\n    }\n\n#ifdef __GNUC__\n#pragma GCC diagnostic push\n#pragma GCC diagnostic ignored \"-Wfloat-equal\"\n#endif\n    if (value == 0) // +-0\n    {\n        *first++ = '0';\n        // Make it look like a floating-point number (#362, #378)\n        *first++ = '.';\n        *first++ = '0';\n        return first;\n    }\n#ifdef __GNUC__\n#pragma GCC diagnostic pop\n#endif\n\n    JSON_ASSERT(last - first >= std::numeric_limits<FloatType>::max_digits10);\n\n    // Compute v = buffer * 10^decimal_exponent.\n    // The decimal digits are stored in the buffer, which needs to be interpreted\n    // as an unsigned decimal integer.\n    // len is the length of the buffer, i.e. the number of decimal digits.\n    int len = 0;\n    int decimal_exponent = 0;\n    dtoa_impl::grisu2(first, len, decimal_exponent, value);\n\n    JSON_ASSERT(len <= std::numeric_limits<FloatType>::max_digits10);\n\n    // Format the buffer like printf(\"%.*g\", prec, value)\n    constexpr int kMinExp = -4;\n    // Use digits10 here to increase compatibility with version 2.\n    constexpr int kMaxExp = std::numeric_limits<FloatType>::digits10;\n\n    JSON_ASSERT(last - first >= kMaxExp + 2);\n    JSON_ASSERT(last - first >= 2 + (-kMinExp - 1) + std::numeric_limits<FloatType>::max_digits10);\n    JSON_ASSERT(last - first >= std::numeric_limits<FloatType>::max_digits10 + 6);\n\n    return dtoa_impl::format_buffer(first, len, decimal_exponent, kMinExp, kMaxExp);\n}\n\n}  // namespace detail\nNLOHMANN_JSON_NAMESPACE_END\n\n// #include <nlohmann/detail/exceptions.hpp>\n\n// #include <nlohmann/detail/macro_scope.hpp>\n\n// #include <nlohmann/detail/meta/cpp_future.hpp>\n\n// #include <nlohmann/detail/output/binary_writer.hpp>\n\n// #include <nlohmann/detail/output/output_adapters.hpp>\n\n// #include <nlohmann/detail/string_concat.hpp>\n\n// #include <nlohmann/detail/value_t.hpp>\n\n\nNLOHMANN_JSON_NAMESPACE_BEGIN\nnamespace detail\n{\n\n///////////////////\n// serialization //\n///////////////////\n\n/// how to treat decoding errors\nenum class error_handler_t\n{\n    strict,  ///< throw a type_error exception in case of invalid UTF-8\n    replace, ///< replace invalid UTF-8 sequences with U+FFFD\n    ignore   ///< ignore invalid UTF-8 sequences\n};\n\ntemplate<typename BasicJsonType>\nclass serializer\n{\n    using string_t = typename BasicJsonType::string_t;\n    using number_float_t = typename BasicJsonType::number_float_t;\n    using number_integer_t = typename BasicJsonType::number_integer_t;\n    using number_unsigned_t = typename BasicJsonType::number_unsigned_t;\n    using binary_char_t = typename BasicJsonType::binary_t::value_type;\n    static constexpr std::uint8_t UTF8_ACCEPT = 0;\n    static constexpr std::uint8_t UTF8_REJECT = 1;\n\n  public:\n    /*!\n    @param[in] s  output stream to serialize to\n    @param[in] ichar  indentation character to use\n    @param[in] error_handler_  how to react on decoding errors\n    */\n    serializer(output_adapter_t<char> s, const char ichar,\n               error_handler_t error_handler_ = error_handler_t::strict)\n        : o(std::move(s))\n        , loc(std::localeconv())\n        , thousands_sep(loc->thousands_sep == nullptr ? '\\0' : std::char_traits<char>::to_char_type(* (loc->thousands_sep)))\n        , decimal_point(loc->decimal_point == nullptr ? '\\0' : std::char_traits<char>::to_char_type(* (loc->decimal_point)))\n        , indent_char(ichar)\n        , indent_string(512, indent_char)\n        , error_handler(error_handler_)\n    {}\n\n    // delete because of pointer members\n    serializer(const serializer&) = delete;\n    serializer& operator=(const serializer&) = delete;\n    serializer(serializer&&) = delete;\n    serializer& operator=(serializer&&) = delete;\n    ~serializer() = default;\n\n    /*!\n    @brief internal implementation of the serialization function\n\n    This function is called by the public member function dump and organizes\n    the serialization internally. The indentation level is propagated as\n    additional parameter. In case of arrays and objects, the function is\n    called recursively.\n\n    - strings and object keys are escaped using `escape_string()`\n    - integer numbers are converted implicitly via `operator<<`\n    - floating-point numbers are converted to a string using `\"%g\"` format\n    - binary values are serialized as objects containing the subtype and the\n      byte array\n\n    @param[in] val               value to serialize\n    @param[in] pretty_print      whether the output shall be pretty-printed\n    @param[in] ensure_ascii If @a ensure_ascii is true, all non-ASCII characters\n    in the output are escaped with `\\uXXXX` sequences, and the result consists\n    of ASCII characters only.\n    @param[in] indent_step       the indent level\n    @param[in] current_indent    the current indent level (only used internally)\n    */\n    void dump(const BasicJsonType& val,\n              const bool pretty_print,\n              const bool ensure_ascii,\n              const unsigned int indent_step,\n              const unsigned int current_indent = 0)\n    {\n        switch (val.m_data.m_type)\n        {\n            case value_t::object:\n            {\n                if (val.m_data.m_value.object->empty())\n                {\n                    o->write_characters(\"{}\", 2);\n                    return;\n                }\n\n                if (pretty_print)\n                {\n                    o->write_characters(\"{\\n\", 2);\n\n                    // variable to hold indentation for recursive calls\n                    const auto new_indent = current_indent + indent_step;\n                    if (JSON_HEDLEY_UNLIKELY(indent_string.size() < new_indent))\n                    {\n                        indent_string.resize(indent_string.size() * 2, ' ');\n                    }\n\n                    // first n-1 elements\n                    auto i = val.m_data.m_value.object->cbegin();\n                    for (std::size_t cnt = 0; cnt < val.m_data.m_value.object->size() - 1; ++cnt, ++i)\n                    {\n                        o->write_characters(indent_string.c_str(), new_indent);\n                        o->write_character('\\\"');\n                        dump_escaped(i->first, ensure_ascii);\n                        o->write_characters(\"\\\": \", 3);\n                        dump(i->second, true, ensure_ascii, indent_step, new_indent);\n                        o->write_characters(\",\\n\", 2);\n                    }\n\n                    // last element\n                    JSON_ASSERT(i != val.m_data.m_value.object->cend());\n                    JSON_ASSERT(std::next(i) == val.m_data.m_value.object->cend());\n                    o->write_characters(indent_string.c_str(), new_indent);\n                    o->write_character('\\\"');\n                    dump_escaped(i->first, ensure_ascii);\n                    o->write_characters(\"\\\": \", 3);\n                    dump(i->second, true, ensure_ascii, indent_step, new_indent);\n\n                    o->write_character('\\n');\n                    o->write_characters(indent_string.c_str(), current_indent);\n                    o->write_character('}');\n                }\n                else\n                {\n                    o->write_character('{');\n\n                    // first n-1 elements\n                    auto i = val.m_data.m_value.object->cbegin();\n                    for (std::size_t cnt = 0; cnt < val.m_data.m_value.object->size() - 1; ++cnt, ++i)\n                    {\n                        o->write_character('\\\"');\n                        dump_escaped(i->first, ensure_ascii);\n                        o->write_characters(\"\\\":\", 2);\n                        dump(i->second, false, ensure_ascii, indent_step, current_indent);\n                        o->write_character(',');\n                    }\n\n                    // last element\n                    JSON_ASSERT(i != val.m_data.m_value.object->cend());\n                    JSON_ASSERT(std::next(i) == val.m_data.m_value.object->cend());\n                    o->write_character('\\\"');\n                    dump_escaped(i->first, ensure_ascii);\n                    o->write_characters(\"\\\":\", 2);\n                    dump(i->second, false, ensure_ascii, indent_step, current_indent);\n\n                    o->write_character('}');\n                }\n\n                return;\n            }\n\n            case value_t::array:\n            {\n                if (val.m_data.m_value.array->empty())\n                {\n                    o->write_characters(\"[]\", 2);\n                    return;\n                }\n\n                if (pretty_print)\n                {\n                    o->write_characters(\"[\\n\", 2);\n\n                    // variable to hold indentation for recursive calls\n                    const auto new_indent = current_indent + indent_step;\n                    if (JSON_HEDLEY_UNLIKELY(indent_string.size() < new_indent))\n                    {\n                        indent_string.resize(indent_string.size() * 2, ' ');\n                    }\n\n                    // first n-1 elements\n                    for (auto i = val.m_data.m_value.array->cbegin();\n                            i != val.m_data.m_value.array->cend() - 1; ++i)\n                    {\n                        o->write_characters(indent_string.c_str(), new_indent);\n                        dump(*i, true, ensure_ascii, indent_step, new_indent);\n                        o->write_characters(\",\\n\", 2);\n                    }\n\n                    // last element\n                    JSON_ASSERT(!val.m_data.m_value.array->empty());\n                    o->write_characters(indent_string.c_str(), new_indent);\n                    dump(val.m_data.m_value.array->back(), true, ensure_ascii, indent_step, new_indent);\n\n                    o->write_character('\\n');\n                    o->write_characters(indent_string.c_str(), current_indent);\n                    o->write_character(']');\n                }\n                else\n                {\n                    o->write_character('[');\n\n                    // first n-1 elements\n                    for (auto i = val.m_data.m_value.array->cbegin();\n                            i != val.m_data.m_value.array->cend() - 1; ++i)\n                    {\n                        dump(*i, false, ensure_ascii, indent_step, current_indent);\n                        o->write_character(',');\n                    }\n\n                    // last element\n                    JSON_ASSERT(!val.m_data.m_value.array->empty());\n                    dump(val.m_data.m_value.array->back(), false, ensure_ascii, indent_step, current_indent);\n\n                    o->write_character(']');\n                }\n\n                return;\n            }\n\n            case value_t::string:\n            {\n                o->write_character('\\\"');\n                dump_escaped(*val.m_data.m_value.string, ensure_ascii);\n                o->write_character('\\\"');\n                return;\n            }\n\n            case value_t::binary:\n            {\n                if (pretty_print)\n                {\n                    o->write_characters(\"{\\n\", 2);\n\n                    // variable to hold indentation for recursive calls\n                    const auto new_indent = current_indent + indent_step;\n                    if (JSON_HEDLEY_UNLIKELY(indent_string.size() < new_indent))\n                    {\n                        indent_string.resize(indent_string.size() * 2, ' ');\n                    }\n\n                    o->write_characters(indent_string.c_str(), new_indent);\n\n                    o->write_characters(\"\\\"bytes\\\": [\", 10);\n\n                    if (!val.m_data.m_value.binary->empty())\n                    {\n                        for (auto i = val.m_data.m_value.binary->cbegin();\n                                i != val.m_data.m_value.binary->cend() - 1; ++i)\n                        {\n                            dump_integer(*i);\n                            o->write_characters(\", \", 2);\n                        }\n                        dump_integer(val.m_data.m_value.binary->back());\n                    }\n\n                    o->write_characters(\"],\\n\", 3);\n                    o->write_characters(indent_string.c_str(), new_indent);\n\n                    o->write_characters(\"\\\"subtype\\\": \", 11);\n                    if (val.m_data.m_value.binary->has_subtype())\n                    {\n                        dump_integer(val.m_data.m_value.binary->subtype());\n                    }\n                    else\n                    {\n                        o->write_characters(\"null\", 4);\n                    }\n                    o->write_character('\\n');\n                    o->write_characters(indent_string.c_str(), current_indent);\n                    o->write_character('}');\n                }\n                else\n                {\n                    o->write_characters(\"{\\\"bytes\\\":[\", 10);\n\n                    if (!val.m_data.m_value.binary->empty())\n                    {\n                        for (auto i = val.m_data.m_value.binary->cbegin();\n                                i != val.m_data.m_value.binary->cend() - 1; ++i)\n                        {\n                            dump_integer(*i);\n                            o->write_character(',');\n                        }\n                        dump_integer(val.m_data.m_value.binary->back());\n                    }\n\n                    o->write_characters(\"],\\\"subtype\\\":\", 12);\n                    if (val.m_data.m_value.binary->has_subtype())\n                    {\n                        dump_integer(val.m_data.m_value.binary->subtype());\n                        o->write_character('}');\n                    }\n                    else\n                    {\n                        o->write_characters(\"null}\", 5);\n                    }\n                }\n                return;\n            }\n\n            case value_t::boolean:\n            {\n                if (val.m_data.m_value.boolean)\n                {\n                    o->write_characters(\"true\", 4);\n                }\n                else\n                {\n                    o->write_characters(\"false\", 5);\n                }\n                return;\n            }\n\n            case value_t::number_integer:\n            {\n                dump_integer(val.m_data.m_value.number_integer);\n                return;\n            }\n\n            case value_t::number_unsigned:\n            {\n                dump_integer(val.m_data.m_value.number_unsigned);\n                return;\n            }\n\n            case value_t::number_float:\n            {\n                dump_float(val.m_data.m_value.number_float);\n                return;\n            }\n\n            case value_t::discarded:\n            {\n                o->write_characters(\"<discarded>\", 11);\n                return;\n            }\n\n            case value_t::null:\n            {\n                o->write_characters(\"null\", 4);\n                return;\n            }\n\n            default:            // LCOV_EXCL_LINE\n                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE\n        }\n    }\n\n  JSON_PRIVATE_UNLESS_TESTED:\n    /*!\n    @brief dump escaped string\n\n    Escape a string by replacing certain special characters by a sequence of an\n    escape character (backslash) and another character and other control\n    characters by a sequence of \"\\u\" followed by a four-digit hex\n    representation. The escaped string is written to output stream @a o.\n\n    @param[in] s  the string to escape\n    @param[in] ensure_ascii  whether to escape non-ASCII characters with\n                             \\uXXXX sequences\n\n    @complexity Linear in the length of string @a s.\n    */\n    void dump_escaped(const string_t& s, const bool ensure_ascii)\n    {\n        std::uint32_t codepoint{};\n        std::uint8_t state = UTF8_ACCEPT;\n        std::size_t bytes = 0;  // number of bytes written to string_buffer\n\n        // number of bytes written at the point of the last valid byte\n        std::size_t bytes_after_last_accept = 0;\n        std::size_t undumped_chars = 0;\n\n        for (std::size_t i = 0; i < s.size(); ++i)\n        {\n            const auto byte = static_cast<std::uint8_t>(s[i]);\n\n            switch (decode(state, codepoint, byte))\n            {\n                case UTF8_ACCEPT:  // decode found a new code point\n                {\n                    switch (codepoint)\n                    {\n                        case 0x08: // backspace\n                        {\n                            string_buffer[bytes++] = '\\\\';\n                            string_buffer[bytes++] = 'b';\n                            break;\n                        }\n\n                        case 0x09: // horizontal tab\n                        {\n                            string_buffer[bytes++] = '\\\\';\n                            string_buffer[bytes++] = 't';\n                            break;\n                        }\n\n                        case 0x0A: // newline\n                        {\n                            string_buffer[bytes++] = '\\\\';\n                            string_buffer[bytes++] = 'n';\n                            break;\n                        }\n\n                        case 0x0C: // formfeed\n                        {\n                            string_buffer[bytes++] = '\\\\';\n                            string_buffer[bytes++] = 'f';\n                            break;\n                        }\n\n                        case 0x0D: // carriage return\n                        {\n                            string_buffer[bytes++] = '\\\\';\n                            string_buffer[bytes++] = 'r';\n                            break;\n                        }\n\n                        case 0x22: // quotation mark\n                        {\n                            string_buffer[bytes++] = '\\\\';\n                            string_buffer[bytes++] = '\\\"';\n                            break;\n                        }\n\n                        case 0x5C: // reverse solidus\n                        {\n                            string_buffer[bytes++] = '\\\\';\n                            string_buffer[bytes++] = '\\\\';\n                            break;\n                        }\n\n                        default:\n                        {\n                            // escape control characters (0x00..0x1F) or, if\n                            // ensure_ascii parameter is used, non-ASCII characters\n                            if ((codepoint <= 0x1F) || (ensure_ascii && (codepoint >= 0x7F)))\n                            {\n                                if (codepoint <= 0xFFFF)\n                                {\n                                    // NOLINTNEXTLINE(cppcoreguidelines-pro-type-vararg,hicpp-vararg)\n                                    static_cast<void>((std::snprintf)(string_buffer.data() + bytes, 7, \"\\\\u%04x\",\n                                                                      static_cast<std::uint16_t>(codepoint)));\n                                    bytes += 6;\n                                }\n                                else\n                                {\n                                    // NOLINTNEXTLINE(cppcoreguidelines-pro-type-vararg,hicpp-vararg)\n                                    static_cast<void>((std::snprintf)(string_buffer.data() + bytes, 13, \"\\\\u%04x\\\\u%04x\",\n                                                                      static_cast<std::uint16_t>(0xD7C0u + (codepoint >> 10u)),\n                                                                      static_cast<std::uint16_t>(0xDC00u + (codepoint & 0x3FFu))));\n                                    bytes += 12;\n                                }\n                            }\n                            else\n                            {\n                                // copy byte to buffer (all previous bytes\n                                // been copied have in default case above)\n                                string_buffer[bytes++] = s[i];\n                            }\n                            break;\n                        }\n                    }\n\n                    // write buffer and reset index; there must be 13 bytes\n                    // left, as this is the maximal number of bytes to be\n                    // written (\"\\uxxxx\\uxxxx\\0\") for one code point\n                    if (string_buffer.size() - bytes < 13)\n                    {\n                        o->write_characters(string_buffer.data(), bytes);\n                        bytes = 0;\n                    }\n\n                    // remember the byte position of this accept\n                    bytes_after_last_accept = bytes;\n                    undumped_chars = 0;\n                    break;\n                }\n\n                case UTF8_REJECT:  // decode found invalid UTF-8 byte\n                {\n                    switch (error_handler)\n                    {\n                        case error_handler_t::strict:\n                        {\n                            JSON_THROW(type_error::create(316, concat(\"invalid UTF-8 byte at index \", std::to_string(i), \": 0x\", hex_bytes(byte | 0)), nullptr));\n                        }\n\n                        case error_handler_t::ignore:\n                        case error_handler_t::replace:\n                        {\n                            // in case we saw this character the first time, we\n                            // would like to read it again, because the byte\n                            // may be OK for itself, but just not OK for the\n                            // previous sequence\n                            if (undumped_chars > 0)\n                            {\n                                --i;\n                            }\n\n                            // reset length buffer to the last accepted index;\n                            // thus removing/ignoring the invalid characters\n                            bytes = bytes_after_last_accept;\n\n                            if (error_handler == error_handler_t::replace)\n                            {\n                                // add a replacement character\n                                if (ensure_ascii)\n                                {\n                                    string_buffer[bytes++] = '\\\\';\n                                    string_buffer[bytes++] = 'u';\n                                    string_buffer[bytes++] = 'f';\n                                    string_buffer[bytes++] = 'f';\n                                    string_buffer[bytes++] = 'f';\n                                    string_buffer[bytes++] = 'd';\n                                }\n                                else\n                                {\n                                    string_buffer[bytes++] = detail::binary_writer<BasicJsonType, char>::to_char_type('\\xEF');\n                                    string_buffer[bytes++] = detail::binary_writer<BasicJsonType, char>::to_char_type('\\xBF');\n                                    string_buffer[bytes++] = detail::binary_writer<BasicJsonType, char>::to_char_type('\\xBD');\n                                }\n\n                                // write buffer and reset index; there must be 13 bytes\n                                // left, as this is the maximal number of bytes to be\n                                // written (\"\\uxxxx\\uxxxx\\0\") for one code point\n                                if (string_buffer.size() - bytes < 13)\n                                {\n                                    o->write_characters(string_buffer.data(), bytes);\n                                    bytes = 0;\n                                }\n\n                                bytes_after_last_accept = bytes;\n                            }\n\n                            undumped_chars = 0;\n\n                            // continue processing the string\n                            state = UTF8_ACCEPT;\n                            break;\n                        }\n\n                        default:            // LCOV_EXCL_LINE\n                            JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE\n                    }\n                    break;\n                }\n\n                default:  // decode found yet incomplete multi-byte code point\n                {\n                    if (!ensure_ascii)\n                    {\n                        // code point will not be escaped - copy byte to buffer\n                        string_buffer[bytes++] = s[i];\n                    }\n                    ++undumped_chars;\n                    break;\n                }\n            }\n        }\n\n        // we finished processing the string\n        if (JSON_HEDLEY_LIKELY(state == UTF8_ACCEPT))\n        {\n            // write buffer\n            if (bytes > 0)\n            {\n                o->write_characters(string_buffer.data(), bytes);\n            }\n        }\n        else\n        {\n            // we finish reading, but do not accept: string was incomplete\n            switch (error_handler)\n            {\n                case error_handler_t::strict:\n                {\n                    JSON_THROW(type_error::create(316, concat(\"incomplete UTF-8 string; last byte: 0x\", hex_bytes(static_cast<std::uint8_t>(s.back() | 0))), nullptr));\n                }\n\n                case error_handler_t::ignore:\n                {\n                    // write all accepted bytes\n                    o->write_characters(string_buffer.data(), bytes_after_last_accept);\n                    break;\n                }\n\n                case error_handler_t::replace:\n                {\n                    // write all accepted bytes\n                    o->write_characters(string_buffer.data(), bytes_after_last_accept);\n                    // add a replacement character\n                    if (ensure_ascii)\n                    {\n                        o->write_characters(\"\\\\ufffd\", 6);\n                    }\n                    else\n                    {\n                        o->write_characters(\"\\xEF\\xBF\\xBD\", 3);\n                    }\n                    break;\n                }\n\n                default:            // LCOV_EXCL_LINE\n                    JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE\n            }\n        }\n    }\n\n  private:\n    /*!\n    @brief count digits\n\n    Count the number of decimal (base 10) digits for an input unsigned integer.\n\n    @param[in] x  unsigned integer number to count its digits\n    @return    number of decimal digits\n    */\n    inline unsigned int count_digits(number_unsigned_t x) noexcept\n    {\n        unsigned int n_digits = 1;\n        for (;;)\n        {\n            if (x < 10)\n            {\n                return n_digits;\n            }\n            if (x < 100)\n            {\n                return n_digits + 1;\n            }\n            if (x < 1000)\n            {\n                return n_digits + 2;\n            }\n            if (x < 10000)\n            {\n                return n_digits + 3;\n            }\n            x = x / 10000u;\n            n_digits += 4;\n        }\n    }\n\n    /*!\n     * @brief convert a byte to a uppercase hex representation\n     * @param[in] byte byte to represent\n     * @return representation (\"00\"..\"FF\")\n     */\n    static std::string hex_bytes(std::uint8_t byte)\n    {\n        std::string result = \"FF\";\n        constexpr const char* nibble_to_hex = \"0123456789ABCDEF\";\n        result[0] = nibble_to_hex[byte / 16];\n        result[1] = nibble_to_hex[byte % 16];\n        return result;\n    }\n\n    // templates to avoid warnings about useless casts\n    template <typename NumberType, enable_if_t<std::is_signed<NumberType>::value, int> = 0>\n    bool is_negative_number(NumberType x)\n    {\n        return x < 0;\n    }\n\n    template < typename NumberType, enable_if_t <std::is_unsigned<NumberType>::value, int > = 0 >\n    bool is_negative_number(NumberType /*unused*/)\n    {\n        return false;\n    }\n\n    /*!\n    @brief dump an integer\n\n    Dump a given integer to output stream @a o. Works internally with\n    @a number_buffer.\n\n    @param[in] x  integer number (signed or unsigned) to dump\n    @tparam NumberType either @a number_integer_t or @a number_unsigned_t\n    */\n    template < typename NumberType, detail::enable_if_t <\n                   std::is_integral<NumberType>::value ||\n                   std::is_same<NumberType, number_unsigned_t>::value ||\n                   std::is_same<NumberType, number_integer_t>::value ||\n                   std::is_same<NumberType, binary_char_t>::value,\n                   int > = 0 >\n    void dump_integer(NumberType x)\n    {\n        static constexpr std::array<std::array<char, 2>, 100> digits_to_99\n        {\n            {\n                {{'0', '0'}}, {{'0', '1'}}, {{'0', '2'}}, {{'0', '3'}}, {{'0', '4'}}, {{'0', '5'}}, {{'0', '6'}}, {{'0', '7'}}, {{'0', '8'}}, {{'0', '9'}},\n                {{'1', '0'}}, {{'1', '1'}}, {{'1', '2'}}, {{'1', '3'}}, {{'1', '4'}}, {{'1', '5'}}, {{'1', '6'}}, {{'1', '7'}}, {{'1', '8'}}, {{'1', '9'}},\n                {{'2', '0'}}, {{'2', '1'}}, {{'2', '2'}}, {{'2', '3'}}, {{'2', '4'}}, {{'2', '5'}}, {{'2', '6'}}, {{'2', '7'}}, {{'2', '8'}}, {{'2', '9'}},\n                {{'3', '0'}}, {{'3', '1'}}, {{'3', '2'}}, {{'3', '3'}}, {{'3', '4'}}, {{'3', '5'}}, {{'3', '6'}}, {{'3', '7'}}, {{'3', '8'}}, {{'3', '9'}},\n                {{'4', '0'}}, {{'4', '1'}}, {{'4', '2'}}, {{'4', '3'}}, {{'4', '4'}}, {{'4', '5'}}, {{'4', '6'}}, {{'4', '7'}}, {{'4', '8'}}, {{'4', '9'}},\n                {{'5', '0'}}, {{'5', '1'}}, {{'5', '2'}}, {{'5', '3'}}, {{'5', '4'}}, {{'5', '5'}}, {{'5', '6'}}, {{'5', '7'}}, {{'5', '8'}}, {{'5', '9'}},\n                {{'6', '0'}}, {{'6', '1'}}, {{'6', '2'}}, {{'6', '3'}}, {{'6', '4'}}, {{'6', '5'}}, {{'6', '6'}}, {{'6', '7'}}, {{'6', '8'}}, {{'6', '9'}},\n                {{'7', '0'}}, {{'7', '1'}}, {{'7', '2'}}, {{'7', '3'}}, {{'7', '4'}}, {{'7', '5'}}, {{'7', '6'}}, {{'7', '7'}}, {{'7', '8'}}, {{'7', '9'}},\n                {{'8', '0'}}, {{'8', '1'}}, {{'8', '2'}}, {{'8', '3'}}, {{'8', '4'}}, {{'8', '5'}}, {{'8', '6'}}, {{'8', '7'}}, {{'8', '8'}}, {{'8', '9'}},\n                {{'9', '0'}}, {{'9', '1'}}, {{'9', '2'}}, {{'9', '3'}}, {{'9', '4'}}, {{'9', '5'}}, {{'9', '6'}}, {{'9', '7'}}, {{'9', '8'}}, {{'9', '9'}},\n            }\n        };\n\n        // special case for \"0\"\n        if (x == 0)\n        {\n            o->write_character('0');\n            return;\n        }\n\n        // use a pointer to fill the buffer\n        auto buffer_ptr = number_buffer.begin(); // NOLINT(llvm-qualified-auto,readability-qualified-auto,cppcoreguidelines-pro-type-vararg,hicpp-vararg)\n\n        number_unsigned_t abs_value;\n\n        unsigned int n_chars{};\n\n        if (is_negative_number(x))\n        {\n            *buffer_ptr = '-';\n            abs_value = remove_sign(static_cast<number_integer_t>(x));\n\n            // account one more byte for the minus sign\n            n_chars = 1 + count_digits(abs_value);\n        }\n        else\n        {\n            abs_value = static_cast<number_unsigned_t>(x);\n            n_chars = count_digits(abs_value);\n        }\n\n        // spare 1 byte for '\\0'\n        JSON_ASSERT(n_chars < number_buffer.size() - 1);\n\n        // jump to the end to generate the string from backward,\n        // so we later avoid reversing the result\n        buffer_ptr += n_chars;\n\n        // Fast int2ascii implementation inspired by \"Fastware\" talk by Andrei Alexandrescu\n        // See: https://www.youtube.com/watch?v=o4-CwDo2zpg\n        while (abs_value >= 100)\n        {\n            const auto digits_index = static_cast<unsigned>((abs_value % 100));\n            abs_value /= 100;\n            *(--buffer_ptr) = digits_to_99[digits_index][1];\n            *(--buffer_ptr) = digits_to_99[digits_index][0];\n        }\n\n        if (abs_value >= 10)\n        {\n            const auto digits_index = static_cast<unsigned>(abs_value);\n            *(--buffer_ptr) = digits_to_99[digits_index][1];\n            *(--buffer_ptr) = digits_to_99[digits_index][0];\n        }\n        else\n        {\n            *(--buffer_ptr) = static_cast<char>('0' + abs_value);\n        }\n\n        o->write_characters(number_buffer.data(), n_chars);\n    }\n\n    /*!\n    @brief dump a floating-point number\n\n    Dump a given floating-point number to output stream @a o. Works internally\n    with @a number_buffer.\n\n    @param[in] x  floating-point number to dump\n    */\n    void dump_float(number_float_t x)\n    {\n        // NaN / inf\n        if (!std::isfinite(x))\n        {\n            o->write_characters(\"null\", 4);\n            return;\n        }\n\n        // If number_float_t is an IEEE-754 single or double precision number,\n        // use the Grisu2 algorithm to produce short numbers which are\n        // guaranteed to round-trip, using strtof and strtod, resp.\n        //\n        // NB: The test below works if <long double> == <double>.\n        static constexpr bool is_ieee_single_or_double\n            = (std::numeric_limits<number_float_t>::is_iec559 && std::numeric_limits<number_float_t>::digits == 24 && std::numeric_limits<number_float_t>::max_exponent == 128) ||\n              (std::numeric_limits<number_float_t>::is_iec559 && std::numeric_limits<number_float_t>::digits == 53 && std::numeric_limits<number_float_t>::max_exponent == 1024);\n\n        dump_float(x, std::integral_constant<bool, is_ieee_single_or_double>());\n    }\n\n    void dump_float(number_float_t x, std::true_type /*is_ieee_single_or_double*/)\n    {\n        auto* begin = number_buffer.data();\n        auto* end = ::nlohmann::detail::to_chars(begin, begin + number_buffer.size(), x);\n\n        o->write_characters(begin, static_cast<size_t>(end - begin));\n    }\n\n    void dump_float(number_float_t x, std::false_type /*is_ieee_single_or_double*/)\n    {\n        // get number of digits for a float -> text -> float round-trip\n        static constexpr auto d = std::numeric_limits<number_float_t>::max_digits10;\n\n        // the actual conversion\n        // NOLINTNEXTLINE(cppcoreguidelines-pro-type-vararg,hicpp-vararg)\n        std::ptrdiff_t len = (std::snprintf)(number_buffer.data(), number_buffer.size(), \"%.*g\", d, x);\n\n        // negative value indicates an error\n        JSON_ASSERT(len > 0);\n        // check if buffer was large enough\n        JSON_ASSERT(static_cast<std::size_t>(len) < number_buffer.size());\n\n        // erase thousands separator\n        if (thousands_sep != '\\0')\n        {\n            // NOLINTNEXTLINE(readability-qualified-auto,llvm-qualified-auto): std::remove returns an iterator, see https://github.com/nlohmann/json/issues/3081\n            const auto end = std::remove(number_buffer.begin(), number_buffer.begin() + len, thousands_sep);\n            std::fill(end, number_buffer.end(), '\\0');\n            JSON_ASSERT((end - number_buffer.begin()) <= len);\n            len = (end - number_buffer.begin());\n        }\n\n        // convert decimal point to '.'\n        if (decimal_point != '\\0' && decimal_point != '.')\n        {\n            // NOLINTNEXTLINE(readability-qualified-auto,llvm-qualified-auto): std::find returns an iterator, see https://github.com/nlohmann/json/issues/3081\n            const auto dec_pos = std::find(number_buffer.begin(), number_buffer.end(), decimal_point);\n            if (dec_pos != number_buffer.end())\n            {\n                *dec_pos = '.';\n            }\n        }\n\n        o->write_characters(number_buffer.data(), static_cast<std::size_t>(len));\n\n        // determine if we need to append \".0\"\n        const bool value_is_int_like =\n            std::none_of(number_buffer.begin(), number_buffer.begin() + len + 1,\n                         [](char c)\n        {\n            return c == '.' || c == 'e';\n        });\n\n        if (value_is_int_like)\n        {\n            o->write_characters(\".0\", 2);\n        }\n    }\n\n    /*!\n    @brief check whether a string is UTF-8 encoded\n\n    The function checks each byte of a string whether it is UTF-8 encoded. The\n    result of the check is stored in the @a state parameter. The function must\n    be called initially with state 0 (accept). State 1 means the string must\n    be rejected, because the current byte is not allowed. If the string is\n    completely processed, but the state is non-zero, the string ended\n    prematurely; that is, the last byte indicated more bytes should have\n    followed.\n\n    @param[in,out] state  the state of the decoding\n    @param[in,out] codep  codepoint (valid only if resulting state is UTF8_ACCEPT)\n    @param[in] byte       next byte to decode\n    @return               new state\n\n    @note The function has been edited: a std::array is used.\n\n    @copyright Copyright (c) 2008-2009 Bjoern Hoehrmann <bjoern@hoehrmann.de>\n    @sa http://bjoern.hoehrmann.de/utf-8/decoder/dfa/\n    */\n    static std::uint8_t decode(std::uint8_t& state, std::uint32_t& codep, const std::uint8_t byte) noexcept\n    {\n        static const std::array<std::uint8_t, 400> utf8d =\n        {\n            {\n                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 00..1F\n                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 20..3F\n                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 40..5F\n                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 60..7F\n                1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, // 80..9F\n                7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, // A0..BF\n                8, 8, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, // C0..DF\n                0xA, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x4, 0x3, 0x3, // E0..EF\n                0xB, 0x6, 0x6, 0x6, 0x5, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, // F0..FF\n                0x0, 0x1, 0x2, 0x3, 0x5, 0x8, 0x7, 0x1, 0x1, 0x1, 0x4, 0x6, 0x1, 0x1, 0x1, 0x1, // s0..s0\n                1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, // s1..s2\n                1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, // s3..s4\n                1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 3, 1, 1, 1, 1, 1, 1, // s5..s6\n                1, 3, 1, 1, 1, 1, 1, 3, 1, 3, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 // s7..s8\n            }\n        };\n\n        JSON_ASSERT(byte < utf8d.size());\n        const std::uint8_t type = utf8d[byte];\n\n        codep = (state != UTF8_ACCEPT)\n                ? (byte & 0x3fu) | (codep << 6u)\n                : (0xFFu >> type) & (byte);\n\n        const std::size_t index = 256u + static_cast<size_t>(state) * 16u + static_cast<size_t>(type);\n        JSON_ASSERT(index < utf8d.size());\n        state = utf8d[index];\n        return state;\n    }\n\n    /*\n     * Overload to make the compiler happy while it is instantiating\n     * dump_integer for number_unsigned_t.\n     * Must never be called.\n     */\n    number_unsigned_t remove_sign(number_unsigned_t x)\n    {\n        JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE\n        return x; // LCOV_EXCL_LINE\n    }\n\n    /*\n     * Helper function for dump_integer\n     *\n     * This function takes a negative signed integer and returns its absolute\n     * value as unsigned integer. The plus/minus shuffling is necessary as we can\n     * not directly remove the sign of an arbitrary signed integer as the\n     * absolute values of INT_MIN and INT_MAX are usually not the same. See\n     * #1708 for details.\n     */\n    inline number_unsigned_t remove_sign(number_integer_t x) noexcept\n    {\n        JSON_ASSERT(x < 0 && x < (std::numeric_limits<number_integer_t>::max)()); // NOLINT(misc-redundant-expression)\n        return static_cast<number_unsigned_t>(-(x + 1)) + 1;\n    }\n\n  private:\n    /// the output of the serializer\n    output_adapter_t<char> o = nullptr;\n\n    /// a (hopefully) large enough character buffer\n    std::array<char, 64> number_buffer{{}};\n\n    /// the locale\n    const std::lconv* loc = nullptr;\n    /// the locale's thousand separator character\n    const char thousands_sep = '\\0';\n    /// the locale's decimal point character\n    const char decimal_point = '\\0';\n\n    /// string buffer\n    std::array<char, 512> string_buffer{{}};\n\n    /// the indentation character\n    const char indent_char;\n    /// the indentation string\n    string_t indent_string;\n\n    /// error_handler how to react on decoding errors\n    const error_handler_t error_handler;\n};\n\n}  // namespace detail\nNLOHMANN_JSON_NAMESPACE_END\n\n// #include <nlohmann/detail/value_t.hpp>\n\n// #include <nlohmann/json_fwd.hpp>\n\n// #include <nlohmann/ordered_map.hpp>\n//     __ _____ _____ _____\n//  __|  |   __|     |   | |  JSON for Modern C++\n// |  |  |__   |  |  | | | |  version 3.11.3\n// |_____|_____|_____|_|___|  https://github.com/nlohmann/json\n//\n// SPDX-FileCopyrightText: 2013-2023 Niels Lohmann <https://nlohmann.me>\n// SPDX-License-Identifier: MIT\n\n\n\n#include <functional> // equal_to, less\n#include <initializer_list> // initializer_list\n#include <iterator> // input_iterator_tag, iterator_traits\n#include <memory> // allocator\n#include <stdexcept> // for out_of_range\n#include <type_traits> // enable_if, is_convertible\n#include <utility> // pair\n#include <vector> // vector\n\n// #include <nlohmann/detail/macro_scope.hpp>\n\n// #include <nlohmann/detail/meta/type_traits.hpp>\n\n\nNLOHMANN_JSON_NAMESPACE_BEGIN\n\n/// ordered_map: a minimal map-like container that preserves insertion order\n/// for use within nlohmann::basic_json<ordered_map>\ntemplate <class Key, class T, class IgnoredLess = std::less<Key>,\n          class Allocator = std::allocator<std::pair<const Key, T>>>\n                  struct ordered_map : std::vector<std::pair<const Key, T>, Allocator>\n{\n    using key_type = Key;\n    using mapped_type = T;\n    using Container = std::vector<std::pair<const Key, T>, Allocator>;\n    using iterator = typename Container::iterator;\n    using const_iterator = typename Container::const_iterator;\n    using size_type = typename Container::size_type;\n    using value_type = typename Container::value_type;\n#ifdef JSON_HAS_CPP_14\n    using key_compare = std::equal_to<>;\n#else\n    using key_compare = std::equal_to<Key>;\n#endif\n\n    // Explicit constructors instead of `using Container::Container`\n    // otherwise older compilers choke on it (GCC <= 5.5, xcode <= 9.4)\n    ordered_map() noexcept(noexcept(Container())) : Container{} {}\n    explicit ordered_map(const Allocator& alloc) noexcept(noexcept(Container(alloc))) : Container{alloc} {}\n    template <class It>\n    ordered_map(It first, It last, const Allocator& alloc = Allocator())\n        : Container{first, last, alloc} {}\n    ordered_map(std::initializer_list<value_type> init, const Allocator& alloc = Allocator() )\n        : Container{init, alloc} {}\n\n    std::pair<iterator, bool> emplace(const key_type& key, T&& t)\n    {\n        for (auto it = this->begin(); it != this->end(); ++it)\n        {\n            if (m_compare(it->first, key))\n            {\n                return {it, false};\n            }\n        }\n        Container::emplace_back(key, std::forward<T>(t));\n        return {std::prev(this->end()), true};\n    }\n\n    template<class KeyType, detail::enable_if_t<\n                 detail::is_usable_as_key_type<key_compare, key_type, KeyType>::value, int> = 0>\n    std::pair<iterator, bool> emplace(KeyType && key, T && t)\n    {\n        for (auto it = this->begin(); it != this->end(); ++it)\n        {\n            if (m_compare(it->first, key))\n            {\n                return {it, false};\n            }\n        }\n        Container::emplace_back(std::forward<KeyType>(key), std::forward<T>(t));\n        return {std::prev(this->end()), true};\n    }\n\n    T& operator[](const key_type& key)\n    {\n        return emplace(key, T{}).first->second;\n    }\n\n    template<class KeyType, detail::enable_if_t<\n                 detail::is_usable_as_key_type<key_compare, key_type, KeyType>::value, int> = 0>\n    T & operator[](KeyType && key)\n    {\n        return emplace(std::forward<KeyType>(key), T{}).first->second;\n    }\n\n    const T& operator[](const key_type& key) const\n    {\n        return at(key);\n    }\n\n    template<class KeyType, detail::enable_if_t<\n                 detail::is_usable_as_key_type<key_compare, key_type, KeyType>::value, int> = 0>\n    const T & operator[](KeyType && key) const\n    {\n        return at(std::forward<KeyType>(key));\n    }\n\n    T& at(const key_type& key)\n    {\n        for (auto it = this->begin(); it != this->end(); ++it)\n        {\n            if (m_compare(it->first, key))\n            {\n                return it->second;\n            }\n        }\n\n        JSON_THROW(std::out_of_range(\"key not found\"));\n    }\n\n    template<class KeyType, detail::enable_if_t<\n                 detail::is_usable_as_key_type<key_compare, key_type, KeyType>::value, int> = 0>\n    T & at(KeyType && key) // NOLINT(cppcoreguidelines-missing-std-forward)\n    {\n        for (auto it = this->begin(); it != this->end(); ++it)\n        {\n            if (m_compare(it->first, key))\n            {\n                return it->second;\n            }\n        }\n\n        JSON_THROW(std::out_of_range(\"key not found\"));\n    }\n\n    const T& at(const key_type& key) const\n    {\n        for (auto it = this->begin(); it != this->end(); ++it)\n        {\n            if (m_compare(it->first, key))\n            {\n                return it->second;\n            }\n        }\n\n        JSON_THROW(std::out_of_range(\"key not found\"));\n    }\n\n    template<class KeyType, detail::enable_if_t<\n                 detail::is_usable_as_key_type<key_compare, key_type, KeyType>::value, int> = 0>\n    const T & at(KeyType && key) const // NOLINT(cppcoreguidelines-missing-std-forward)\n    {\n        for (auto it = this->begin(); it != this->end(); ++it)\n        {\n            if (m_compare(it->first, key))\n            {\n                return it->second;\n            }\n        }\n\n        JSON_THROW(std::out_of_range(\"key not found\"));\n    }\n\n    size_type erase(const key_type& key)\n    {\n        for (auto it = this->begin(); it != this->end(); ++it)\n        {\n            if (m_compare(it->first, key))\n            {\n                // Since we cannot move const Keys, re-construct them in place\n                for (auto next = it; ++next != this->end(); ++it)\n                {\n                    it->~value_type(); // Destroy but keep allocation\n                    new (&*it) value_type{std::move(*next)};\n                }\n                Container::pop_back();\n                return 1;\n            }\n        }\n        return 0;\n    }\n\n    template<class KeyType, detail::enable_if_t<\n                 detail::is_usable_as_key_type<key_compare, key_type, KeyType>::value, int> = 0>\n    size_type erase(KeyType && key) // NOLINT(cppcoreguidelines-missing-std-forward)\n    {\n        for (auto it = this->begin(); it != this->end(); ++it)\n        {\n            if (m_compare(it->first, key))\n            {\n                // Since we cannot move const Keys, re-construct them in place\n                for (auto next = it; ++next != this->end(); ++it)\n                {\n                    it->~value_type(); // Destroy but keep allocation\n                    new (&*it) value_type{std::move(*next)};\n                }\n                Container::pop_back();\n                return 1;\n            }\n        }\n        return 0;\n    }\n\n    iterator erase(iterator pos)\n    {\n        return erase(pos, std::next(pos));\n    }\n\n    iterator erase(iterator first, iterator last)\n    {\n        if (first == last)\n        {\n            return first;\n        }\n\n        const auto elements_affected = std::distance(first, last);\n        const auto offset = std::distance(Container::begin(), first);\n\n        // This is the start situation. We need to delete elements_affected\n        // elements (3 in this example: e, f, g), and need to return an\n        // iterator past the last deleted element (h in this example).\n        // Note that offset is the distance from the start of the vector\n        // to first. We will need this later.\n\n        // [ a, b, c, d, e, f, g, h, i, j ]\n        //               ^        ^\n        //             first    last\n\n        // Since we cannot move const Keys, we re-construct them in place.\n        // We start at first and re-construct (viz. copy) the elements from\n        // the back of the vector. Example for first iteration:\n\n        //               ,--------.\n        //               v        |   destroy e and re-construct with h\n        // [ a, b, c, d, e, f, g, h, i, j ]\n        //               ^        ^\n        //               it       it + elements_affected\n\n        for (auto it = first; std::next(it, elements_affected) != Container::end(); ++it)\n        {\n            it->~value_type(); // destroy but keep allocation\n            new (&*it) value_type{std::move(*std::next(it, elements_affected))}; // \"move\" next element to it\n        }\n\n        // [ a, b, c, d, h, i, j, h, i, j ]\n        //               ^        ^\n        //             first    last\n\n        // remove the unneeded elements at the end of the vector\n        Container::resize(this->size() - static_cast<size_type>(elements_affected));\n\n        // [ a, b, c, d, h, i, j ]\n        //               ^        ^\n        //             first    last\n\n        // first is now pointing past the last deleted element, but we cannot\n        // use this iterator, because it may have been invalidated by the\n        // resize call. Instead, we can return begin() + offset.\n        return Container::begin() + offset;\n    }\n\n    size_type count(const key_type& key) const\n    {\n        for (auto it = this->begin(); it != this->end(); ++it)\n        {\n            if (m_compare(it->first, key))\n            {\n                return 1;\n            }\n        }\n        return 0;\n    }\n\n    template<class KeyType, detail::enable_if_t<\n                 detail::is_usable_as_key_type<key_compare, key_type, KeyType>::value, int> = 0>\n    size_type count(KeyType && key) const // NOLINT(cppcoreguidelines-missing-std-forward)\n    {\n        for (auto it = this->begin(); it != this->end(); ++it)\n        {\n            if (m_compare(it->first, key))\n            {\n                return 1;\n            }\n        }\n        return 0;\n    }\n\n    iterator find(const key_type& key)\n    {\n        for (auto it = this->begin(); it != this->end(); ++it)\n        {\n            if (m_compare(it->first, key))\n            {\n                return it;\n            }\n        }\n        return Container::end();\n    }\n\n    template<class KeyType, detail::enable_if_t<\n                 detail::is_usable_as_key_type<key_compare, key_type, KeyType>::value, int> = 0>\n    iterator find(KeyType && key) // NOLINT(cppcoreguidelines-missing-std-forward)\n    {\n        for (auto it = this->begin(); it != this->end(); ++it)\n        {\n            if (m_compare(it->first, key))\n            {\n                return it;\n            }\n        }\n        return Container::end();\n    }\n\n    const_iterator find(const key_type& key) const\n    {\n        for (auto it = this->begin(); it != this->end(); ++it)\n        {\n            if (m_compare(it->first, key))\n            {\n                return it;\n            }\n        }\n        return Container::end();\n    }\n\n    std::pair<iterator, bool> insert( value_type&& value )\n    {\n        return emplace(value.first, std::move(value.second));\n    }\n\n    std::pair<iterator, bool> insert( const value_type& value )\n    {\n        for (auto it = this->begin(); it != this->end(); ++it)\n        {\n            if (m_compare(it->first, value.first))\n            {\n                return {it, false};\n            }\n        }\n        Container::push_back(value);\n        return {--this->end(), true};\n    }\n\n    template<typename InputIt>\n    using require_input_iter = typename std::enable_if<std::is_convertible<typename std::iterator_traits<InputIt>::iterator_category,\n            std::input_iterator_tag>::value>::type;\n\n    template<typename InputIt, typename = require_input_iter<InputIt>>\n    void insert(InputIt first, InputIt last)\n    {\n        for (auto it = first; it != last; ++it)\n        {\n            insert(*it);\n        }\n    }\n\nprivate:\n    JSON_NO_UNIQUE_ADDRESS key_compare m_compare = key_compare();\n};\n\nNLOHMANN_JSON_NAMESPACE_END\n\n\n#if defined(JSON_HAS_CPP_17)\n    #if JSON_HAS_STATIC_RTTI\n        #include <any>\n    #endif\n    #include <string_view>\n#endif\n\n/*!\n@brief namespace for Niels Lohmann\n@see https://github.com/nlohmann\n@since version 1.0.0\n*/\nNLOHMANN_JSON_NAMESPACE_BEGIN\n\n/*!\n@brief a class to store JSON values\n\n@internal\n@invariant The member variables @a m_value and @a m_type have the following\nrelationship:\n- If `m_type == value_t::object`, then `m_value.object != nullptr`.\n- If `m_type == value_t::array`, then `m_value.array != nullptr`.\n- If `m_type == value_t::string`, then `m_value.string != nullptr`.\nThe invariants are checked by member function assert_invariant().\n\n@note ObjectType trick from https://stackoverflow.com/a/9860911\n@endinternal\n\n@since version 1.0.0\n\n@nosubgrouping\n*/\nNLOHMANN_BASIC_JSON_TPL_DECLARATION\nclass basic_json // NOLINT(cppcoreguidelines-special-member-functions,hicpp-special-member-functions)\n    : public ::nlohmann::detail::json_base_class<CustomBaseClass>\n{\n  private:\n    template<detail::value_t> friend struct detail::external_constructor;\n\n    template<typename>\n    friend class ::nlohmann::json_pointer;\n    // can be restored when json_pointer backwards compatibility is removed\n    // friend ::nlohmann::json_pointer<StringType>;\n\n    template<typename BasicJsonType, typename InputType>\n    friend class ::nlohmann::detail::parser;\n    friend ::nlohmann::detail::serializer<basic_json>;\n    template<typename BasicJsonType>\n    friend class ::nlohmann::detail::iter_impl;\n    template<typename BasicJsonType, typename CharType>\n    friend class ::nlohmann::detail::binary_writer;\n    template<typename BasicJsonType, typename InputType, typename SAX>\n    friend class ::nlohmann::detail::binary_reader;\n    template<typename BasicJsonType>\n    friend class ::nlohmann::detail::json_sax_dom_parser;\n    template<typename BasicJsonType>\n    friend class ::nlohmann::detail::json_sax_dom_callback_parser;\n    friend class ::nlohmann::detail::exception;\n\n    /// workaround type for MSVC\n    using basic_json_t = NLOHMANN_BASIC_JSON_TPL;\n    using json_base_class_t = ::nlohmann::detail::json_base_class<CustomBaseClass>;\n\n  JSON_PRIVATE_UNLESS_TESTED:\n    // convenience aliases for types residing in namespace detail;\n    using lexer = ::nlohmann::detail::lexer_base<basic_json>;\n\n    template<typename InputAdapterType>\n    static ::nlohmann::detail::parser<basic_json, InputAdapterType> parser(\n        InputAdapterType adapter,\n        detail::parser_callback_t<basic_json>cb = nullptr,\n        const bool allow_exceptions = true,\n        const bool ignore_comments = false\n                                 )\n    {\n        return ::nlohmann::detail::parser<basic_json, InputAdapterType>(std::move(adapter),\n                std::move(cb), allow_exceptions, ignore_comments);\n    }\n\n  private:\n    using primitive_iterator_t = ::nlohmann::detail::primitive_iterator_t;\n    template<typename BasicJsonType>\n    using internal_iterator = ::nlohmann::detail::internal_iterator<BasicJsonType>;\n    template<typename BasicJsonType>\n    using iter_impl = ::nlohmann::detail::iter_impl<BasicJsonType>;\n    template<typename Iterator>\n    using iteration_proxy = ::nlohmann::detail::iteration_proxy<Iterator>;\n    template<typename Base> using json_reverse_iterator = ::nlohmann::detail::json_reverse_iterator<Base>;\n\n    template<typename CharType>\n    using output_adapter_t = ::nlohmann::detail::output_adapter_t<CharType>;\n\n    template<typename InputType>\n    using binary_reader = ::nlohmann::detail::binary_reader<basic_json, InputType>;\n    template<typename CharType> using binary_writer = ::nlohmann::detail::binary_writer<basic_json, CharType>;\n\n  JSON_PRIVATE_UNLESS_TESTED:\n    using serializer = ::nlohmann::detail::serializer<basic_json>;\n\n  public:\n    using value_t = detail::value_t;\n    /// JSON Pointer, see @ref nlohmann::json_pointer\n    using json_pointer = ::nlohmann::json_pointer<StringType>;\n    template<typename T, typename SFINAE>\n    using json_serializer = JSONSerializer<T, SFINAE>;\n    /// how to treat decoding errors\n    using error_handler_t = detail::error_handler_t;\n    /// how to treat CBOR tags\n    using cbor_tag_handler_t = detail::cbor_tag_handler_t;\n    /// helper type for initializer lists of basic_json values\n    using initializer_list_t = std::initializer_list<detail::json_ref<basic_json>>;\n\n    using input_format_t = detail::input_format_t;\n    /// SAX interface type, see @ref nlohmann::json_sax\n    using json_sax_t = json_sax<basic_json>;\n\n    ////////////////\n    // exceptions //\n    ////////////////\n\n    /// @name exceptions\n    /// Classes to implement user-defined exceptions.\n    /// @{\n\n    using exception = detail::exception;\n    using parse_error = detail::parse_error;\n    using invalid_iterator = detail::invalid_iterator;\n    using type_error = detail::type_error;\n    using out_of_range = detail::out_of_range;\n    using other_error = detail::other_error;\n\n    /// @}\n\n    /////////////////////\n    // container types //\n    /////////////////////\n\n    /// @name container types\n    /// The canonic container types to use @ref basic_json like any other STL\n    /// container.\n    /// @{\n\n    /// the type of elements in a basic_json container\n    using value_type = basic_json;\n\n    /// the type of an element reference\n    using reference = value_type&;\n    /// the type of an element const reference\n    using const_reference = const value_type&;\n\n    /// a type to represent differences between iterators\n    using difference_type = std::ptrdiff_t;\n    /// a type to represent container sizes\n    using size_type = std::size_t;\n\n    /// the allocator type\n    using allocator_type = AllocatorType<basic_json>;\n\n    /// the type of an element pointer\n    using pointer = typename std::allocator_traits<allocator_type>::pointer;\n    /// the type of an element const pointer\n    using const_pointer = typename std::allocator_traits<allocator_type>::const_pointer;\n\n    /// an iterator for a basic_json container\n    using iterator = iter_impl<basic_json>;\n    /// a const iterator for a basic_json container\n    using const_iterator = iter_impl<const basic_json>;\n    /// a reverse iterator for a basic_json container\n    using reverse_iterator = json_reverse_iterator<typename basic_json::iterator>;\n    /// a const reverse iterator for a basic_json container\n    using const_reverse_iterator = json_reverse_iterator<typename basic_json::const_iterator>;\n\n    /// @}\n\n    /// @brief returns the allocator associated with the container\n    /// @sa https://json.nlohmann.me/api/basic_json/get_allocator/\n    static allocator_type get_allocator()\n    {\n        return allocator_type();\n    }\n\n    /// @brief returns version information on the library\n    /// @sa https://json.nlohmann.me/api/basic_json/meta/\n    JSON_HEDLEY_WARN_UNUSED_RESULT\n    static basic_json meta()\n    {\n        basic_json result;\n\n        result[\"copyright\"] = \"(C) 2013-2023 Niels Lohmann\";\n        result[\"name\"] = \"JSON for Modern C++\";\n        result[\"url\"] = \"https://github.com/nlohmann/json\";\n        result[\"version\"][\"string\"] =\n            detail::concat(std::to_string(NLOHMANN_JSON_VERSION_MAJOR), '.',\n                           std::to_string(NLOHMANN_JSON_VERSION_MINOR), '.',\n                           std::to_string(NLOHMANN_JSON_VERSION_PATCH));\n        result[\"version\"][\"major\"] = NLOHMANN_JSON_VERSION_MAJOR;\n        result[\"version\"][\"minor\"] = NLOHMANN_JSON_VERSION_MINOR;\n        result[\"version\"][\"patch\"] = NLOHMANN_JSON_VERSION_PATCH;\n\n#ifdef _WIN32\n        result[\"platform\"] = \"win32\";\n#elif defined __linux__\n        result[\"platform\"] = \"linux\";\n#elif defined __APPLE__\n        result[\"platform\"] = \"apple\";\n#elif defined __unix__\n        result[\"platform\"] = \"unix\";\n#else\n        result[\"platform\"] = \"unknown\";\n#endif\n\n#if defined(__ICC) || defined(__INTEL_COMPILER)\n        result[\"compiler\"] = {{\"family\", \"icc\"}, {\"version\", __INTEL_COMPILER}};\n#elif defined(__clang__)\n        result[\"compiler\"] = {{\"family\", \"clang\"}, {\"version\", __clang_version__}};\n#elif defined(__GNUC__) || defined(__GNUG__)\n        result[\"compiler\"] = {{\"family\", \"gcc\"}, {\"version\", detail::concat(\n                    std::to_string(__GNUC__), '.',\n                    std::to_string(__GNUC_MINOR__), '.',\n                    std::to_string(__GNUC_PATCHLEVEL__))\n            }\n        };\n#elif defined(__HP_cc) || defined(__HP_aCC)\n        result[\"compiler\"] = \"hp\"\n#elif defined(__IBMCPP__)\n        result[\"compiler\"] = {{\"family\", \"ilecpp\"}, {\"version\", __IBMCPP__}};\n#elif defined(_MSC_VER)\n        result[\"compiler\"] = {{\"family\", \"msvc\"}, {\"version\", _MSC_VER}};\n#elif defined(__PGI)\n        result[\"compiler\"] = {{\"family\", \"pgcpp\"}, {\"version\", __PGI}};\n#elif defined(__SUNPRO_CC)\n        result[\"compiler\"] = {{\"family\", \"sunpro\"}, {\"version\", __SUNPRO_CC}};\n#else\n        result[\"compiler\"] = {{\"family\", \"unknown\"}, {\"version\", \"unknown\"}};\n#endif\n\n#if defined(_MSVC_LANG)\n        result[\"compiler\"][\"c++\"] = std::to_string(_MSVC_LANG);\n#elif defined(__cplusplus)\n        result[\"compiler\"][\"c++\"] = std::to_string(__cplusplus);\n#else\n        result[\"compiler\"][\"c++\"] = \"unknown\";\n#endif\n        return result;\n    }\n\n    ///////////////////////////\n    // JSON value data types //\n    ///////////////////////////\n\n    /// @name JSON value data types\n    /// The data types to store a JSON value. These types are derived from\n    /// the template arguments passed to class @ref basic_json.\n    /// @{\n\n    /// @brief default object key comparator type\n    /// The actual object key comparator type (@ref object_comparator_t) may be\n    /// different.\n    /// @sa https://json.nlohmann.me/api/basic_json/default_object_comparator_t/\n#if defined(JSON_HAS_CPP_14)\n    // use of transparent comparator avoids unnecessary repeated construction of temporaries\n    // in functions involving lookup by key with types other than object_t::key_type (aka. StringType)\n    using default_object_comparator_t = std::less<>;\n#else\n    using default_object_comparator_t = std::less<StringType>;\n#endif\n\n    /// @brief a type for an object\n    /// @sa https://json.nlohmann.me/api/basic_json/object_t/\n    using object_t = ObjectType<StringType,\n          basic_json,\n          default_object_comparator_t,\n          AllocatorType<std::pair<const StringType,\n          basic_json>>>;\n\n    /// @brief a type for an array\n    /// @sa https://json.nlohmann.me/api/basic_json/array_t/\n    using array_t = ArrayType<basic_json, AllocatorType<basic_json>>;\n\n    /// @brief a type for a string\n    /// @sa https://json.nlohmann.me/api/basic_json/string_t/\n    using string_t = StringType;\n\n    /// @brief a type for a boolean\n    /// @sa https://json.nlohmann.me/api/basic_json/boolean_t/\n    using boolean_t = BooleanType;\n\n    /// @brief a type for a number (integer)\n    /// @sa https://json.nlohmann.me/api/basic_json/number_integer_t/\n    using number_integer_t = NumberIntegerType;\n\n    /// @brief a type for a number (unsigned)\n    /// @sa https://json.nlohmann.me/api/basic_json/number_unsigned_t/\n    using number_unsigned_t = NumberUnsignedType;\n\n    /// @brief a type for a number (floating-point)\n    /// @sa https://json.nlohmann.me/api/basic_json/number_float_t/\n    using number_float_t = NumberFloatType;\n\n    /// @brief a type for a packed binary type\n    /// @sa https://json.nlohmann.me/api/basic_json/binary_t/\n    using binary_t = nlohmann::byte_container_with_subtype<BinaryType>;\n\n    /// @brief object key comparator type\n    /// @sa https://json.nlohmann.me/api/basic_json/object_comparator_t/\n    using object_comparator_t = detail::actual_object_comparator_t<basic_json>;\n\n    /// @}\n\n  private:\n\n    /// helper for exception-safe object creation\n    template<typename T, typename... Args>\n    JSON_HEDLEY_RETURNS_NON_NULL\n    static T* create(Args&& ... args)\n    {\n        AllocatorType<T> alloc;\n        using AllocatorTraits = std::allocator_traits<AllocatorType<T>>;\n\n        auto deleter = [&](T * obj)\n        {\n            AllocatorTraits::deallocate(alloc, obj, 1);\n        };\n        std::unique_ptr<T, decltype(deleter)> obj(AllocatorTraits::allocate(alloc, 1), deleter);\n        AllocatorTraits::construct(alloc, obj.get(), std::forward<Args>(args)...);\n        JSON_ASSERT(obj != nullptr);\n        return obj.release();\n    }\n\n    ////////////////////////\n    // JSON value storage //\n    ////////////////////////\n\n  JSON_PRIVATE_UNLESS_TESTED:\n    /*!\n    @brief a JSON value\n\n    The actual storage for a JSON value of the @ref basic_json class. This\n    union combines the different storage types for the JSON value types\n    defined in @ref value_t.\n\n    JSON type | value_t type    | used type\n    --------- | --------------- | ------------------------\n    object    | object          | pointer to @ref object_t\n    array     | array           | pointer to @ref array_t\n    string    | string          | pointer to @ref string_t\n    boolean   | boolean         | @ref boolean_t\n    number    | number_integer  | @ref number_integer_t\n    number    | number_unsigned | @ref number_unsigned_t\n    number    | number_float    | @ref number_float_t\n    binary    | binary          | pointer to @ref binary_t\n    null      | null            | *no value is stored*\n\n    @note Variable-length types (objects, arrays, and strings) are stored as\n    pointers. The size of the union should not exceed 64 bits if the default\n    value types are used.\n\n    @since version 1.0.0\n    */\n    union json_value\n    {\n        /// object (stored with pointer to save storage)\n        object_t* object;\n        /// array (stored with pointer to save storage)\n        array_t* array;\n        /// string (stored with pointer to save storage)\n        string_t* string;\n        /// binary (stored with pointer to save storage)\n        binary_t* binary;\n        /// boolean\n        boolean_t boolean;\n        /// number (integer)\n        number_integer_t number_integer;\n        /// number (unsigned integer)\n        number_unsigned_t number_unsigned;\n        /// number (floating-point)\n        number_float_t number_float;\n\n        /// default constructor (for null values)\n        json_value() = default;\n        /// constructor for booleans\n        json_value(boolean_t v) noexcept : boolean(v) {}\n        /// constructor for numbers (integer)\n        json_value(number_integer_t v) noexcept : number_integer(v) {}\n        /// constructor for numbers (unsigned)\n        json_value(number_unsigned_t v) noexcept : number_unsigned(v) {}\n        /// constructor for numbers (floating-point)\n        json_value(number_float_t v) noexcept : number_float(v) {}\n        /// constructor for empty values of a given type\n        json_value(value_t t)\n        {\n            switch (t)\n            {\n                case value_t::object:\n                {\n                    object = create<object_t>();\n                    break;\n                }\n\n                case value_t::array:\n                {\n                    array = create<array_t>();\n                    break;\n                }\n\n                case value_t::string:\n                {\n                    string = create<string_t>(\"\");\n                    break;\n                }\n\n                case value_t::binary:\n                {\n                    binary = create<binary_t>();\n                    break;\n                }\n\n                case value_t::boolean:\n                {\n                    boolean = static_cast<boolean_t>(false);\n                    break;\n                }\n\n                case value_t::number_integer:\n                {\n                    number_integer = static_cast<number_integer_t>(0);\n                    break;\n                }\n\n                case value_t::number_unsigned:\n                {\n                    number_unsigned = static_cast<number_unsigned_t>(0);\n                    break;\n                }\n\n                case value_t::number_float:\n                {\n                    number_float = static_cast<number_float_t>(0.0);\n                    break;\n                }\n\n                case value_t::null:\n                {\n                    object = nullptr;  // silence warning, see #821\n                    break;\n                }\n\n                case value_t::discarded:\n                default:\n                {\n                    object = nullptr;  // silence warning, see #821\n                    if (JSON_HEDLEY_UNLIKELY(t == value_t::null))\n                    {\n                        JSON_THROW(other_error::create(500, \"961c151d2e87f2686a955a9be24d316f1362bf21 3.11.3\", nullptr)); // LCOV_EXCL_LINE\n                    }\n                    break;\n                }\n            }\n        }\n\n        /// constructor for strings\n        json_value(const string_t& value) : string(create<string_t>(value)) {}\n\n        /// constructor for rvalue strings\n        json_value(string_t&& value) : string(create<string_t>(std::move(value))) {}\n\n        /// constructor for objects\n        json_value(const object_t& value) : object(create<object_t>(value)) {}\n\n        /// constructor for rvalue objects\n        json_value(object_t&& value) : object(create<object_t>(std::move(value))) {}\n\n        /// constructor for arrays\n        json_value(const array_t& value) : array(create<array_t>(value)) {}\n\n        /// constructor for rvalue arrays\n        json_value(array_t&& value) : array(create<array_t>(std::move(value))) {}\n\n        /// constructor for binary arrays\n        json_value(const typename binary_t::container_type& value) : binary(create<binary_t>(value)) {}\n\n        /// constructor for rvalue binary arrays\n        json_value(typename binary_t::container_type&& value) : binary(create<binary_t>(std::move(value))) {}\n\n        /// constructor for binary arrays (internal type)\n        json_value(const binary_t& value) : binary(create<binary_t>(value)) {}\n\n        /// constructor for rvalue binary arrays (internal type)\n        json_value(binary_t&& value) : binary(create<binary_t>(std::move(value))) {}\n\n        void destroy(value_t t)\n        {\n            if (\n                (t == value_t::object && object == nullptr) ||\n                (t == value_t::array && array == nullptr) ||\n                (t == value_t::string && string == nullptr) ||\n                (t == value_t::binary && binary == nullptr)\n            )\n            {\n                //not initialized (e.g. due to exception in the ctor)\n                return;\n            }\n            if (t == value_t::array || t == value_t::object)\n            {\n                // flatten the current json_value to a heap-allocated stack\n                std::vector<basic_json> stack;\n\n                // move the top-level items to stack\n                if (t == value_t::array)\n                {\n                    stack.reserve(array->size());\n                    std::move(array->begin(), array->end(), std::back_inserter(stack));\n                }\n                else\n                {\n                    stack.reserve(object->size());\n                    for (auto&& it : *object)\n                    {\n                        stack.push_back(std::move(it.second));\n                    }\n                }\n\n                while (!stack.empty())\n                {\n                    // move the last item to local variable to be processed\n                    basic_json current_item(std::move(stack.back()));\n                    stack.pop_back();\n\n                    // if current_item is array/object, move\n                    // its children to the stack to be processed later\n                    if (current_item.is_array())\n                    {\n                        std::move(current_item.m_data.m_value.array->begin(), current_item.m_data.m_value.array->end(), std::back_inserter(stack));\n\n                        current_item.m_data.m_value.array->clear();\n                    }\n                    else if (current_item.is_object())\n                    {\n                        for (auto&& it : *current_item.m_data.m_value.object)\n                        {\n                            stack.push_back(std::move(it.second));\n                        }\n\n                        current_item.m_data.m_value.object->clear();\n                    }\n\n                    // it's now safe that current_item get destructed\n                    // since it doesn't have any children\n                }\n            }\n\n            switch (t)\n            {\n                case value_t::object:\n                {\n                    AllocatorType<object_t> alloc;\n                    std::allocator_traits<decltype(alloc)>::destroy(alloc, object);\n                    std::allocator_traits<decltype(alloc)>::deallocate(alloc, object, 1);\n                    break;\n                }\n\n                case value_t::array:\n                {\n                    AllocatorType<array_t> alloc;\n                    std::allocator_traits<decltype(alloc)>::destroy(alloc, array);\n                    std::allocator_traits<decltype(alloc)>::deallocate(alloc, array, 1);\n                    break;\n                }\n\n                case value_t::string:\n                {\n                    AllocatorType<string_t> alloc;\n                    std::allocator_traits<decltype(alloc)>::destroy(alloc, string);\n                    std::allocator_traits<decltype(alloc)>::deallocate(alloc, string, 1);\n                    break;\n                }\n\n                case value_t::binary:\n                {\n                    AllocatorType<binary_t> alloc;\n                    std::allocator_traits<decltype(alloc)>::destroy(alloc, binary);\n                    std::allocator_traits<decltype(alloc)>::deallocate(alloc, binary, 1);\n                    break;\n                }\n\n                case value_t::null:\n                case value_t::boolean:\n                case value_t::number_integer:\n                case value_t::number_unsigned:\n                case value_t::number_float:\n                case value_t::discarded:\n                default:\n                {\n                    break;\n                }\n            }\n        }\n    };\n\n  private:\n    /*!\n    @brief checks the class invariants\n\n    This function asserts the class invariants. It needs to be called at the\n    end of every constructor to make sure that created objects respect the\n    invariant. Furthermore, it has to be called each time the type of a JSON\n    value is changed, because the invariant expresses a relationship between\n    @a m_type and @a m_value.\n\n    Furthermore, the parent relation is checked for arrays and objects: If\n    @a check_parents true and the value is an array or object, then the\n    container's elements must have the current value as parent.\n\n    @param[in] check_parents  whether the parent relation should be checked.\n               The value is true by default and should only be set to false\n               during destruction of objects when the invariant does not\n               need to hold.\n    */\n    void assert_invariant(bool check_parents = true) const noexcept\n    {\n        JSON_ASSERT(m_data.m_type != value_t::object || m_data.m_value.object != nullptr);\n        JSON_ASSERT(m_data.m_type != value_t::array || m_data.m_value.array != nullptr);\n        JSON_ASSERT(m_data.m_type != value_t::string || m_data.m_value.string != nullptr);\n        JSON_ASSERT(m_data.m_type != value_t::binary || m_data.m_value.binary != nullptr);\n\n#if JSON_DIAGNOSTICS\n        JSON_TRY\n        {\n            // cppcheck-suppress assertWithSideEffect\n            JSON_ASSERT(!check_parents || !is_structured() || std::all_of(begin(), end(), [this](const basic_json & j)\n            {\n                return j.m_parent == this;\n            }));\n        }\n        JSON_CATCH(...) {} // LCOV_EXCL_LINE\n#endif\n        static_cast<void>(check_parents);\n    }\n\n    void set_parents()\n    {\n#if JSON_DIAGNOSTICS\n        switch (m_data.m_type)\n        {\n            case value_t::array:\n            {\n                for (auto& element : *m_data.m_value.array)\n                {\n                    element.m_parent = this;\n                }\n                break;\n            }\n\n            case value_t::object:\n            {\n                for (auto& element : *m_data.m_value.object)\n                {\n                    element.second.m_parent = this;\n                }\n                break;\n            }\n\n            case value_t::null:\n            case value_t::string:\n            case value_t::boolean:\n            case value_t::number_integer:\n            case value_t::number_unsigned:\n            case value_t::number_float:\n            case value_t::binary:\n            case value_t::discarded:\n            default:\n                break;\n        }\n#endif\n    }\n\n    iterator set_parents(iterator it, typename iterator::difference_type count_set_parents)\n    {\n#if JSON_DIAGNOSTICS\n        for (typename iterator::difference_type i = 0; i < count_set_parents; ++i)\n        {\n            (it + i)->m_parent = this;\n        }\n#else\n        static_cast<void>(count_set_parents);\n#endif\n        return it;\n    }\n\n    reference set_parent(reference j, std::size_t old_capacity = static_cast<std::size_t>(-1))\n    {\n#if JSON_DIAGNOSTICS\n        if (old_capacity != static_cast<std::size_t>(-1))\n        {\n            // see https://github.com/nlohmann/json/issues/2838\n            JSON_ASSERT(type() == value_t::array);\n            if (JSON_HEDLEY_UNLIKELY(m_data.m_value.array->capacity() != old_capacity))\n            {\n                // capacity has changed: update all parents\n                set_parents();\n                return j;\n            }\n        }\n\n        // ordered_json uses a vector internally, so pointers could have\n        // been invalidated; see https://github.com/nlohmann/json/issues/2962\n#ifdef JSON_HEDLEY_MSVC_VERSION\n#pragma warning(push )\n#pragma warning(disable : 4127) // ignore warning to replace if with if constexpr\n#endif\n        if (detail::is_ordered_map<object_t>::value)\n        {\n            set_parents();\n            return j;\n        }\n#ifdef JSON_HEDLEY_MSVC_VERSION\n#pragma warning( pop )\n#endif\n\n        j.m_parent = this;\n#else\n        static_cast<void>(j);\n        static_cast<void>(old_capacity);\n#endif\n        return j;\n    }\n\n  public:\n    //////////////////////////\n    // JSON parser callback //\n    //////////////////////////\n\n    /// @brief parser event types\n    /// @sa https://json.nlohmann.me/api/basic_json/parse_event_t/\n    using parse_event_t = detail::parse_event_t;\n\n    /// @brief per-element parser callback type\n    /// @sa https://json.nlohmann.me/api/basic_json/parser_callback_t/\n    using parser_callback_t = detail::parser_callback_t<basic_json>;\n\n    //////////////////\n    // constructors //\n    //////////////////\n\n    /// @name constructors and destructors\n    /// Constructors of class @ref basic_json, copy/move constructor, copy\n    /// assignment, static functions creating objects, and the destructor.\n    /// @{\n\n    /// @brief create an empty value with a given type\n    /// @sa https://json.nlohmann.me/api/basic_json/basic_json/\n    basic_json(const value_t v)\n        : m_data(v)\n    {\n        assert_invariant();\n    }\n\n    /// @brief create a null object\n    /// @sa https://json.nlohmann.me/api/basic_json/basic_json/\n    basic_json(std::nullptr_t = nullptr) noexcept // NOLINT(bugprone-exception-escape)\n        : basic_json(value_t::null)\n    {\n        assert_invariant();\n    }\n\n    /// @brief create a JSON value from compatible types\n    /// @sa https://json.nlohmann.me/api/basic_json/basic_json/\n    template < typename CompatibleType,\n               typename U = detail::uncvref_t<CompatibleType>,\n               detail::enable_if_t <\n                   !detail::is_basic_json<U>::value && detail::is_compatible_type<basic_json_t, U>::value, int > = 0 >\n    basic_json(CompatibleType && val) noexcept(noexcept( // NOLINT(bugprone-forwarding-reference-overload,bugprone-exception-escape)\n                JSONSerializer<U>::to_json(std::declval<basic_json_t&>(),\n                                           std::forward<CompatibleType>(val))))\n    {\n        JSONSerializer<U>::to_json(*this, std::forward<CompatibleType>(val));\n        set_parents();\n        assert_invariant();\n    }\n\n    /// @brief create a JSON value from an existing one\n    /// @sa https://json.nlohmann.me/api/basic_json/basic_json/\n    template < typename BasicJsonType,\n               detail::enable_if_t <\n                   detail::is_basic_json<BasicJsonType>::value&& !std::is_same<basic_json, BasicJsonType>::value, int > = 0 >\n    basic_json(const BasicJsonType& val)\n    {\n        using other_boolean_t = typename BasicJsonType::boolean_t;\n        using other_number_float_t = typename BasicJsonType::number_float_t;\n        using other_number_integer_t = typename BasicJsonType::number_integer_t;\n        using other_number_unsigned_t = typename BasicJsonType::number_unsigned_t;\n        using other_string_t = typename BasicJsonType::string_t;\n        using other_object_t = typename BasicJsonType::object_t;\n        using other_array_t = typename BasicJsonType::array_t;\n        using other_binary_t = typename BasicJsonType::binary_t;\n\n        switch (val.type())\n        {\n            case value_t::boolean:\n                JSONSerializer<other_boolean_t>::to_json(*this, val.template get<other_boolean_t>());\n                break;\n            case value_t::number_float:\n                JSONSerializer<other_number_float_t>::to_json(*this, val.template get<other_number_float_t>());\n                break;\n            case value_t::number_integer:\n                JSONSerializer<other_number_integer_t>::to_json(*this, val.template get<other_number_integer_t>());\n                break;\n            case value_t::number_unsigned:\n                JSONSerializer<other_number_unsigned_t>::to_json(*this, val.template get<other_number_unsigned_t>());\n                break;\n            case value_t::string:\n                JSONSerializer<other_string_t>::to_json(*this, val.template get_ref<const other_string_t&>());\n                break;\n            case value_t::object:\n                JSONSerializer<other_object_t>::to_json(*this, val.template get_ref<const other_object_t&>());\n                break;\n            case value_t::array:\n                JSONSerializer<other_array_t>::to_json(*this, val.template get_ref<const other_array_t&>());\n                break;\n            case value_t::binary:\n                JSONSerializer<other_binary_t>::to_json(*this, val.template get_ref<const other_binary_t&>());\n                break;\n            case value_t::null:\n                *this = nullptr;\n                break;\n            case value_t::discarded:\n                m_data.m_type = value_t::discarded;\n                break;\n            default:            // LCOV_EXCL_LINE\n                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE\n        }\n        JSON_ASSERT(m_data.m_type == val.type());\n        set_parents();\n        assert_invariant();\n    }\n\n    /// @brief create a container (array or object) from an initializer list\n    /// @sa https://json.nlohmann.me/api/basic_json/basic_json/\n    basic_json(initializer_list_t init,\n               bool type_deduction = true,\n               value_t manual_type = value_t::array)\n    {\n        // check if each element is an array with two elements whose first\n        // element is a string\n        bool is_an_object = std::all_of(init.begin(), init.end(),\n                                        [](const detail::json_ref<basic_json>& element_ref)\n        {\n            // The cast is to ensure op[size_type] is called, bearing in mind size_type may not be int;\n            // (many string types can be constructed from 0 via its null-pointer guise, so we get a\n            // broken call to op[key_type], the wrong semantics and a 4804 warning on Windows)\n            return element_ref->is_array() && element_ref->size() == 2 && (*element_ref)[static_cast<size_type>(0)].is_string();\n        });\n\n        // adjust type if type deduction is not wanted\n        if (!type_deduction)\n        {\n            // if array is wanted, do not create an object though possible\n            if (manual_type == value_t::array)\n            {\n                is_an_object = false;\n            }\n\n            // if object is wanted but impossible, throw an exception\n            if (JSON_HEDLEY_UNLIKELY(manual_type == value_t::object && !is_an_object))\n            {\n                JSON_THROW(type_error::create(301, \"cannot create object from initializer list\", nullptr));\n            }\n        }\n\n        if (is_an_object)\n        {\n            // the initializer list is a list of pairs -> create object\n            m_data.m_type = value_t::object;\n            m_data.m_value = value_t::object;\n\n            for (auto& element_ref : init)\n            {\n                auto element = element_ref.moved_or_copied();\n                m_data.m_value.object->emplace(\n                    std::move(*((*element.m_data.m_value.array)[0].m_data.m_value.string)),\n                    std::move((*element.m_data.m_value.array)[1]));\n            }\n        }\n        else\n        {\n            // the initializer list describes an array -> create array\n            m_data.m_type = value_t::array;\n            m_data.m_value.array = create<array_t>(init.begin(), init.end());\n        }\n\n        set_parents();\n        assert_invariant();\n    }\n\n    /// @brief explicitly create a binary array (without subtype)\n    /// @sa https://json.nlohmann.me/api/basic_json/binary/\n    JSON_HEDLEY_WARN_UNUSED_RESULT\n    static basic_json binary(const typename binary_t::container_type& init)\n    {\n        auto res = basic_json();\n        res.m_data.m_type = value_t::binary;\n        res.m_data.m_value = init;\n        return res;\n    }\n\n    /// @brief explicitly create a binary array (with subtype)\n    /// @sa https://json.nlohmann.me/api/basic_json/binary/\n    JSON_HEDLEY_WARN_UNUSED_RESULT\n    static basic_json binary(const typename binary_t::container_type& init, typename binary_t::subtype_type subtype)\n    {\n        auto res = basic_json();\n        res.m_data.m_type = value_t::binary;\n        res.m_data.m_value = binary_t(init, subtype);\n        return res;\n    }\n\n    /// @brief explicitly create a binary array\n    /// @sa https://json.nlohmann.me/api/basic_json/binary/\n    JSON_HEDLEY_WARN_UNUSED_RESULT\n    static basic_json binary(typename binary_t::container_type&& init)\n    {\n        auto res = basic_json();\n        res.m_data.m_type = value_t::binary;\n        res.m_data.m_value = std::move(init);\n        return res;\n    }\n\n    /// @brief explicitly create a binary array (with subtype)\n    /// @sa https://json.nlohmann.me/api/basic_json/binary/\n    JSON_HEDLEY_WARN_UNUSED_RESULT\n    static basic_json binary(typename binary_t::container_type&& init, typename binary_t::subtype_type subtype)\n    {\n        auto res = basic_json();\n        res.m_data.m_type = value_t::binary;\n        res.m_data.m_value = binary_t(std::move(init), subtype);\n        return res;\n    }\n\n    /// @brief explicitly create an array from an initializer list\n    /// @sa https://json.nlohmann.me/api/basic_json/array/\n    JSON_HEDLEY_WARN_UNUSED_RESULT\n    static basic_json array(initializer_list_t init = {})\n    {\n        return basic_json(init, false, value_t::array);\n    }\n\n    /// @brief explicitly create an object from an initializer list\n    /// @sa https://json.nlohmann.me/api/basic_json/object/\n    JSON_HEDLEY_WARN_UNUSED_RESULT\n    static basic_json object(initializer_list_t init = {})\n    {\n        return basic_json(init, false, value_t::object);\n    }\n\n    /// @brief construct an array with count copies of given value\n    /// @sa https://json.nlohmann.me/api/basic_json/basic_json/\n    basic_json(size_type cnt, const basic_json& val):\n        m_data{cnt, val}\n    {\n        set_parents();\n        assert_invariant();\n    }\n\n    /// @brief construct a JSON container given an iterator range\n    /// @sa https://json.nlohmann.me/api/basic_json/basic_json/\n    template < class InputIT, typename std::enable_if <\n                   std::is_same<InputIT, typename basic_json_t::iterator>::value ||\n                   std::is_same<InputIT, typename basic_json_t::const_iterator>::value, int >::type = 0 >\n    basic_json(InputIT first, InputIT last)\n    {\n        JSON_ASSERT(first.m_object != nullptr);\n        JSON_ASSERT(last.m_object != nullptr);\n\n        // make sure iterator fits the current value\n        if (JSON_HEDLEY_UNLIKELY(first.m_object != last.m_object))\n        {\n            JSON_THROW(invalid_iterator::create(201, \"iterators are not compatible\", nullptr));\n        }\n\n        // copy type from first iterator\n        m_data.m_type = first.m_object->m_data.m_type;\n\n        // check if iterator range is complete for primitive values\n        switch (m_data.m_type)\n        {\n            case value_t::boolean:\n            case value_t::number_float:\n            case value_t::number_integer:\n            case value_t::number_unsigned:\n            case value_t::string:\n            {\n                if (JSON_HEDLEY_UNLIKELY(!first.m_it.primitive_iterator.is_begin()\n                                         || !last.m_it.primitive_iterator.is_end()))\n                {\n                    JSON_THROW(invalid_iterator::create(204, \"iterators out of range\", first.m_object));\n                }\n                break;\n            }\n\n            case value_t::null:\n            case value_t::object:\n            case value_t::array:\n            case value_t::binary:\n            case value_t::discarded:\n            default:\n                break;\n        }\n\n        switch (m_data.m_type)\n        {\n            case value_t::number_integer:\n            {\n                m_data.m_value.number_integer = first.m_object->m_data.m_value.number_integer;\n                break;\n            }\n\n            case value_t::number_unsigned:\n            {\n                m_data.m_value.number_unsigned = first.m_object->m_data.m_value.number_unsigned;\n                break;\n            }\n\n            case value_t::number_float:\n            {\n                m_data.m_value.number_float = first.m_object->m_data.m_value.number_float;\n                break;\n            }\n\n            case value_t::boolean:\n            {\n                m_data.m_value.boolean = first.m_object->m_data.m_value.boolean;\n                break;\n            }\n\n            case value_t::string:\n            {\n                m_data.m_value = *first.m_object->m_data.m_value.string;\n                break;\n            }\n\n            case value_t::object:\n            {\n                m_data.m_value.object = create<object_t>(first.m_it.object_iterator,\n                                        last.m_it.object_iterator);\n                break;\n            }\n\n            case value_t::array:\n            {\n                m_data.m_value.array = create<array_t>(first.m_it.array_iterator,\n                                                       last.m_it.array_iterator);\n                break;\n            }\n\n            case value_t::binary:\n            {\n                m_data.m_value = *first.m_object->m_data.m_value.binary;\n                break;\n            }\n\n            case value_t::null:\n            case value_t::discarded:\n            default:\n                JSON_THROW(invalid_iterator::create(206, detail::concat(\"cannot construct with iterators from \", first.m_object->type_name()), first.m_object));\n        }\n\n        set_parents();\n        assert_invariant();\n    }\n\n    ///////////////////////////////////////\n    // other constructors and destructor //\n    ///////////////////////////////////////\n\n    template<typename JsonRef,\n             detail::enable_if_t<detail::conjunction<detail::is_json_ref<JsonRef>,\n                                 std::is_same<typename JsonRef::value_type, basic_json>>::value, int> = 0 >\n    basic_json(const JsonRef& ref) : basic_json(ref.moved_or_copied()) {}\n\n    /// @brief copy constructor\n    /// @sa https://json.nlohmann.me/api/basic_json/basic_json/\n    basic_json(const basic_json& other)\n        : json_base_class_t(other)\n    {\n        m_data.m_type = other.m_data.m_type;\n        // check of passed value is valid\n        other.assert_invariant();\n\n        switch (m_data.m_type)\n        {\n            case value_t::object:\n            {\n                m_data.m_value = *other.m_data.m_value.object;\n                break;\n            }\n\n            case value_t::array:\n            {\n                m_data.m_value = *other.m_data.m_value.array;\n                break;\n            }\n\n            case value_t::string:\n            {\n                m_data.m_value = *other.m_data.m_value.string;\n                break;\n            }\n\n            case value_t::boolean:\n            {\n                m_data.m_value = other.m_data.m_value.boolean;\n                break;\n            }\n\n            case value_t::number_integer:\n            {\n                m_data.m_value = other.m_data.m_value.number_integer;\n                break;\n            }\n\n            case value_t::number_unsigned:\n            {\n                m_data.m_value = other.m_data.m_value.number_unsigned;\n                break;\n            }\n\n            case value_t::number_float:\n            {\n                m_data.m_value = other.m_data.m_value.number_float;\n                break;\n            }\n\n            case value_t::binary:\n            {\n                m_data.m_value = *other.m_data.m_value.binary;\n                break;\n            }\n\n            case value_t::null:\n            case value_t::discarded:\n            default:\n                break;\n        }\n\n        set_parents();\n        assert_invariant();\n    }\n\n    /// @brief move constructor\n    /// @sa https://json.nlohmann.me/api/basic_json/basic_json/\n    basic_json(basic_json&& other) noexcept\n        : json_base_class_t(std::forward<json_base_class_t>(other)),\n          m_data(std::move(other.m_data))\n    {\n        // check that passed value is valid\n        other.assert_invariant(false);\n\n        // invalidate payload\n        other.m_data.m_type = value_t::null;\n        other.m_data.m_value = {};\n\n        set_parents();\n        assert_invariant();\n    }\n\n    /// @brief copy assignment\n    /// @sa https://json.nlohmann.me/api/basic_json/operator=/\n    basic_json& operator=(basic_json other) noexcept (\n        std::is_nothrow_move_constructible<value_t>::value&&\n        std::is_nothrow_move_assignable<value_t>::value&&\n        std::is_nothrow_move_constructible<json_value>::value&&\n        std::is_nothrow_move_assignable<json_value>::value&&\n        std::is_nothrow_move_assignable<json_base_class_t>::value\n    )\n    {\n        // check that passed value is valid\n        other.assert_invariant();\n\n        using std::swap;\n        swap(m_data.m_type, other.m_data.m_type);\n        swap(m_data.m_value, other.m_data.m_value);\n        json_base_class_t::operator=(std::move(other));\n\n        set_parents();\n        assert_invariant();\n        return *this;\n    }\n\n    /// @brief destructor\n    /// @sa https://json.nlohmann.me/api/basic_json/~basic_json/\n    ~basic_json() noexcept\n    {\n        assert_invariant(false);\n    }\n\n    /// @}\n\n  public:\n    ///////////////////////\n    // object inspection //\n    ///////////////////////\n\n    /// @name object inspection\n    /// Functions to inspect the type of a JSON value.\n    /// @{\n\n    /// @brief serialization\n    /// @sa https://json.nlohmann.me/api/basic_json/dump/\n    string_t dump(const int indent = -1,\n                  const char indent_char = ' ',\n                  const bool ensure_ascii = false,\n                  const error_handler_t error_handler = error_handler_t::strict) const\n    {\n        string_t result;\n        serializer s(detail::output_adapter<char, string_t>(result), indent_char, error_handler);\n\n        if (indent >= 0)\n        {\n            s.dump(*this, true, ensure_ascii, static_cast<unsigned int>(indent));\n        }\n        else\n        {\n            s.dump(*this, false, ensure_ascii, 0);\n        }\n\n        return result;\n    }\n\n    /// @brief return the type of the JSON value (explicit)\n    /// @sa https://json.nlohmann.me/api/basic_json/type/\n    constexpr value_t type() const noexcept\n    {\n        return m_data.m_type;\n    }\n\n    /// @brief return whether type is primitive\n    /// @sa https://json.nlohmann.me/api/basic_json/is_primitive/\n    constexpr bool is_primitive() const noexcept\n    {\n        return is_null() || is_string() || is_boolean() || is_number() || is_binary();\n    }\n\n    /// @brief return whether type is structured\n    /// @sa https://json.nlohmann.me/api/basic_json/is_structured/\n    constexpr bool is_structured() const noexcept\n    {\n        return is_array() || is_object();\n    }\n\n    /// @brief return whether value is null\n    /// @sa https://json.nlohmann.me/api/basic_json/is_null/\n    constexpr bool is_null() const noexcept\n    {\n        return m_data.m_type == value_t::null;\n    }\n\n    /// @brief return whether value is a boolean\n    /// @sa https://json.nlohmann.me/api/basic_json/is_boolean/\n    constexpr bool is_boolean() const noexcept\n    {\n        return m_data.m_type == value_t::boolean;\n    }\n\n    /// @brief return whether value is a number\n    /// @sa https://json.nlohmann.me/api/basic_json/is_number/\n    constexpr bool is_number() const noexcept\n    {\n        return is_number_integer() || is_number_float();\n    }\n\n    /// @brief return whether value is an integer number\n    /// @sa https://json.nlohmann.me/api/basic_json/is_number_integer/\n    constexpr bool is_number_integer() const noexcept\n    {\n        return m_data.m_type == value_t::number_integer || m_data.m_type == value_t::number_unsigned;\n    }\n\n    /// @brief return whether value is an unsigned integer number\n    /// @sa https://json.nlohmann.me/api/basic_json/is_number_unsigned/\n    constexpr bool is_number_unsigned() const noexcept\n    {\n        return m_data.m_type == value_t::number_unsigned;\n    }\n\n    /// @brief return whether value is a floating-point number\n    /// @sa https://json.nlohmann.me/api/basic_json/is_number_float/\n    constexpr bool is_number_float() const noexcept\n    {\n        return m_data.m_type == value_t::number_float;\n    }\n\n    /// @brief return whether value is an object\n    /// @sa https://json.nlohmann.me/api/basic_json/is_object/\n    constexpr bool is_object() const noexcept\n    {\n        return m_data.m_type == value_t::object;\n    }\n\n    /// @brief return whether value is an array\n    /// @sa https://json.nlohmann.me/api/basic_json/is_array/\n    constexpr bool is_array() const noexcept\n    {\n        return m_data.m_type == value_t::array;\n    }\n\n    /// @brief return whether value is a string\n    /// @sa https://json.nlohmann.me/api/basic_json/is_string/\n    constexpr bool is_string() const noexcept\n    {\n        return m_data.m_type == value_t::string;\n    }\n\n    /// @brief return whether value is a binary array\n    /// @sa https://json.nlohmann.me/api/basic_json/is_binary/\n    constexpr bool is_binary() const noexcept\n    {\n        return m_data.m_type == value_t::binary;\n    }\n\n    /// @brief return whether value is discarded\n    /// @sa https://json.nlohmann.me/api/basic_json/is_discarded/\n    constexpr bool is_discarded() const noexcept\n    {\n        return m_data.m_type == value_t::discarded;\n    }\n\n    /// @brief return the type of the JSON value (implicit)\n    /// @sa https://json.nlohmann.me/api/basic_json/operator_value_t/\n    constexpr operator value_t() const noexcept\n    {\n        return m_data.m_type;\n    }\n\n    /// @}\n\n  private:\n    //////////////////\n    // value access //\n    //////////////////\n\n    /// get a boolean (explicit)\n    boolean_t get_impl(boolean_t* /*unused*/) const\n    {\n        if (JSON_HEDLEY_LIKELY(is_boolean()))\n        {\n            return m_data.m_value.boolean;\n        }\n\n        JSON_THROW(type_error::create(302, detail::concat(\"type must be boolean, but is \", type_name()), this));\n    }\n\n    /// get a pointer to the value (object)\n    object_t* get_impl_ptr(object_t* /*unused*/) noexcept\n    {\n        return is_object() ? m_data.m_value.object : nullptr;\n    }\n\n    /// get a pointer to the value (object)\n    constexpr const object_t* get_impl_ptr(const object_t* /*unused*/) const noexcept\n    {\n        return is_object() ? m_data.m_value.object : nullptr;\n    }\n\n    /// get a pointer to the value (array)\n    array_t* get_impl_ptr(array_t* /*unused*/) noexcept\n    {\n        return is_array() ? m_data.m_value.array : nullptr;\n    }\n\n    /// get a pointer to the value (array)\n    constexpr const array_t* get_impl_ptr(const array_t* /*unused*/) const noexcept\n    {\n        return is_array() ? m_data.m_value.array : nullptr;\n    }\n\n    /// get a pointer to the value (string)\n    string_t* get_impl_ptr(string_t* /*unused*/) noexcept\n    {\n        return is_string() ? m_data.m_value.string : nullptr;\n    }\n\n    /// get a pointer to the value (string)\n    constexpr const string_t* get_impl_ptr(const string_t* /*unused*/) const noexcept\n    {\n        return is_string() ? m_data.m_value.string : nullptr;\n    }\n\n    /// get a pointer to the value (boolean)\n    boolean_t* get_impl_ptr(boolean_t* /*unused*/) noexcept\n    {\n        return is_boolean() ? &m_data.m_value.boolean : nullptr;\n    }\n\n    /// get a pointer to the value (boolean)\n    constexpr const boolean_t* get_impl_ptr(const boolean_t* /*unused*/) const noexcept\n    {\n        return is_boolean() ? &m_data.m_value.boolean : nullptr;\n    }\n\n    /// get a pointer to the value (integer number)\n    number_integer_t* get_impl_ptr(number_integer_t* /*unused*/) noexcept\n    {\n        return is_number_integer() ? &m_data.m_value.number_integer : nullptr;\n    }\n\n    /// get a pointer to the value (integer number)\n    constexpr const number_integer_t* get_impl_ptr(const number_integer_t* /*unused*/) const noexcept\n    {\n        return is_number_integer() ? &m_data.m_value.number_integer : nullptr;\n    }\n\n    /// get a pointer to the value (unsigned number)\n    number_unsigned_t* get_impl_ptr(number_unsigned_t* /*unused*/) noexcept\n    {\n        return is_number_unsigned() ? &m_data.m_value.number_unsigned : nullptr;\n    }\n\n    /// get a pointer to the value (unsigned number)\n    constexpr const number_unsigned_t* get_impl_ptr(const number_unsigned_t* /*unused*/) const noexcept\n    {\n        return is_number_unsigned() ? &m_data.m_value.number_unsigned : nullptr;\n    }\n\n    /// get a pointer to the value (floating-point number)\n    number_float_t* get_impl_ptr(number_float_t* /*unused*/) noexcept\n    {\n        return is_number_float() ? &m_data.m_value.number_float : nullptr;\n    }\n\n    /// get a pointer to the value (floating-point number)\n    constexpr const number_float_t* get_impl_ptr(const number_float_t* /*unused*/) const noexcept\n    {\n        return is_number_float() ? &m_data.m_value.number_float : nullptr;\n    }\n\n    /// get a pointer to the value (binary)\n    binary_t* get_impl_ptr(binary_t* /*unused*/) noexcept\n    {\n        return is_binary() ? m_data.m_value.binary : nullptr;\n    }\n\n    /// get a pointer to the value (binary)\n    constexpr const binary_t* get_impl_ptr(const binary_t* /*unused*/) const noexcept\n    {\n        return is_binary() ? m_data.m_value.binary : nullptr;\n    }\n\n    /*!\n    @brief helper function to implement get_ref()\n\n    This function helps to implement get_ref() without code duplication for\n    const and non-const overloads\n\n    @tparam ThisType will be deduced as `basic_json` or `const basic_json`\n\n    @throw type_error.303 if ReferenceType does not match underlying value\n    type of the current JSON\n    */\n    template<typename ReferenceType, typename ThisType>\n    static ReferenceType get_ref_impl(ThisType& obj)\n    {\n        // delegate the call to get_ptr<>()\n        auto* ptr = obj.template get_ptr<typename std::add_pointer<ReferenceType>::type>();\n\n        if (JSON_HEDLEY_LIKELY(ptr != nullptr))\n        {\n            return *ptr;\n        }\n\n        JSON_THROW(type_error::create(303, detail::concat(\"incompatible ReferenceType for get_ref, actual type is \", obj.type_name()), &obj));\n    }\n\n  public:\n    /// @name value access\n    /// Direct access to the stored value of a JSON value.\n    /// @{\n\n    /// @brief get a pointer value (implicit)\n    /// @sa https://json.nlohmann.me/api/basic_json/get_ptr/\n    template<typename PointerType, typename std::enable_if<\n                 std::is_pointer<PointerType>::value, int>::type = 0>\n    auto get_ptr() noexcept -> decltype(std::declval<basic_json_t&>().get_impl_ptr(std::declval<PointerType>()))\n    {\n        // delegate the call to get_impl_ptr<>()\n        return get_impl_ptr(static_cast<PointerType>(nullptr));\n    }\n\n    /// @brief get a pointer value (implicit)\n    /// @sa https://json.nlohmann.me/api/basic_json/get_ptr/\n    template < typename PointerType, typename std::enable_if <\n                   std::is_pointer<PointerType>::value&&\n                   std::is_const<typename std::remove_pointer<PointerType>::type>::value, int >::type = 0 >\n    constexpr auto get_ptr() const noexcept -> decltype(std::declval<const basic_json_t&>().get_impl_ptr(std::declval<PointerType>()))\n    {\n        // delegate the call to get_impl_ptr<>() const\n        return get_impl_ptr(static_cast<PointerType>(nullptr));\n    }\n\n  private:\n    /*!\n    @brief get a value (explicit)\n\n    Explicit type conversion between the JSON value and a compatible value\n    which is [CopyConstructible](https://en.cppreference.com/w/cpp/named_req/CopyConstructible)\n    and [DefaultConstructible](https://en.cppreference.com/w/cpp/named_req/DefaultConstructible).\n    The value is converted by calling the @ref json_serializer<ValueType>\n    `from_json()` method.\n\n    The function is equivalent to executing\n    @code {.cpp}\n    ValueType ret;\n    JSONSerializer<ValueType>::from_json(*this, ret);\n    return ret;\n    @endcode\n\n    This overloads is chosen if:\n    - @a ValueType is not @ref basic_json,\n    - @ref json_serializer<ValueType> has a `from_json()` method of the form\n      `void from_json(const basic_json&, ValueType&)`, and\n    - @ref json_serializer<ValueType> does not have a `from_json()` method of\n      the form `ValueType from_json(const basic_json&)`\n\n    @tparam ValueType the returned value type\n\n    @return copy of the JSON value, converted to @a ValueType\n\n    @throw what @ref json_serializer<ValueType> `from_json()` method throws\n\n    @liveexample{The example below shows several conversions from JSON values\n    to other types. There a few things to note: (1) Floating-point numbers can\n    be converted to integers\\, (2) A JSON array can be converted to a standard\n    `std::vector<short>`\\, (3) A JSON object can be converted to C++\n    associative containers such as `std::unordered_map<std::string\\,\n    json>`.,get__ValueType_const}\n\n    @since version 2.1.0\n    */\n    template < typename ValueType,\n               detail::enable_if_t <\n                   detail::is_default_constructible<ValueType>::value&&\n                   detail::has_from_json<basic_json_t, ValueType>::value,\n                   int > = 0 >\n    ValueType get_impl(detail::priority_tag<0> /*unused*/) const noexcept(noexcept(\n                JSONSerializer<ValueType>::from_json(std::declval<const basic_json_t&>(), std::declval<ValueType&>())))\n    {\n        auto ret = ValueType();\n        JSONSerializer<ValueType>::from_json(*this, ret);\n        return ret;\n    }\n\n    /*!\n    @brief get a value (explicit); special case\n\n    Explicit type conversion between the JSON value and a compatible value\n    which is **not** [CopyConstructible](https://en.cppreference.com/w/cpp/named_req/CopyConstructible)\n    and **not** [DefaultConstructible](https://en.cppreference.com/w/cpp/named_req/DefaultConstructible).\n    The value is converted by calling the @ref json_serializer<ValueType>\n    `from_json()` method.\n\n    The function is equivalent to executing\n    @code {.cpp}\n    return JSONSerializer<ValueType>::from_json(*this);\n    @endcode\n\n    This overloads is chosen if:\n    - @a ValueType is not @ref basic_json and\n    - @ref json_serializer<ValueType> has a `from_json()` method of the form\n      `ValueType from_json(const basic_json&)`\n\n    @note If @ref json_serializer<ValueType> has both overloads of\n    `from_json()`, this one is chosen.\n\n    @tparam ValueType the returned value type\n\n    @return copy of the JSON value, converted to @a ValueType\n\n    @throw what @ref json_serializer<ValueType> `from_json()` method throws\n\n    @since version 2.1.0\n    */\n    template < typename ValueType,\n               detail::enable_if_t <\n                   detail::has_non_default_from_json<basic_json_t, ValueType>::value,\n                   int > = 0 >\n    ValueType get_impl(detail::priority_tag<1> /*unused*/) const noexcept(noexcept(\n                JSONSerializer<ValueType>::from_json(std::declval<const basic_json_t&>())))\n    {\n        return JSONSerializer<ValueType>::from_json(*this);\n    }\n\n    /*!\n    @brief get special-case overload\n\n    This overloads converts the current @ref basic_json in a different\n    @ref basic_json type\n\n    @tparam BasicJsonType == @ref basic_json\n\n    @return a copy of *this, converted into @a BasicJsonType\n\n    @complexity Depending on the implementation of the called `from_json()`\n                method.\n\n    @since version 3.2.0\n    */\n    template < typename BasicJsonType,\n               detail::enable_if_t <\n                   detail::is_basic_json<BasicJsonType>::value,\n                   int > = 0 >\n    BasicJsonType get_impl(detail::priority_tag<2> /*unused*/) const\n    {\n        return *this;\n    }\n\n    /*!\n    @brief get special-case overload\n\n    This overloads avoids a lot of template boilerplate, it can be seen as the\n    identity method\n\n    @tparam BasicJsonType == @ref basic_json\n\n    @return a copy of *this\n\n    @complexity Constant.\n\n    @since version 2.1.0\n    */\n    template<typename BasicJsonType,\n             detail::enable_if_t<\n                 std::is_same<BasicJsonType, basic_json_t>::value,\n                 int> = 0>\n    basic_json get_impl(detail::priority_tag<3> /*unused*/) const\n    {\n        return *this;\n    }\n\n    /*!\n    @brief get a pointer value (explicit)\n    @copydoc get()\n    */\n    template<typename PointerType,\n             detail::enable_if_t<\n                 std::is_pointer<PointerType>::value,\n                 int> = 0>\n    constexpr auto get_impl(detail::priority_tag<4> /*unused*/) const noexcept\n    -> decltype(std::declval<const basic_json_t&>().template get_ptr<PointerType>())\n    {\n        // delegate the call to get_ptr\n        return get_ptr<PointerType>();\n    }\n\n  public:\n    /*!\n    @brief get a (pointer) value (explicit)\n\n    Performs explicit type conversion between the JSON value and a compatible value if required.\n\n    - If the requested type is a pointer to the internally stored JSON value that pointer is returned.\n    No copies are made.\n\n    - If the requested type is the current @ref basic_json, or a different @ref basic_json convertible\n    from the current @ref basic_json.\n\n    - Otherwise the value is converted by calling the @ref json_serializer<ValueType> `from_json()`\n    method.\n\n    @tparam ValueTypeCV the provided value type\n    @tparam ValueType the returned value type\n\n    @return copy of the JSON value, converted to @tparam ValueType if necessary\n\n    @throw what @ref json_serializer<ValueType> `from_json()` method throws if conversion is required\n\n    @since version 2.1.0\n    */\n    template < typename ValueTypeCV, typename ValueType = detail::uncvref_t<ValueTypeCV>>\n#if defined(JSON_HAS_CPP_14)\n    constexpr\n#endif\n    auto get() const noexcept(\n    noexcept(std::declval<const basic_json_t&>().template get_impl<ValueType>(detail::priority_tag<4> {})))\n    -> decltype(std::declval<const basic_json_t&>().template get_impl<ValueType>(detail::priority_tag<4> {}))\n    {\n        // we cannot static_assert on ValueTypeCV being non-const, because\n        // there is support for get<const basic_json_t>(), which is why we\n        // still need the uncvref\n        static_assert(!std::is_reference<ValueTypeCV>::value,\n                      \"get() cannot be used with reference types, you might want to use get_ref()\");\n        return get_impl<ValueType>(detail::priority_tag<4> {});\n    }\n\n    /*!\n    @brief get a pointer value (explicit)\n\n    Explicit pointer access to the internally stored JSON value. No copies are\n    made.\n\n    @warning The pointer becomes invalid if the underlying JSON object\n    changes.\n\n    @tparam PointerType pointer type; must be a pointer to @ref array_t, @ref\n    object_t, @ref string_t, @ref boolean_t, @ref number_integer_t,\n    @ref number_unsigned_t, or @ref number_float_t.\n\n    @return pointer to the internally stored JSON value if the requested\n    pointer type @a PointerType fits to the JSON value; `nullptr` otherwise\n\n    @complexity Constant.\n\n    @liveexample{The example below shows how pointers to internal values of a\n    JSON value can be requested. Note that no type conversions are made and a\n    `nullptr` is returned if the value and the requested pointer type does not\n    match.,get__PointerType}\n\n    @sa see @ref get_ptr() for explicit pointer-member access\n\n    @since version 1.0.0\n    */\n    template<typename PointerType, typename std::enable_if<\n                 std::is_pointer<PointerType>::value, int>::type = 0>\n    auto get() noexcept -> decltype(std::declval<basic_json_t&>().template get_ptr<PointerType>())\n    {\n        // delegate the call to get_ptr\n        return get_ptr<PointerType>();\n    }\n\n    /// @brief get a value (explicit)\n    /// @sa https://json.nlohmann.me/api/basic_json/get_to/\n    template < typename ValueType,\n               detail::enable_if_t <\n                   !detail::is_basic_json<ValueType>::value&&\n                   detail::has_from_json<basic_json_t, ValueType>::value,\n                   int > = 0 >\n    ValueType & get_to(ValueType& v) const noexcept(noexcept(\n                JSONSerializer<ValueType>::from_json(std::declval<const basic_json_t&>(), v)))\n    {\n        JSONSerializer<ValueType>::from_json(*this, v);\n        return v;\n    }\n\n    // specialization to allow calling get_to with a basic_json value\n    // see https://github.com/nlohmann/json/issues/2175\n    template<typename ValueType,\n             detail::enable_if_t <\n                 detail::is_basic_json<ValueType>::value,\n                 int> = 0>\n    ValueType & get_to(ValueType& v) const\n    {\n        v = *this;\n        return v;\n    }\n\n    template <\n        typename T, std::size_t N,\n        typename Array = T (&)[N], // NOLINT(cppcoreguidelines-avoid-c-arrays,hicpp-avoid-c-arrays,modernize-avoid-c-arrays)\n        detail::enable_if_t <\n            detail::has_from_json<basic_json_t, Array>::value, int > = 0 >\n    Array get_to(T (&v)[N]) const // NOLINT(cppcoreguidelines-avoid-c-arrays,hicpp-avoid-c-arrays,modernize-avoid-c-arrays)\n    noexcept(noexcept(JSONSerializer<Array>::from_json(\n                          std::declval<const basic_json_t&>(), v)))\n    {\n        JSONSerializer<Array>::from_json(*this, v);\n        return v;\n    }\n\n    /// @brief get a reference value (implicit)\n    /// @sa https://json.nlohmann.me/api/basic_json/get_ref/\n    template<typename ReferenceType, typename std::enable_if<\n                 std::is_reference<ReferenceType>::value, int>::type = 0>\n    ReferenceType get_ref()\n    {\n        // delegate call to get_ref_impl\n        return get_ref_impl<ReferenceType>(*this);\n    }\n\n    /// @brief get a reference value (implicit)\n    /// @sa https://json.nlohmann.me/api/basic_json/get_ref/\n    template < typename ReferenceType, typename std::enable_if <\n                   std::is_reference<ReferenceType>::value&&\n                   std::is_const<typename std::remove_reference<ReferenceType>::type>::value, int >::type = 0 >\n    ReferenceType get_ref() const\n    {\n        // delegate call to get_ref_impl\n        return get_ref_impl<ReferenceType>(*this);\n    }\n\n    /*!\n    @brief get a value (implicit)\n\n    Implicit type conversion between the JSON value and a compatible value.\n    The call is realized by calling @ref get() const.\n\n    @tparam ValueType non-pointer type compatible to the JSON value, for\n    instance `int` for JSON integer numbers, `bool` for JSON booleans, or\n    `std::vector` types for JSON arrays. The character type of @ref string_t\n    as well as an initializer list of this type is excluded to avoid\n    ambiguities as these types implicitly convert to `std::string`.\n\n    @return copy of the JSON value, converted to type @a ValueType\n\n    @throw type_error.302 in case passed type @a ValueType is incompatible\n    to the JSON value type (e.g., the JSON value is of type boolean, but a\n    string is requested); see example below\n\n    @complexity Linear in the size of the JSON value.\n\n    @liveexample{The example below shows several conversions from JSON values\n    to other types. There a few things to note: (1) Floating-point numbers can\n    be converted to integers\\, (2) A JSON array can be converted to a standard\n    `std::vector<short>`\\, (3) A JSON object can be converted to C++\n    associative containers such as `std::unordered_map<std::string\\,\n    json>`.,operator__ValueType}\n\n    @since version 1.0.0\n    */\n    template < typename ValueType, typename std::enable_if <\n                   detail::conjunction <\n                       detail::negation<std::is_pointer<ValueType>>,\n                       detail::negation<std::is_same<ValueType, std::nullptr_t>>,\n                       detail::negation<std::is_same<ValueType, detail::json_ref<basic_json>>>,\n                                        detail::negation<std::is_same<ValueType, typename string_t::value_type>>,\n                                        detail::negation<detail::is_basic_json<ValueType>>,\n                                        detail::negation<std::is_same<ValueType, std::initializer_list<typename string_t::value_type>>>,\n#if defined(JSON_HAS_CPP_17) && (defined(__GNUC__) || (defined(_MSC_VER) && _MSC_VER >= 1910 && _MSC_VER <= 1914))\n                                                detail::negation<std::is_same<ValueType, std::string_view>>,\n#endif\n#if defined(JSON_HAS_CPP_17) && JSON_HAS_STATIC_RTTI\n                                                detail::negation<std::is_same<ValueType, std::any>>,\n#endif\n                                                detail::is_detected_lazy<detail::get_template_function, const basic_json_t&, ValueType>\n                                                >::value, int >::type = 0 >\n                                        JSON_EXPLICIT operator ValueType() const\n    {\n        // delegate the call to get<>() const\n        return get<ValueType>();\n    }\n\n    /// @brief get a binary value\n    /// @sa https://json.nlohmann.me/api/basic_json/get_binary/\n    binary_t& get_binary()\n    {\n        if (!is_binary())\n        {\n            JSON_THROW(type_error::create(302, detail::concat(\"type must be binary, but is \", type_name()), this));\n        }\n\n        return *get_ptr<binary_t*>();\n    }\n\n    /// @brief get a binary value\n    /// @sa https://json.nlohmann.me/api/basic_json/get_binary/\n    const binary_t& get_binary() const\n    {\n        if (!is_binary())\n        {\n            JSON_THROW(type_error::create(302, detail::concat(\"type must be binary, but is \", type_name()), this));\n        }\n\n        return *get_ptr<const binary_t*>();\n    }\n\n    /// @}\n\n    ////////////////////\n    // element access //\n    ////////////////////\n\n    /// @name element access\n    /// Access to the JSON value.\n    /// @{\n\n    /// @brief access specified array element with bounds checking\n    /// @sa https://json.nlohmann.me/api/basic_json/at/\n    reference at(size_type idx)\n    {\n        // at only works for arrays\n        if (JSON_HEDLEY_LIKELY(is_array()))\n        {\n            JSON_TRY\n            {\n                return set_parent(m_data.m_value.array->at(idx));\n            }\n            JSON_CATCH (std::out_of_range&)\n            {\n                // create better exception explanation\n                JSON_THROW(out_of_range::create(401, detail::concat(\"array index \", std::to_string(idx), \" is out of range\"), this));\n            }\n        }\n        else\n        {\n            JSON_THROW(type_error::create(304, detail::concat(\"cannot use at() with \", type_name()), this));\n        }\n    }\n\n    /// @brief access specified array element with bounds checking\n    /// @sa https://json.nlohmann.me/api/basic_json/at/\n    const_reference at(size_type idx) const\n    {\n        // at only works for arrays\n        if (JSON_HEDLEY_LIKELY(is_array()))\n        {\n            JSON_TRY\n            {\n                return m_data.m_value.array->at(idx);\n            }\n            JSON_CATCH (std::out_of_range&)\n            {\n                // create better exception explanation\n                JSON_THROW(out_of_range::create(401, detail::concat(\"array index \", std::to_string(idx), \" is out of range\"), this));\n            }\n        }\n        else\n        {\n            JSON_THROW(type_error::create(304, detail::concat(\"cannot use at() with \", type_name()), this));\n        }\n    }\n\n    /// @brief access specified object element with bounds checking\n    /// @sa https://json.nlohmann.me/api/basic_json/at/\n    reference at(const typename object_t::key_type& key)\n    {\n        // at only works for objects\n        if (JSON_HEDLEY_UNLIKELY(!is_object()))\n        {\n            JSON_THROW(type_error::create(304, detail::concat(\"cannot use at() with \", type_name()), this));\n        }\n\n        auto it = m_data.m_value.object->find(key);\n        if (it == m_data.m_value.object->end())\n        {\n            JSON_THROW(out_of_range::create(403, detail::concat(\"key '\", key, \"' not found\"), this));\n        }\n        return set_parent(it->second);\n    }\n\n    /// @brief access specified object element with bounds checking\n    /// @sa https://json.nlohmann.me/api/basic_json/at/\n    template<class KeyType, detail::enable_if_t<\n                 detail::is_usable_as_basic_json_key_type<basic_json_t, KeyType>::value, int> = 0>\n    reference at(KeyType && key)\n    {\n        // at only works for objects\n        if (JSON_HEDLEY_UNLIKELY(!is_object()))\n        {\n            JSON_THROW(type_error::create(304, detail::concat(\"cannot use at() with \", type_name()), this));\n        }\n\n        auto it = m_data.m_value.object->find(std::forward<KeyType>(key));\n        if (it == m_data.m_value.object->end())\n        {\n            JSON_THROW(out_of_range::create(403, detail::concat(\"key '\", string_t(std::forward<KeyType>(key)), \"' not found\"), this));\n        }\n        return set_parent(it->second);\n    }\n\n    /// @brief access specified object element with bounds checking\n    /// @sa https://json.nlohmann.me/api/basic_json/at/\n    const_reference at(const typename object_t::key_type& key) const\n    {\n        // at only works for objects\n        if (JSON_HEDLEY_UNLIKELY(!is_object()))\n        {\n            JSON_THROW(type_error::create(304, detail::concat(\"cannot use at() with \", type_name()), this));\n        }\n\n        auto it = m_data.m_value.object->find(key);\n        if (it == m_data.m_value.object->end())\n        {\n            JSON_THROW(out_of_range::create(403, detail::concat(\"key '\", key, \"' not found\"), this));\n        }\n        return it->second;\n    }\n\n    /// @brief access specified object element with bounds checking\n    /// @sa https://json.nlohmann.me/api/basic_json/at/\n    template<class KeyType, detail::enable_if_t<\n                 detail::is_usable_as_basic_json_key_type<basic_json_t, KeyType>::value, int> = 0>\n    const_reference at(KeyType && key) const\n    {\n        // at only works for objects\n        if (JSON_HEDLEY_UNLIKELY(!is_object()))\n        {\n            JSON_THROW(type_error::create(304, detail::concat(\"cannot use at() with \", type_name()), this));\n        }\n\n        auto it = m_data.m_value.object->find(std::forward<KeyType>(key));\n        if (it == m_data.m_value.object->end())\n        {\n            JSON_THROW(out_of_range::create(403, detail::concat(\"key '\", string_t(std::forward<KeyType>(key)), \"' not found\"), this));\n        }\n        return it->second;\n    }\n\n    /// @brief access specified array element\n    /// @sa https://json.nlohmann.me/api/basic_json/operator%5B%5D/\n    reference operator[](size_type idx)\n    {\n        // implicitly convert null value to an empty array\n        if (is_null())\n        {\n            m_data.m_type = value_t::array;\n            m_data.m_value.array = create<array_t>();\n            assert_invariant();\n        }\n\n        // operator[] only works for arrays\n        if (JSON_HEDLEY_LIKELY(is_array()))\n        {\n            // fill up array with null values if given idx is outside range\n            if (idx >= m_data.m_value.array->size())\n            {\n#if JSON_DIAGNOSTICS\n                // remember array size & capacity before resizing\n                const auto old_size = m_data.m_value.array->size();\n                const auto old_capacity = m_data.m_value.array->capacity();\n#endif\n                m_data.m_value.array->resize(idx + 1);\n\n#if JSON_DIAGNOSTICS\n                if (JSON_HEDLEY_UNLIKELY(m_data.m_value.array->capacity() != old_capacity))\n                {\n                    // capacity has changed: update all parents\n                    set_parents();\n                }\n                else\n                {\n                    // set parent for values added above\n                    set_parents(begin() + static_cast<typename iterator::difference_type>(old_size), static_cast<typename iterator::difference_type>(idx + 1 - old_size));\n                }\n#endif\n                assert_invariant();\n            }\n\n            return m_data.m_value.array->operator[](idx);\n        }\n\n        JSON_THROW(type_error::create(305, detail::concat(\"cannot use operator[] with a numeric argument with \", type_name()), this));\n    }\n\n    /// @brief access specified array element\n    /// @sa https://json.nlohmann.me/api/basic_json/operator%5B%5D/\n    const_reference operator[](size_type idx) const\n    {\n        // const operator[] only works for arrays\n        if (JSON_HEDLEY_LIKELY(is_array()))\n        {\n            return m_data.m_value.array->operator[](idx);\n        }\n\n        JSON_THROW(type_error::create(305, detail::concat(\"cannot use operator[] with a numeric argument with \", type_name()), this));\n    }\n\n    /// @brief access specified object element\n    /// @sa https://json.nlohmann.me/api/basic_json/operator%5B%5D/\n    reference operator[](typename object_t::key_type key)\n    {\n        // implicitly convert null value to an empty object\n        if (is_null())\n        {\n            m_data.m_type = value_t::object;\n            m_data.m_value.object = create<object_t>();\n            assert_invariant();\n        }\n\n        // operator[] only works for objects\n        if (JSON_HEDLEY_LIKELY(is_object()))\n        {\n            auto result = m_data.m_value.object->emplace(std::move(key), nullptr);\n            return set_parent(result.first->second);\n        }\n\n        JSON_THROW(type_error::create(305, detail::concat(\"cannot use operator[] with a string argument with \", type_name()), this));\n    }\n\n    /// @brief access specified object element\n    /// @sa https://json.nlohmann.me/api/basic_json/operator%5B%5D/\n    const_reference operator[](const typename object_t::key_type& key) const\n    {\n        // const operator[] only works for objects\n        if (JSON_HEDLEY_LIKELY(is_object()))\n        {\n            auto it = m_data.m_value.object->find(key);\n            JSON_ASSERT(it != m_data.m_value.object->end());\n            return it->second;\n        }\n\n        JSON_THROW(type_error::create(305, detail::concat(\"cannot use operator[] with a string argument with \", type_name()), this));\n    }\n\n    // these two functions resolve a (const) char * ambiguity affecting Clang and MSVC\n    // (they seemingly cannot be constrained to resolve the ambiguity)\n    template<typename T>\n    reference operator[](T* key)\n    {\n        return operator[](typename object_t::key_type(key));\n    }\n\n    template<typename T>\n    const_reference operator[](T* key) const\n    {\n        return operator[](typename object_t::key_type(key));\n    }\n\n    /// @brief access specified object element\n    /// @sa https://json.nlohmann.me/api/basic_json/operator%5B%5D/\n    template<class KeyType, detail::enable_if_t<\n                 detail::is_usable_as_basic_json_key_type<basic_json_t, KeyType>::value, int > = 0 >\n    reference operator[](KeyType && key)\n    {\n        // implicitly convert null value to an empty object\n        if (is_null())\n        {\n            m_data.m_type = value_t::object;\n            m_data.m_value.object = create<object_t>();\n            assert_invariant();\n        }\n\n        // operator[] only works for objects\n        if (JSON_HEDLEY_LIKELY(is_object()))\n        {\n            auto result = m_data.m_value.object->emplace(std::forward<KeyType>(key), nullptr);\n            return set_parent(result.first->second);\n        }\n\n        JSON_THROW(type_error::create(305, detail::concat(\"cannot use operator[] with a string argument with \", type_name()), this));\n    }\n\n    /// @brief access specified object element\n    /// @sa https://json.nlohmann.me/api/basic_json/operator%5B%5D/\n    template<class KeyType, detail::enable_if_t<\n                 detail::is_usable_as_basic_json_key_type<basic_json_t, KeyType>::value, int > = 0 >\n    const_reference operator[](KeyType && key) const\n    {\n        // const operator[] only works for objects\n        if (JSON_HEDLEY_LIKELY(is_object()))\n        {\n            auto it = m_data.m_value.object->find(std::forward<KeyType>(key));\n            JSON_ASSERT(it != m_data.m_value.object->end());\n            return it->second;\n        }\n\n        JSON_THROW(type_error::create(305, detail::concat(\"cannot use operator[] with a string argument with \", type_name()), this));\n    }\n\n  private:\n    template<typename KeyType>\n    using is_comparable_with_object_key = detail::is_comparable <\n        object_comparator_t, const typename object_t::key_type&, KeyType >;\n\n    template<typename ValueType>\n    using value_return_type = std::conditional <\n        detail::is_c_string_uncvref<ValueType>::value,\n        string_t, typename std::decay<ValueType>::type >;\n\n  public:\n    /// @brief access specified object element with default value\n    /// @sa https://json.nlohmann.me/api/basic_json/value/\n    template < class ValueType, detail::enable_if_t <\n                   !detail::is_transparent<object_comparator_t>::value\n                   && detail::is_getable<basic_json_t, ValueType>::value\n                   && !std::is_same<value_t, detail::uncvref_t<ValueType>>::value, int > = 0 >\n    ValueType value(const typename object_t::key_type& key, const ValueType& default_value) const\n    {\n        // value only works for objects\n        if (JSON_HEDLEY_LIKELY(is_object()))\n        {\n            // if key is found, return value and given default value otherwise\n            const auto it = find(key);\n            if (it != end())\n            {\n                return it->template get<ValueType>();\n            }\n\n            return default_value;\n        }\n\n        JSON_THROW(type_error::create(306, detail::concat(\"cannot use value() with \", type_name()), this));\n    }\n\n    /// @brief access specified object element with default value\n    /// @sa https://json.nlohmann.me/api/basic_json/value/\n    template < class ValueType, class ReturnType = typename value_return_type<ValueType>::type,\n               detail::enable_if_t <\n                   !detail::is_transparent<object_comparator_t>::value\n                   && detail::is_getable<basic_json_t, ReturnType>::value\n                   && !std::is_same<value_t, detail::uncvref_t<ValueType>>::value, int > = 0 >\n    ReturnType value(const typename object_t::key_type& key, ValueType && default_value) const\n    {\n        // value only works for objects\n        if (JSON_HEDLEY_LIKELY(is_object()))\n        {\n            // if key is found, return value and given default value otherwise\n            const auto it = find(key);\n            if (it != end())\n            {\n                return it->template get<ReturnType>();\n            }\n\n            return std::forward<ValueType>(default_value);\n        }\n\n        JSON_THROW(type_error::create(306, detail::concat(\"cannot use value() with \", type_name()), this));\n    }\n\n    /// @brief access specified object element with default value\n    /// @sa https://json.nlohmann.me/api/basic_json/value/\n    template < class ValueType, class KeyType, detail::enable_if_t <\n                   detail::is_transparent<object_comparator_t>::value\n                   && !detail::is_json_pointer<KeyType>::value\n                   && is_comparable_with_object_key<KeyType>::value\n                   && detail::is_getable<basic_json_t, ValueType>::value\n                   && !std::is_same<value_t, detail::uncvref_t<ValueType>>::value, int > = 0 >\n    ValueType value(KeyType && key, const ValueType& default_value) const\n    {\n        // value only works for objects\n        if (JSON_HEDLEY_LIKELY(is_object()))\n        {\n            // if key is found, return value and given default value otherwise\n            const auto it = find(std::forward<KeyType>(key));\n            if (it != end())\n            {\n                return it->template get<ValueType>();\n            }\n\n            return default_value;\n        }\n\n        JSON_THROW(type_error::create(306, detail::concat(\"cannot use value() with \", type_name()), this));\n    }\n\n    /// @brief access specified object element via JSON Pointer with default value\n    /// @sa https://json.nlohmann.me/api/basic_json/value/\n    template < class ValueType, class KeyType, class ReturnType = typename value_return_type<ValueType>::type,\n               detail::enable_if_t <\n                   detail::is_transparent<object_comparator_t>::value\n                   && !detail::is_json_pointer<KeyType>::value\n                   && is_comparable_with_object_key<KeyType>::value\n                   && detail::is_getable<basic_json_t, ReturnType>::value\n                   && !std::is_same<value_t, detail::uncvref_t<ValueType>>::value, int > = 0 >\n    ReturnType value(KeyType && key, ValueType && default_value) const\n    {\n        // value only works for objects\n        if (JSON_HEDLEY_LIKELY(is_object()))\n        {\n            // if key is found, return value and given default value otherwise\n            const auto it = find(std::forward<KeyType>(key));\n            if (it != end())\n            {\n                return it->template get<ReturnType>();\n            }\n\n            return std::forward<ValueType>(default_value);\n        }\n\n        JSON_THROW(type_error::create(306, detail::concat(\"cannot use value() with \", type_name()), this));\n    }\n\n    /// @brief access specified object element via JSON Pointer with default value\n    /// @sa https://json.nlohmann.me/api/basic_json/value/\n    template < class ValueType, detail::enable_if_t <\n                   detail::is_getable<basic_json_t, ValueType>::value\n                   && !std::is_same<value_t, detail::uncvref_t<ValueType>>::value, int > = 0 >\n    ValueType value(const json_pointer& ptr, const ValueType& default_value) const\n    {\n        // value only works for objects\n        if (JSON_HEDLEY_LIKELY(is_object()))\n        {\n            // if pointer resolves a value, return it or use default value\n            JSON_TRY\n            {\n                return ptr.get_checked(this).template get<ValueType>();\n            }\n            JSON_INTERNAL_CATCH (out_of_range&)\n            {\n                return default_value;\n            }\n        }\n\n        JSON_THROW(type_error::create(306, detail::concat(\"cannot use value() with \", type_name()), this));\n    }\n\n    /// @brief access specified object element via JSON Pointer with default value\n    /// @sa https://json.nlohmann.me/api/basic_json/value/\n    template < class ValueType, class ReturnType = typename value_return_type<ValueType>::type,\n               detail::enable_if_t <\n                   detail::is_getable<basic_json_t, ReturnType>::value\n                   && !std::is_same<value_t, detail::uncvref_t<ValueType>>::value, int > = 0 >\n    ReturnType value(const json_pointer& ptr, ValueType && default_value) const\n    {\n        // value only works for objects\n        if (JSON_HEDLEY_LIKELY(is_object()))\n        {\n            // if pointer resolves a value, return it or use default value\n            JSON_TRY\n            {\n                return ptr.get_checked(this).template get<ReturnType>();\n            }\n            JSON_INTERNAL_CATCH (out_of_range&)\n            {\n                return std::forward<ValueType>(default_value);\n            }\n        }\n\n        JSON_THROW(type_error::create(306, detail::concat(\"cannot use value() with \", type_name()), this));\n    }\n\n    template < class ValueType, class BasicJsonType, detail::enable_if_t <\n                   detail::is_basic_json<BasicJsonType>::value\n                   && detail::is_getable<basic_json_t, ValueType>::value\n                   && !std::is_same<value_t, detail::uncvref_t<ValueType>>::value, int > = 0 >\n    JSON_HEDLEY_DEPRECATED_FOR(3.11.0, basic_json::json_pointer or nlohmann::json_pointer<basic_json::string_t>) // NOLINT(readability/alt_tokens)\n    ValueType value(const ::nlohmann::json_pointer<BasicJsonType>& ptr, const ValueType& default_value) const\n    {\n        return value(ptr.convert(), default_value);\n    }\n\n    template < class ValueType, class BasicJsonType, class ReturnType = typename value_return_type<ValueType>::type,\n               detail::enable_if_t <\n                   detail::is_basic_json<BasicJsonType>::value\n                   && detail::is_getable<basic_json_t, ReturnType>::value\n                   && !std::is_same<value_t, detail::uncvref_t<ValueType>>::value, int > = 0 >\n    JSON_HEDLEY_DEPRECATED_FOR(3.11.0, basic_json::json_pointer or nlohmann::json_pointer<basic_json::string_t>) // NOLINT(readability/alt_tokens)\n    ReturnType value(const ::nlohmann::json_pointer<BasicJsonType>& ptr, ValueType && default_value) const\n    {\n        return value(ptr.convert(), std::forward<ValueType>(default_value));\n    }\n\n    /// @brief access the first element\n    /// @sa https://json.nlohmann.me/api/basic_json/front/\n    reference front()\n    {\n        return *begin();\n    }\n\n    /// @brief access the first element\n    /// @sa https://json.nlohmann.me/api/basic_json/front/\n    const_reference front() const\n    {\n        return *cbegin();\n    }\n\n    /// @brief access the last element\n    /// @sa https://json.nlohmann.me/api/basic_json/back/\n    reference back()\n    {\n        auto tmp = end();\n        --tmp;\n        return *tmp;\n    }\n\n    /// @brief access the last element\n    /// @sa https://json.nlohmann.me/api/basic_json/back/\n    const_reference back() const\n    {\n        auto tmp = cend();\n        --tmp;\n        return *tmp;\n    }\n\n    /// @brief remove element given an iterator\n    /// @sa https://json.nlohmann.me/api/basic_json/erase/\n    template < class IteratorType, detail::enable_if_t <\n                   std::is_same<IteratorType, typename basic_json_t::iterator>::value ||\n                   std::is_same<IteratorType, typename basic_json_t::const_iterator>::value, int > = 0 >\n    IteratorType erase(IteratorType pos)\n    {\n        // make sure iterator fits the current value\n        if (JSON_HEDLEY_UNLIKELY(this != pos.m_object))\n        {\n            JSON_THROW(invalid_iterator::create(202, \"iterator does not fit current value\", this));\n        }\n\n        IteratorType result = end();\n\n        switch (m_data.m_type)\n        {\n            case value_t::boolean:\n            case value_t::number_float:\n            case value_t::number_integer:\n            case value_t::number_unsigned:\n            case value_t::string:\n            case value_t::binary:\n            {\n                if (JSON_HEDLEY_UNLIKELY(!pos.m_it.primitive_iterator.is_begin()))\n                {\n                    JSON_THROW(invalid_iterator::create(205, \"iterator out of range\", this));\n                }\n\n                if (is_string())\n                {\n                    AllocatorType<string_t> alloc;\n                    std::allocator_traits<decltype(alloc)>::destroy(alloc, m_data.m_value.string);\n                    std::allocator_traits<decltype(alloc)>::deallocate(alloc, m_data.m_value.string, 1);\n                    m_data.m_value.string = nullptr;\n                }\n                else if (is_binary())\n                {\n                    AllocatorType<binary_t> alloc;\n                    std::allocator_traits<decltype(alloc)>::destroy(alloc, m_data.m_value.binary);\n                    std::allocator_traits<decltype(alloc)>::deallocate(alloc, m_data.m_value.binary, 1);\n                    m_data.m_value.binary = nullptr;\n                }\n\n                m_data.m_type = value_t::null;\n                assert_invariant();\n                break;\n            }\n\n            case value_t::object:\n            {\n                result.m_it.object_iterator = m_data.m_value.object->erase(pos.m_it.object_iterator);\n                break;\n            }\n\n            case value_t::array:\n            {\n                result.m_it.array_iterator = m_data.m_value.array->erase(pos.m_it.array_iterator);\n                break;\n            }\n\n            case value_t::null:\n            case value_t::discarded:\n            default:\n                JSON_THROW(type_error::create(307, detail::concat(\"cannot use erase() with \", type_name()), this));\n        }\n\n        return result;\n    }\n\n    /// @brief remove elements given an iterator range\n    /// @sa https://json.nlohmann.me/api/basic_json/erase/\n    template < class IteratorType, detail::enable_if_t <\n                   std::is_same<IteratorType, typename basic_json_t::iterator>::value ||\n                   std::is_same<IteratorType, typename basic_json_t::const_iterator>::value, int > = 0 >\n    IteratorType erase(IteratorType first, IteratorType last)\n    {\n        // make sure iterator fits the current value\n        if (JSON_HEDLEY_UNLIKELY(this != first.m_object || this != last.m_object))\n        {\n            JSON_THROW(invalid_iterator::create(203, \"iterators do not fit current value\", this));\n        }\n\n        IteratorType result = end();\n\n        switch (m_data.m_type)\n        {\n            case value_t::boolean:\n            case value_t::number_float:\n            case value_t::number_integer:\n            case value_t::number_unsigned:\n            case value_t::string:\n            case value_t::binary:\n            {\n                if (JSON_HEDLEY_LIKELY(!first.m_it.primitive_iterator.is_begin()\n                                       || !last.m_it.primitive_iterator.is_end()))\n                {\n                    JSON_THROW(invalid_iterator::create(204, \"iterators out of range\", this));\n                }\n\n                if (is_string())\n                {\n                    AllocatorType<string_t> alloc;\n                    std::allocator_traits<decltype(alloc)>::destroy(alloc, m_data.m_value.string);\n                    std::allocator_traits<decltype(alloc)>::deallocate(alloc, m_data.m_value.string, 1);\n                    m_data.m_value.string = nullptr;\n                }\n                else if (is_binary())\n                {\n                    AllocatorType<binary_t> alloc;\n                    std::allocator_traits<decltype(alloc)>::destroy(alloc, m_data.m_value.binary);\n                    std::allocator_traits<decltype(alloc)>::deallocate(alloc, m_data.m_value.binary, 1);\n                    m_data.m_value.binary = nullptr;\n                }\n\n                m_data.m_type = value_t::null;\n                assert_invariant();\n                break;\n            }\n\n            case value_t::object:\n            {\n                result.m_it.object_iterator = m_data.m_value.object->erase(first.m_it.object_iterator,\n                                              last.m_it.object_iterator);\n                break;\n            }\n\n            case value_t::array:\n            {\n                result.m_it.array_iterator = m_data.m_value.array->erase(first.m_it.array_iterator,\n                                             last.m_it.array_iterator);\n                break;\n            }\n\n            case value_t::null:\n            case value_t::discarded:\n            default:\n                JSON_THROW(type_error::create(307, detail::concat(\"cannot use erase() with \", type_name()), this));\n        }\n\n        return result;\n    }\n\n  private:\n    template < typename KeyType, detail::enable_if_t <\n                   detail::has_erase_with_key_type<basic_json_t, KeyType>::value, int > = 0 >\n    size_type erase_internal(KeyType && key)\n    {\n        // this erase only works for objects\n        if (JSON_HEDLEY_UNLIKELY(!is_object()))\n        {\n            JSON_THROW(type_error::create(307, detail::concat(\"cannot use erase() with \", type_name()), this));\n        }\n\n        return m_data.m_value.object->erase(std::forward<KeyType>(key));\n    }\n\n    template < typename KeyType, detail::enable_if_t <\n                   !detail::has_erase_with_key_type<basic_json_t, KeyType>::value, int > = 0 >\n    size_type erase_internal(KeyType && key)\n    {\n        // this erase only works for objects\n        if (JSON_HEDLEY_UNLIKELY(!is_object()))\n        {\n            JSON_THROW(type_error::create(307, detail::concat(\"cannot use erase() with \", type_name()), this));\n        }\n\n        const auto it = m_data.m_value.object->find(std::forward<KeyType>(key));\n        if (it != m_data.m_value.object->end())\n        {\n            m_data.m_value.object->erase(it);\n            return 1;\n        }\n        return 0;\n    }\n\n  public:\n\n    /// @brief remove element from a JSON object given a key\n    /// @sa https://json.nlohmann.me/api/basic_json/erase/\n    size_type erase(const typename object_t::key_type& key)\n    {\n        // the indirection via erase_internal() is added to avoid making this\n        // function a template and thus de-rank it during overload resolution\n        return erase_internal(key);\n    }\n\n    /// @brief remove element from a JSON object given a key\n    /// @sa https://json.nlohmann.me/api/basic_json/erase/\n    template<class KeyType, detail::enable_if_t<\n                 detail::is_usable_as_basic_json_key_type<basic_json_t, KeyType>::value, int> = 0>\n    size_type erase(KeyType && key)\n    {\n        return erase_internal(std::forward<KeyType>(key));\n    }\n\n    /// @brief remove element from a JSON array given an index\n    /// @sa https://json.nlohmann.me/api/basic_json/erase/\n    void erase(const size_type idx)\n    {\n        // this erase only works for arrays\n        if (JSON_HEDLEY_LIKELY(is_array()))\n        {\n            if (JSON_HEDLEY_UNLIKELY(idx >= size()))\n            {\n                JSON_THROW(out_of_range::create(401, detail::concat(\"array index \", std::to_string(idx), \" is out of range\"), this));\n            }\n\n            m_data.m_value.array->erase(m_data.m_value.array->begin() + static_cast<difference_type>(idx));\n        }\n        else\n        {\n            JSON_THROW(type_error::create(307, detail::concat(\"cannot use erase() with \", type_name()), this));\n        }\n    }\n\n    /// @}\n\n    ////////////\n    // lookup //\n    ////////////\n\n    /// @name lookup\n    /// @{\n\n    /// @brief find an element in a JSON object\n    /// @sa https://json.nlohmann.me/api/basic_json/find/\n    iterator find(const typename object_t::key_type& key)\n    {\n        auto result = end();\n\n        if (is_object())\n        {\n            result.m_it.object_iterator = m_data.m_value.object->find(key);\n        }\n\n        return result;\n    }\n\n    /// @brief find an element in a JSON object\n    /// @sa https://json.nlohmann.me/api/basic_json/find/\n    const_iterator find(const typename object_t::key_type& key) const\n    {\n        auto result = cend();\n\n        if (is_object())\n        {\n            result.m_it.object_iterator = m_data.m_value.object->find(key);\n        }\n\n        return result;\n    }\n\n    /// @brief find an element in a JSON object\n    /// @sa https://json.nlohmann.me/api/basic_json/find/\n    template<class KeyType, detail::enable_if_t<\n                 detail::is_usable_as_basic_json_key_type<basic_json_t, KeyType>::value, int> = 0>\n    iterator find(KeyType && key)\n    {\n        auto result = end();\n\n        if (is_object())\n        {\n            result.m_it.object_iterator = m_data.m_value.object->find(std::forward<KeyType>(key));\n        }\n\n        return result;\n    }\n\n    /// @brief find an element in a JSON object\n    /// @sa https://json.nlohmann.me/api/basic_json/find/\n    template<class KeyType, detail::enable_if_t<\n                 detail::is_usable_as_basic_json_key_type<basic_json_t, KeyType>::value, int> = 0>\n    const_iterator find(KeyType && key) const\n    {\n        auto result = cend();\n\n        if (is_object())\n        {\n            result.m_it.object_iterator = m_data.m_value.object->find(std::forward<KeyType>(key));\n        }\n\n        return result;\n    }\n\n    /// @brief returns the number of occurrences of a key in a JSON object\n    /// @sa https://json.nlohmann.me/api/basic_json/count/\n    size_type count(const typename object_t::key_type& key) const\n    {\n        // return 0 for all nonobject types\n        return is_object() ? m_data.m_value.object->count(key) : 0;\n    }\n\n    /// @brief returns the number of occurrences of a key in a JSON object\n    /// @sa https://json.nlohmann.me/api/basic_json/count/\n    template<class KeyType, detail::enable_if_t<\n                 detail::is_usable_as_basic_json_key_type<basic_json_t, KeyType>::value, int> = 0>\n    size_type count(KeyType && key) const\n    {\n        // return 0 for all nonobject types\n        return is_object() ? m_data.m_value.object->count(std::forward<KeyType>(key)) : 0;\n    }\n\n    /// @brief check the existence of an element in a JSON object\n    /// @sa https://json.nlohmann.me/api/basic_json/contains/\n    bool contains(const typename object_t::key_type& key) const\n    {\n        return is_object() && m_data.m_value.object->find(key) != m_data.m_value.object->end();\n    }\n\n    /// @brief check the existence of an element in a JSON object\n    /// @sa https://json.nlohmann.me/api/basic_json/contains/\n    template<class KeyType, detail::enable_if_t<\n                 detail::is_usable_as_basic_json_key_type<basic_json_t, KeyType>::value, int> = 0>\n    bool contains(KeyType && key) const\n    {\n        return is_object() && m_data.m_value.object->find(std::forward<KeyType>(key)) != m_data.m_value.object->end();\n    }\n\n    /// @brief check the existence of an element in a JSON object given a JSON pointer\n    /// @sa https://json.nlohmann.me/api/basic_json/contains/\n    bool contains(const json_pointer& ptr) const\n    {\n        return ptr.contains(this);\n    }\n\n    template<typename BasicJsonType, detail::enable_if_t<detail::is_basic_json<BasicJsonType>::value, int> = 0>\n    JSON_HEDLEY_DEPRECATED_FOR(3.11.0, basic_json::json_pointer or nlohmann::json_pointer<basic_json::string_t>) // NOLINT(readability/alt_tokens)\n    bool contains(const typename ::nlohmann::json_pointer<BasicJsonType>& ptr) const\n    {\n        return ptr.contains(this);\n    }\n\n    /// @}\n\n    ///////////////\n    // iterators //\n    ///////////////\n\n    /// @name iterators\n    /// @{\n\n    /// @brief returns an iterator to the first element\n    /// @sa https://json.nlohmann.me/api/basic_json/begin/\n    iterator begin() noexcept\n    {\n        iterator result(this);\n        result.set_begin();\n        return result;\n    }\n\n    /// @brief returns an iterator to the first element\n    /// @sa https://json.nlohmann.me/api/basic_json/begin/\n    const_iterator begin() const noexcept\n    {\n        return cbegin();\n    }\n\n    /// @brief returns a const iterator to the first element\n    /// @sa https://json.nlohmann.me/api/basic_json/cbegin/\n    const_iterator cbegin() const noexcept\n    {\n        const_iterator result(this);\n        result.set_begin();\n        return result;\n    }\n\n    /// @brief returns an iterator to one past the last element\n    /// @sa https://json.nlohmann.me/api/basic_json/end/\n    iterator end() noexcept\n    {\n        iterator result(this);\n        result.set_end();\n        return result;\n    }\n\n    /// @brief returns an iterator to one past the last element\n    /// @sa https://json.nlohmann.me/api/basic_json/end/\n    const_iterator end() const noexcept\n    {\n        return cend();\n    }\n\n    /// @brief returns an iterator to one past the last element\n    /// @sa https://json.nlohmann.me/api/basic_json/cend/\n    const_iterator cend() const noexcept\n    {\n        const_iterator result(this);\n        result.set_end();\n        return result;\n    }\n\n    /// @brief returns an iterator to the reverse-beginning\n    /// @sa https://json.nlohmann.me/api/basic_json/rbegin/\n    reverse_iterator rbegin() noexcept\n    {\n        return reverse_iterator(end());\n    }\n\n    /// @brief returns an iterator to the reverse-beginning\n    /// @sa https://json.nlohmann.me/api/basic_json/rbegin/\n    const_reverse_iterator rbegin() const noexcept\n    {\n        return crbegin();\n    }\n\n    /// @brief returns an iterator to the reverse-end\n    /// @sa https://json.nlohmann.me/api/basic_json/rend/\n    reverse_iterator rend() noexcept\n    {\n        return reverse_iterator(begin());\n    }\n\n    /// @brief returns an iterator to the reverse-end\n    /// @sa https://json.nlohmann.me/api/basic_json/rend/\n    const_reverse_iterator rend() const noexcept\n    {\n        return crend();\n    }\n\n    /// @brief returns a const reverse iterator to the last element\n    /// @sa https://json.nlohmann.me/api/basic_json/crbegin/\n    const_reverse_iterator crbegin() const noexcept\n    {\n        return const_reverse_iterator(cend());\n    }\n\n    /// @brief returns a const reverse iterator to one before the first\n    /// @sa https://json.nlohmann.me/api/basic_json/crend/\n    const_reverse_iterator crend() const noexcept\n    {\n        return const_reverse_iterator(cbegin());\n    }\n\n  public:\n    /// @brief wrapper to access iterator member functions in range-based for\n    /// @sa https://json.nlohmann.me/api/basic_json/items/\n    /// @deprecated This function is deprecated since 3.1.0 and will be removed in\n    ///             version 4.0.0 of the library. Please use @ref items() instead;\n    ///             that is, replace `json::iterator_wrapper(j)` with `j.items()`.\n    JSON_HEDLEY_DEPRECATED_FOR(3.1.0, items())\n    static iteration_proxy<iterator> iterator_wrapper(reference ref) noexcept\n    {\n        return ref.items();\n    }\n\n    /// @brief wrapper to access iterator member functions in range-based for\n    /// @sa https://json.nlohmann.me/api/basic_json/items/\n    /// @deprecated This function is deprecated since 3.1.0 and will be removed in\n    ///         version 4.0.0 of the library. Please use @ref items() instead;\n    ///         that is, replace `json::iterator_wrapper(j)` with `j.items()`.\n    JSON_HEDLEY_DEPRECATED_FOR(3.1.0, items())\n    static iteration_proxy<const_iterator> iterator_wrapper(const_reference ref) noexcept\n    {\n        return ref.items();\n    }\n\n    /// @brief helper to access iterator member functions in range-based for\n    /// @sa https://json.nlohmann.me/api/basic_json/items/\n    iteration_proxy<iterator> items() noexcept\n    {\n        return iteration_proxy<iterator>(*this);\n    }\n\n    /// @brief helper to access iterator member functions in range-based for\n    /// @sa https://json.nlohmann.me/api/basic_json/items/\n    iteration_proxy<const_iterator> items() const noexcept\n    {\n        return iteration_proxy<const_iterator>(*this);\n    }\n\n    /// @}\n\n    //////////////\n    // capacity //\n    //////////////\n\n    /// @name capacity\n    /// @{\n\n    /// @brief checks whether the container is empty.\n    /// @sa https://json.nlohmann.me/api/basic_json/empty/\n    bool empty() const noexcept\n    {\n        switch (m_data.m_type)\n        {\n            case value_t::null:\n            {\n                // null values are empty\n                return true;\n            }\n\n            case value_t::array:\n            {\n                // delegate call to array_t::empty()\n                return m_data.m_value.array->empty();\n            }\n\n            case value_t::object:\n            {\n                // delegate call to object_t::empty()\n                return m_data.m_value.object->empty();\n            }\n\n            case value_t::string:\n            case value_t::boolean:\n            case value_t::number_integer:\n            case value_t::number_unsigned:\n            case value_t::number_float:\n            case value_t::binary:\n            case value_t::discarded:\n            default:\n            {\n                // all other types are nonempty\n                return false;\n            }\n        }\n    }\n\n    /// @brief returns the number of elements\n    /// @sa https://json.nlohmann.me/api/basic_json/size/\n    size_type size() const noexcept\n    {\n        switch (m_data.m_type)\n        {\n            case value_t::null:\n            {\n                // null values are empty\n                return 0;\n            }\n\n            case value_t::array:\n            {\n                // delegate call to array_t::size()\n                return m_data.m_value.array->size();\n            }\n\n            case value_t::object:\n            {\n                // delegate call to object_t::size()\n                return m_data.m_value.object->size();\n            }\n\n            case value_t::string:\n            case value_t::boolean:\n            case value_t::number_integer:\n            case value_t::number_unsigned:\n            case value_t::number_float:\n            case value_t::binary:\n            case value_t::discarded:\n            default:\n            {\n                // all other types have size 1\n                return 1;\n            }\n        }\n    }\n\n    /// @brief returns the maximum possible number of elements\n    /// @sa https://json.nlohmann.me/api/basic_json/max_size/\n    size_type max_size() const noexcept\n    {\n        switch (m_data.m_type)\n        {\n            case value_t::array:\n            {\n                // delegate call to array_t::max_size()\n                return m_data.m_value.array->max_size();\n            }\n\n            case value_t::object:\n            {\n                // delegate call to object_t::max_size()\n                return m_data.m_value.object->max_size();\n            }\n\n            case value_t::null:\n            case value_t::string:\n            case value_t::boolean:\n            case value_t::number_integer:\n            case value_t::number_unsigned:\n            case value_t::number_float:\n            case value_t::binary:\n            case value_t::discarded:\n            default:\n            {\n                // all other types have max_size() == size()\n                return size();\n            }\n        }\n    }\n\n    /// @}\n\n    ///////////////\n    // modifiers //\n    ///////////////\n\n    /// @name modifiers\n    /// @{\n\n    /// @brief clears the contents\n    /// @sa https://json.nlohmann.me/api/basic_json/clear/\n    void clear() noexcept\n    {\n        switch (m_data.m_type)\n        {\n            case value_t::number_integer:\n            {\n                m_data.m_value.number_integer = 0;\n                break;\n            }\n\n            case value_t::number_unsigned:\n            {\n                m_data.m_value.number_unsigned = 0;\n                break;\n            }\n\n            case value_t::number_float:\n            {\n                m_data.m_value.number_float = 0.0;\n                break;\n            }\n\n            case value_t::boolean:\n            {\n                m_data.m_value.boolean = false;\n                break;\n            }\n\n            case value_t::string:\n            {\n                m_data.m_value.string->clear();\n                break;\n            }\n\n            case value_t::binary:\n            {\n                m_data.m_value.binary->clear();\n                break;\n            }\n\n            case value_t::array:\n            {\n                m_data.m_value.array->clear();\n                break;\n            }\n\n            case value_t::object:\n            {\n                m_data.m_value.object->clear();\n                break;\n            }\n\n            case value_t::null:\n            case value_t::discarded:\n            default:\n                break;\n        }\n    }\n\n    /// @brief add an object to an array\n    /// @sa https://json.nlohmann.me/api/basic_json/push_back/\n    void push_back(basic_json&& val)\n    {\n        // push_back only works for null objects or arrays\n        if (JSON_HEDLEY_UNLIKELY(!(is_null() || is_array())))\n        {\n            JSON_THROW(type_error::create(308, detail::concat(\"cannot use push_back() with \", type_name()), this));\n        }\n\n        // transform null object into an array\n        if (is_null())\n        {\n            m_data.m_type = value_t::array;\n            m_data.m_value = value_t::array;\n            assert_invariant();\n        }\n\n        // add element to array (move semantics)\n        const auto old_capacity = m_data.m_value.array->capacity();\n        m_data.m_value.array->push_back(std::move(val));\n        set_parent(m_data.m_value.array->back(), old_capacity);\n        // if val is moved from, basic_json move constructor marks it null, so we do not call the destructor\n    }\n\n    /// @brief add an object to an array\n    /// @sa https://json.nlohmann.me/api/basic_json/operator+=/\n    reference operator+=(basic_json&& val)\n    {\n        push_back(std::move(val));\n        return *this;\n    }\n\n    /// @brief add an object to an array\n    /// @sa https://json.nlohmann.me/api/basic_json/push_back/\n    void push_back(const basic_json& val)\n    {\n        // push_back only works for null objects or arrays\n        if (JSON_HEDLEY_UNLIKELY(!(is_null() || is_array())))\n        {\n            JSON_THROW(type_error::create(308, detail::concat(\"cannot use push_back() with \", type_name()), this));\n        }\n\n        // transform null object into an array\n        if (is_null())\n        {\n            m_data.m_type = value_t::array;\n            m_data.m_value = value_t::array;\n            assert_invariant();\n        }\n\n        // add element to array\n        const auto old_capacity = m_data.m_value.array->capacity();\n        m_data.m_value.array->push_back(val);\n        set_parent(m_data.m_value.array->back(), old_capacity);\n    }\n\n    /// @brief add an object to an array\n    /// @sa https://json.nlohmann.me/api/basic_json/operator+=/\n    reference operator+=(const basic_json& val)\n    {\n        push_back(val);\n        return *this;\n    }\n\n    /// @brief add an object to an object\n    /// @sa https://json.nlohmann.me/api/basic_json/push_back/\n    void push_back(const typename object_t::value_type& val)\n    {\n        // push_back only works for null objects or objects\n        if (JSON_HEDLEY_UNLIKELY(!(is_null() || is_object())))\n        {\n            JSON_THROW(type_error::create(308, detail::concat(\"cannot use push_back() with \", type_name()), this));\n        }\n\n        // transform null object into an object\n        if (is_null())\n        {\n            m_data.m_type = value_t::object;\n            m_data.m_value = value_t::object;\n            assert_invariant();\n        }\n\n        // add element to object\n        auto res = m_data.m_value.object->insert(val);\n        set_parent(res.first->second);\n    }\n\n    /// @brief add an object to an object\n    /// @sa https://json.nlohmann.me/api/basic_json/operator+=/\n    reference operator+=(const typename object_t::value_type& val)\n    {\n        push_back(val);\n        return *this;\n    }\n\n    /// @brief add an object to an object\n    /// @sa https://json.nlohmann.me/api/basic_json/push_back/\n    void push_back(initializer_list_t init)\n    {\n        if (is_object() && init.size() == 2 && (*init.begin())->is_string())\n        {\n            basic_json&& key = init.begin()->moved_or_copied();\n            push_back(typename object_t::value_type(\n                          std::move(key.get_ref<string_t&>()), (init.begin() + 1)->moved_or_copied()));\n        }\n        else\n        {\n            push_back(basic_json(init));\n        }\n    }\n\n    /// @brief add an object to an object\n    /// @sa https://json.nlohmann.me/api/basic_json/operator+=/\n    reference operator+=(initializer_list_t init)\n    {\n        push_back(init);\n        return *this;\n    }\n\n    /// @brief add an object to an array\n    /// @sa https://json.nlohmann.me/api/basic_json/emplace_back/\n    template<class... Args>\n    reference emplace_back(Args&& ... args)\n    {\n        // emplace_back only works for null objects or arrays\n        if (JSON_HEDLEY_UNLIKELY(!(is_null() || is_array())))\n        {\n            JSON_THROW(type_error::create(311, detail::concat(\"cannot use emplace_back() with \", type_name()), this));\n        }\n\n        // transform null object into an array\n        if (is_null())\n        {\n            m_data.m_type = value_t::array;\n            m_data.m_value = value_t::array;\n            assert_invariant();\n        }\n\n        // add element to array (perfect forwarding)\n        const auto old_capacity = m_data.m_value.array->capacity();\n        m_data.m_value.array->emplace_back(std::forward<Args>(args)...);\n        return set_parent(m_data.m_value.array->back(), old_capacity);\n    }\n\n    /// @brief add an object to an object if key does not exist\n    /// @sa https://json.nlohmann.me/api/basic_json/emplace/\n    template<class... Args>\n    std::pair<iterator, bool> emplace(Args&& ... args)\n    {\n        // emplace only works for null objects or arrays\n        if (JSON_HEDLEY_UNLIKELY(!(is_null() || is_object())))\n        {\n            JSON_THROW(type_error::create(311, detail::concat(\"cannot use emplace() with \", type_name()), this));\n        }\n\n        // transform null object into an object\n        if (is_null())\n        {\n            m_data.m_type = value_t::object;\n            m_data.m_value = value_t::object;\n            assert_invariant();\n        }\n\n        // add element to array (perfect forwarding)\n        auto res = m_data.m_value.object->emplace(std::forward<Args>(args)...);\n        set_parent(res.first->second);\n\n        // create result iterator and set iterator to the result of emplace\n        auto it = begin();\n        it.m_it.object_iterator = res.first;\n\n        // return pair of iterator and boolean\n        return {it, res.second};\n    }\n\n    /// Helper for insertion of an iterator\n    /// @note: This uses std::distance to support GCC 4.8,\n    ///        see https://github.com/nlohmann/json/pull/1257\n    template<typename... Args>\n    iterator insert_iterator(const_iterator pos, Args&& ... args)\n    {\n        iterator result(this);\n        JSON_ASSERT(m_data.m_value.array != nullptr);\n\n        auto insert_pos = std::distance(m_data.m_value.array->begin(), pos.m_it.array_iterator);\n        m_data.m_value.array->insert(pos.m_it.array_iterator, std::forward<Args>(args)...);\n        result.m_it.array_iterator = m_data.m_value.array->begin() + insert_pos;\n\n        // This could have been written as:\n        // result.m_it.array_iterator = m_data.m_value.array->insert(pos.m_it.array_iterator, cnt, val);\n        // but the return value of insert is missing in GCC 4.8, so it is written this way instead.\n\n        set_parents();\n        return result;\n    }\n\n    /// @brief inserts element into array\n    /// @sa https://json.nlohmann.me/api/basic_json/insert/\n    iterator insert(const_iterator pos, const basic_json& val)\n    {\n        // insert only works for arrays\n        if (JSON_HEDLEY_LIKELY(is_array()))\n        {\n            // check if iterator pos fits to this JSON value\n            if (JSON_HEDLEY_UNLIKELY(pos.m_object != this))\n            {\n                JSON_THROW(invalid_iterator::create(202, \"iterator does not fit current value\", this));\n            }\n\n            // insert to array and return iterator\n            return insert_iterator(pos, val);\n        }\n\n        JSON_THROW(type_error::create(309, detail::concat(\"cannot use insert() with \", type_name()), this));\n    }\n\n    /// @brief inserts element into array\n    /// @sa https://json.nlohmann.me/api/basic_json/insert/\n    iterator insert(const_iterator pos, basic_json&& val)\n    {\n        return insert(pos, val);\n    }\n\n    /// @brief inserts copies of element into array\n    /// @sa https://json.nlohmann.me/api/basic_json/insert/\n    iterator insert(const_iterator pos, size_type cnt, const basic_json& val)\n    {\n        // insert only works for arrays\n        if (JSON_HEDLEY_LIKELY(is_array()))\n        {\n            // check if iterator pos fits to this JSON value\n            if (JSON_HEDLEY_UNLIKELY(pos.m_object != this))\n            {\n                JSON_THROW(invalid_iterator::create(202, \"iterator does not fit current value\", this));\n            }\n\n            // insert to array and return iterator\n            return insert_iterator(pos, cnt, val);\n        }\n\n        JSON_THROW(type_error::create(309, detail::concat(\"cannot use insert() with \", type_name()), this));\n    }\n\n    /// @brief inserts range of elements into array\n    /// @sa https://json.nlohmann.me/api/basic_json/insert/\n    iterator insert(const_iterator pos, const_iterator first, const_iterator last)\n    {\n        // insert only works for arrays\n        if (JSON_HEDLEY_UNLIKELY(!is_array()))\n        {\n            JSON_THROW(type_error::create(309, detail::concat(\"cannot use insert() with \", type_name()), this));\n        }\n\n        // check if iterator pos fits to this JSON value\n        if (JSON_HEDLEY_UNLIKELY(pos.m_object != this))\n        {\n            JSON_THROW(invalid_iterator::create(202, \"iterator does not fit current value\", this));\n        }\n\n        // check if range iterators belong to the same JSON object\n        if (JSON_HEDLEY_UNLIKELY(first.m_object != last.m_object))\n        {\n            JSON_THROW(invalid_iterator::create(210, \"iterators do not fit\", this));\n        }\n\n        if (JSON_HEDLEY_UNLIKELY(first.m_object == this))\n        {\n            JSON_THROW(invalid_iterator::create(211, \"passed iterators may not belong to container\", this));\n        }\n\n        // insert to array and return iterator\n        return insert_iterator(pos, first.m_it.array_iterator, last.m_it.array_iterator);\n    }\n\n    /// @brief inserts elements from initializer list into array\n    /// @sa https://json.nlohmann.me/api/basic_json/insert/\n    iterator insert(const_iterator pos, initializer_list_t ilist)\n    {\n        // insert only works for arrays\n        if (JSON_HEDLEY_UNLIKELY(!is_array()))\n        {\n            JSON_THROW(type_error::create(309, detail::concat(\"cannot use insert() with \", type_name()), this));\n        }\n\n        // check if iterator pos fits to this JSON value\n        if (JSON_HEDLEY_UNLIKELY(pos.m_object != this))\n        {\n            JSON_THROW(invalid_iterator::create(202, \"iterator does not fit current value\", this));\n        }\n\n        // insert to array and return iterator\n        return insert_iterator(pos, ilist.begin(), ilist.end());\n    }\n\n    /// @brief inserts range of elements into object\n    /// @sa https://json.nlohmann.me/api/basic_json/insert/\n    void insert(const_iterator first, const_iterator last)\n    {\n        // insert only works for objects\n        if (JSON_HEDLEY_UNLIKELY(!is_object()))\n        {\n            JSON_THROW(type_error::create(309, detail::concat(\"cannot use insert() with \", type_name()), this));\n        }\n\n        // check if range iterators belong to the same JSON object\n        if (JSON_HEDLEY_UNLIKELY(first.m_object != last.m_object))\n        {\n            JSON_THROW(invalid_iterator::create(210, \"iterators do not fit\", this));\n        }\n\n        // passed iterators must belong to objects\n        if (JSON_HEDLEY_UNLIKELY(!first.m_object->is_object()))\n        {\n            JSON_THROW(invalid_iterator::create(202, \"iterators first and last must point to objects\", this));\n        }\n\n        m_data.m_value.object->insert(first.m_it.object_iterator, last.m_it.object_iterator);\n    }\n\n    /// @brief updates a JSON object from another object, overwriting existing keys\n    /// @sa https://json.nlohmann.me/api/basic_json/update/\n    void update(const_reference j, bool merge_objects = false)\n    {\n        update(j.begin(), j.end(), merge_objects);\n    }\n\n    /// @brief updates a JSON object from another object, overwriting existing keys\n    /// @sa https://json.nlohmann.me/api/basic_json/update/\n    void update(const_iterator first, const_iterator last, bool merge_objects = false)\n    {\n        // implicitly convert null value to an empty object\n        if (is_null())\n        {\n            m_data.m_type = value_t::object;\n            m_data.m_value.object = create<object_t>();\n            assert_invariant();\n        }\n\n        if (JSON_HEDLEY_UNLIKELY(!is_object()))\n        {\n            JSON_THROW(type_error::create(312, detail::concat(\"cannot use update() with \", type_name()), this));\n        }\n\n        // check if range iterators belong to the same JSON object\n        if (JSON_HEDLEY_UNLIKELY(first.m_object != last.m_object))\n        {\n            JSON_THROW(invalid_iterator::create(210, \"iterators do not fit\", this));\n        }\n\n        // passed iterators must belong to objects\n        if (JSON_HEDLEY_UNLIKELY(!first.m_object->is_object()))\n        {\n            JSON_THROW(type_error::create(312, detail::concat(\"cannot use update() with \", first.m_object->type_name()), first.m_object));\n        }\n\n        for (auto it = first; it != last; ++it)\n        {\n            if (merge_objects && it.value().is_object())\n            {\n                auto it2 = m_data.m_value.object->find(it.key());\n                if (it2 != m_data.m_value.object->end())\n                {\n                    it2->second.update(it.value(), true);\n                    continue;\n                }\n            }\n            m_data.m_value.object->operator[](it.key()) = it.value();\n#if JSON_DIAGNOSTICS\n            m_data.m_value.object->operator[](it.key()).m_parent = this;\n#endif\n        }\n    }\n\n    /// @brief exchanges the values\n    /// @sa https://json.nlohmann.me/api/basic_json/swap/\n    void swap(reference other) noexcept (\n        std::is_nothrow_move_constructible<value_t>::value&&\n        std::is_nothrow_move_assignable<value_t>::value&&\n        std::is_nothrow_move_constructible<json_value>::value&& // NOLINT(cppcoreguidelines-noexcept-swap,performance-noexcept-swap)\n        std::is_nothrow_move_assignable<json_value>::value\n    )\n    {\n        std::swap(m_data.m_type, other.m_data.m_type);\n        std::swap(m_data.m_value, other.m_data.m_value);\n\n        set_parents();\n        other.set_parents();\n        assert_invariant();\n    }\n\n    /// @brief exchanges the values\n    /// @sa https://json.nlohmann.me/api/basic_json/swap/\n    friend void swap(reference left, reference right) noexcept (\n        std::is_nothrow_move_constructible<value_t>::value&&\n        std::is_nothrow_move_assignable<value_t>::value&&\n        std::is_nothrow_move_constructible<json_value>::value&& // NOLINT(cppcoreguidelines-noexcept-swap,performance-noexcept-swap)\n        std::is_nothrow_move_assignable<json_value>::value\n    )\n    {\n        left.swap(right);\n    }\n\n    /// @brief exchanges the values\n    /// @sa https://json.nlohmann.me/api/basic_json/swap/\n    void swap(array_t& other) // NOLINT(bugprone-exception-escape,cppcoreguidelines-noexcept-swap,performance-noexcept-swap)\n    {\n        // swap only works for arrays\n        if (JSON_HEDLEY_LIKELY(is_array()))\n        {\n            using std::swap;\n            swap(*(m_data.m_value.array), other);\n        }\n        else\n        {\n            JSON_THROW(type_error::create(310, detail::concat(\"cannot use swap(array_t&) with \", type_name()), this));\n        }\n    }\n\n    /// @brief exchanges the values\n    /// @sa https://json.nlohmann.me/api/basic_json/swap/\n    void swap(object_t& other) // NOLINT(bugprone-exception-escape,cppcoreguidelines-noexcept-swap,performance-noexcept-swap)\n    {\n        // swap only works for objects\n        if (JSON_HEDLEY_LIKELY(is_object()))\n        {\n            using std::swap;\n            swap(*(m_data.m_value.object), other);\n        }\n        else\n        {\n            JSON_THROW(type_error::create(310, detail::concat(\"cannot use swap(object_t&) with \", type_name()), this));\n        }\n    }\n\n    /// @brief exchanges the values\n    /// @sa https://json.nlohmann.me/api/basic_json/swap/\n    void swap(string_t& other) // NOLINT(bugprone-exception-escape,cppcoreguidelines-noexcept-swap,performance-noexcept-swap)\n    {\n        // swap only works for strings\n        if (JSON_HEDLEY_LIKELY(is_string()))\n        {\n            using std::swap;\n            swap(*(m_data.m_value.string), other);\n        }\n        else\n        {\n            JSON_THROW(type_error::create(310, detail::concat(\"cannot use swap(string_t&) with \", type_name()), this));\n        }\n    }\n\n    /// @brief exchanges the values\n    /// @sa https://json.nlohmann.me/api/basic_json/swap/\n    void swap(binary_t& other) // NOLINT(bugprone-exception-escape,cppcoreguidelines-noexcept-swap,performance-noexcept-swap)\n    {\n        // swap only works for strings\n        if (JSON_HEDLEY_LIKELY(is_binary()))\n        {\n            using std::swap;\n            swap(*(m_data.m_value.binary), other);\n        }\n        else\n        {\n            JSON_THROW(type_error::create(310, detail::concat(\"cannot use swap(binary_t&) with \", type_name()), this));\n        }\n    }\n\n    /// @brief exchanges the values\n    /// @sa https://json.nlohmann.me/api/basic_json/swap/\n    void swap(typename binary_t::container_type& other) // NOLINT(bugprone-exception-escape)\n    {\n        // swap only works for strings\n        if (JSON_HEDLEY_LIKELY(is_binary()))\n        {\n            using std::swap;\n            swap(*(m_data.m_value.binary), other);\n        }\n        else\n        {\n            JSON_THROW(type_error::create(310, detail::concat(\"cannot use swap(binary_t::container_type&) with \", type_name()), this));\n        }\n    }\n\n    /// @}\n\n    //////////////////////////////////////////\n    // lexicographical comparison operators //\n    //////////////////////////////////////////\n\n    /// @name lexicographical comparison operators\n    /// @{\n\n    // note parentheses around operands are necessary; see\n    // https://github.com/nlohmann/json/issues/1530\n#define JSON_IMPLEMENT_OPERATOR(op, null_result, unordered_result, default_result)                       \\\n    const auto lhs_type = lhs.type();                                                                    \\\n    const auto rhs_type = rhs.type();                                                                    \\\n    \\\n    if (lhs_type == rhs_type) /* NOLINT(readability/braces) */                                           \\\n    {                                                                                                    \\\n        switch (lhs_type)                                                                                \\\n        {                                                                                                \\\n            case value_t::array:                                                                         \\\n                return (*lhs.m_data.m_value.array) op (*rhs.m_data.m_value.array);                                     \\\n                \\\n            case value_t::object:                                                                        \\\n                return (*lhs.m_data.m_value.object) op (*rhs.m_data.m_value.object);                                   \\\n                \\\n            case value_t::null:                                                                          \\\n                return (null_result);                                                                    \\\n                \\\n            case value_t::string:                                                                        \\\n                return (*lhs.m_data.m_value.string) op (*rhs.m_data.m_value.string);                                   \\\n                \\\n            case value_t::boolean:                                                                       \\\n                return (lhs.m_data.m_value.boolean) op (rhs.m_data.m_value.boolean);                                   \\\n                \\\n            case value_t::number_integer:                                                                \\\n                return (lhs.m_data.m_value.number_integer) op (rhs.m_data.m_value.number_integer);                     \\\n                \\\n            case value_t::number_unsigned:                                                               \\\n                return (lhs.m_data.m_value.number_unsigned) op (rhs.m_data.m_value.number_unsigned);                   \\\n                \\\n            case value_t::number_float:                                                                  \\\n                return (lhs.m_data.m_value.number_float) op (rhs.m_data.m_value.number_float);                         \\\n                \\\n            case value_t::binary:                                                                        \\\n                return (*lhs.m_data.m_value.binary) op (*rhs.m_data.m_value.binary);                                   \\\n                \\\n            case value_t::discarded:                                                                     \\\n            default:                                                                                     \\\n                return (unordered_result);                                                               \\\n        }                                                                                                \\\n    }                                                                                                    \\\n    else if (lhs_type == value_t::number_integer && rhs_type == value_t::number_float)                   \\\n    {                                                                                                    \\\n        return static_cast<number_float_t>(lhs.m_data.m_value.number_integer) op rhs.m_data.m_value.number_float;      \\\n    }                                                                                                    \\\n    else if (lhs_type == value_t::number_float && rhs_type == value_t::number_integer)                   \\\n    {                                                                                                    \\\n        return lhs.m_data.m_value.number_float op static_cast<number_float_t>(rhs.m_data.m_value.number_integer);      \\\n    }                                                                                                    \\\n    else if (lhs_type == value_t::number_unsigned && rhs_type == value_t::number_float)                  \\\n    {                                                                                                    \\\n        return static_cast<number_float_t>(lhs.m_data.m_value.number_unsigned) op rhs.m_data.m_value.number_float;     \\\n    }                                                                                                    \\\n    else if (lhs_type == value_t::number_float && rhs_type == value_t::number_unsigned)                  \\\n    {                                                                                                    \\\n        return lhs.m_data.m_value.number_float op static_cast<number_float_t>(rhs.m_data.m_value.number_unsigned);     \\\n    }                                                                                                    \\\n    else if (lhs_type == value_t::number_unsigned && rhs_type == value_t::number_integer)                \\\n    {                                                                                                    \\\n        return static_cast<number_integer_t>(lhs.m_data.m_value.number_unsigned) op rhs.m_data.m_value.number_integer; \\\n    }                                                                                                    \\\n    else if (lhs_type == value_t::number_integer && rhs_type == value_t::number_unsigned)                \\\n    {                                                                                                    \\\n        return lhs.m_data.m_value.number_integer op static_cast<number_integer_t>(rhs.m_data.m_value.number_unsigned); \\\n    }                                                                                                    \\\n    else if(compares_unordered(lhs, rhs))\\\n    {\\\n        return (unordered_result);\\\n    }\\\n    \\\n    return (default_result);\n\n  JSON_PRIVATE_UNLESS_TESTED:\n    // returns true if:\n    // - any operand is NaN and the other operand is of number type\n    // - any operand is discarded\n    // in legacy mode, discarded values are considered ordered if\n    // an operation is computed as an odd number of inverses of others\n    static bool compares_unordered(const_reference lhs, const_reference rhs, bool inverse = false) noexcept\n    {\n        if ((lhs.is_number_float() && std::isnan(lhs.m_data.m_value.number_float) && rhs.is_number())\n                || (rhs.is_number_float() && std::isnan(rhs.m_data.m_value.number_float) && lhs.is_number()))\n        {\n            return true;\n        }\n#if JSON_USE_LEGACY_DISCARDED_VALUE_COMPARISON\n        return (lhs.is_discarded() || rhs.is_discarded()) && !inverse;\n#else\n        static_cast<void>(inverse);\n        return lhs.is_discarded() || rhs.is_discarded();\n#endif\n    }\n\n  private:\n    bool compares_unordered(const_reference rhs, bool inverse = false) const noexcept\n    {\n        return compares_unordered(*this, rhs, inverse);\n    }\n\n  public:\n#if JSON_HAS_THREE_WAY_COMPARISON\n    /// @brief comparison: equal\n    /// @sa https://json.nlohmann.me/api/basic_json/operator_eq/\n    bool operator==(const_reference rhs) const noexcept\n    {\n#ifdef __GNUC__\n#pragma GCC diagnostic push\n#pragma GCC diagnostic ignored \"-Wfloat-equal\"\n#endif\n        const_reference lhs = *this;\n        JSON_IMPLEMENT_OPERATOR( ==, true, false, false)\n#ifdef __GNUC__\n#pragma GCC diagnostic pop\n#endif\n    }\n\n    /// @brief comparison: equal\n    /// @sa https://json.nlohmann.me/api/basic_json/operator_eq/\n    template<typename ScalarType>\n    requires std::is_scalar_v<ScalarType>\n    bool operator==(ScalarType rhs) const noexcept\n    {\n        return *this == basic_json(rhs);\n    }\n\n    /// @brief comparison: not equal\n    /// @sa https://json.nlohmann.me/api/basic_json/operator_ne/\n    bool operator!=(const_reference rhs) const noexcept\n    {\n        if (compares_unordered(rhs, true))\n        {\n            return false;\n        }\n        return !operator==(rhs);\n    }\n\n    /// @brief comparison: 3-way\n    /// @sa https://json.nlohmann.me/api/basic_json/operator_spaceship/\n    std::partial_ordering operator<=>(const_reference rhs) const noexcept // *NOPAD*\n    {\n        const_reference lhs = *this;\n        // default_result is used if we cannot compare values. In that case,\n        // we compare types.\n        JSON_IMPLEMENT_OPERATOR(<=>, // *NOPAD*\n                                std::partial_ordering::equivalent,\n                                std::partial_ordering::unordered,\n                                lhs_type <=> rhs_type) // *NOPAD*\n    }\n\n    /// @brief comparison: 3-way\n    /// @sa https://json.nlohmann.me/api/basic_json/operator_spaceship/\n    template<typename ScalarType>\n    requires std::is_scalar_v<ScalarType>\n    std::partial_ordering operator<=>(ScalarType rhs) const noexcept // *NOPAD*\n    {\n        return *this <=> basic_json(rhs); // *NOPAD*\n    }\n\n#if JSON_USE_LEGACY_DISCARDED_VALUE_COMPARISON\n    // all operators that are computed as an odd number of inverses of others\n    // need to be overloaded to emulate the legacy comparison behavior\n\n    /// @brief comparison: less than or equal\n    /// @sa https://json.nlohmann.me/api/basic_json/operator_le/\n    JSON_HEDLEY_DEPRECATED_FOR(3.11.0, undef JSON_USE_LEGACY_DISCARDED_VALUE_COMPARISON)\n    bool operator<=(const_reference rhs) const noexcept\n    {\n        if (compares_unordered(rhs, true))\n        {\n            return false;\n        }\n        return !(rhs < *this);\n    }\n\n    /// @brief comparison: less than or equal\n    /// @sa https://json.nlohmann.me/api/basic_json/operator_le/\n    template<typename ScalarType>\n    requires std::is_scalar_v<ScalarType>\n    bool operator<=(ScalarType rhs) const noexcept\n    {\n        return *this <= basic_json(rhs);\n    }\n\n    /// @brief comparison: greater than or equal\n    /// @sa https://json.nlohmann.me/api/basic_json/operator_ge/\n    JSON_HEDLEY_DEPRECATED_FOR(3.11.0, undef JSON_USE_LEGACY_DISCARDED_VALUE_COMPARISON)\n    bool operator>=(const_reference rhs) const noexcept\n    {\n        if (compares_unordered(rhs, true))\n        {\n            return false;\n        }\n        return !(*this < rhs);\n    }\n\n    /// @brief comparison: greater than or equal\n    /// @sa https://json.nlohmann.me/api/basic_json/operator_ge/\n    template<typename ScalarType>\n    requires std::is_scalar_v<ScalarType>\n    bool operator>=(ScalarType rhs) const noexcept\n    {\n        return *this >= basic_json(rhs);\n    }\n#endif\n#else\n    /// @brief comparison: equal\n    /// @sa https://json.nlohmann.me/api/basic_json/operator_eq/\n    friend bool operator==(const_reference lhs, const_reference rhs) noexcept\n    {\n#ifdef __GNUC__\n#pragma GCC diagnostic push\n#pragma GCC diagnostic ignored \"-Wfloat-equal\"\n#endif\n        JSON_IMPLEMENT_OPERATOR( ==, true, false, false)\n#ifdef __GNUC__\n#pragma GCC diagnostic pop\n#endif\n    }\n\n    /// @brief comparison: equal\n    /// @sa https://json.nlohmann.me/api/basic_json/operator_eq/\n    template<typename ScalarType, typename std::enable_if<\n                 std::is_scalar<ScalarType>::value, int>::type = 0>\n    friend bool operator==(const_reference lhs, ScalarType rhs) noexcept\n    {\n        return lhs == basic_json(rhs);\n    }\n\n    /// @brief comparison: equal\n    /// @sa https://json.nlohmann.me/api/basic_json/operator_eq/\n    template<typename ScalarType, typename std::enable_if<\n                 std::is_scalar<ScalarType>::value, int>::type = 0>\n    friend bool operator==(ScalarType lhs, const_reference rhs) noexcept\n    {\n        return basic_json(lhs) == rhs;\n    }\n\n    /// @brief comparison: not equal\n    /// @sa https://json.nlohmann.me/api/basic_json/operator_ne/\n    friend bool operator!=(const_reference lhs, const_reference rhs) noexcept\n    {\n        if (compares_unordered(lhs, rhs, true))\n        {\n            return false;\n        }\n        return !(lhs == rhs);\n    }\n\n    /// @brief comparison: not equal\n    /// @sa https://json.nlohmann.me/api/basic_json/operator_ne/\n    template<typename ScalarType, typename std::enable_if<\n                 std::is_scalar<ScalarType>::value, int>::type = 0>\n    friend bool operator!=(const_reference lhs, ScalarType rhs) noexcept\n    {\n        return lhs != basic_json(rhs);\n    }\n\n    /// @brief comparison: not equal\n    /// @sa https://json.nlohmann.me/api/basic_json/operator_ne/\n    template<typename ScalarType, typename std::enable_if<\n                 std::is_scalar<ScalarType>::value, int>::type = 0>\n    friend bool operator!=(ScalarType lhs, const_reference rhs) noexcept\n    {\n        return basic_json(lhs) != rhs;\n    }\n\n    /// @brief comparison: less than\n    /// @sa https://json.nlohmann.me/api/basic_json/operator_lt/\n    friend bool operator<(const_reference lhs, const_reference rhs) noexcept\n    {\n        // default_result is used if we cannot compare values. In that case,\n        // we compare types. Note we have to call the operator explicitly,\n        // because MSVC has problems otherwise.\n        JSON_IMPLEMENT_OPERATOR( <, false, false, operator<(lhs_type, rhs_type))\n    }\n\n    /// @brief comparison: less than\n    /// @sa https://json.nlohmann.me/api/basic_json/operator_lt/\n    template<typename ScalarType, typename std::enable_if<\n                 std::is_scalar<ScalarType>::value, int>::type = 0>\n    friend bool operator<(const_reference lhs, ScalarType rhs) noexcept\n    {\n        return lhs < basic_json(rhs);\n    }\n\n    /// @brief comparison: less than\n    /// @sa https://json.nlohmann.me/api/basic_json/operator_lt/\n    template<typename ScalarType, typename std::enable_if<\n                 std::is_scalar<ScalarType>::value, int>::type = 0>\n    friend bool operator<(ScalarType lhs, const_reference rhs) noexcept\n    {\n        return basic_json(lhs) < rhs;\n    }\n\n    /// @brief comparison: less than or equal\n    /// @sa https://json.nlohmann.me/api/basic_json/operator_le/\n    friend bool operator<=(const_reference lhs, const_reference rhs) noexcept\n    {\n        if (compares_unordered(lhs, rhs, true))\n        {\n            return false;\n        }\n        return !(rhs < lhs);\n    }\n\n    /// @brief comparison: less than or equal\n    /// @sa https://json.nlohmann.me/api/basic_json/operator_le/\n    template<typename ScalarType, typename std::enable_if<\n                 std::is_scalar<ScalarType>::value, int>::type = 0>\n    friend bool operator<=(const_reference lhs, ScalarType rhs) noexcept\n    {\n        return lhs <= basic_json(rhs);\n    }\n\n    /// @brief comparison: less than or equal\n    /// @sa https://json.nlohmann.me/api/basic_json/operator_le/\n    template<typename ScalarType, typename std::enable_if<\n                 std::is_scalar<ScalarType>::value, int>::type = 0>\n    friend bool operator<=(ScalarType lhs, const_reference rhs) noexcept\n    {\n        return basic_json(lhs) <= rhs;\n    }\n\n    /// @brief comparison: greater than\n    /// @sa https://json.nlohmann.me/api/basic_json/operator_gt/\n    friend bool operator>(const_reference lhs, const_reference rhs) noexcept\n    {\n        // double inverse\n        if (compares_unordered(lhs, rhs))\n        {\n            return false;\n        }\n        return !(lhs <= rhs);\n    }\n\n    /// @brief comparison: greater than\n    /// @sa https://json.nlohmann.me/api/basic_json/operator_gt/\n    template<typename ScalarType, typename std::enable_if<\n                 std::is_scalar<ScalarType>::value, int>::type = 0>\n    friend bool operator>(const_reference lhs, ScalarType rhs) noexcept\n    {\n        return lhs > basic_json(rhs);\n    }\n\n    /// @brief comparison: greater than\n    /// @sa https://json.nlohmann.me/api/basic_json/operator_gt/\n    template<typename ScalarType, typename std::enable_if<\n                 std::is_scalar<ScalarType>::value, int>::type = 0>\n    friend bool operator>(ScalarType lhs, const_reference rhs) noexcept\n    {\n        return basic_json(lhs) > rhs;\n    }\n\n    /// @brief comparison: greater than or equal\n    /// @sa https://json.nlohmann.me/api/basic_json/operator_ge/\n    friend bool operator>=(const_reference lhs, const_reference rhs) noexcept\n    {\n        if (compares_unordered(lhs, rhs, true))\n        {\n            return false;\n        }\n        return !(lhs < rhs);\n    }\n\n    /// @brief comparison: greater than or equal\n    /// @sa https://json.nlohmann.me/api/basic_json/operator_ge/\n    template<typename ScalarType, typename std::enable_if<\n                 std::is_scalar<ScalarType>::value, int>::type = 0>\n    friend bool operator>=(const_reference lhs, ScalarType rhs) noexcept\n    {\n        return lhs >= basic_json(rhs);\n    }\n\n    /// @brief comparison: greater than or equal\n    /// @sa https://json.nlohmann.me/api/basic_json/operator_ge/\n    template<typename ScalarType, typename std::enable_if<\n                 std::is_scalar<ScalarType>::value, int>::type = 0>\n    friend bool operator>=(ScalarType lhs, const_reference rhs) noexcept\n    {\n        return basic_json(lhs) >= rhs;\n    }\n#endif\n\n#undef JSON_IMPLEMENT_OPERATOR\n\n    /// @}\n\n    ///////////////////\n    // serialization //\n    ///////////////////\n\n    /// @name serialization\n    /// @{\n#ifndef JSON_NO_IO\n    /// @brief serialize to stream\n    /// @sa https://json.nlohmann.me/api/basic_json/operator_ltlt/\n    friend std::ostream& operator<<(std::ostream& o, const basic_json& j)\n    {\n        // read width member and use it as indentation parameter if nonzero\n        const bool pretty_print = o.width() > 0;\n        const auto indentation = pretty_print ? o.width() : 0;\n\n        // reset width to 0 for subsequent calls to this stream\n        o.width(0);\n\n        // do the actual serialization\n        serializer s(detail::output_adapter<char>(o), o.fill());\n        s.dump(j, pretty_print, false, static_cast<unsigned int>(indentation));\n        return o;\n    }\n\n    /// @brief serialize to stream\n    /// @sa https://json.nlohmann.me/api/basic_json/operator_ltlt/\n    /// @deprecated This function is deprecated since 3.0.0 and will be removed in\n    ///             version 4.0.0 of the library. Please use\n    ///             operator<<(std::ostream&, const basic_json&) instead; that is,\n    ///             replace calls like `j >> o;` with `o << j;`.\n    JSON_HEDLEY_DEPRECATED_FOR(3.0.0, operator<<(std::ostream&, const basic_json&))\n    friend std::ostream& operator>>(const basic_json& j, std::ostream& o)\n    {\n        return o << j;\n    }\n#endif  // JSON_NO_IO\n    /// @}\n\n    /////////////////////\n    // deserialization //\n    /////////////////////\n\n    /// @name deserialization\n    /// @{\n\n    /// @brief deserialize from a compatible input\n    /// @sa https://json.nlohmann.me/api/basic_json/parse/\n    template<typename InputType>\n    JSON_HEDLEY_WARN_UNUSED_RESULT\n    static basic_json parse(InputType&& i,\n                            const parser_callback_t cb = nullptr,\n                            const bool allow_exceptions = true,\n                            const bool ignore_comments = false)\n    {\n        basic_json result;\n        parser(detail::input_adapter(std::forward<InputType>(i)), cb, allow_exceptions, ignore_comments).parse(true, result);\n        return result;\n    }\n\n    /// @brief deserialize from a pair of character iterators\n    /// @sa https://json.nlohmann.me/api/basic_json/parse/\n    template<typename IteratorType>\n    JSON_HEDLEY_WARN_UNUSED_RESULT\n    static basic_json parse(IteratorType first,\n                            IteratorType last,\n                            const parser_callback_t cb = nullptr,\n                            const bool allow_exceptions = true,\n                            const bool ignore_comments = false)\n    {\n        basic_json result;\n        parser(detail::input_adapter(std::move(first), std::move(last)), cb, allow_exceptions, ignore_comments).parse(true, result);\n        return result;\n    }\n\n    JSON_HEDLEY_WARN_UNUSED_RESULT\n    JSON_HEDLEY_DEPRECATED_FOR(3.8.0, parse(ptr, ptr + len))\n    static basic_json parse(detail::span_input_adapter&& i,\n                            const parser_callback_t cb = nullptr,\n                            const bool allow_exceptions = true,\n                            const bool ignore_comments = false)\n    {\n        basic_json result;\n        parser(i.get(), cb, allow_exceptions, ignore_comments).parse(true, result);\n        return result;\n    }\n\n    /// @brief check if the input is valid JSON\n    /// @sa https://json.nlohmann.me/api/basic_json/accept/\n    template<typename InputType>\n    static bool accept(InputType&& i,\n                       const bool ignore_comments = false)\n    {\n        return parser(detail::input_adapter(std::forward<InputType>(i)), nullptr, false, ignore_comments).accept(true);\n    }\n\n    /// @brief check if the input is valid JSON\n    /// @sa https://json.nlohmann.me/api/basic_json/accept/\n    template<typename IteratorType>\n    static bool accept(IteratorType first, IteratorType last,\n                       const bool ignore_comments = false)\n    {\n        return parser(detail::input_adapter(std::move(first), std::move(last)), nullptr, false, ignore_comments).accept(true);\n    }\n\n    JSON_HEDLEY_WARN_UNUSED_RESULT\n    JSON_HEDLEY_DEPRECATED_FOR(3.8.0, accept(ptr, ptr + len))\n    static bool accept(detail::span_input_adapter&& i,\n                       const bool ignore_comments = false)\n    {\n        return parser(i.get(), nullptr, false, ignore_comments).accept(true);\n    }\n\n    /// @brief generate SAX events\n    /// @sa https://json.nlohmann.me/api/basic_json/sax_parse/\n    template <typename InputType, typename SAX>\n    JSON_HEDLEY_NON_NULL(2)\n    static bool sax_parse(InputType&& i, SAX* sax,\n                          input_format_t format = input_format_t::json,\n                          const bool strict = true,\n                          const bool ignore_comments = false)\n    {\n        auto ia = detail::input_adapter(std::forward<InputType>(i));\n        return format == input_format_t::json\n               ? parser(std::move(ia), nullptr, true, ignore_comments).sax_parse(sax, strict)\n               : detail::binary_reader<basic_json, decltype(ia), SAX>(std::move(ia), format).sax_parse(format, sax, strict);\n    }\n\n    /// @brief generate SAX events\n    /// @sa https://json.nlohmann.me/api/basic_json/sax_parse/\n    template<class IteratorType, class SAX>\n    JSON_HEDLEY_NON_NULL(3)\n    static bool sax_parse(IteratorType first, IteratorType last, SAX* sax,\n                          input_format_t format = input_format_t::json,\n                          const bool strict = true,\n                          const bool ignore_comments = false)\n    {\n        auto ia = detail::input_adapter(std::move(first), std::move(last));\n        return format == input_format_t::json\n               ? parser(std::move(ia), nullptr, true, ignore_comments).sax_parse(sax, strict)\n               : detail::binary_reader<basic_json, decltype(ia), SAX>(std::move(ia), format).sax_parse(format, sax, strict);\n    }\n\n    /// @brief generate SAX events\n    /// @sa https://json.nlohmann.me/api/basic_json/sax_parse/\n    /// @deprecated This function is deprecated since 3.8.0 and will be removed in\n    ///             version 4.0.0 of the library. Please use\n    ///             sax_parse(ptr, ptr + len) instead.\n    template <typename SAX>\n    JSON_HEDLEY_DEPRECATED_FOR(3.8.0, sax_parse(ptr, ptr + len, ...))\n    JSON_HEDLEY_NON_NULL(2)\n    static bool sax_parse(detail::span_input_adapter&& i, SAX* sax,\n                          input_format_t format = input_format_t::json,\n                          const bool strict = true,\n                          const bool ignore_comments = false)\n    {\n        auto ia = i.get();\n        return format == input_format_t::json\n               // NOLINTNEXTLINE(hicpp-move-const-arg,performance-move-const-arg)\n               ? parser(std::move(ia), nullptr, true, ignore_comments).sax_parse(sax, strict)\n               // NOLINTNEXTLINE(hicpp-move-const-arg,performance-move-const-arg)\n               : detail::binary_reader<basic_json, decltype(ia), SAX>(std::move(ia), format).sax_parse(format, sax, strict);\n    }\n#ifndef JSON_NO_IO\n    /// @brief deserialize from stream\n    /// @sa https://json.nlohmann.me/api/basic_json/operator_gtgt/\n    /// @deprecated This stream operator is deprecated since 3.0.0 and will be removed in\n    ///             version 4.0.0 of the library. Please use\n    ///             operator>>(std::istream&, basic_json&) instead; that is,\n    ///             replace calls like `j << i;` with `i >> j;`.\n    JSON_HEDLEY_DEPRECATED_FOR(3.0.0, operator>>(std::istream&, basic_json&))\n    friend std::istream& operator<<(basic_json& j, std::istream& i)\n    {\n        return operator>>(i, j);\n    }\n\n    /// @brief deserialize from stream\n    /// @sa https://json.nlohmann.me/api/basic_json/operator_gtgt/\n    friend std::istream& operator>>(std::istream& i, basic_json& j)\n    {\n        parser(detail::input_adapter(i)).parse(false, j);\n        return i;\n    }\n#endif  // JSON_NO_IO\n    /// @}\n\n    ///////////////////////////\n    // convenience functions //\n    ///////////////////////////\n\n    /// @brief return the type as string\n    /// @sa https://json.nlohmann.me/api/basic_json/type_name/\n    JSON_HEDLEY_RETURNS_NON_NULL\n    const char* type_name() const noexcept\n    {\n        switch (m_data.m_type)\n        {\n            case value_t::null:\n                return \"null\";\n            case value_t::object:\n                return \"object\";\n            case value_t::array:\n                return \"array\";\n            case value_t::string:\n                return \"string\";\n            case value_t::boolean:\n                return \"boolean\";\n            case value_t::binary:\n                return \"binary\";\n            case value_t::discarded:\n                return \"discarded\";\n            case value_t::number_integer:\n            case value_t::number_unsigned:\n            case value_t::number_float:\n            default:\n                return \"number\";\n        }\n    }\n\n  JSON_PRIVATE_UNLESS_TESTED:\n    //////////////////////\n    // member variables //\n    //////////////////////\n\n    struct data\n    {\n        /// the type of the current element\n        value_t m_type = value_t::null;\n\n        /// the value of the current element\n        json_value m_value = {};\n\n        data(const value_t v)\n            : m_type(v), m_value(v)\n        {\n        }\n\n        data(size_type cnt, const basic_json& val)\n            : m_type(value_t::array)\n        {\n            m_value.array = create<array_t>(cnt, val);\n        }\n\n        data() noexcept = default;\n        data(data&&) noexcept = default;\n        data(const data&) noexcept = delete;\n        data& operator=(data&&) noexcept = delete;\n        data& operator=(const data&) noexcept = delete;\n\n        ~data() noexcept\n        {\n            m_value.destroy(m_type);\n        }\n    };\n\n    data m_data = {};\n\n#if JSON_DIAGNOSTICS\n    /// a pointer to a parent value (for debugging purposes)\n    basic_json* m_parent = nullptr;\n#endif\n\n    //////////////////////////////////////////\n    // binary serialization/deserialization //\n    //////////////////////////////////////////\n\n    /// @name binary serialization/deserialization support\n    /// @{\n\n  public:\n    /// @brief create a CBOR serialization of a given JSON value\n    /// @sa https://json.nlohmann.me/api/basic_json/to_cbor/\n    static std::vector<std::uint8_t> to_cbor(const basic_json& j)\n    {\n        std::vector<std::uint8_t> result;\n        to_cbor(j, result);\n        return result;\n    }\n\n    /// @brief create a CBOR serialization of a given JSON value\n    /// @sa https://json.nlohmann.me/api/basic_json/to_cbor/\n    static void to_cbor(const basic_json& j, detail::output_adapter<std::uint8_t> o)\n    {\n        binary_writer<std::uint8_t>(o).write_cbor(j);\n    }\n\n    /// @brief create a CBOR serialization of a given JSON value\n    /// @sa https://json.nlohmann.me/api/basic_json/to_cbor/\n    static void to_cbor(const basic_json& j, detail::output_adapter<char> o)\n    {\n        binary_writer<char>(o).write_cbor(j);\n    }\n\n    /// @brief create a MessagePack serialization of a given JSON value\n    /// @sa https://json.nlohmann.me/api/basic_json/to_msgpack/\n    static std::vector<std::uint8_t> to_msgpack(const basic_json& j)\n    {\n        std::vector<std::uint8_t> result;\n        to_msgpack(j, result);\n        return result;\n    }\n\n    /// @brief create a MessagePack serialization of a given JSON value\n    /// @sa https://json.nlohmann.me/api/basic_json/to_msgpack/\n    static void to_msgpack(const basic_json& j, detail::output_adapter<std::uint8_t> o)\n    {\n        binary_writer<std::uint8_t>(o).write_msgpack(j);\n    }\n\n    /// @brief create a MessagePack serialization of a given JSON value\n    /// @sa https://json.nlohmann.me/api/basic_json/to_msgpack/\n    static void to_msgpack(const basic_json& j, detail::output_adapter<char> o)\n    {\n        binary_writer<char>(o).write_msgpack(j);\n    }\n\n    /// @brief create a UBJSON serialization of a given JSON value\n    /// @sa https://json.nlohmann.me/api/basic_json/to_ubjson/\n    static std::vector<std::uint8_t> to_ubjson(const basic_json& j,\n            const bool use_size = false,\n            const bool use_type = false)\n    {\n        std::vector<std::uint8_t> result;\n        to_ubjson(j, result, use_size, use_type);\n        return result;\n    }\n\n    /// @brief create a UBJSON serialization of a given JSON value\n    /// @sa https://json.nlohmann.me/api/basic_json/to_ubjson/\n    static void to_ubjson(const basic_json& j, detail::output_adapter<std::uint8_t> o,\n                          const bool use_size = false, const bool use_type = false)\n    {\n        binary_writer<std::uint8_t>(o).write_ubjson(j, use_size, use_type);\n    }\n\n    /// @brief create a UBJSON serialization of a given JSON value\n    /// @sa https://json.nlohmann.me/api/basic_json/to_ubjson/\n    static void to_ubjson(const basic_json& j, detail::output_adapter<char> o,\n                          const bool use_size = false, const bool use_type = false)\n    {\n        binary_writer<char>(o).write_ubjson(j, use_size, use_type);\n    }\n\n    /// @brief create a BJData serialization of a given JSON value\n    /// @sa https://json.nlohmann.me/api/basic_json/to_bjdata/\n    static std::vector<std::uint8_t> to_bjdata(const basic_json& j,\n            const bool use_size = false,\n            const bool use_type = false)\n    {\n        std::vector<std::uint8_t> result;\n        to_bjdata(j, result, use_size, use_type);\n        return result;\n    }\n\n    /// @brief create a BJData serialization of a given JSON value\n    /// @sa https://json.nlohmann.me/api/basic_json/to_bjdata/\n    static void to_bjdata(const basic_json& j, detail::output_adapter<std::uint8_t> o,\n                          const bool use_size = false, const bool use_type = false)\n    {\n        binary_writer<std::uint8_t>(o).write_ubjson(j, use_size, use_type, true, true);\n    }\n\n    /// @brief create a BJData serialization of a given JSON value\n    /// @sa https://json.nlohmann.me/api/basic_json/to_bjdata/\n    static void to_bjdata(const basic_json& j, detail::output_adapter<char> o,\n                          const bool use_size = false, const bool use_type = false)\n    {\n        binary_writer<char>(o).write_ubjson(j, use_size, use_type, true, true);\n    }\n\n    /// @brief create a BSON serialization of a given JSON value\n    /// @sa https://json.nlohmann.me/api/basic_json/to_bson/\n    static std::vector<std::uint8_t> to_bson(const basic_json& j)\n    {\n        std::vector<std::uint8_t> result;\n        to_bson(j, result);\n        return result;\n    }\n\n    /// @brief create a BSON serialization of a given JSON value\n    /// @sa https://json.nlohmann.me/api/basic_json/to_bson/\n    static void to_bson(const basic_json& j, detail::output_adapter<std::uint8_t> o)\n    {\n        binary_writer<std::uint8_t>(o).write_bson(j);\n    }\n\n    /// @brief create a BSON serialization of a given JSON value\n    /// @sa https://json.nlohmann.me/api/basic_json/to_bson/\n    static void to_bson(const basic_json& j, detail::output_adapter<char> o)\n    {\n        binary_writer<char>(o).write_bson(j);\n    }\n\n    /// @brief create a JSON value from an input in CBOR format\n    /// @sa https://json.nlohmann.me/api/basic_json/from_cbor/\n    template<typename InputType>\n    JSON_HEDLEY_WARN_UNUSED_RESULT\n    static basic_json from_cbor(InputType&& i,\n                                const bool strict = true,\n                                const bool allow_exceptions = true,\n                                const cbor_tag_handler_t tag_handler = cbor_tag_handler_t::error)\n    {\n        basic_json result;\n        detail::json_sax_dom_parser<basic_json> sdp(result, allow_exceptions);\n        auto ia = detail::input_adapter(std::forward<InputType>(i));\n        const bool res = binary_reader<decltype(ia)>(std::move(ia), input_format_t::cbor).sax_parse(input_format_t::cbor, &sdp, strict, tag_handler);\n        return res ? result : basic_json(value_t::discarded);\n    }\n\n    /// @brief create a JSON value from an input in CBOR format\n    /// @sa https://json.nlohmann.me/api/basic_json/from_cbor/\n    template<typename IteratorType>\n    JSON_HEDLEY_WARN_UNUSED_RESULT\n    static basic_json from_cbor(IteratorType first, IteratorType last,\n                                const bool strict = true,\n                                const bool allow_exceptions = true,\n                                const cbor_tag_handler_t tag_handler = cbor_tag_handler_t::error)\n    {\n        basic_json result;\n        detail::json_sax_dom_parser<basic_json> sdp(result, allow_exceptions);\n        auto ia = detail::input_adapter(std::move(first), std::move(last));\n        const bool res = binary_reader<decltype(ia)>(std::move(ia), input_format_t::cbor).sax_parse(input_format_t::cbor, &sdp, strict, tag_handler);\n        return res ? result : basic_json(value_t::discarded);\n    }\n\n    template<typename T>\n    JSON_HEDLEY_WARN_UNUSED_RESULT\n    JSON_HEDLEY_DEPRECATED_FOR(3.8.0, from_cbor(ptr, ptr + len))\n    static basic_json from_cbor(const T* ptr, std::size_t len,\n                                const bool strict = true,\n                                const bool allow_exceptions = true,\n                                const cbor_tag_handler_t tag_handler = cbor_tag_handler_t::error)\n    {\n        return from_cbor(ptr, ptr + len, strict, allow_exceptions, tag_handler);\n    }\n\n    JSON_HEDLEY_WARN_UNUSED_RESULT\n    JSON_HEDLEY_DEPRECATED_FOR(3.8.0, from_cbor(ptr, ptr + len))\n    static basic_json from_cbor(detail::span_input_adapter&& i,\n                                const bool strict = true,\n                                const bool allow_exceptions = true,\n                                const cbor_tag_handler_t tag_handler = cbor_tag_handler_t::error)\n    {\n        basic_json result;\n        detail::json_sax_dom_parser<basic_json> sdp(result, allow_exceptions);\n        auto ia = i.get();\n        // NOLINTNEXTLINE(hicpp-move-const-arg,performance-move-const-arg)\n        const bool res = binary_reader<decltype(ia)>(std::move(ia), input_format_t::cbor).sax_parse(input_format_t::cbor, &sdp, strict, tag_handler);\n        return res ? result : basic_json(value_t::discarded);\n    }\n\n    /// @brief create a JSON value from an input in MessagePack format\n    /// @sa https://json.nlohmann.me/api/basic_json/from_msgpack/\n    template<typename InputType>\n    JSON_HEDLEY_WARN_UNUSED_RESULT\n    static basic_json from_msgpack(InputType&& i,\n                                   const bool strict = true,\n                                   const bool allow_exceptions = true)\n    {\n        basic_json result;\n        detail::json_sax_dom_parser<basic_json> sdp(result, allow_exceptions);\n        auto ia = detail::input_adapter(std::forward<InputType>(i));\n        const bool res = binary_reader<decltype(ia)>(std::move(ia), input_format_t::msgpack).sax_parse(input_format_t::msgpack, &sdp, strict);\n        return res ? result : basic_json(value_t::discarded);\n    }\n\n    /// @brief create a JSON value from an input in MessagePack format\n    /// @sa https://json.nlohmann.me/api/basic_json/from_msgpack/\n    template<typename IteratorType>\n    JSON_HEDLEY_WARN_UNUSED_RESULT\n    static basic_json from_msgpack(IteratorType first, IteratorType last,\n                                   const bool strict = true,\n                                   const bool allow_exceptions = true)\n    {\n        basic_json result;\n        detail::json_sax_dom_parser<basic_json> sdp(result, allow_exceptions);\n        auto ia = detail::input_adapter(std::move(first), std::move(last));\n        const bool res = binary_reader<decltype(ia)>(std::move(ia), input_format_t::msgpack).sax_parse(input_format_t::msgpack, &sdp, strict);\n        return res ? result : basic_json(value_t::discarded);\n    }\n\n    template<typename T>\n    JSON_HEDLEY_WARN_UNUSED_RESULT\n    JSON_HEDLEY_DEPRECATED_FOR(3.8.0, from_msgpack(ptr, ptr + len))\n    static basic_json from_msgpack(const T* ptr, std::size_t len,\n                                   const bool strict = true,\n                                   const bool allow_exceptions = true)\n    {\n        return from_msgpack(ptr, ptr + len, strict, allow_exceptions);\n    }\n\n    JSON_HEDLEY_WARN_UNUSED_RESULT\n    JSON_HEDLEY_DEPRECATED_FOR(3.8.0, from_msgpack(ptr, ptr + len))\n    static basic_json from_msgpack(detail::span_input_adapter&& i,\n                                   const bool strict = true,\n                                   const bool allow_exceptions = true)\n    {\n        basic_json result;\n        detail::json_sax_dom_parser<basic_json> sdp(result, allow_exceptions);\n        auto ia = i.get();\n        // NOLINTNEXTLINE(hicpp-move-const-arg,performance-move-const-arg)\n        const bool res = binary_reader<decltype(ia)>(std::move(ia), input_format_t::msgpack).sax_parse(input_format_t::msgpack, &sdp, strict);\n        return res ? result : basic_json(value_t::discarded);\n    }\n\n    /// @brief create a JSON value from an input in UBJSON format\n    /// @sa https://json.nlohmann.me/api/basic_json/from_ubjson/\n    template<typename InputType>\n    JSON_HEDLEY_WARN_UNUSED_RESULT\n    static basic_json from_ubjson(InputType&& i,\n                                  const bool strict = true,\n                                  const bool allow_exceptions = true)\n    {\n        basic_json result;\n        detail::json_sax_dom_parser<basic_json> sdp(result, allow_exceptions);\n        auto ia = detail::input_adapter(std::forward<InputType>(i));\n        const bool res = binary_reader<decltype(ia)>(std::move(ia), input_format_t::ubjson).sax_parse(input_format_t::ubjson, &sdp, strict);\n        return res ? result : basic_json(value_t::discarded);\n    }\n\n    /// @brief create a JSON value from an input in UBJSON format\n    /// @sa https://json.nlohmann.me/api/basic_json/from_ubjson/\n    template<typename IteratorType>\n    JSON_HEDLEY_WARN_UNUSED_RESULT\n    static basic_json from_ubjson(IteratorType first, IteratorType last,\n                                  const bool strict = true,\n                                  const bool allow_exceptions = true)\n    {\n        basic_json result;\n        detail::json_sax_dom_parser<basic_json> sdp(result, allow_exceptions);\n        auto ia = detail::input_adapter(std::move(first), std::move(last));\n        const bool res = binary_reader<decltype(ia)>(std::move(ia), input_format_t::ubjson).sax_parse(input_format_t::ubjson, &sdp, strict);\n        return res ? result : basic_json(value_t::discarded);\n    }\n\n    template<typename T>\n    JSON_HEDLEY_WARN_UNUSED_RESULT\n    JSON_HEDLEY_DEPRECATED_FOR(3.8.0, from_ubjson(ptr, ptr + len))\n    static basic_json from_ubjson(const T* ptr, std::size_t len,\n                                  const bool strict = true,\n                                  const bool allow_exceptions = true)\n    {\n        return from_ubjson(ptr, ptr + len, strict, allow_exceptions);\n    }\n\n    JSON_HEDLEY_WARN_UNUSED_RESULT\n    JSON_HEDLEY_DEPRECATED_FOR(3.8.0, from_ubjson(ptr, ptr + len))\n    static basic_json from_ubjson(detail::span_input_adapter&& i,\n                                  const bool strict = true,\n                                  const bool allow_exceptions = true)\n    {\n        basic_json result;\n        detail::json_sax_dom_parser<basic_json> sdp(result, allow_exceptions);\n        auto ia = i.get();\n        // NOLINTNEXTLINE(hicpp-move-const-arg,performance-move-const-arg)\n        const bool res = binary_reader<decltype(ia)>(std::move(ia), input_format_t::ubjson).sax_parse(input_format_t::ubjson, &sdp, strict);\n        return res ? result : basic_json(value_t::discarded);\n    }\n\n    /// @brief create a JSON value from an input in BJData format\n    /// @sa https://json.nlohmann.me/api/basic_json/from_bjdata/\n    template<typename InputType>\n    JSON_HEDLEY_WARN_UNUSED_RESULT\n    static basic_json from_bjdata(InputType&& i,\n                                  const bool strict = true,\n                                  const bool allow_exceptions = true)\n    {\n        basic_json result;\n        detail::json_sax_dom_parser<basic_json> sdp(result, allow_exceptions);\n        auto ia = detail::input_adapter(std::forward<InputType>(i));\n        const bool res = binary_reader<decltype(ia)>(std::move(ia), input_format_t::bjdata).sax_parse(input_format_t::bjdata, &sdp, strict);\n        return res ? result : basic_json(value_t::discarded);\n    }\n\n    /// @brief create a JSON value from an input in BJData format\n    /// @sa https://json.nlohmann.me/api/basic_json/from_bjdata/\n    template<typename IteratorType>\n    JSON_HEDLEY_WARN_UNUSED_RESULT\n    static basic_json from_bjdata(IteratorType first, IteratorType last,\n                                  const bool strict = true,\n                                  const bool allow_exceptions = true)\n    {\n        basic_json result;\n        detail::json_sax_dom_parser<basic_json> sdp(result, allow_exceptions);\n        auto ia = detail::input_adapter(std::move(first), std::move(last));\n        const bool res = binary_reader<decltype(ia)>(std::move(ia), input_format_t::bjdata).sax_parse(input_format_t::bjdata, &sdp, strict);\n        return res ? result : basic_json(value_t::discarded);\n    }\n\n    /// @brief create a JSON value from an input in BSON format\n    /// @sa https://json.nlohmann.me/api/basic_json/from_bson/\n    template<typename InputType>\n    JSON_HEDLEY_WARN_UNUSED_RESULT\n    static basic_json from_bson(InputType&& i,\n                                const bool strict = true,\n                                const bool allow_exceptions = true)\n    {\n        basic_json result;\n        detail::json_sax_dom_parser<basic_json> sdp(result, allow_exceptions);\n        auto ia = detail::input_adapter(std::forward<InputType>(i));\n        const bool res = binary_reader<decltype(ia)>(std::move(ia), input_format_t::bson).sax_parse(input_format_t::bson, &sdp, strict);\n        return res ? result : basic_json(value_t::discarded);\n    }\n\n    /// @brief create a JSON value from an input in BSON format\n    /// @sa https://json.nlohmann.me/api/basic_json/from_bson/\n    template<typename IteratorType>\n    JSON_HEDLEY_WARN_UNUSED_RESULT\n    static basic_json from_bson(IteratorType first, IteratorType last,\n                                const bool strict = true,\n                                const bool allow_exceptions = true)\n    {\n        basic_json result;\n        detail::json_sax_dom_parser<basic_json> sdp(result, allow_exceptions);\n        auto ia = detail::input_adapter(std::move(first), std::move(last));\n        const bool res = binary_reader<decltype(ia)>(std::move(ia), input_format_t::bson).sax_parse(input_format_t::bson, &sdp, strict);\n        return res ? result : basic_json(value_t::discarded);\n    }\n\n    template<typename T>\n    JSON_HEDLEY_WARN_UNUSED_RESULT\n    JSON_HEDLEY_DEPRECATED_FOR(3.8.0, from_bson(ptr, ptr + len))\n    static basic_json from_bson(const T* ptr, std::size_t len,\n                                const bool strict = true,\n                                const bool allow_exceptions = true)\n    {\n        return from_bson(ptr, ptr + len, strict, allow_exceptions);\n    }\n\n    JSON_HEDLEY_WARN_UNUSED_RESULT\n    JSON_HEDLEY_DEPRECATED_FOR(3.8.0, from_bson(ptr, ptr + len))\n    static basic_json from_bson(detail::span_input_adapter&& i,\n                                const bool strict = true,\n                                const bool allow_exceptions = true)\n    {\n        basic_json result;\n        detail::json_sax_dom_parser<basic_json> sdp(result, allow_exceptions);\n        auto ia = i.get();\n        // NOLINTNEXTLINE(hicpp-move-const-arg,performance-move-const-arg)\n        const bool res = binary_reader<decltype(ia)>(std::move(ia), input_format_t::bson).sax_parse(input_format_t::bson, &sdp, strict);\n        return res ? result : basic_json(value_t::discarded);\n    }\n    /// @}\n\n    //////////////////////////\n    // JSON Pointer support //\n    //////////////////////////\n\n    /// @name JSON Pointer functions\n    /// @{\n\n    /// @brief access specified element via JSON Pointer\n    /// @sa https://json.nlohmann.me/api/basic_json/operator%5B%5D/\n    reference operator[](const json_pointer& ptr)\n    {\n        return ptr.get_unchecked(this);\n    }\n\n    template<typename BasicJsonType, detail::enable_if_t<detail::is_basic_json<BasicJsonType>::value, int> = 0>\n    JSON_HEDLEY_DEPRECATED_FOR(3.11.0, basic_json::json_pointer or nlohmann::json_pointer<basic_json::string_t>) // NOLINT(readability/alt_tokens)\n    reference operator[](const ::nlohmann::json_pointer<BasicJsonType>& ptr)\n    {\n        return ptr.get_unchecked(this);\n    }\n\n    /// @brief access specified element via JSON Pointer\n    /// @sa https://json.nlohmann.me/api/basic_json/operator%5B%5D/\n    const_reference operator[](const json_pointer& ptr) const\n    {\n        return ptr.get_unchecked(this);\n    }\n\n    template<typename BasicJsonType, detail::enable_if_t<detail::is_basic_json<BasicJsonType>::value, int> = 0>\n    JSON_HEDLEY_DEPRECATED_FOR(3.11.0, basic_json::json_pointer or nlohmann::json_pointer<basic_json::string_t>) // NOLINT(readability/alt_tokens)\n    const_reference operator[](const ::nlohmann::json_pointer<BasicJsonType>& ptr) const\n    {\n        return ptr.get_unchecked(this);\n    }\n\n    /// @brief access specified element via JSON Pointer\n    /// @sa https://json.nlohmann.me/api/basic_json/at/\n    reference at(const json_pointer& ptr)\n    {\n        return ptr.get_checked(this);\n    }\n\n    template<typename BasicJsonType, detail::enable_if_t<detail::is_basic_json<BasicJsonType>::value, int> = 0>\n    JSON_HEDLEY_DEPRECATED_FOR(3.11.0, basic_json::json_pointer or nlohmann::json_pointer<basic_json::string_t>) // NOLINT(readability/alt_tokens)\n    reference at(const ::nlohmann::json_pointer<BasicJsonType>& ptr)\n    {\n        return ptr.get_checked(this);\n    }\n\n    /// @brief access specified element via JSON Pointer\n    /// @sa https://json.nlohmann.me/api/basic_json/at/\n    const_reference at(const json_pointer& ptr) const\n    {\n        return ptr.get_checked(this);\n    }\n\n    template<typename BasicJsonType, detail::enable_if_t<detail::is_basic_json<BasicJsonType>::value, int> = 0>\n    JSON_HEDLEY_DEPRECATED_FOR(3.11.0, basic_json::json_pointer or nlohmann::json_pointer<basic_json::string_t>) // NOLINT(readability/alt_tokens)\n    const_reference at(const ::nlohmann::json_pointer<BasicJsonType>& ptr) const\n    {\n        return ptr.get_checked(this);\n    }\n\n    /// @brief return flattened JSON value\n    /// @sa https://json.nlohmann.me/api/basic_json/flatten/\n    basic_json flatten() const\n    {\n        basic_json result(value_t::object);\n        json_pointer::flatten(\"\", *this, result);\n        return result;\n    }\n\n    /// @brief unflatten a previously flattened JSON value\n    /// @sa https://json.nlohmann.me/api/basic_json/unflatten/\n    basic_json unflatten() const\n    {\n        return json_pointer::unflatten(*this);\n    }\n\n    /// @}\n\n    //////////////////////////\n    // JSON Patch functions //\n    //////////////////////////\n\n    /// @name JSON Patch functions\n    /// @{\n\n    /// @brief applies a JSON patch in-place without copying the object\n    /// @sa https://json.nlohmann.me/api/basic_json/patch/\n    void patch_inplace(const basic_json& json_patch)\n    {\n        basic_json& result = *this;\n        // the valid JSON Patch operations\n        enum class patch_operations {add, remove, replace, move, copy, test, invalid};\n\n        const auto get_op = [](const std::string & op)\n        {\n            if (op == \"add\")\n            {\n                return patch_operations::add;\n            }\n            if (op == \"remove\")\n            {\n                return patch_operations::remove;\n            }\n            if (op == \"replace\")\n            {\n                return patch_operations::replace;\n            }\n            if (op == \"move\")\n            {\n                return patch_operations::move;\n            }\n            if (op == \"copy\")\n            {\n                return patch_operations::copy;\n            }\n            if (op == \"test\")\n            {\n                return patch_operations::test;\n            }\n\n            return patch_operations::invalid;\n        };\n\n        // wrapper for \"add\" operation; add value at ptr\n        const auto operation_add = [&result](json_pointer & ptr, basic_json val)\n        {\n            // adding to the root of the target document means replacing it\n            if (ptr.empty())\n            {\n                result = val;\n                return;\n            }\n\n            // make sure the top element of the pointer exists\n            json_pointer const top_pointer = ptr.top();\n            if (top_pointer != ptr)\n            {\n                result.at(top_pointer);\n            }\n\n            // get reference to parent of JSON pointer ptr\n            const auto last_path = ptr.back();\n            ptr.pop_back();\n            // parent must exist when performing patch add per RFC6902 specs\n            basic_json& parent = result.at(ptr);\n\n            switch (parent.m_data.m_type)\n            {\n                case value_t::null:\n                case value_t::object:\n                {\n                    // use operator[] to add value\n                    parent[last_path] = val;\n                    break;\n                }\n\n                case value_t::array:\n                {\n                    if (last_path == \"-\")\n                    {\n                        // special case: append to back\n                        parent.push_back(val);\n                    }\n                    else\n                    {\n                        const auto idx = json_pointer::template array_index<basic_json_t>(last_path);\n                        if (JSON_HEDLEY_UNLIKELY(idx > parent.size()))\n                        {\n                            // avoid undefined behavior\n                            JSON_THROW(out_of_range::create(401, detail::concat(\"array index \", std::to_string(idx), \" is out of range\"), &parent));\n                        }\n\n                        // default case: insert add offset\n                        parent.insert(parent.begin() + static_cast<difference_type>(idx), val);\n                    }\n                    break;\n                }\n\n                // if there exists a parent it cannot be primitive\n                case value_t::string: // LCOV_EXCL_LINE\n                case value_t::boolean: // LCOV_EXCL_LINE\n                case value_t::number_integer: // LCOV_EXCL_LINE\n                case value_t::number_unsigned: // LCOV_EXCL_LINE\n                case value_t::number_float: // LCOV_EXCL_LINE\n                case value_t::binary: // LCOV_EXCL_LINE\n                case value_t::discarded: // LCOV_EXCL_LINE\n                default:            // LCOV_EXCL_LINE\n                    JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE\n            }\n        };\n\n        // wrapper for \"remove\" operation; remove value at ptr\n        const auto operation_remove = [this, & result](json_pointer & ptr)\n        {\n            // get reference to parent of JSON pointer ptr\n            const auto last_path = ptr.back();\n            ptr.pop_back();\n            basic_json& parent = result.at(ptr);\n\n            // remove child\n            if (parent.is_object())\n            {\n                // perform range check\n                auto it = parent.find(last_path);\n                if (JSON_HEDLEY_LIKELY(it != parent.end()))\n                {\n                    parent.erase(it);\n                }\n                else\n                {\n                    JSON_THROW(out_of_range::create(403, detail::concat(\"key '\", last_path, \"' not found\"), this));\n                }\n            }\n            else if (parent.is_array())\n            {\n                // note erase performs range check\n                parent.erase(json_pointer::template array_index<basic_json_t>(last_path));\n            }\n        };\n\n        // type check: top level value must be an array\n        if (JSON_HEDLEY_UNLIKELY(!json_patch.is_array()))\n        {\n            JSON_THROW(parse_error::create(104, 0, \"JSON patch must be an array of objects\", &json_patch));\n        }\n\n        // iterate and apply the operations\n        for (const auto& val : json_patch)\n        {\n            // wrapper to get a value for an operation\n            const auto get_value = [&val](const std::string & op,\n                                          const std::string & member,\n                                          bool string_type) -> basic_json &\n            {\n                // find value\n                auto it = val.m_data.m_value.object->find(member);\n\n                // context-sensitive error message\n                const auto error_msg = (op == \"op\") ? \"operation\" : detail::concat(\"operation '\", op, '\\''); // NOLINT(bugprone-unused-local-non-trivial-variable)\n\n                // check if desired value is present\n                if (JSON_HEDLEY_UNLIKELY(it == val.m_data.m_value.object->end()))\n                {\n                    // NOLINTNEXTLINE(performance-inefficient-string-concatenation)\n                    JSON_THROW(parse_error::create(105, 0, detail::concat(error_msg, \" must have member '\", member, \"'\"), &val));\n                }\n\n                // check if result is of type string\n                if (JSON_HEDLEY_UNLIKELY(string_type && !it->second.is_string()))\n                {\n                    // NOLINTNEXTLINE(performance-inefficient-string-concatenation)\n                    JSON_THROW(parse_error::create(105, 0, detail::concat(error_msg, \" must have string member '\", member, \"'\"), &val));\n                }\n\n                // no error: return value\n                return it->second;\n            };\n\n            // type check: every element of the array must be an object\n            if (JSON_HEDLEY_UNLIKELY(!val.is_object()))\n            {\n                JSON_THROW(parse_error::create(104, 0, \"JSON patch must be an array of objects\", &val));\n            }\n\n            // collect mandatory members\n            const auto op = get_value(\"op\", \"op\", true).template get<std::string>();\n            const auto path = get_value(op, \"path\", true).template get<std::string>();\n            json_pointer ptr(path);\n\n            switch (get_op(op))\n            {\n                case patch_operations::add:\n                {\n                    operation_add(ptr, get_value(\"add\", \"value\", false));\n                    break;\n                }\n\n                case patch_operations::remove:\n                {\n                    operation_remove(ptr);\n                    break;\n                }\n\n                case patch_operations::replace:\n                {\n                    // the \"path\" location must exist - use at()\n                    result.at(ptr) = get_value(\"replace\", \"value\", false);\n                    break;\n                }\n\n                case patch_operations::move:\n                {\n                    const auto from_path = get_value(\"move\", \"from\", true).template get<std::string>();\n                    json_pointer from_ptr(from_path);\n\n                    // the \"from\" location must exist - use at()\n                    basic_json const v = result.at(from_ptr);\n\n                    // The move operation is functionally identical to a\n                    // \"remove\" operation on the \"from\" location, followed\n                    // immediately by an \"add\" operation at the target\n                    // location with the value that was just removed.\n                    operation_remove(from_ptr);\n                    operation_add(ptr, v);\n                    break;\n                }\n\n                case patch_operations::copy:\n                {\n                    const auto from_path = get_value(\"copy\", \"from\", true).template get<std::string>();\n                    const json_pointer from_ptr(from_path);\n\n                    // the \"from\" location must exist - use at()\n                    basic_json const v = result.at(from_ptr);\n\n                    // The copy is functionally identical to an \"add\"\n                    // operation at the target location using the value\n                    // specified in the \"from\" member.\n                    operation_add(ptr, v);\n                    break;\n                }\n\n                case patch_operations::test:\n                {\n                    bool success = false;\n                    JSON_TRY\n                    {\n                        // check if \"value\" matches the one at \"path\"\n                        // the \"path\" location must exist - use at()\n                        success = (result.at(ptr) == get_value(\"test\", \"value\", false));\n                    }\n                    JSON_INTERNAL_CATCH (out_of_range&)\n                    {\n                        // ignore out of range errors: success remains false\n                    }\n\n                    // throw an exception if test fails\n                    if (JSON_HEDLEY_UNLIKELY(!success))\n                    {\n                        JSON_THROW(other_error::create(501, detail::concat(\"unsuccessful: \", val.dump()), &val));\n                    }\n\n                    break;\n                }\n\n                case patch_operations::invalid:\n                default:\n                {\n                    // op must be \"add\", \"remove\", \"replace\", \"move\", \"copy\", or\n                    // \"test\"\n                    JSON_THROW(parse_error::create(105, 0, detail::concat(\"operation value '\", op, \"' is invalid\"), &val));\n                }\n            }\n        }\n    }\n\n    /// @brief applies a JSON patch to a copy of the current object\n    /// @sa https://json.nlohmann.me/api/basic_json/patch/\n    basic_json patch(const basic_json& json_patch) const\n    {\n        basic_json result = *this;\n        result.patch_inplace(json_patch);\n        return result;\n    }\n\n    /// @brief creates a diff as a JSON patch\n    /// @sa https://json.nlohmann.me/api/basic_json/diff/\n    JSON_HEDLEY_WARN_UNUSED_RESULT\n    static basic_json diff(const basic_json& source, const basic_json& target,\n                           const std::string& path = \"\")\n    {\n        // the patch\n        basic_json result(value_t::array);\n\n        // if the values are the same, return empty patch\n        if (source == target)\n        {\n            return result;\n        }\n\n        if (source.type() != target.type())\n        {\n            // different types: replace value\n            result.push_back(\n            {\n                {\"op\", \"replace\"}, {\"path\", path}, {\"value\", target}\n            });\n            return result;\n        }\n\n        switch (source.type())\n        {\n            case value_t::array:\n            {\n                // first pass: traverse common elements\n                std::size_t i = 0;\n                while (i < source.size() && i < target.size())\n                {\n                    // recursive call to compare array values at index i\n                    auto temp_diff = diff(source[i], target[i], detail::concat(path, '/', std::to_string(i)));\n                    result.insert(result.end(), temp_diff.begin(), temp_diff.end());\n                    ++i;\n                }\n\n                // We now reached the end of at least one array\n                // in a second pass, traverse the remaining elements\n\n                // remove my remaining elements\n                const auto end_index = static_cast<difference_type>(result.size());\n                while (i < source.size())\n                {\n                    // add operations in reverse order to avoid invalid\n                    // indices\n                    result.insert(result.begin() + end_index, object(\n                    {\n                        {\"op\", \"remove\"},\n                        {\"path\", detail::concat(path, '/', std::to_string(i))}\n                    }));\n                    ++i;\n                }\n\n                // add other remaining elements\n                while (i < target.size())\n                {\n                    result.push_back(\n                    {\n                        {\"op\", \"add\"},\n                        {\"path\", detail::concat(path, \"/-\")},\n                        {\"value\", target[i]}\n                    });\n                    ++i;\n                }\n\n                break;\n            }\n\n            case value_t::object:\n            {\n                // first pass: traverse this object's elements\n                for (auto it = source.cbegin(); it != source.cend(); ++it)\n                {\n                    // escape the key name to be used in a JSON patch\n                    const auto path_key = detail::concat(path, '/', detail::escape(it.key()));\n\n                    if (target.find(it.key()) != target.end())\n                    {\n                        // recursive call to compare object values at key it\n                        auto temp_diff = diff(it.value(), target[it.key()], path_key);\n                        result.insert(result.end(), temp_diff.begin(), temp_diff.end());\n                    }\n                    else\n                    {\n                        // found a key that is not in o -> remove it\n                        result.push_back(object(\n                        {\n                            {\"op\", \"remove\"}, {\"path\", path_key}\n                        }));\n                    }\n                }\n\n                // second pass: traverse other object's elements\n                for (auto it = target.cbegin(); it != target.cend(); ++it)\n                {\n                    if (source.find(it.key()) == source.end())\n                    {\n                        // found a key that is not in this -> add it\n                        const auto path_key = detail::concat(path, '/', detail::escape(it.key()));\n                        result.push_back(\n                        {\n                            {\"op\", \"add\"}, {\"path\", path_key},\n                            {\"value\", it.value()}\n                        });\n                    }\n                }\n\n                break;\n            }\n\n            case value_t::null:\n            case value_t::string:\n            case value_t::boolean:\n            case value_t::number_integer:\n            case value_t::number_unsigned:\n            case value_t::number_float:\n            case value_t::binary:\n            case value_t::discarded:\n            default:\n            {\n                // both primitive type: replace value\n                result.push_back(\n                {\n                    {\"op\", \"replace\"}, {\"path\", path}, {\"value\", target}\n                });\n                break;\n            }\n        }\n\n        return result;\n    }\n    /// @}\n\n    ////////////////////////////////\n    // JSON Merge Patch functions //\n    ////////////////////////////////\n\n    /// @name JSON Merge Patch functions\n    /// @{\n\n    /// @brief applies a JSON Merge Patch\n    /// @sa https://json.nlohmann.me/api/basic_json/merge_patch/\n    void merge_patch(const basic_json& apply_patch)\n    {\n        if (apply_patch.is_object())\n        {\n            if (!is_object())\n            {\n                *this = object();\n            }\n            for (auto it = apply_patch.begin(); it != apply_patch.end(); ++it)\n            {\n                if (it.value().is_null())\n                {\n                    erase(it.key());\n                }\n                else\n                {\n                    operator[](it.key()).merge_patch(it.value());\n                }\n            }\n        }\n        else\n        {\n            *this = apply_patch;\n        }\n    }\n\n    /// @}\n};\n\n/// @brief user-defined to_string function for JSON values\n/// @sa https://json.nlohmann.me/api/basic_json/to_string/\nNLOHMANN_BASIC_JSON_TPL_DECLARATION\nstd::string to_string(const NLOHMANN_BASIC_JSON_TPL& j)\n{\n    return j.dump();\n}\n\ninline namespace literals\n{\ninline namespace json_literals\n{\n\n/// @brief user-defined string literal for JSON values\n/// @sa https://json.nlohmann.me/api/basic_json/operator_literal_json/\nJSON_HEDLEY_NON_NULL(1)\n#if !defined(JSON_HEDLEY_GCC_VERSION) || JSON_HEDLEY_GCC_VERSION_CHECK(4,9,0)\n    inline nlohmann::json operator \"\"_json(const char* s, std::size_t n)\n#else\n    inline nlohmann::json operator \"\" _json(const char* s, std::size_t n)\n#endif\n{\n    return nlohmann::json::parse(s, s + n);\n}\n\n/// @brief user-defined string literal for JSON pointer\n/// @sa https://json.nlohmann.me/api/basic_json/operator_literal_json_pointer/\nJSON_HEDLEY_NON_NULL(1)\n#if !defined(JSON_HEDLEY_GCC_VERSION) || JSON_HEDLEY_GCC_VERSION_CHECK(4,9,0)\n    inline nlohmann::json::json_pointer operator \"\"_json_pointer(const char* s, std::size_t n)\n#else\n    inline nlohmann::json::json_pointer operator \"\" _json_pointer(const char* s, std::size_t n)\n#endif\n{\n    return nlohmann::json::json_pointer(std::string(s, n));\n}\n\n}  // namespace json_literals\n}  // namespace literals\nNLOHMANN_JSON_NAMESPACE_END\n\n///////////////////////\n// nonmember support //\n///////////////////////\n\nnamespace std // NOLINT(cert-dcl58-cpp)\n{\n\n/// @brief hash value for JSON objects\n/// @sa https://json.nlohmann.me/api/basic_json/std_hash/\nNLOHMANN_BASIC_JSON_TPL_DECLARATION\nstruct hash<nlohmann::NLOHMANN_BASIC_JSON_TPL> // NOLINT(cert-dcl58-cpp)\n{\n    std::size_t operator()(const nlohmann::NLOHMANN_BASIC_JSON_TPL& j) const\n    {\n        return nlohmann::detail::hash(j);\n    }\n};\n\n// specialization for std::less<value_t>\ntemplate<>\nstruct less< ::nlohmann::detail::value_t> // do not remove the space after '<', see https://github.com/nlohmann/json/pull/679\n{\n    /*!\n    @brief compare two value_t enum values\n    @since version 3.0.0\n    */\n    bool operator()(::nlohmann::detail::value_t lhs,\n                    ::nlohmann::detail::value_t rhs) const noexcept\n    {\n#if JSON_HAS_THREE_WAY_COMPARISON\n        return std::is_lt(lhs <=> rhs); // *NOPAD*\n#else\n        return ::nlohmann::detail::operator<(lhs, rhs);\n#endif\n    }\n};\n\n// C++20 prohibit function specialization in the std namespace.\n#ifndef JSON_HAS_CPP_20\n\n/// @brief exchanges the values of two JSON objects\n/// @sa https://json.nlohmann.me/api/basic_json/std_swap/\nNLOHMANN_BASIC_JSON_TPL_DECLARATION\ninline void swap(nlohmann::NLOHMANN_BASIC_JSON_TPL& j1, nlohmann::NLOHMANN_BASIC_JSON_TPL& j2) noexcept(  // NOLINT(readability-inconsistent-declaration-parameter-name, cert-dcl58-cpp)\n    is_nothrow_move_constructible<nlohmann::NLOHMANN_BASIC_JSON_TPL>::value&&                          // NOLINT(misc-redundant-expression,cppcoreguidelines-noexcept-swap,performance-noexcept-swap)\n    is_nothrow_move_assignable<nlohmann::NLOHMANN_BASIC_JSON_TPL>::value)\n{\n    j1.swap(j2);\n}\n\n#endif\n\n}  // namespace std\n\n#if JSON_USE_GLOBAL_UDLS\n    #if !defined(JSON_HEDLEY_GCC_VERSION) || JSON_HEDLEY_GCC_VERSION_CHECK(4,9,0)\n        using nlohmann::literals::json_literals::operator \"\"_json; // NOLINT(misc-unused-using-decls,google-global-names-in-headers)\n        using nlohmann::literals::json_literals::operator \"\"_json_pointer; //NOLINT(misc-unused-using-decls,google-global-names-in-headers)\n    #else\n        using nlohmann::literals::json_literals::operator \"\" _json; // NOLINT(misc-unused-using-decls,google-global-names-in-headers)\n        using nlohmann::literals::json_literals::operator \"\" _json_pointer; //NOLINT(misc-unused-using-decls,google-global-names-in-headers)\n    #endif\n#endif\n\n// #include <nlohmann/detail/macro_unscope.hpp>\n//     __ _____ _____ _____\n//  __|  |   __|     |   | |  JSON for Modern C++\n// |  |  |__   |  |  | | | |  version 3.11.3\n// |_____|_____|_____|_|___|  https://github.com/nlohmann/json\n//\n// SPDX-FileCopyrightText: 2013-2023 Niels Lohmann <https://nlohmann.me>\n// SPDX-License-Identifier: MIT\n\n\n\n// restore clang diagnostic settings\n#if defined(__clang__)\n    #pragma clang diagnostic pop\n#endif\n\n// clean up\n#undef JSON_ASSERT\n#undef JSON_INTERNAL_CATCH\n#undef JSON_THROW\n#undef JSON_PRIVATE_UNLESS_TESTED\n#undef NLOHMANN_BASIC_JSON_TPL_DECLARATION\n#undef NLOHMANN_BASIC_JSON_TPL\n#undef JSON_EXPLICIT\n#undef NLOHMANN_CAN_CALL_STD_FUNC_IMPL\n#undef JSON_INLINE_VARIABLE\n#undef JSON_NO_UNIQUE_ADDRESS\n#undef JSON_DISABLE_ENUM_SERIALIZATION\n#undef JSON_USE_GLOBAL_UDLS\n\n#ifndef JSON_TEST_KEEP_MACROS\n    #undef JSON_CATCH\n    #undef JSON_TRY\n    #undef JSON_HAS_CPP_11\n    #undef JSON_HAS_CPP_14\n    #undef JSON_HAS_CPP_17\n    #undef JSON_HAS_CPP_20\n    #undef JSON_HAS_FILESYSTEM\n    #undef JSON_HAS_EXPERIMENTAL_FILESYSTEM\n    #undef JSON_HAS_THREE_WAY_COMPARISON\n    #undef JSON_HAS_RANGES\n    #undef JSON_HAS_STATIC_RTTI\n    #undef JSON_USE_LEGACY_DISCARDED_VALUE_COMPARISON\n#endif\n\n// #include <nlohmann/thirdparty/hedley/hedley_undef.hpp>\n//     __ _____ _____ _____\n//  __|  |   __|     |   | |  JSON for Modern C++\n// |  |  |__   |  |  | | | |  version 3.11.3\n// |_____|_____|_____|_|___|  https://github.com/nlohmann/json\n//\n// SPDX-FileCopyrightText: 2013-2023 Niels Lohmann <https://nlohmann.me>\n// SPDX-License-Identifier: MIT\n\n\n\n#undef JSON_HEDLEY_ALWAYS_INLINE\n#undef JSON_HEDLEY_ARM_VERSION\n#undef JSON_HEDLEY_ARM_VERSION_CHECK\n#undef JSON_HEDLEY_ARRAY_PARAM\n#undef JSON_HEDLEY_ASSUME\n#undef JSON_HEDLEY_BEGIN_C_DECLS\n#undef JSON_HEDLEY_CLANG_HAS_ATTRIBUTE\n#undef JSON_HEDLEY_CLANG_HAS_BUILTIN\n#undef JSON_HEDLEY_CLANG_HAS_CPP_ATTRIBUTE\n#undef JSON_HEDLEY_CLANG_HAS_DECLSPEC_DECLSPEC_ATTRIBUTE\n#undef JSON_HEDLEY_CLANG_HAS_EXTENSION\n#undef JSON_HEDLEY_CLANG_HAS_FEATURE\n#undef JSON_HEDLEY_CLANG_HAS_WARNING\n#undef JSON_HEDLEY_COMPCERT_VERSION\n#undef JSON_HEDLEY_COMPCERT_VERSION_CHECK\n#undef JSON_HEDLEY_CONCAT\n#undef JSON_HEDLEY_CONCAT3\n#undef JSON_HEDLEY_CONCAT3_EX\n#undef JSON_HEDLEY_CONCAT_EX\n#undef JSON_HEDLEY_CONST\n#undef JSON_HEDLEY_CONSTEXPR\n#undef JSON_HEDLEY_CONST_CAST\n#undef JSON_HEDLEY_CPP_CAST\n#undef JSON_HEDLEY_CRAY_VERSION\n#undef JSON_HEDLEY_CRAY_VERSION_CHECK\n#undef JSON_HEDLEY_C_DECL\n#undef JSON_HEDLEY_DEPRECATED\n#undef JSON_HEDLEY_DEPRECATED_FOR\n#undef JSON_HEDLEY_DIAGNOSTIC_DISABLE_CAST_QUAL\n#undef JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_\n#undef JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED\n#undef JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES\n#undef JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS\n#undef JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNUSED_FUNCTION\n#undef JSON_HEDLEY_DIAGNOSTIC_POP\n#undef JSON_HEDLEY_DIAGNOSTIC_PUSH\n#undef JSON_HEDLEY_DMC_VERSION\n#undef JSON_HEDLEY_DMC_VERSION_CHECK\n#undef JSON_HEDLEY_EMPTY_BASES\n#undef JSON_HEDLEY_EMSCRIPTEN_VERSION\n#undef JSON_HEDLEY_EMSCRIPTEN_VERSION_CHECK\n#undef JSON_HEDLEY_END_C_DECLS\n#undef JSON_HEDLEY_FLAGS\n#undef JSON_HEDLEY_FLAGS_CAST\n#undef JSON_HEDLEY_GCC_HAS_ATTRIBUTE\n#undef JSON_HEDLEY_GCC_HAS_BUILTIN\n#undef JSON_HEDLEY_GCC_HAS_CPP_ATTRIBUTE\n#undef JSON_HEDLEY_GCC_HAS_DECLSPEC_ATTRIBUTE\n#undef JSON_HEDLEY_GCC_HAS_EXTENSION\n#undef JSON_HEDLEY_GCC_HAS_FEATURE\n#undef JSON_HEDLEY_GCC_HAS_WARNING\n#undef JSON_HEDLEY_GCC_NOT_CLANG_VERSION_CHECK\n#undef JSON_HEDLEY_GCC_VERSION\n#undef JSON_HEDLEY_GCC_VERSION_CHECK\n#undef JSON_HEDLEY_GNUC_HAS_ATTRIBUTE\n#undef JSON_HEDLEY_GNUC_HAS_BUILTIN\n#undef JSON_HEDLEY_GNUC_HAS_CPP_ATTRIBUTE\n#undef JSON_HEDLEY_GNUC_HAS_DECLSPEC_ATTRIBUTE\n#undef JSON_HEDLEY_GNUC_HAS_EXTENSION\n#undef JSON_HEDLEY_GNUC_HAS_FEATURE\n#undef JSON_HEDLEY_GNUC_HAS_WARNING\n#undef JSON_HEDLEY_GNUC_VERSION\n#undef JSON_HEDLEY_GNUC_VERSION_CHECK\n#undef JSON_HEDLEY_HAS_ATTRIBUTE\n#undef JSON_HEDLEY_HAS_BUILTIN\n#undef JSON_HEDLEY_HAS_CPP_ATTRIBUTE\n#undef JSON_HEDLEY_HAS_CPP_ATTRIBUTE_NS\n#undef JSON_HEDLEY_HAS_DECLSPEC_ATTRIBUTE\n#undef JSON_HEDLEY_HAS_EXTENSION\n#undef JSON_HEDLEY_HAS_FEATURE\n#undef JSON_HEDLEY_HAS_WARNING\n#undef JSON_HEDLEY_IAR_VERSION\n#undef JSON_HEDLEY_IAR_VERSION_CHECK\n#undef JSON_HEDLEY_IBM_VERSION\n#undef JSON_HEDLEY_IBM_VERSION_CHECK\n#undef JSON_HEDLEY_IMPORT\n#undef JSON_HEDLEY_INLINE\n#undef JSON_HEDLEY_INTEL_CL_VERSION\n#undef JSON_HEDLEY_INTEL_CL_VERSION_CHECK\n#undef JSON_HEDLEY_INTEL_VERSION\n#undef JSON_HEDLEY_INTEL_VERSION_CHECK\n#undef JSON_HEDLEY_IS_CONSTANT\n#undef JSON_HEDLEY_IS_CONSTEXPR_\n#undef JSON_HEDLEY_LIKELY\n#undef JSON_HEDLEY_MALLOC\n#undef JSON_HEDLEY_MCST_LCC_VERSION\n#undef JSON_HEDLEY_MCST_LCC_VERSION_CHECK\n#undef JSON_HEDLEY_MESSAGE\n#undef JSON_HEDLEY_MSVC_VERSION\n#undef JSON_HEDLEY_MSVC_VERSION_CHECK\n#undef JSON_HEDLEY_NEVER_INLINE\n#undef JSON_HEDLEY_NON_NULL\n#undef JSON_HEDLEY_NO_ESCAPE\n#undef JSON_HEDLEY_NO_RETURN\n#undef JSON_HEDLEY_NO_THROW\n#undef JSON_HEDLEY_NULL\n#undef JSON_HEDLEY_PELLES_VERSION\n#undef JSON_HEDLEY_PELLES_VERSION_CHECK\n#undef JSON_HEDLEY_PGI_VERSION\n#undef JSON_HEDLEY_PGI_VERSION_CHECK\n#undef JSON_HEDLEY_PREDICT\n#undef JSON_HEDLEY_PRINTF_FORMAT\n#undef JSON_HEDLEY_PRIVATE\n#undef JSON_HEDLEY_PUBLIC\n#undef JSON_HEDLEY_PURE\n#undef JSON_HEDLEY_REINTERPRET_CAST\n#undef JSON_HEDLEY_REQUIRE\n#undef JSON_HEDLEY_REQUIRE_CONSTEXPR\n#undef JSON_HEDLEY_REQUIRE_MSG\n#undef JSON_HEDLEY_RESTRICT\n#undef JSON_HEDLEY_RETURNS_NON_NULL\n#undef JSON_HEDLEY_SENTINEL\n#undef JSON_HEDLEY_STATIC_ASSERT\n#undef JSON_HEDLEY_STATIC_CAST\n#undef JSON_HEDLEY_STRINGIFY\n#undef JSON_HEDLEY_STRINGIFY_EX\n#undef JSON_HEDLEY_SUNPRO_VERSION\n#undef JSON_HEDLEY_SUNPRO_VERSION_CHECK\n#undef JSON_HEDLEY_TINYC_VERSION\n#undef JSON_HEDLEY_TINYC_VERSION_CHECK\n#undef JSON_HEDLEY_TI_ARMCL_VERSION\n#undef JSON_HEDLEY_TI_ARMCL_VERSION_CHECK\n#undef JSON_HEDLEY_TI_CL2000_VERSION\n#undef JSON_HEDLEY_TI_CL2000_VERSION_CHECK\n#undef JSON_HEDLEY_TI_CL430_VERSION\n#undef JSON_HEDLEY_TI_CL430_VERSION_CHECK\n#undef JSON_HEDLEY_TI_CL6X_VERSION\n#undef JSON_HEDLEY_TI_CL6X_VERSION_CHECK\n#undef JSON_HEDLEY_TI_CL7X_VERSION\n#undef JSON_HEDLEY_TI_CL7X_VERSION_CHECK\n#undef JSON_HEDLEY_TI_CLPRU_VERSION\n#undef JSON_HEDLEY_TI_CLPRU_VERSION_CHECK\n#undef JSON_HEDLEY_TI_VERSION\n#undef JSON_HEDLEY_TI_VERSION_CHECK\n#undef JSON_HEDLEY_UNAVAILABLE\n#undef JSON_HEDLEY_UNLIKELY\n#undef JSON_HEDLEY_UNPREDICTABLE\n#undef JSON_HEDLEY_UNREACHABLE\n#undef JSON_HEDLEY_UNREACHABLE_RETURN\n#undef JSON_HEDLEY_VERSION\n#undef JSON_HEDLEY_VERSION_DECODE_MAJOR\n#undef JSON_HEDLEY_VERSION_DECODE_MINOR\n#undef JSON_HEDLEY_VERSION_DECODE_REVISION\n#undef JSON_HEDLEY_VERSION_ENCODE\n#undef JSON_HEDLEY_WARNING\n#undef JSON_HEDLEY_WARN_UNUSED_RESULT\n#undef JSON_HEDLEY_WARN_UNUSED_RESULT_MSG\n#undef JSON_HEDLEY_FALL_THROUGH\n\n\n\n#endif  // INCLUDE_NLOHMANN_JSON_HPP_\n` was unexpected", "path": "llama/json.hpp", "type": "Syntax error"}, {"code": 2, "level": "warn", "message": "Timeout when running cpp.lang.security.strings.wide-to-narrow-string-mismatch.wide-to-narrow-string-mismatch on llama/ggml.c:\n ", "path": "llama/ggml.c", "rule_id": "cpp.lang.security.strings.wide-to-narrow-string-mismatch.wide-to-narrow-string-mismatch", "type": "Timeout"}, {"code": 2, "level": "warn", "message": "Timeout when running cpp.lang.security.use-after-free.local-variable-malloc-free.local-variable-malloc-free on llama/ggml.c:\n ", "path": "llama/ggml.c", "rule_id": "cpp.lang.security.use-after-free.local-variable-malloc-free.local-variable-malloc-free", "type": "Timeout"}, {"code": 2, "level": "warn", "message": "Timeout when running cpp.lang.security.use-after-free.local-variable-new-delete.local-variable-new-delete on llama/ggml.c:\n ", "path": "llama/ggml.c", "rule_id": "cpp.lang.security.use-after-free.local-variable-new-delete.local-variable-new-delete", "type": "Timeout"}, {"code": 3, "level": "warn", "message": "Syntax error at line llama/ggml-quants.c:1:\n `/**\n * llama.cpp - commit 3f1ae2e32cde00c39b96be6d01c2997c29bae555 - do not edit this file\n *\n * MIT License\n *\n * Copyright (c) 2023-2024 The ggml authors\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n#define GGML_COMMON_IMPL_C\n#include \"ggml-common.h\"\n\n#include \"ggml-quants.h\"\n#include \"ggml-impl.h\"\n#include \"ggml-cpu-impl.h\"\n\n\n#include <math.h>\n#include <string.h>\n#include <assert.h>\n#include <float.h>\n#include <stdlib.h> // for qsort\n#include <stdio.h>  // for GGML_ASSERT\n\n#define GROUP_MAX_EPS 1e-15f\n#define GROUP_MAX_EPS_IQ3_XXS 1e-8f\n#define GROUP_MAX_EPS_IQ2_S 1e-8f\n#define GROUP_MAX_EPS_IQ1_M 1e-7f\n#define GROUP_MAX_EPS_IQ1_S 1e-12f\n\n#if defined(_MSC_VER)\n// disable \"possible loss of data\" to avoid warnings for hundreds of casts\n// we should just be careful :)\n#pragma warning(disable: 4244 4267)\n#endif\n\n#define UNUSED GGML_UNUSED\n\n// some compilers don't provide _mm256_set_m128i, e.g. gcc 7\n#define MM256_SET_M128I(a, b) _mm256_insertf128_si256(_mm256_castsi128_si256(b), (a), 1)\n\n#if defined(__AVX__) || defined(__AVX2__) || defined(__AVX512F__) || defined(__SSSE3__)\n// multiply int8_t, add results pairwise twice\nstatic inline __m128i mul_sum_i8_pairs(const __m128i x, const __m128i y) {\n    // Get absolute values of x vectors\n    const __m128i ax = _mm_sign_epi8(x, x);\n    // Sign the values of the y vectors\n    const __m128i sy = _mm_sign_epi8(y, x);\n    // Perform multiplication and create 16-bit values\n    const __m128i dot = _mm_maddubs_epi16(ax, sy);\n    const __m128i ones = _mm_set1_epi16(1);\n    return _mm_madd_epi16(ones, dot);\n}\n\n#if __AVX__ || __AVX2__ || __AVX512F__\n// horizontally add 8 floats\nstatic inline float hsum_float_8(const __m256 x) {\n    __m128 res = _mm256_extractf128_ps(x, 1);\n    res = _mm_add_ps(res, _mm256_castps256_ps128(x));\n    res = _mm_add_ps(res, _mm_movehl_ps(res, res));\n    res = _mm_add_ss(res, _mm_movehdup_ps(res));\n    return _mm_cvtss_f32(res);\n}\n\n// horizontally add 8 int32_t\nstatic inline int hsum_i32_8(const __m256i a) {\n    const __m128i sum128 = _mm_add_epi32(_mm256_castsi256_si128(a), _mm256_extractf128_si256(a, 1));\n    const __m128i hi64 = _mm_unpackhi_epi64(sum128, sum128);\n    const __m128i sum64 = _mm_add_epi32(hi64, sum128);\n    const __m128i hi32  = _mm_shuffle_epi32(sum64, _MM_SHUFFLE(2, 3, 0, 1));\n    return _mm_cvtsi128_si32(_mm_add_epi32(sum64, hi32));\n}\n\n// horizontally add 4 int32_t\nstatic inline int hsum_i32_4(const __m128i a) {\n    const __m128i hi64 = _mm_unpackhi_epi64(a, a);\n    const __m128i sum64 = _mm_add_epi32(hi64, a);\n    const __m128i hi32  = _mm_shuffle_epi32(sum64, _MM_SHUFFLE(2, 3, 0, 1));\n    return _mm_cvtsi128_si32(_mm_add_epi32(sum64, hi32));\n}\n\n#if defined(__AVX2__) || defined(__AVX512F__)\n// spread 32 bits to 32 bytes { 0x00, 0xFF }\nstatic inline __m256i bytes_from_bits_32(const uint8_t * x) {\n    uint32_t x32;\n    memcpy(&x32, x, sizeof(uint32_t));\n    const __m256i shuf_mask = _mm256_set_epi64x(\n            0x0303030303030303, 0x0202020202020202,\n            0x0101010101010101, 0x0000000000000000);\n    __m256i bytes = _mm256_shuffle_epi8(_mm256_set1_epi32(x32), shuf_mask);\n    const __m256i bit_mask = _mm256_set1_epi64x(0x7fbfdfeff7fbfdfe);\n    bytes = _mm256_or_si256(bytes, bit_mask);\n    return _mm256_cmpeq_epi8(bytes, _mm256_set1_epi64x(-1));\n}\n\n// Unpack 32 4-bit fields into 32 bytes\n// The output vector contains 32 bytes, each one in [ 0 .. 15 ] interval\nstatic inline __m256i bytes_from_nibbles_32(const uint8_t * rsi)\n{\n    const __m128i tmp = _mm_loadu_si128((const __m128i *)rsi);\n    const __m256i bytes = MM256_SET_M128I(_mm_srli_epi16(tmp, 4), tmp);\n    const __m256i lowMask = _mm256_set1_epi8( 0xF );\n    return _mm256_and_si256(lowMask, bytes);\n}\n\n// add int16_t pairwise and return as float vector\nstatic inline __m256 sum_i16_pairs_float(const __m256i x) {\n    const __m256i ones = _mm256_set1_epi16(1);\n    const __m256i summed_pairs = _mm256_madd_epi16(ones, x);\n    return _mm256_cvtepi32_ps(summed_pairs);\n}\n\nstatic inline __m256 mul_sum_us8_pairs_float(const __m256i ax, const __m256i sy) {\n#if defined(__AVXVNNI__) || (defined(__AVX512VNNI__) && defined(__AVX512VL__))\n    const __m256i zero = _mm256_setzero_si256();\n    const __m256i summed_pairs = _mm256_dpbusd_epi32(zero, ax, sy);\n    return _mm256_cvtepi32_ps(summed_pairs);\n#else\n    // Perform multiplication and create 16-bit values\n    const __m256i dot = _mm256_maddubs_epi16(ax, sy);\n    return sum_i16_pairs_float(dot);\n#endif\n}\n\n// multiply int8_t, add results pairwise twice and return as float vector\nstatic inline __m256 mul_sum_i8_pairs_float(const __m256i x, const __m256i y) {\n#if __AVXVNNIINT8__\n    const __m256i zero = _mm256_setzero_si256();\n    const __m256i summed_pairs = _mm256_dpbssd_epi32(zero, x, y);\n    return _mm256_cvtepi32_ps(summed_pairs);\n#else\n    // Get absolute values of x vectors\n    const __m256i ax = _mm256_sign_epi8(x, x);\n    // Sign the values of the y vectors\n    const __m256i sy = _mm256_sign_epi8(y, x);\n    return mul_sum_us8_pairs_float(ax, sy);\n#endif\n}\n\nstatic inline __m128i packNibbles( __m256i bytes )\n{\n    // Move bits within 16-bit lanes from 0000_abcd_0000_efgh into 0000_0000_abcd_efgh\n#if __AVX512F__\n    const __m256i bytes_srli_4 = _mm256_srli_epi16(bytes, 4);   // 0000_0000_abcd_0000\n    bytes = _mm256_or_si256(bytes, bytes_srli_4);               // 0000_abcd_abcd_efgh\n    return _mm256_cvtepi16_epi8(bytes);                         // abcd_efgh\n#else\n    const __m256i lowByte = _mm256_set1_epi16( 0xFF );\n    __m256i high = _mm256_andnot_si256( lowByte, bytes );\n    __m256i low = _mm256_and_si256( lowByte, bytes );\n    high = _mm256_srli_epi16( high, 4 );\n    bytes = _mm256_or_si256( low, high );\n\n    // Compress uint16_t lanes into bytes\n    __m128i r0 = _mm256_castsi256_si128( bytes );\n    __m128i r1 = _mm256_extracti128_si256( bytes, 1 );\n    return _mm_packus_epi16( r0, r1 );\n#endif\n}\n#elif defined(__AVX__)\n// spread 32 bits to 32 bytes { 0x00, 0xFF }\nstatic inline __m256i bytes_from_bits_32(const uint8_t * x) {\n    uint32_t x32;\n    memcpy(&x32, x, sizeof(uint32_t));\n    const __m128i shuf_maskl = _mm_set_epi64x(0x0101010101010101, 0x0000000000000000);\n    const __m128i shuf_maskh = _mm_set_epi64x(0x0303030303030303, 0x0202020202020202);\n    __m128i bytesl = _mm_shuffle_epi8(_mm_set1_epi32(x32), shuf_maskl);\n    __m128i bytesh = _mm_shuffle_epi8(_mm_set1_epi32(x32), shuf_maskh);\n    const __m128i bit_mask = _mm_set1_epi64x(0x7fbfdfeff7fbfdfe);\n    bytesl = _mm_or_si128(bytesl, bit_mask);\n    bytesh = _mm_or_si128(bytesh, bit_mask);\n    bytesl = _mm_cmpeq_epi8(bytesl, _mm_set1_epi64x(-1));\n    bytesh = _mm_cmpeq_epi8(bytesh, _mm_set1_epi64x(-1));\n    return MM256_SET_M128I(bytesh, bytesl);\n}\n\n// Unpack 32 4-bit fields into 32 bytes\n// The output vector contains 32 bytes, each one in [ 0 .. 15 ] interval\nstatic inline __m256i bytes_from_nibbles_32(const uint8_t * rsi)\n{\n    // Load 16 bytes from memory\n    __m128i tmpl = _mm_loadu_si128((const __m128i *)rsi);\n    __m128i tmph = _mm_srli_epi16(tmpl, 4);\n    const __m128i lowMask = _mm_set1_epi8(0xF);\n    tmpl = _mm_and_si128(lowMask, tmpl);\n    tmph = _mm_and_si128(lowMask, tmph);\n    return MM256_SET_M128I(tmph, tmpl);\n}\n\n// add int16_t pairwise and return as float vector\nstatic inline __m256 sum_i16_pairs_float(const __m128i xh, const __m128i xl) {\n    const __m128i ones = _mm_set1_epi16(1);\n    const __m128i summed_pairsl = _mm_madd_epi16(ones, xl);\n    const __m128i summed_pairsh = _mm_madd_epi16(ones, xh);\n    const __m256i summed_pairs = MM256_SET_M128I(summed_pairsh, summed_pairsl);\n    return _mm256_cvtepi32_ps(summed_pairs);\n}\n\nstatic inline __m256 mul_sum_us8_pairs_float(const __m256i ax, const __m256i sy) {\n    const __m128i axl = _mm256_castsi256_si128(ax);\n    const __m128i axh = _mm256_extractf128_si256(ax, 1);\n    const __m128i syl = _mm256_castsi256_si128(sy);\n    const __m128i syh = _mm256_extractf128_si256(sy, 1);\n    // Perform multiplication and create 16-bit values\n    const __m128i dotl = _mm_maddubs_epi16(axl, syl);\n    const __m128i doth = _mm_maddubs_epi16(axh, syh);\n    return sum_i16_pairs_float(doth, dotl);\n}\n\n// multiply int8_t, add results pairwise twice and return as float vector\nstatic inline __m256 mul_sum_i8_pairs_float(const __m256i x, const __m256i y) {\n    const __m128i xl = _mm256_castsi256_si128(x);\n    const __m128i xh = _mm256_extractf128_si256(x, 1);\n    const __m128i yl = _mm256_castsi256_si128(y);\n    const __m128i yh = _mm256_extractf128_si256(y, 1);\n    // Get absolute values of x vectors\n    const __m128i axl = _mm_sign_epi8(xl, xl);\n    const __m128i axh = _mm_sign_epi8(xh, xh);\n    // Sign the values of the y vectors\n    const __m128i syl = _mm_sign_epi8(yl, xl);\n    const __m128i syh = _mm_sign_epi8(yh, xh);\n    // Perform multiplication and create 16-bit values\n    const __m128i dotl = _mm_maddubs_epi16(axl, syl);\n    const __m128i doth = _mm_maddubs_epi16(axh, syh);\n    return sum_i16_pairs_float(doth, dotl);\n}\n\nstatic inline __m128i packNibbles( __m128i bytes1, __m128i bytes2 )\n{\n    // Move bits within 16-bit lanes from 0000_abcd_0000_efgh into 0000_0000_abcd_efgh\n    const __m128i lowByte = _mm_set1_epi16( 0xFF );\n    __m128i high = _mm_andnot_si128( lowByte, bytes1 );\n    __m128i low = _mm_and_si128( lowByte, bytes1 );\n    high = _mm_srli_epi16( high, 4 );\n    bytes1 = _mm_or_si128( low, high );\n    high = _mm_andnot_si128( lowByte, bytes2 );\n    low = _mm_and_si128( lowByte, bytes2 );\n    high = _mm_srli_epi16( high, 4 );\n    bytes2 = _mm_or_si128( low, high );\n\n    return _mm_packus_epi16( bytes1, bytes2);\n}\n\nstatic inline __m128i mul_add_epi8_sse(const __m128i x, const __m128i y) {\n    const __m128i ax = _mm_sign_epi8(x, x);\n    const __m128i sy = _mm_sign_epi8(y, x);\n    return _mm_maddubs_epi16(ax, sy);\n}\n#endif\n#elif defined(__SSSE3__)\n// horizontally add 4x4 floats\nstatic inline float hsum_float_4x4(const __m128 a, const __m128 b, const __m128 c, const __m128 d) {\n    __m128 res_0 =_mm_hadd_ps(a, b);\n    __m128 res_1 =_mm_hadd_ps(c, d);\n    __m128 res =_mm_hadd_ps(res_0, res_1);\n    res =_mm_hadd_ps(res, res);\n    res =_mm_hadd_ps(res, res);\n\n    return _mm_cvtss_f32(res);\n}\n#endif // __AVX__ || __AVX2__ || __AVX512F__\n#endif // defined(__AVX__) || defined(__AVX2__) || defined(__AVX512F__) || defined(__SSSE3__)\n\n#if defined(__ARM_NEON) || defined(__wasm_simd128__) || defined(__POWER9_VECTOR__)\n#define B1(c,s,n)  0x ## n ## c ,  0x ## n ## s\n#define B2(c,s,n) B1(c,s,n ## c), B1(c,s,n ## s)\n#define B3(c,s,n) B2(c,s,n ## c), B2(c,s,n ## s)\n#define B4(c,s,n) B3(c,s,n ## c), B3(c,s,n ## s)\n#define B5(c,s,n) B4(c,s,n ## c), B4(c,s,n ## s)\n#define B6(c,s,n) B5(c,s,n ## c), B5(c,s,n ## s)\n#define B7(c,s,n) B6(c,s,n ## c), B6(c,s,n ## s)\n#define B8(c,s  ) B7(c,s,     c), B7(c,s,     s)\n\n// precomputed tables for expanding 8bits to 8 bytes:\nstatic const uint64_t table_b2b_0[1 << 8] = { B8(00, 10) }; // ( b) << 4\nstatic const uint64_t table_b2b_1[1 << 8] = { B8(10, 00) }; // (!b) << 4\n#endif\n\n#if defined(__loongarch_asx)\n\n#ifdef __clang__\n#define VREGS_PREFIX \"$vr\"\n#define XREGS_PREFIX \"$xr\"\n#else // GCC\n#define VREGS_PREFIX \"$f\"\n#define XREGS_PREFIX \"$f\"\n#endif\n#define __ALL_REGS \"0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31\"\n// Convert __m128i to __m256i\nstatic inline __m256i ____m256i(__m128i in) {\n    __m256i out = __lasx_xvldi(0);\n    __asm__ volatile (\n        \".irp i,\" __ALL_REGS                \"\\n\\t\"\n        \" .ifc %[out], \" XREGS_PREFIX\"\\\\i    \\n\\t\"\n        \"  .irp j,\" __ALL_REGS              \"\\n\\t\"\n        \"   .ifc %[in], \" VREGS_PREFIX \"\\\\j  \\n\\t\"\n        \"    xvpermi.q $xr\\\\i, $xr\\\\j, 0x20  \\n\\t\"\n        \"   .endif                           \\n\\t\"\n        \"  .endr                             \\n\\t\"\n        \" .endif                             \\n\\t\"\n        \".endr                               \\n\\t\"\n        : [out] \"+f\" (out) : [in] \"f\" (in)\n    );\n    return out;\n}\n// Convert two __m128i to __m256i\nstatic inline __m256i lasx_set_q(__m128i inhi, __m128i inlo) {\n    __m256i out;\n    __asm__ volatile (\n        \".irp i,\" __ALL_REGS                \"\\n\\t\"\n        \" .ifc %[hi], \" VREGS_PREFIX \"\\\\i    \\n\\t\"\n        \"  .irp j,\" __ALL_REGS              \"\\n\\t\"\n        \"   .ifc %[lo], \" VREGS_PREFIX \"\\\\j  \\n\\t\"\n        \"    xvpermi.q $xr\\\\i, $xr\\\\j, 0x20  \\n\\t\"\n        \"   .endif                           \\n\\t\"\n        \"  .endr                             \\n\\t\"\n        \" .endif                             \\n\\t\"\n        \".endr                               \\n\\t\"\n        \".ifnc %[out], %[hi]                 \\n\\t\"\n        \".irp i,\" __ALL_REGS                \"\\n\\t\"\n        \" .ifc %[out], \" XREGS_PREFIX \"\\\\i   \\n\\t\"\n        \"  .irp j,\" __ALL_REGS              \"\\n\\t\"\n        \"   .ifc %[hi], \" VREGS_PREFIX \"\\\\j  \\n\\t\"\n        \"    xvori.b $xr\\\\i, $xr\\\\j, 0       \\n\\t\"\n        \"   .endif                           \\n\\t\"\n        \"  .endr                             \\n\\t\"\n        \" .endif                             \\n\\t\"\n        \".endr                               \\n\\t\"\n        \".endif                              \\n\\t\"\n        : [out] \"=f\" (out), [hi] \"+f\" (inhi)\n        : [lo] \"f\" (inlo)\n    );\n    return out;\n}\n// Convert __m256i low part to __m128i\nstatic inline __m128i lasx_extracti128_lo(__m256i in) {\n    __m128i out;\n    __asm__ volatile (\n        \".ifnc %[out], %[in]                 \\n\\t\"\n        \".irp i,\" __ALL_REGS                \"\\n\\t\"\n        \" .ifc %[out], \" VREGS_PREFIX \"\\\\i   \\n\\t\"\n        \"  .irp j,\" __ALL_REGS              \"\\n\\t\"\n        \"   .ifc %[in], \" XREGS_PREFIX \"\\\\j  \\n\\t\"\n        \"    vori.b $vr\\\\i, $vr\\\\j, 0        \\n\\t\"\n        \"   .endif                           \\n\\t\"\n        \"  .endr                             \\n\\t\"\n        \" .endif                             \\n\\t\"\n        \".endr                               \\n\\t\"\n        \".endif                              \\n\\t\"\n        : [out] \"=f\" (out) : [in] \"f\" (in)\n    );\n    return out;\n}\n// Convert __m256i high part to __m128i\nstatic inline __m128i lasx_extracti128_hi(__m256i in) {\n    __m128i out;\n    __asm__ volatile (\n        \".irp i,\" __ALL_REGS                \"\\n\\t\"\n        \" .ifc %[out], \" VREGS_PREFIX \"\\\\i   \\n\\t\"\n        \"  .irp j,\" __ALL_REGS              \"\\n\\t\"\n        \"   .ifc %[in], \" XREGS_PREFIX \"\\\\j  \\n\\t\"\n        \"    xvpermi.q $xr\\\\i, $xr\\\\j, 0x11  \\n\\t\"\n        \"   .endif                           \\n\\t\"\n        \"  .endr                             \\n\\t\"\n        \" .endif                             \\n\\t\"\n        \".endr                               \\n\\t\"\n        : [out] \"=f\" (out) : [in] \"f\" (in)\n    );\n    return out;\n}\n\nstatic __m256i lasx_set_w(int e7, int e6, int e5, int e4, int e3, int e2, int e1, int e0) {\n    v8i32 __ret = {e0, e1, e2, e3, e4, e5, e6, e7};\n    return (__m256i)__ret;\n}\n\nstatic __m128i lsx_set_w(int32_t a, int32_t b, int32_t c, int32_t d) {\n    v4i32 __ret = {d, c, b, a};\n    return (__m128i)__ret;\n}\n\nstatic __m256i lasx_set_d(int64_t a, int64_t b, int64_t c, int64_t d) {\n    v4i64 __ret = {d, c, b, a};\n    return (__m256i)__ret;\n}\n\nstatic __m256i lasx_insertf128( __m128i x, __m128i y) {\n    return lasx_set_q(x, y);\n}\n\nstatic __m128i lsx_shuffle_b(__m128i a, __m128i b) {\n    __m128i mask_f, zero, tmp0, tmp2, mask;\n    int f = 0x8f;\n    mask_f = __lsx_vreplgr2vr_b(f);\n    zero = __lsx_vldi(0);\n    tmp0 = __lsx_vand_v(b, mask_f); // get mask with low 4 bit and sign bits\n    tmp0 = __lsx_vori_b(tmp0, 0x10); // make each mask or  with 0x10 prepare for positive\n    mask = __lsx_vsle_b(zero, tmp0); // if mask >= 0, set mask\n    tmp2 = __lsx_vand_v(tmp0, mask); // maskout the in2 < ones\n    return __lsx_vshuf_b(a, zero, tmp2);\n}\n\nstatic __m256i lasx_shuffle_b(__m256i a, __m256i b) {\n    __m256i mask_f, zero, tmp0, tmp2, mask;\n    int f = 0x8f;\n    mask_f = __lasx_xvreplgr2vr_b(f);\n    zero = __lasx_xvldi(0);\n    tmp0 = __lasx_xvand_v(b, mask_f); // get mask with low 4 bit and sign bits\n    tmp0 = __lasx_xvori_b(tmp0, 0x10); // make each mask or  with 0x10 prepare for positive\n    mask = __lasx_xvsle_b(zero, tmp0); // if mask >= 0, set mask\n    tmp2 = __lasx_xvand_v(tmp0, mask); // maskout the in2 < ones\n    return __lasx_xvshuf_b(a, zero, tmp2);\n}\n\nstatic __m256i lasx_extu8_16(__m128i a) {\n    __m128i zero = __lsx_vldi(0);\n    __m128i vlo = __lsx_vilvl_b(zero, a);\n    __m128i vhi = __lsx_vilvh_b(zero, a);\n    return lasx_set_q(vhi, vlo);\n}\n\nstatic __m256i lasx_ext8_16(__m128i a) {\n     __m128i sign = __lsx_vslti_b(a, 0);\n     __m128i vlo = __lsx_vilvl_b(sign, a);\n     __m128i vhi = __lsx_vilvh_b(sign, a);\n     return lasx_set_q(vhi, vlo);\n}\n\nstatic __m256i lasx_ext16_32(__m128i a) {\n    __m256i tmp1;\n    tmp1 = __lasx_xvinsgr2vr_w(tmp1, __lsx_vpickve2gr_h(a, 0), 0);\n    tmp1 = __lasx_xvinsgr2vr_w(tmp1, __lsx_vpickve2gr_h(a, 1), 1);\n    tmp1 = __lasx_xvinsgr2vr_w(tmp1, __lsx_vpickve2gr_h(a, 2), 2);\n    tmp1 = __lasx_xvinsgr2vr_w(tmp1, __lsx_vpickve2gr_h(a, 3), 3);\n    tmp1 = __lasx_xvinsgr2vr_w(tmp1, __lsx_vpickve2gr_h(a, 4), 4);\n    tmp1 = __lasx_xvinsgr2vr_w(tmp1, __lsx_vpickve2gr_h(a, 5), 5);\n    tmp1 = __lasx_xvinsgr2vr_w(tmp1, __lsx_vpickve2gr_h(a, 6), 6);\n    tmp1 = __lasx_xvinsgr2vr_w(tmp1, __lsx_vpickve2gr_h(a, 7), 7);\n    return tmp1;\n}\n\nstatic __m128i lasx_extracti128( __m256i a, int pos) {\n    __m128i ret;\n    if( pos == 0)\n    {\n       ret = lasx_extracti128_lo(a);\n    } else {\n       ret = lasx_extracti128_hi(a);\n    }\n    return ret;\n}\n\nstatic __m128 lasx_extractf128( __m256 a, int pos) {\n    __m128 ret;\n    if( pos == 0)\n    {\n       ret = (__m128)lasx_extracti128_lo((__m256i)a);\n    } else {\n       ret = (__m128)lasx_extracti128_hi((__m256i)a);\n    }\n    return ret;\n}\n\nstatic __m128i lsx_hadd_h(__m128i a, __m128i b) {\n    __m128i tmp1 = __lsx_vpickev_h(b, a);\n    __m128i tmp2 = __lsx_vpickod_h(b, a);\n    return __lsx_vadd_h(tmp1, tmp2);\n}\n\nstatic __m128i lsx_hadd_w(__m128i a, __m128i b) {\n    __m128i tmp1 = __lsx_vpickev_w(b, a);\n    __m128i tmp2 = __lsx_vpickod_w(b, a);\n    return __lsx_vadd_w(tmp1, tmp2);\n}\n\nstatic __m128 lsx_hadd_s(__m128 a, __m128 b) {\n    __m128 tmp1 = (__m128)__lsx_vpickev_w((__m128i)b, (__m128i)a);\n    __m128 tmp2 = (__m128)__lsx_vpickod_w((__m128i)b, (__m128i)a);\n\n    return __lsx_vfadd_s(tmp1, tmp2);\n}\n\nstatic __m256i lasx_maddubs_h(__m256i a, __m256i b) {\n    __m256i tmp1, tmp2;\n    tmp1 = __lasx_xvmulwev_h_b(a, b);\n    tmp2 = __lasx_xvmulwod_h_b(a, b);\n    return __lasx_xvsadd_h(tmp1, tmp2);\n}\n\nstatic __m256i lasx_madd_h(__m256i a, __m256i b) {\n    __m256i tmp1, tmp2;\n    tmp1 = __lasx_xvmulwev_w_h(a, b);\n    tmp2 = __lasx_xvmulwod_w_h(a, b);\n    return __lasx_xvadd_w(tmp1, tmp2);\n}\n\nstatic __m256i lasx_packs_w(__m256i a, __m256i b) {\n    __m256i tmp, tmp1;\n    tmp = __lasx_xvsat_w(a, 15);\n    tmp1 = __lasx_xvsat_w(b, 15);\n    return __lasx_xvpickev_h(tmp1, tmp);\n}\n\nstatic __m256i lasx_packs_h(__m256i a, __m256i b) {\n    __m256i tmp, tmp1;\n    tmp = __lasx_xvsat_h(a, 7);\n    tmp1 = __lasx_xvsat_h(b, 7);\n    return __lasx_xvpickev_b(tmp1, tmp);\n}\n\nstatic __m128i lsx_packs_w(__m128i a, __m128i b) {\n    __m128i tmp, tmp1;\n    tmp = __lsx_vsat_w(a, 15);\n    tmp1 = __lsx_vsat_w(b, 15);\n    return __lsx_vpickev_h(tmp1, tmp);\n}\n\nstatic __m128i lsx_packs_h(__m128i a, __m128i b) {\n    __m128i tmp, tmp1;\n    tmp = __lsx_vsat_h(a, 7);\n    tmp1 = __lsx_vsat_h(b, 7);\n    return __lsx_vpickev_b(tmp1, tmp);\n}\n\nstatic __m128i lsx_packus_h(__m128i a, __m128i b) {\n    __m128i tmp, tmp1;\n    tmp = __lsx_vsat_hu(a, 7);\n    tmp1 = __lsx_vsat_hu(b, 7);\n    return __lsx_vpickev_b(tmp1, tmp);\n}\n\n\nstatic __m128i lsx_maddubs_h(__m128i a, __m128i b) {\n    __m128i tmp1, tmp2;\n    tmp1 = __lsx_vmulwev_h_b(a, b);\n    tmp2 = __lsx_vmulwod_h_b(a, b);\n    return __lsx_vsadd_h(tmp1, tmp2);\n}\n\nstatic __m128i lsx_madd_h(__m128i a, __m128i b) {\n    __m128i tmp1, tmp2;\n    tmp1 = __lsx_vmulwev_w_h(a, b);\n    tmp2 = __lsx_vmulwod_w_h(a, b);\n    return __lsx_vadd_w(tmp1, tmp2);\n}\n\n// multiply int8_t, add results pairwise twice\nstatic inline __m128i mul_sum_i8_pairs(const __m128i x, const __m128i y) {\n    // Get absolute values of x vectors\n    const __m128i ax = __lsx_vsigncov_b(x, x);\n    // Sign the values of the y vectors\n    const __m128i sy = __lsx_vsigncov_b(x, y);\n    // Perform multiplication and create 16-bit values\n    const __m128i dot = lsx_maddubs_h(ax, sy);\n    const __m128i ones = __lsx_vreplgr2vr_h(1);\n    return lsx_madd_h(ones, dot);\n}\n\n// horizontally add 8 floats\nstatic inline float hsum_float_8(const __m256 x) {\n    __m128 res = lasx_extractf128(x, 1);\n    ft_union tmp;\n    res = __lsx_vfadd_s(res, lasx_extractf128(x, 0));\n    res = __lsx_vfadd_s(res, (__m128)__lsx_vpickod_d((__m128i)res, (__m128i)res));\n    res = __lsx_vfadd_s(res, (__m128)__lsx_vinsgr2vr_w(__lsx_vldi(0), __lsx_vpickve2gr_w(res, 1), 0));\n    tmp.i = __lsx_vpickve2gr_w(res, 0);\n    return tmp.f;\n}\n\n// horizontally add 8 int32_t\nstatic inline int hsum_i32_8(const __m256i a) {\n\n    __m256i tmp1 = __lasx_xvpermi_q(a, a, 0x11);\n    __m256i tmp2 = __lasx_xvpermi_q(a, a, 0x00);\n\n    __m128i  tmp1_128 = lasx_extracti128_lo(tmp1);\n    __m128i  tmp2_128 = lasx_extracti128_lo(tmp2);\n\n    __m128i sum128 = __lsx_vadd_w(tmp1_128, tmp2_128);\n\n    __m128i ev = __lsx_vpickev_w(sum128, sum128);\n    __m128i od = __lsx_vpickod_w(sum128, sum128);\n    __m128i sum64 = __lsx_vadd_w(ev, od);\n\n    int sum64_1, sum64_2;\n    sum64_1 = __lsx_vpickve2gr_w(sum64, 0);\n    sum64_2 = __lsx_vpickve2gr_w(sum64, 1);\n\n    return  sum64_1 + sum64_2;\n}\n\n// horizontally add 4 int32_t\nstatic inline int hsum_i32_4(const __m128i a) {\n    __m128i ev = __lsx_vpickev_w(a, a);\n    __m128i od = __lsx_vpickod_w(a, a);\n    __m128i sum64 = __lsx_vadd_w(ev, od);\n\n    int sum64_1, sum64_2;\n    sum64_1 = __lsx_vpickve2gr_w(sum64, 0);\n    sum64_2 = __lsx_vpickve2gr_w(sum64, 1);\n\n    return  sum64_1 + sum64_2;\n}\n\n// spread 32 bits to 32 bytes { 0x00, 0xFF }\nstatic inline __m256i bytes_from_bits_32(const uint8_t * x) {\n\n    uint32_t x32;\n    memcpy(&x32, x, sizeof(uint32_t));\n    const __m256i shuf_mask = lasx_set_d(\n            0x0303030303030303, 0x0202020202020202,\n            0x0101010101010101, 0x0000000000000000);\n\n    __m256i bytes = lasx_shuffle_b(__lasx_xvreplgr2vr_w(x32), shuf_mask);\n    const __m256i bit_mask = __lasx_xvreplgr2vr_d(0x7fbfdfeff7fbfdfe);\n    bytes = __lasx_xvor_v(bytes, bit_mask);\n    return __lasx_xvseq_b(bytes, __lasx_xvreplgr2vr_d(-1));\n}\n\n// Unpack 32 4-bit fields into 32 bytes\n// The output vector contains 32 bytes, each one in [ 0 .. 15 ] interval\nstatic inline __m256i bytes_from_nibbles_32(const uint8_t * rsi) {\n    const __m128i lo = __lsx_vld((const __m128i *)rsi, 0);\n    __m128i hi = __lsx_vsrli_h(lo, 4);\n    return __lasx_xvandi_b(lasx_insertf128(hi, lo), 0xf);\n}\n\n// add int16_t pairwise and return as float vector\nstatic inline __m256 sum_i16_pairs_float(const __m256i x) {\n    __m256i v = __lasx_xvpackod_h(x, x);\n    __m256i summed_pairs = __lasx_xvaddwev_w_h(x, v);\n    return __lasx_xvffint_s_w(summed_pairs);\n}\n\nstatic inline __m256 mul_sum_us8_pairs_float(const __m256i ax, const __m256i sy) {\n    // Perform multiplication and create 16-bit values\n    const __m256i dot = lasx_maddubs_h(ax, sy);\n    return sum_i16_pairs_float(dot);\n}\n\n// multiply int8_t, add results pairwise twice and return as float vector\nstatic inline __m256 mul_sum_i8_pairs_float(const __m256i x, const __m256i y) {\n\n    // Get absolute values of x vectors\n    const __m256i ax = __lasx_xvsigncov_b(x, x);\n    // Sign the values of the y vectors\n    const __m256i sy = __lasx_xvsigncov_b(x, y);\n\n    return mul_sum_us8_pairs_float(ax, sy);\n}\n\nstatic inline __m128i packNibbles( __m256i bytes ) {\n    // Move bits within 16-bit lanes from 0000_abcd_0000_efgh into 0000_0000_abcd_efgh\n    const __m256i lowByte = __lasx_xvreplgr2vr_h(0xFF);\n     __m256i high = __lasx_xvandn_v(lowByte, bytes);\n    __m256i low = __lasx_xvand_v(lowByte, bytes);\n    high = __lasx_xvsrli_h(high, 4);\n    bytes = __lasx_xvor_v(low, high);\n    // Compress uint16_t lanes into bytes\n    __m128i *r0 = (__m128i *)&bytes;\n    __m256i tmp_h128 = __lasx_xvpermi_q(bytes, bytes, 0x11);\n    __m128i *r1 = (__m128i *)&tmp_h128;\n\n    __m128i zero = __lsx_vldi(0);\n    __m128i tmp, tmp2, tmp3;\n\n    tmp = __lsx_vmax_h(zero, *r0);\n    tmp2 = __lsx_vsat_hu(tmp, 7);\n\n    tmp = __lsx_vmax_h(zero, *r1);\n    tmp3 = __lsx_vsat_hu(tmp, 7);\n    return  __lsx_vpickev_b(tmp3, tmp2);\n}\n#endif  //__loongarch_asx\n\n// reference implementation for deterministic creation of model files\nvoid quantize_row_q4_0_ref(const float * restrict x, block_q4_0 * restrict y, int64_t k) {\n    static const int qk = QK4_0;\n\n    assert(k % qk == 0);\n\n    const int nb = k / qk;\n\n    for (int i = 0; i < nb; i++) {\n        float amax = 0.0f; // absolute max\n        float max  = 0.0f;\n\n        for (int j = 0; j < qk; j++) {\n            const float v = x[i*qk + j];\n            if (amax < fabsf(v)) {\n                amax = fabsf(v);\n                max  = v;\n            }\n        }\n\n        const float d  = max / -8;\n        const float id = d ? 1.0f/d : 0.0f;\n\n        y[i].d = GGML_FP32_TO_FP16(d);\n\n        for (int j = 0; j < qk/2; ++j) {\n            const float x0 = x[i*qk + 0    + j]*id;\n            const float x1 = x[i*qk + qk/2 + j]*id;\n\n            const uint8_t xi0 = MIN(15, (int8_t)(x0 + 8.5f));\n            const uint8_t xi1 = MIN(15, (int8_t)(x1 + 8.5f));\n\n            y[i].qs[j]  = xi0;\n            y[i].qs[j] |= xi1 << 4;\n        }\n    }\n}\n\nvoid quantize_row_q4_0(const float * restrict x, void * restrict y, int64_t k) {\n    quantize_row_q4_0_ref(x, y, k);\n}\n\n\nvoid quantize_row_q4_1_ref(const float * restrict x, block_q4_1 * restrict y, int64_t k) {\n    const int qk = QK4_1;\n\n    assert(k % qk == 0);\n\n    const int nb = k / qk;\n\n    for (int i = 0; i < nb; i++) {\n        float min = FLT_MAX;\n        float max = -FLT_MAX;\n\n        for (int j = 0; j < qk; j++) {\n            const float v = x[i*qk + j];\n\n            if (v < min) min = v;\n            if (v > max) max = v;\n        }\n\n        const float d  = (max - min) / ((1 << 4) - 1);\n        const float id = d ? 1.0f/d : 0.0f;\n\n        y[i].d = GGML_FP32_TO_FP16(d);\n        y[i].m = GGML_FP32_TO_FP16(min);\n\n        for (int j = 0; j < qk/2; ++j) {\n            const float x0 = (x[i*qk + 0    + j] - min)*id;\n            const float x1 = (x[i*qk + qk/2 + j] - min)*id;\n\n            const uint8_t xi0 = MIN(15, (int8_t)(x0 + 0.5f));\n            const uint8_t xi1 = MIN(15, (int8_t)(x1 + 0.5f));\n\n            y[i].qs[j]  = xi0;\n            y[i].qs[j] |= xi1 << 4;\n        }\n    }\n}\n\nvoid quantize_row_q4_1(const float * restrict x, void * restrict y, int64_t k) {\n    quantize_row_q4_1_ref(x, y, k);\n}\n\nvoid quantize_row_q5_0_ref(const float * restrict x, block_q5_0 * restrict y, int64_t k) {\n    static const int qk = QK5_0;\n\n    assert(k % qk == 0);\n\n    const int nb = k / qk;\n\n    for (int i = 0; i < nb; i++) {\n        float amax = 0.0f; // absolute max\n        float max  = 0.0f;\n\n        for (int j = 0; j < qk; j++) {\n            const float v = x[i*qk + j];\n            if (amax < fabsf(v)) {\n                amax = fabsf(v);\n                max  = v;\n            }\n        }\n\n        const float d  = max / -16;\n        const float id = d ? 1.0f/d : 0.0f;\n\n        y[i].d = GGML_FP32_TO_FP16(d);\n\n        uint32_t qh = 0;\n\n        for (int j = 0; j < qk/2; ++j) {\n            const float x0 = x[i*qk + 0    + j]*id;\n            const float x1 = x[i*qk + qk/2 + j]*id;\n\n            const uint8_t xi0 = MIN(31, (int8_t)(x0 + 16.5f));\n            const uint8_t xi1 = MIN(31, (int8_t)(x1 + 16.5f));\n\n            y[i].qs[j] = (xi0 & 0x0F) | ((xi1 & 0x0F) << 4);\n\n            // get the 5-th bit and store it in qh at the right position\n            qh |= ((xi0 & 0x10u) >> 4) << (j + 0);\n            qh |= ((xi1 & 0x10u) >> 4) << (j + qk/2);\n        }\n\n        memcpy(&y[i].qh, &qh, sizeof(qh));\n    }\n}\n\nvoid quantize_row_q5_0(const float * restrict x, void * restrict y, int64_t k) {\n    quantize_row_q5_0_ref(x, y, k);\n}\n\nvoid quantize_row_q5_1_ref(const float * restrict x, block_q5_1 * restrict y, int64_t k) {\n    const int qk = QK5_1;\n\n    assert(k % qk == 0);\n\n    const int nb = k / qk;\n\n    for (int i = 0; i < nb; i++) {\n        float min = FLT_MAX;\n        float max = -FLT_MAX;\n\n        for (int j = 0; j < qk; j++) {\n            const float v = x[i*qk + j];\n\n            if (v < min) min = v;\n            if (v > max) max = v;\n        }\n\n        const float d  = (max - min) / ((1 << 5) - 1);\n        const float id = d ? 1.0f/d : 0.0f;\n\n        y[i].d = GGML_FP32_TO_FP16(d);\n        y[i].m = GGML_FP32_TO_FP16(min);\n\n        uint32_t qh = 0;\n\n        for (int j = 0; j < qk/2; ++j) {\n            const float x0 = (x[i*qk + 0    + j] - min)*id;\n            const float x1 = (x[i*qk + qk/2 + j] - min)*id;\n\n            const uint8_t xi0 = (uint8_t)(x0 + 0.5f);\n            const uint8_t xi1 = (uint8_t)(x1 + 0.5f);\n\n            y[i].qs[j] = (xi0 & 0x0F) | ((xi1 & 0x0F) << 4);\n\n            // get the 5-th bit and store it in qh at the right position\n            qh |= ((xi0 & 0x10u) >> 4) << (j + 0);\n            qh |= ((xi1 & 0x10u) >> 4) << (j + qk/2);\n        }\n\n        memcpy(&y[i].qh, &qh, sizeof(y[i].qh));\n    }\n}\n\nvoid quantize_row_q5_1(const float * restrict x, void * restrict y, int64_t k) {\n    quantize_row_q5_1_ref(x, y, k);\n}\n\n// reference implementation for deterministic creation of model files\nvoid quantize_row_q8_0_ref(const float * restrict x, block_q8_0 * restrict y, int64_t k) {\n    assert(k % QK8_0 == 0);\n    const int nb = k / QK8_0;\n\n    for (int i = 0; i < nb; i++) {\n        float amax = 0.0f; // absolute max\n\n        for (int j = 0; j < QK8_0; j++) {\n            const float v = x[i*QK8_0 + j];\n            amax = MAX(amax, fabsf(v));\n        }\n\n        const float d = amax / ((1 << 7) - 1);\n        const float id = d ? 1.0f/d : 0.0f;\n\n        y[i].d = GGML_FP32_TO_FP16(d);\n\n        for (int j = 0; j < QK8_0; ++j) {\n            const float x0 = x[i*QK8_0 + j]*id;\n\n            y[i].qs[j] = roundf(x0);\n        }\n    }\n}\n\nvoid quantize_row_q8_0(const float * restrict x, void * restrict vy, int64_t k) {\n    assert(QK8_0 == 32);\n    assert(k % QK8_0 == 0);\n    const int nb = k / QK8_0;\n\n    block_q8_0 * restrict y = vy;\n\n#if defined(__ARM_NEON)\n    for (int i = 0; i < nb; i++) {\n        float32x4_t srcv [8];\n        float32x4_t asrcv[8];\n        float32x4_t amaxv[8];\n\n        for (int j = 0; j < 8; j++) srcv[j]  = vld1q_f32(x + i*32 + 4*j);\n        for (int j = 0; j < 8; j++) asrcv[j] = vabsq_f32(srcv[j]);\n\n        for (int j = 0; j < 4; j++) amaxv[2*j] = vmaxq_f32(asrcv[2*j], asrcv[2*j+1]);\n        for (int j = 0; j < 2; j++) amaxv[4*j] = vmaxq_f32(amaxv[4*j], amaxv[4*j+2]);\n        for (int j = 0; j < 1; j++) amaxv[8*j] = vmaxq_f32(amaxv[8*j], amaxv[8*j+4]);\n\n        const float amax = vmaxvq_f32(amaxv[0]);\n\n        const float d = amax / ((1 << 7) - 1);\n        const float id = d ? 1.0f/d : 0.0f;\n\n        y[i].d = GGML_FP32_TO_FP16(d);\n\n        for (int j = 0; j < 8; j++) {\n            const float32x4_t v  = vmulq_n_f32(srcv[j], id);\n            const int32x4_t   vi = vcvtnq_s32_f32(v);\n\n            y[i].qs[4*j + 0] = vgetq_lane_s32(vi, 0);\n            y[i].qs[4*j + 1] = vgetq_lane_s32(vi, 1);\n            y[i].qs[4*j + 2] = vgetq_lane_s32(vi, 2);\n            y[i].qs[4*j + 3] = vgetq_lane_s32(vi, 3);\n        }\n    }\n#elif defined(__wasm_simd128__)\n    for (int i = 0; i < nb; i++) {\n        v128_t srcv [8];\n        v128_t asrcv[8];\n        v128_t amaxv[8];\n\n        for (int j = 0; j < 8; j++) srcv[j]  = wasm_v128_load(x + i*32 + 4*j);\n        for (int j = 0; j < 8; j++) asrcv[j] = wasm_f32x4_abs(srcv[j]);\n\n        for (int j = 0; j < 4; j++) amaxv[2*j] = wasm_f32x4_max(asrcv[2*j], asrcv[2*j+1]);\n        for (int j = 0; j < 2; j++) amaxv[4*j] = wasm_f32x4_max(amaxv[4*j], amaxv[4*j+2]);\n        for (int j = 0; j < 1; j++) amaxv[8*j] = wasm_f32x4_max(amaxv[8*j], amaxv[8*j+4]);\n\n        const float amax = MAX(MAX(wasm_f32x4_extract_lane(amaxv[0], 0),\n                                   wasm_f32x4_extract_lane(amaxv[0], 1)),\n                               MAX(wasm_f32x4_extract_lane(amaxv[0], 2),\n                                   wasm_f32x4_extract_lane(amaxv[0], 3)));\n\n        const float d = amax / ((1 << 7) - 1);\n        const float id = d ? 1.0f/d : 0.0f;\n\n        y[i].d = GGML_FP32_TO_FP16(d);\n\n        for (int j = 0; j < 8; j++) {\n            const v128_t v  = wasm_f32x4_mul(srcv[j], wasm_f32x4_splat(id));\n            const v128_t vi = wasm_i32x4_trunc_sat_f32x4(v);\n\n            y[i].qs[4*j + 0] = wasm_i32x4_extract_lane(vi, 0);\n            y[i].qs[4*j + 1] = wasm_i32x4_extract_lane(vi, 1);\n            y[i].qs[4*j + 2] = wasm_i32x4_extract_lane(vi, 2);\n            y[i].qs[4*j + 3] = wasm_i32x4_extract_lane(vi, 3);\n        }\n    }\n#elif defined(__AVX2__) || defined(__AVX__)\n    for (int i = 0; i < nb; i++) {\n        // Load elements into 4 AVX vectors\n        __m256 v0 = _mm256_loadu_ps( x );\n        __m256 v1 = _mm256_loadu_ps( x + 8 );\n        __m256 v2 = _mm256_loadu_ps( x + 16 );\n        __m256 v3 = _mm256_loadu_ps( x + 24 );\n        x += 32;\n\n        // Compute max(abs(e)) for the block\n        const __m256 signBit = _mm256_set1_ps( -0.0f );\n        __m256 maxAbs = _mm256_andnot_ps( signBit, v0 );\n        maxAbs = _mm256_max_ps( maxAbs, _mm256_andnot_ps( signBit, v1 ) );\n        maxAbs = _mm256_max_ps( maxAbs, _mm256_andnot_ps( signBit, v2 ) );\n        maxAbs = _mm256_max_ps( maxAbs, _mm256_andnot_ps( signBit, v3 ) );\n\n        __m128 max4 = _mm_max_ps( _mm256_extractf128_ps( maxAbs, 1 ), _mm256_castps256_ps128( maxAbs ) );\n        max4 = _mm_max_ps( max4, _mm_movehl_ps( max4, max4 ) );\n        max4 = _mm_max_ss( max4, _mm_movehdup_ps( max4 ) );\n        const float maxScalar = _mm_cvtss_f32( max4 );\n\n        // Quantize these floats\n        const float d = maxScalar / 127.f;\n        y[i].d = GGML_FP32_TO_FP16(d);\n        const float id = ( maxScalar != 0.0f ) ? 127.f / maxScalar : 0.0f;\n        const __m256 mul = _mm256_set1_ps( id );\n\n        // Apply the multiplier\n        v0 = _mm256_mul_ps( v0, mul );\n        v1 = _mm256_mul_ps( v1, mul );\n        v2 = _mm256_mul_ps( v2, mul );\n        v3 = _mm256_mul_ps( v3, mul );\n\n        // Round to nearest integer\n        v0 = _mm256_round_ps( v0, _MM_ROUND_NEAREST );\n        v1 = _mm256_round_ps( v1, _MM_ROUND_NEAREST );\n        v2 = _mm256_round_ps( v2, _MM_ROUND_NEAREST );\n        v3 = _mm256_round_ps( v3, _MM_ROUND_NEAREST );\n\n        // Convert floats to integers\n        __m256i i0 = _mm256_cvtps_epi32( v0 );\n        __m256i i1 = _mm256_cvtps_epi32( v1 );\n        __m256i i2 = _mm256_cvtps_epi32( v2 );\n        __m256i i3 = _mm256_cvtps_epi32( v3 );\n\n#if defined(__AVX2__)\n        // Convert int32 to int16\n        i0 = _mm256_packs_epi32( i0, i1 );\t// 0, 1, 2, 3,  8, 9, 10, 11,  4, 5, 6, 7, 12, 13, 14, 15\n        i2 = _mm256_packs_epi32( i2, i3 );\t// 16, 17, 18, 19,  24, 25, 26, 27,  20, 21, 22, 23, 28, 29, 30, 31\n                                            // Convert int16 to int8\n        i0 = _mm256_packs_epi16( i0, i2 );\t// 0, 1, 2, 3,  8, 9, 10, 11,  16, 17, 18, 19,  24, 25, 26, 27,  4, 5, 6, 7, 12, 13, 14, 15, 20, 21, 22, 23, 28, 29, 30, 31\n\n        // We got our precious signed bytes, but the order is now wrong\n        // These AVX2 pack instructions process 16-byte pieces independently\n        // The following instruction is fixing the order\n        const __m256i perm = _mm256_setr_epi32( 0, 4, 1, 5, 2, 6, 3, 7 );\n        i0 = _mm256_permutevar8x32_epi32( i0, perm );\n\n        _mm256_storeu_si256((__m256i *)y[i].qs, i0);\n#else\n        // Since we don't have in AVX some necessary functions,\n        // we split the registers in half and call AVX2 analogs from SSE\n        __m128i ni0 = _mm256_castsi256_si128( i0 );\n        __m128i ni1 = _mm256_extractf128_si256( i0, 1);\n        __m128i ni2 = _mm256_castsi256_si128( i1 );\n        __m128i ni3 = _mm256_extractf128_si256( i1, 1);\n        __m128i ni4 = _mm256_castsi256_si128( i2 );\n        __m128i ni5 = _mm256_extractf128_si256( i2, 1);\n        __m128i ni6 = _mm256_castsi256_si128( i3 );\n        __m128i ni7 = _mm256_extractf128_si256( i3, 1);\n\n        // Convert int32 to int16\n        ni0 = _mm_packs_epi32( ni0, ni1 );\n        ni2 = _mm_packs_epi32( ni2, ni3 );\n        ni4 = _mm_packs_epi32( ni4, ni5 );\n        ni6 = _mm_packs_epi32( ni6, ni7 );\n        // Convert int16 to int8\n        ni0 = _mm_packs_epi16( ni0, ni2 );\n        ni4 = _mm_packs_epi16( ni4, ni6 );\n\n        _mm_storeu_si128((__m128i *)(y[i].qs +  0), ni0);\n        _mm_storeu_si128((__m128i *)(y[i].qs + 16), ni4);\n#endif\n    }\n#elif defined(__riscv_v_intrinsic)\n\n    size_t vl = __riscv_vsetvl_e32m4(QK8_0);\n\n    for (int i = 0; i < nb; i++) {\n        // load elements\n        vfloat32m4_t v_x   = __riscv_vle32_v_f32m4(x+i*QK8_0, vl);\n\n        vfloat32m4_t vfabs = __riscv_vfabs_v_f32m4(v_x, vl);\n        vfloat32m1_t tmp   = __riscv_vfmv_v_f_f32m1(0.0f, vl);\n        vfloat32m1_t vmax  = __riscv_vfredmax_vs_f32m4_f32m1(vfabs, tmp, vl);\n        float amax = __riscv_vfmv_f_s_f32m1_f32(vmax);\n\n        const float d = amax / ((1 << 7) - 1);\n        const float id = d ? 1.0f/d : 0.0f;\n\n        y[i].d = GGML_FP32_TO_FP16(d);\n\n        vfloat32m4_t x0 = __riscv_vfmul_vf_f32m4(v_x, id, vl);\n\n        // convert to integer\n        vint16m2_t   vi = __riscv_vfncvt_x_f_w_i16m2(x0, vl);\n        vint8m1_t    vs = __riscv_vncvt_x_x_w_i8m1(vi, vl);\n\n        // store result\n        __riscv_vse8_v_i8m1(y[i].qs , vs, vl);\n    }\n\n#elif defined(__POWER9_VECTOR__)\n    for (int i = 0; i < nb; i++) {\n        vector float srcv [8];\n        vector float asrcv[8];\n        vector float amaxv[8];\n        vector signed int vi[8];\n\n        for (int j = 0; j < 8; j++) srcv[j]  = vec_xl(0, x + i*32 + 4*j);\n        for (int j = 0; j < 8; j++) asrcv[j] = vec_abs(srcv[j]);\n\n        for (int j = 0; j < 4; j++) amaxv[2*j] = vec_max(asrcv[2*j], asrcv[2*j+1]);\n        for (int j = 0; j < 2; j++) amaxv[4*j] = vec_max(amaxv[4*j], amaxv[4*j+2]);\n        for (int j = 0; j < 1; j++) amaxv[8*j] = vec_max(amaxv[8*j], amaxv[8*j+4]);\n\n        const float amax = MAX(MAX(vec_extract(amaxv[0], 0),\n                                   vec_extract(amaxv[0], 1)),\n                               MAX(vec_extract(amaxv[0], 2),\n                                   vec_extract(amaxv[0], 3)));\n\n        const float d = amax / ((1 << 7) - 1);\n        const float id = d ? 1.0f/d : 0.0f;\n        const vector float vid = vec_splats(id);\n\n        y[i].d = GGML_FP32_TO_FP16(d);\n\n        for (int j = 0; j < 8; j++) {\n            const vector float v  = vec_round(vec_mul(srcv[j], vid));\n            vi[j] = vec_cts(v, 0);\n        }\n        vec_xst(vec_pack(vec_pack(vi[0], vi[1]), vec_pack(vi[2], vi[3])),  0, &y[i].qs[0]);\n        vec_xst(vec_pack(vec_pack(vi[4], vi[5]), vec_pack(vi[6], vi[7])), 16, &y[i].qs[0]);\n    }\n\n#elif defined(__loongarch_asx)\n    for (int i = 0; i < nb; i++) {\n        ft_union fi;\n        __m256 v0 = (__m256)__lasx_xvld( x , 0);\n        __m256 v1 = (__m256)__lasx_xvld( x , 32);\n        __m256 v2 = (__m256)__lasx_xvld( x , 64);\n        __m256 v3 = (__m256)__lasx_xvld( x , 96);\n        x += 32;\n\n        // Compute max(abs(e)) for the block\n        const __m256 sign_bit = __lasx_xvreplfr2vr_s( -0.0f );\n        __m256 max_abs = (__m256)__lasx_xvandn_v( (__m256i)sign_bit, (__m256i)v0 );\n        max_abs = __lasx_xvfmax_s( max_abs, (__m256)__lasx_xvandn_v( (__m256i)sign_bit, (__m256i)v1 ) );\n        max_abs = __lasx_xvfmax_s( max_abs, (__m256)__lasx_xvandn_v( (__m256i)sign_bit, (__m256i)v2 ) );\n        max_abs = __lasx_xvfmax_s( max_abs, (__m256)__lasx_xvandn_v( (__m256i)sign_bit, (__m256i)v3 ) );\n\n        __m128 max4 = __lsx_vfmax_s( lasx_extractf128( max_abs, 1 ), lasx_extractf128( max_abs , 0) );\n        max4 = __lsx_vfmax_s( max4, (__m128)__lsx_vpickod_d((__m128i) max4, (__m128i)max4 ) );\n        __m128 tmp = max4;\n        max4 = __lsx_vfmax_s( max4, (__m128)__lsx_vinsgr2vr_w(tmp, __lsx_vpickve2gr_w( max4, 1 ), 0 ));\n        fi.i = __lsx_vpickve2gr_w( (__m128i)max4, 0 );\n        const float max_scalar = fi.f;\n\n        // Quantize these floats\n        const float d = max_scalar / 127.f;\n        y[i].d = GGML_FP32_TO_FP16(d);\n        const float id = ( max_scalar != 0.0f ) ? 127.f / max_scalar : 0.0f;\n        const __m256 mul = (__m256)__lasx_xvreplfr2vr_s( id );\n\n        // Apply the multiplier\n        v0 = __lasx_xvfmul_s( v0, mul );\n        v1 = __lasx_xvfmul_s( v1, mul );\n        v2 = __lasx_xvfmul_s( v2, mul );\n        v3 = __lasx_xvfmul_s( v3, mul );\n\n        // Round to nearest integer\n        __m256i i0 = __lasx_xvftintrne_w_s( v0 );\n        __m256i i1 = __lasx_xvftintrne_w_s( v1 );\n        __m256i i2 = __lasx_xvftintrne_w_s( v2 );\n        __m256i i3 = __lasx_xvftintrne_w_s( v3 );\n\n        __m128i ni0 = lasx_extracti128( i0, 0 );\n        __m128i ni1 = lasx_extracti128( i0, 1);\n        __m128i ni2 = lasx_extracti128( i1, 0);\n        __m128i ni3 = lasx_extracti128( i1, 1);\n        __m128i ni4 = lasx_extracti128( i2, 0);\n        __m128i ni5 = lasx_extracti128( i2, 1);\n        __m128i ni6 = lasx_extracti128( i3, 0);\n        __m128i ni7 = lasx_extracti128( i3, 1);\n\n        // Convert int32 to int16\n        ni0 = lsx_packs_w( ni0, ni1 );\n        ni2 = lsx_packs_w( ni2, ni3 );\n        ni4 = lsx_packs_w( ni4, ni5 );\n        ni6 = lsx_packs_w( ni6, ni7 );\n        // Convert int16 to int8\n        ni0 = lsx_packs_h( ni0, ni2 );\n        ni4 = lsx_packs_h( ni4, ni6 );\n\n        __lsx_vst(ni0, (__m128i *)(y[i].qs +  0), 0);\n        __lsx_vst(ni4, (__m128i *)(y[i].qs + 16), 0);\n\n    }\n#else\n    GGML_UNUSED(nb);\n    // scalar\n    quantize_row_q8_0_ref(x, y, k);\n#endif\n}\n\n// reference implementation for deterministic creation of model files\nvoid quantize_row_q8_1_ref(const float * restrict x, block_q8_1 * restrict y, int64_t k) {\n    assert(QK8_1 == 32);\n    assert(k % QK8_1 == 0);\n    const int nb = k / QK8_1;\n\n    for (int i = 0; i < nb; i++) {\n        float amax = 0.0f; // absolute max\n\n        for (int j = 0; j < QK8_1; j++) {\n            const float v = x[i*QK8_1 + j];\n            amax = MAX(amax, fabsf(v));\n        }\n\n        const float d = amax / ((1 << 7) - 1);\n        const float id = d ? 1.0f/d : 0.0f;\n\n        y[i].d = GGML_FP32_TO_FP16(d);\n\n        int sum = 0;\n\n        for (int j = 0; j < QK8_1/2; ++j) {\n            const float v0 = x[i*QK8_1           + j]*id;\n            const float v1 = x[i*QK8_1 + QK8_1/2 + j]*id;\n\n            y[i].qs[          j] = roundf(v0);\n            y[i].qs[QK8_1/2 + j] = roundf(v1);\n\n            sum += y[i].qs[          j];\n            sum += y[i].qs[QK8_1/2 + j];\n        }\n\n        y[i].s = GGML_FP32_TO_FP16(sum*d);\n    }\n}\n\nvoid quantize_row_q8_1(const float * restrict x, void * restrict vy, int64_t k) {\n    assert(k % QK8_1 == 0);\n    const int nb = k / QK8_1;\n\n    block_q8_1 * restrict y = vy;\n\n#if defined(__ARM_NEON)\n    for (int i = 0; i < nb; i++) {\n        float32x4_t srcv [8];\n        float32x4_t asrcv[8];\n        float32x4_t amaxv[8];\n\n        for (int j = 0; j < 8; j++) srcv[j]  = vld1q_f32(x + i*32 + 4*j);\n        for (int j = 0; j < 8; j++) asrcv[j] = vabsq_f32(srcv[j]);\n\n        for (int j = 0; j < 4; j++) amaxv[2*j] = vmaxq_f32(asrcv[2*j], asrcv[2*j+1]);\n        for (int j = 0; j < 2; j++) amaxv[4*j] = vmaxq_f32(amaxv[4*j], amaxv[4*j+2]);\n        for (int j = 0; j < 1; j++) amaxv[8*j] = vmaxq_f32(amaxv[8*j], amaxv[8*j+4]);\n\n        const float amax = vmaxvq_f32(amaxv[0]);\n\n        const float d = amax / ((1 << 7) - 1);\n        const float id = d ? 1.0f/d : 0.0f;\n\n        y[i].d = GGML_FP32_TO_FP16(d);\n\n        int32x4_t accv = vdupq_n_s32(0);\n\n        for (int j = 0; j < 8; j++) {\n            const float32x4_t v  = vmulq_n_f32(srcv[j], id);\n            const int32x4_t   vi = vcvtnq_s32_f32(v);\n\n            y[i].qs[4*j + 0] = vgetq_lane_s32(vi, 0);\n            y[i].qs[4*j + 1] = vgetq_lane_s32(vi, 1);\n            y[i].qs[4*j + 2] = vgetq_lane_s32(vi, 2);\n            y[i].qs[4*j + 3] = vgetq_lane_s32(vi, 3);\n\n            accv = vaddq_s32(accv, vi);\n        }\n\n        y[i].s = GGML_FP32_TO_FP16(d * vaddvq_s32(accv));\n    }\n#elif defined(__wasm_simd128__)\n    for (int i = 0; i < nb; i++) {\n        v128_t srcv [8];\n        v128_t asrcv[8];\n        v128_t amaxv[8];\n\n        for (int j = 0; j < 8; j++) srcv[j]  = wasm_v128_load(x + i*32 + 4*j);\n        for (int j = 0; j < 8; j++) asrcv[j] = wasm_f32x4_abs(srcv[j]);\n\n        for (int j = 0; j < 4; j++) amaxv[2*j] = wasm_f32x4_max(asrcv[2*j], asrcv[2*j+1]);\n        for (int j = 0; j < 2; j++) amaxv[4*j] = wasm_f32x4_max(amaxv[4*j], amaxv[4*j+2]);\n        for (int j = 0; j < 1; j++) amaxv[8*j] = wasm_f32x4_max(amaxv[8*j], amaxv[8*j+4]);\n\n        const float amax = MAX(MAX(wasm_f32x4_extract_lane(amaxv[0], 0),\n                                   wasm_f32x4_extract_lane(amaxv[0], 1)),\n                               MAX(wasm_f32x4_extract_lane(amaxv[0], 2),\n                                   wasm_f32x4_extract_lane(amaxv[0], 3)));\n\n        const float d = amax / ((1 << 7) - 1);\n        const float id = d ? 1.0f/d : 0.0f;\n\n        y[i].d = GGML_FP32_TO_FP16(d);\n\n        v128_t accv = wasm_i32x4_splat(0);\n\n        for (int j = 0; j < 8; j++) {\n            const v128_t v  = wasm_f32x4_mul(srcv[j], wasm_f32x4_splat(id));\n            const v128_t vi = wasm_i32x4_trunc_sat_f32x4(v);\n\n            y[i].qs[4*j + 0] = wasm_i32x4_extract_lane(vi, 0);\n            y[i].qs[4*j + 1] = wasm_i32x4_extract_lane(vi, 1);\n            y[i].qs[4*j + 2] = wasm_i32x4_extract_lane(vi, 2);\n            y[i].qs[4*j + 3] = wasm_i32x4_extract_lane(vi, 3);\n\n            accv = wasm_i32x4_add(accv, vi);\n        }\n\n        y[i].s = GGML_FP32_TO_FP16(\n                d * (wasm_i32x4_extract_lane(accv, 0) +\n                     wasm_i32x4_extract_lane(accv, 1) +\n                     wasm_i32x4_extract_lane(accv, 2) +\n                     wasm_i32x4_extract_lane(accv, 3)));\n    }\n#elif defined(__AVX2__) || defined(__AVX__)\n    for (int i = 0; i < nb; i++) {\n        // Load elements into 4 AVX vectors\n        __m256 v0 = _mm256_loadu_ps( x );\n        __m256 v1 = _mm256_loadu_ps( x + 8 );\n        __m256 v2 = _mm256_loadu_ps( x + 16 );\n        __m256 v3 = _mm256_loadu_ps( x + 24 );\n        x += 32;\n\n        // Compute max(abs(e)) for the block\n        const __m256 signBit = _mm256_set1_ps( -0.0f );\n        __m256 maxAbs = _mm256_andnot_ps( signBit, v0 );\n        maxAbs = _mm256_max_ps( maxAbs, _mm256_andnot_ps( signBit, v1 ) );\n        maxAbs = _mm256_max_ps( maxAbs, _mm256_andnot_ps( signBit, v2 ) );\n        maxAbs = _mm256_max_ps( maxAbs, _mm256_andnot_ps( signBit, v3 ) );\n\n        __m128 max4 = _mm_max_ps( _mm256_extractf128_ps( maxAbs, 1 ), _mm256_castps256_ps128( maxAbs ) );\n        max4 = _mm_max_ps( max4, _mm_movehl_ps( max4, max4 ) );\n        max4 = _mm_max_ss( max4, _mm_movehdup_ps( max4 ) );\n        const float max_scalar = _mm_cvtss_f32( max4 );\n\n        // Quantize these floats\n        const float d = max_scalar / 127.f;\n        y[i].d = GGML_FP32_TO_FP16(d);\n        const float id = ( max_scalar != 0.0f ) ? 127.f / max_scalar : 0.0f;\n        const __m256 mul = _mm256_set1_ps( id );\n\n        // Apply the multiplier\n        v0 = _mm256_mul_ps( v0, mul );\n        v1 = _mm256_mul_ps( v1, mul );\n        v2 = _mm256_mul_ps( v2, mul );\n        v3 = _mm256_mul_ps( v3, mul );\n\n        // Round to nearest integer\n        v0 = _mm256_round_ps( v0, _MM_ROUND_NEAREST );\n        v1 = _mm256_round_ps( v1, _MM_ROUND_NEAREST );\n        v2 = _mm256_round_ps( v2, _MM_ROUND_NEAREST );\n        v3 = _mm256_round_ps( v3, _MM_ROUND_NEAREST );\n\n        // Convert floats to integers\n        __m256i i0 = _mm256_cvtps_epi32( v0 );\n        __m256i i1 = _mm256_cvtps_epi32( v1 );\n        __m256i i2 = _mm256_cvtps_epi32( v2 );\n        __m256i i3 = _mm256_cvtps_epi32( v3 );\n\n#if defined(__AVX2__)\n        // Compute the sum of the quants and set y[i].s\n        y[i].s = GGML_FP32_TO_FP16(d * hsum_i32_8(_mm256_add_epi32(_mm256_add_epi32(i0, i1), _mm256_add_epi32(i2, i3))));\n\n        // Convert int32 to int16\n        i0 = _mm256_packs_epi32( i0, i1 );\t// 0, 1, 2, 3,  8, 9, 10, 11,  4, 5, 6, 7, 12, 13, 14, 15\n        i2 = _mm256_packs_epi32( i2, i3 );\t// 16, 17, 18, 19,  24, 25, 26, 27,  20, 21, 22, 23, 28, 29, 30, 31\n                                            // Convert int16 to int8\n        i0 = _mm256_packs_epi16( i0, i2 );\t// 0, 1, 2, 3,  8, 9, 10, 11,  16, 17, 18, 19,  24, 25, 26, 27,  4, 5, 6, 7, 12, 13, 14, 15, 20, 21, 22, 23, 28, 29, 30, 31\n\n        // We got our precious signed bytes, but the order is now wrong\n        // These AVX2 pack instructions process 16-byte pieces independently\n        // The following instruction is fixing the order\n        const __m256i perm = _mm256_setr_epi32( 0, 4, 1, 5, 2, 6, 3, 7 );\n        i0 = _mm256_permutevar8x32_epi32( i0, perm );\n\n        _mm256_storeu_si256((__m256i *)y[i].qs, i0);\n#else\n        // Since we don't have in AVX some necessary functions,\n        // we split the registers in half and call AVX2 analogs from SSE\n        __m128i ni0 = _mm256_castsi256_si128( i0 );\n        __m128i ni1 = _mm256_extractf128_si256( i0, 1);\n        __m128i ni2 = _mm256_castsi256_si128( i1 );\n        __m128i ni3 = _mm256_extractf128_si256( i1, 1);\n        __m128i ni4 = _mm256_castsi256_si128( i2 );\n        __m128i ni5 = _mm256_extractf128_si256( i2, 1);\n        __m128i ni6 = _mm256_castsi256_si128( i3 );\n        __m128i ni7 = _mm256_extractf128_si256( i3, 1);\n\n        // Compute the sum of the quants and set y[i].s\n        const __m128i s0 = _mm_add_epi32(_mm_add_epi32(ni0, ni1), _mm_add_epi32(ni2, ni3));\n        const __m128i s1 = _mm_add_epi32(_mm_add_epi32(ni4, ni5), _mm_add_epi32(ni6, ni7));\n        y[i].s = GGML_FP32_TO_FP16(d * hsum_i32_4(_mm_add_epi32(s0, s1)));\n\n        // Convert int32 to int16\n        ni0 = _mm_packs_epi32( ni0, ni1 );\n        ni2 = _mm_packs_epi32( ni2, ni3 );\n        ni4 = _mm_packs_epi32( ni4, ni5 );\n        ni6 = _mm_packs_epi32( ni6, ni7 );\n        // Convert int16 to int8\n        ni0 = _mm_packs_epi16( ni0, ni2 );\n        ni4 = _mm_packs_epi16( ni4, ni6 );\n\n        _mm_storeu_si128((__m128i *)(y[i].qs +  0), ni0);\n        _mm_storeu_si128((__m128i *)(y[i].qs + 16), ni4);\n#endif\n    }\n#elif defined(__riscv_v_intrinsic)\n\n    size_t vl = __riscv_vsetvl_e32m4(QK8_1);\n\n    for (int i = 0; i < nb; i++) {\n        // load elements\n        vfloat32m4_t v_x   = __riscv_vle32_v_f32m4(x+i*QK8_1, vl);\n\n        vfloat32m4_t vfabs = __riscv_vfabs_v_f32m4(v_x, vl);\n        vfloat32m1_t tmp   = __riscv_vfmv_v_f_f32m1(0.0, vl);\n        vfloat32m1_t vmax  = __riscv_vfredmax_vs_f32m4_f32m1(vfabs, tmp, vl);\n        float amax = __riscv_vfmv_f_s_f32m1_f32(vmax);\n\n        const float d  = amax / ((1 << 7) - 1);\n        const float id = d ? 1.0f/d : 0.0f;\n\n        y[i].d = GGML_FP32_TO_FP16(d);\n\n        vfloat32m4_t x0 = __riscv_vfmul_vf_f32m4(v_x, id, vl);\n\n        // convert to integer\n        vint16m2_t   vi = __riscv_vfncvt_x_f_w_i16m2(x0, vl);\n        vint8m1_t    vs = __riscv_vncvt_x_x_w_i8m1(vi, vl);\n\n        // store result\n        __riscv_vse8_v_i8m1(y[i].qs , vs, vl);\n\n        // compute sum for y[i].s\n        vint16m1_t tmp2 = __riscv_vmv_v_x_i16m1(0, vl);\n        vint16m1_t vwrs = __riscv_vwredsum_vs_i8m1_i16m1(vs, tmp2, vl);\n\n        // set y[i].s\n        int sum = __riscv_vmv_x_s_i16m1_i16(vwrs);\n        y[i].s = GGML_FP32_TO_FP16(sum*d);\n    }\n\n#elif defined(__POWER9_VECTOR__)\n    for (int i = 0; i < nb; i++) {\n        vector float srcv [8];\n        vector float asrcv[8];\n        vector float amaxv[8];\n        vector signed int vi[8];\n\n        for (int j = 0; j < 8; j++) srcv[j]  = vec_xl(0, x + i*32 + 4*j);\n        for (int j = 0; j < 8; j++) asrcv[j] = vec_abs(srcv[j]);\n\n        for (int j = 0; j < 4; j++) amaxv[2*j] = vec_max(asrcv[2*j], asrcv[2*j+1]);\n        for (int j = 0; j < 2; j++) amaxv[4*j] = vec_max(amaxv[4*j], amaxv[4*j+2]);\n        for (int j = 0; j < 1; j++) amaxv[8*j] = vec_max(amaxv[8*j], amaxv[8*j+4]);\n\n        const float amax = MAX(MAX(vec_extract(amaxv[0], 0),\n                                   vec_extract(amaxv[0], 1)),\n                               MAX(vec_extract(amaxv[0], 2),\n                                   vec_extract(amaxv[0], 3)));\n\n        const float d = amax / ((1 << 7) - 1);\n        const float id = d ? 1.0f/d : 0.0f;\n        const vector float vid = vec_splats(id);\n\n        y[i].d = GGML_FP32_TO_FP16(d);\n\n        vector int accv = vec_splats(0);\n\n        for (int j = 0; j < 8; j++) {\n            const vector float v  = vec_round(vec_mul(srcv[j], vid));\n            vi[j] = vec_cts(v, 0);\n\n            accv = vec_add(accv, vi[j]);\n        }\n        vec_xst(vec_pack(vec_pack(vi[0], vi[1]), vec_pack(vi[2], vi[3])),  0, &y[i].qs[0]);\n        vec_xst(vec_pack(vec_pack(vi[4], vi[5]), vec_pack(vi[6], vi[7])), 16, &y[i].qs[0]);\n\n        accv = vec_add(accv, vec_sld(accv, accv, 4));\n        accv = vec_add(accv, vec_sld(accv, accv, 8));\n        y[i].s = GGML_FP32_TO_FP16(d * vec_extract(accv, 0));\n    }\n\n#elif defined(__loongarch_asx)\n    for (int i = 0; i < nb; i++) {\n        ft_union ft;\n        __m256 v0 = (__m256)__lasx_xvld( x , 0 );\n        __m256 v1 = (__m256)__lasx_xvld( x , 32 );\n        __m256 v2 = (__m256)__lasx_xvld( x , 64 );\n        __m256 v3 = (__m256)__lasx_xvld( x , 96 );\n        x += 32;\n\n        // Compute max(abs(e)) for the block\n        const __m256 sign_bit = __lasx_xvreplfr2vr_s( -0.0f );\n        __m256 max_abs = (__m256)__lasx_xvandn_v( (__m256i)sign_bit, (__m256i)v0 );\n        max_abs = __lasx_xvfmax_s( max_abs, (__m256)__lasx_xvandn_v( (__m256i)sign_bit, (__m256i)v1 ) );\n        max_abs = __lasx_xvfmax_s( max_abs, (__m256)__lasx_xvandn_v( (__m256i)sign_bit, (__m256i)v2 ) );\n        max_abs = __lasx_xvfmax_s( max_abs, (__m256)__lasx_xvandn_v( (__m256i)sign_bit, (__m256i)v3 ) );\n\n        __m128 max4 = __lsx_vfmax_s( lasx_extractf128( max_abs, 1 ), lasx_extractf128( max_abs, 0) );\n        max4 = __lsx_vfmax_s( max4, (__m128)__lsx_vpickod_d((__m128i) max4, (__m128i)max4 ) );\n        __m128 tmp = max4;\n        max4 = __lsx_vfmax_s( max4, (__m128)__lsx_vextrins_w((__m128i)tmp, (__m128i)max4, 0x10 ));\n        ft.i = __lsx_vpickve2gr_w( (__m128i)max4, 0 );\n        const float max_scalar = ft.f;\n\n        // Quantize these floats\n        const float d = max_scalar / 127.f;\n        y[i].d = GGML_FP32_TO_FP16(d);\n        const float id = ( max_scalar != 0.0f ) ? 127.f / max_scalar : 0.0f;\n        const __m256 mul = __lasx_xvreplfr2vr_s( id );\n\n        // Apply the multiplier\n        v0 = __lasx_xvfmul_s( v0, mul );\n        v1 = __lasx_xvfmul_s( v1, mul );\n        v2 = __lasx_xvfmul_s( v2, mul );\n        v3 = __lasx_xvfmul_s( v3, mul );\n\n        // Round to nearest integer\n        __m256i i0 = __lasx_xvftintrne_w_s( v0 );\n        __m256i i1 = __lasx_xvftintrne_w_s( v1 );\n        __m256i i2 = __lasx_xvftintrne_w_s( v2 );\n        __m256i i3 = __lasx_xvftintrne_w_s( v3 );\n\n        __m128i ni0 = lasx_extracti128(i0, 0);\n        __m128i ni1 = lasx_extracti128( i0, 1);\n        __m128i ni2 = lasx_extracti128( i1, 0);\n        __m128i ni3 = lasx_extracti128( i1, 1);\n        __m128i ni4 = lasx_extracti128( i2, 0 );\n        __m128i ni5 = lasx_extracti128( i2, 1);\n        __m128i ni6 = lasx_extracti128( i3, 0);\n        __m128i ni7 = lasx_extracti128( i3, 1);\n\n        // Compute the sum of the quants and set y[i].s\n        const __m128i s0 = __lsx_vadd_w(__lsx_vadd_w(ni0, ni1), __lsx_vadd_w(ni2, ni3));\n        const __m128i s1 = __lsx_vadd_w(__lsx_vadd_w(ni4, ni5), __lsx_vadd_w(ni6, ni7));\n        y[i].s = GGML_FP32_TO_FP16(d * hsum_i32_4(__lsx_vadd_w(s0, s1)));\n\n        // Convert int32 to int16\n        ni0 = lsx_packs_w( ni0, ni1 );\n        ni2 = lsx_packs_w( ni2, ni3 );\n        ni4 = lsx_packs_w( ni4, ni5 );\n        ni6 = lsx_packs_w( ni6, ni7 );\n        // Convert int16 to int8\n        ni0 = lsx_packs_h( ni0, ni2 );\n        ni4 = lsx_packs_h( ni4, ni6 );\n\n        __lsx_vst(ni0, (__m128i *)(y[i].qs +  0), 0);\n        __lsx_vst(ni4, (__m128i *)(y[i].qs + 16), 0);\n    }\n#else\n    GGML_UNUSED(nb);\n    // scalar\n    quantize_row_q8_1_ref(x, y, k);\n#endif\n}\n\nvoid dequantize_row_q4_0(const block_q4_0 * restrict x, float * restrict y, int64_t k) {\n    static const int qk = QK4_0;\n\n    assert(k % qk == 0);\n\n    const int nb = k / qk;\n\n    for (int i = 0; i < nb; i++) {\n        const float d = GGML_FP16_TO_FP32(x[i].d);\n\n        for (int j = 0; j < qk/2; ++j) {\n            const int x0 = (x[i].qs[j] & 0x0F) - 8;\n            const int x1 = (x[i].qs[j] >>   4) - 8;\n\n            y[i*qk + j + 0   ] = x0*d;\n            y[i*qk + j + qk/2] = x1*d;\n        }\n    }\n}\n\nvoid dequantize_row_q4_1(const block_q4_1 * restrict x, float * restrict y, int64_t k) {\n    static const int qk = QK4_1;\n\n    assert(k % qk == 0);\n\n    const int nb = k / qk;\n\n    for (int i = 0; i < nb; i++) {\n        const float d = GGML_FP16_TO_FP32(x[i].d);\n        const float m = GGML_FP16_TO_FP32(x[i].m);\n\n        for (int j = 0; j < qk/2; ++j) {\n            const int x0 = (x[i].qs[j] & 0x0F);\n            const int x1 = (x[i].qs[j] >>   4);\n\n            y[i*qk + j + 0   ] = x0*d + m;\n            y[i*qk + j + qk/2] = x1*d + m;\n        }\n    }\n}\n\nvoid dequantize_row_q5_0(const block_q5_0 * restrict x, float * restrict y, int64_t k) {\n    static const int qk = QK5_0;\n\n    assert(k % qk == 0);\n\n    const int nb = k / qk;\n\n    for (int i = 0; i < nb; i++) {\n        const float d = GGML_FP16_TO_FP32(x[i].d);\n\n        uint32_t qh;\n        memcpy(&qh, x[i].qh, sizeof(qh));\n\n        for (int j = 0; j < qk/2; ++j) {\n            const uint8_t xh_0 = ((qh >> (j +  0)) << 4) & 0x10;\n            const uint8_t xh_1 = ((qh >> (j + 12))     ) & 0x10;\n\n            const int32_t x0 = ((x[i].qs[j] & 0x0F) | xh_0) - 16;\n            const int32_t x1 = ((x[i].qs[j] >>   4) | xh_1) - 16;\n\n            y[i*qk + j + 0   ] = x0*d;\n            y[i*qk + j + qk/2] = x1*d;\n        }\n    }\n}\n\nvoid dequantize_row_q5_1(const block_q5_1 * restrict x, float * restrict y, int64_t k) {\n    static const int qk = QK5_1;\n\n    assert(k % qk == 0);\n\n    const int nb = k / qk;\n\n    for (int i = 0; i < nb; i++) {\n        const float d = GGML_FP16_TO_FP32(x[i].d);\n        const float m = GGML_FP16_TO_FP32(x[i].m);\n\n        uint32_t qh;\n        memcpy(&qh, x[i].qh, sizeof(qh));\n\n        for (int j = 0; j < qk/2; ++j) {\n            const uint8_t xh_0 = ((qh >> (j +  0)) << 4) & 0x10;\n            const uint8_t xh_1 = ((qh >> (j + 12))     ) & 0x10;\n\n            const int x0 = (x[i].qs[j] & 0x0F) | xh_0;\n            const int x1 = (x[i].qs[j] >>   4) | xh_1;\n\n            y[i*qk + j + 0   ] = x0*d + m;\n            y[i*qk + j + qk/2] = x1*d + m;\n        }\n    }\n}\n\nvoid dequantize_row_q8_0(const block_q8_0 * restrict x, float * restrict y, int64_t k) {\n    static const int qk = QK8_0;\n\n    assert(k % qk == 0);\n\n    const int nb = k / qk;\n\n    for (int i = 0; i < nb; i++) {\n        const float d = GGML_FP16_TO_FP32(x[i].d);\n\n        for (int j = 0; j < qk; ++j) {\n            y[i*qk + j] = x[i].qs[j]*d;\n        }\n    }\n}\n\n//\n// 2-6 bit quantization in super-blocks\n//\n\n//\n// ===================== Helper functions\n//\nstatic inline int nearest_int(float fval) {\n    assert(fabsf(fval) <= 4194303.f);\n    float val = fval + 12582912.f;\n    int i; memcpy(&i, &val, sizeof(int));\n    return (i & 0x007fffff) - 0x00400000;\n}\n\nstatic float make_qx_quants(int n, int nmax, const float * restrict x, int8_t * restrict L, int rmse_type,\n        const float * restrict qw) {\n    float max = 0;\n    float amax = 0;\n    for (int i = 0; i < n; ++i) {\n        float ax = fabsf(x[i]);\n        if (ax > amax) { amax = ax; max = x[i]; }\n    }\n    if (amax < GROUP_MAX_EPS) { // all zero\n        for (int i = 0; i < n; ++i) {\n            L[i] = 0;\n        }\n        return 0.f;\n    }\n    float iscale = -nmax / max;\n    if (rmse_type == 0) {\n        for (int i = 0; i < n; ++i) {\n            int l = nearest_int(iscale * x[i]);\n            L[i] = nmax + MAX(-nmax, MIN(nmax-1, l));\n        }\n        return 1/iscale;\n    }\n    bool return_early = false;\n    if (rmse_type < 0) {\n        rmse_type = -rmse_type;\n        return_early = true;\n    }\n    float sumlx = 0;\n    float suml2 = 0;\n#ifdef HAVE_BUGGY_APPLE_LINKER\n    // use 'volatile' to prevent unroll and work around a bug in Apple ld64 1015.7\n    for (volatile int i = 0; i < n; ++i) {\n#else\n    for (int i = 0; i < n; ++i) {\n#endif\n        int l = nearest_int(iscale * x[i]);\n        l = MAX(-nmax, MIN(nmax-1, l));\n        L[i] = l + nmax;\n        float w = qw ? qw[i] : rmse_type == 1 ? x[i] * x[i] : rmse_type == 2 ? 1 : rmse_type == 3 ? fabsf(x[i]) : sqrtf(fabsf(x[i]));\n        sumlx += w*x[i]*l;\n        suml2 += w*l*l;\n    }\n    float scale = suml2 ? sumlx/suml2 : 0.0f;\n    if (return_early) return suml2 > 0 ? 0.5f*(scale + 1/iscale) : 1/iscale;\n    float best = scale * sumlx;\n    for (int is = -9; is <= 9; ++is) {\n        if (is == 0) {\n            continue;\n        }\n        iscale = -(nmax + 0.1f*is) / max;\n        sumlx = suml2 = 0;\n        for (int i = 0; i < n; ++i) {\n            int l = nearest_int(iscale * x[i]);\n            l = MAX(-nmax, MIN(nmax-1, l));\n            float w = qw ? qw[i] : rmse_type == 1 ? x[i] * x[i] : rmse_type == 2 ? 1 : rmse_type == 3 ? fabsf(x[i]) : sqrtf(fabsf(x[i]));\n            sumlx += w*x[i]*l;\n            suml2 += w*l*l;\n        }\n        if (suml2 > 0 && sumlx*sumlx > best*suml2) {\n            for (int i = 0; i < n; ++i) {\n                int l = nearest_int(iscale * x[i]);\n                L[i] = nmax + MAX(-nmax, MIN(nmax-1, l));\n            }\n            scale = sumlx/suml2; best = scale*sumlx;\n        }\n    }\n    return scale;\n}\n\nstatic float make_q3_quants(int n, int nmax, const float * restrict x, int8_t * restrict L, bool do_rmse) {\n    float max = 0;\n    float amax = 0;\n    for (int i = 0; i < n; ++i) {\n        float ax = fabsf(x[i]);\n        if (ax > amax) { amax = ax; max = x[i]; }\n    }\n    if (amax < GROUP_MAX_EPS) { // all zero\n        for (int i = 0; i < n; ++i) { L[i] = 0; }\n        return 0.f;\n    }\n    float iscale = -nmax / max;\n    if (do_rmse) {\n        float sumlx = 0;\n        float suml2 = 0;\n        for (int i = 0; i < n; ++i) {\n            int l = nearest_int(iscale * x[i]);\n            l = MAX(-nmax, MIN(nmax-1, l));\n            L[i] = l;\n            float w = x[i]*x[i];\n            sumlx += w*x[i]*l;\n            suml2 += w*l*l;\n        }\n        for (int itry = 0; itry < 5; ++itry) {\n            int n_changed = 0;\n            for (int i = 0; i < n; ++i) {\n                float w = x[i]*x[i];\n                float slx = sumlx - w*x[i]*L[i];\n                if (slx > 0) {\n                    float sl2 = suml2 - w*L[i]*L[i];\n                    int new_l = nearest_int(x[i] * sl2 / slx);\n                    new_l = MAX(-nmax, MIN(nmax-1, new_l));\n                    if (new_l != L[i]) {\n                        slx += w*x[i]*new_l;\n                        sl2 += w*new_l*new_l;\n                        if (sl2 > 0 && slx*slx*suml2 > sumlx*sumlx*sl2) {\n                            L[i] = new_l; sumlx = slx; suml2 = sl2;\n                            ++n_changed;\n                        }\n                    }\n                }\n            }\n            if (!n_changed) {\n                break;\n            }\n        }\n        for (int i = 0; i < n; ++i) {\n            L[i] += nmax;\n        }\n        return sumlx / suml2;\n    }\n    for (int i = 0; i < n; ++i) {\n        int l = nearest_int(iscale * x[i]);\n        l = MAX(-nmax, MIN(nmax-1, l));\n        L[i] = l + nmax;\n    }\n    return 1/iscale;\n}\n\nstatic float make_qkx1_quants(int n, int nmax, const float * restrict x, uint8_t * restrict L, float * restrict the_min,\n        int ntry, float alpha) {\n    float min = x[0];\n    float max = x[0];\n    for (int i = 1; i < n; ++i) {\n        if (x[i] < min) min = x[i];\n        if (x[i] > max) max = x[i];\n    }\n    if (max == min) {\n        for (int i = 0; i < n; ++i) L[i] = 0;\n        *the_min = 0;\n        return 0.f;\n    }\n    if (min > 0) min = 0;\n    float iscale = nmax/(max - min);\n    float scale = 1/iscale;\n    for (int itry = 0; itry < ntry; ++itry) {\n        float sumlx = 0; int suml2 = 0;\n        bool did_change = false;\n        for (int i = 0; i < n; ++i) {\n            int l = nearest_int(iscale*(x[i] - min));\n            l = MAX(0, MIN(nmax, l));\n            if (l != L[i]) {\n                L[i] = l;\n                did_change = true;\n            }\n            sumlx += (x[i] - min)*l;\n            suml2 += l*l;\n        }\n        scale = sumlx/suml2;\n        float sum = 0;\n        for (int i = 0; i < n; ++i) {\n            sum += x[i] - scale*L[i];\n        }\n        min = alpha*min + (1 - alpha)*sum/n;\n        if (min > 0) min = 0;\n        iscale = 1/scale;\n        if (!did_change) break;\n    }\n    *the_min = -min;\n    return scale;\n}\n\nstatic float make_qkx2_quants(int n, int nmax, const float * restrict x, const float * restrict weights,\n        uint8_t * restrict L, float * restrict the_min, uint8_t * restrict Laux,\n        float rmin, float rdelta, int nstep, bool use_mad) {\n    float min = x[0];\n    float max = x[0];\n    float sum_w = weights[0];\n    float sum_x = sum_w * x[0];\n#ifdef HAVE_BUGGY_APPLE_LINKER\n    // use 'volatile' to prevent unroll and work around a bug in Apple ld64 1015.7\n    for (volatile int i = 1; i < n; ++i) {\n#else\n    for (int i = 1; i < n; ++i) {\n#endif\n        if (x[i] < min) min = x[i];\n        if (x[i] > max) max = x[i];\n        float w = weights[i];\n        sum_w += w;\n        sum_x += w * x[i];\n    }\n    if (min > 0) min = 0;\n    if (max == min) {\n        for (int i = 0; i < n; ++i) L[i] = 0;\n        *the_min = -min;\n        return 0.f;\n    }\n    float iscale = nmax/(max - min);\n    float scale = 1/iscale;\n    float best_mad = 0;\n    for (int i = 0; i < n; ++i) {\n        int l = nearest_int(iscale*(x[i] - min));\n        L[i] = MAX(0, MIN(nmax, l));\n        float diff = scale * L[i] + min - x[i];\n        diff = use_mad ? fabsf(diff) : diff * diff;\n        float w = weights[i];\n        best_mad += w * diff;\n    }\n    if (nstep < 1) {\n        *the_min = -min;\n        return scale;\n    }\n    for (int is = 0; is <= nstep; ++is) {\n        iscale = (rmin + rdelta*is + nmax)/(max - min);\n        float sum_l = 0, sum_l2 = 0, sum_xl = 0;\n        for (int i = 0; i < n; ++i) {\n            int l = nearest_int(iscale*(x[i] - min));\n            l = MAX(0, MIN(nmax, l));\n            Laux[i] = l;\n            float w = weights[i];\n            sum_l += w*l;\n            sum_l2 += w*l*l;\n            sum_xl += w*l*x[i];\n        }\n        float D = sum_w * sum_l2 - sum_l * sum_l;\n        if (D > 0) {\n            float this_scale = (sum_w * sum_xl - sum_x * sum_l)/D;\n            float this_min   = (sum_l2 * sum_x - sum_l * sum_xl)/D;\n            if (this_min > 0) {\n                this_min = 0;\n                this_scale = sum_xl / sum_l2;\n            }\n            float mad = 0;\n            for (int i = 0; i < n; ++i) {\n                float diff = this_scale * Laux[i] + this_min - x[i];\n                diff = use_mad ? fabsf(diff) : diff * diff;\n                float w = weights[i];\n                mad += w * diff;\n            }\n            if (mad < best_mad) {\n                for (int i = 0; i < n; ++i) {\n                    L[i] = Laux[i];\n                }\n                best_mad = mad;\n                scale = this_scale;\n                min = this_min;\n            }\n        }\n    }\n    *the_min = -min;\n    return scale;\n}\n\nstatic inline void get_scale_min_k4(int j, const uint8_t * restrict q, uint8_t * restrict d, uint8_t * restrict m) {\n    if (j < 4) {\n        *d = q[j] & 63; *m = q[j + 4] & 63;\n    } else {\n        *d = (q[j+4] & 0xF) | ((q[j-4] >> 6) << 4);\n        *m = (q[j+4] >>  4) | ((q[j-0] >> 6) << 4);\n    }\n}\n\n//========================- 2-bit (de)-quantization\n\nvoid quantize_row_q2_K_ref(const float * restrict x, block_q2_K * restrict y, int64_t k) {\n    assert(k % QK_K == 0);\n    const int nb = k / QK_K;\n\n    uint8_t L[QK_K];\n    uint8_t Laux[16];\n    float   weights[16];\n    float mins[QK_K/16];\n    float scales[QK_K/16];\n\n    const float q4scale = 15.f;\n\n    for (int i = 0; i < nb; i++) {\n        float max_scale = 0; // as we are deducting the min, scales are always positive\n        float max_min = 0;\n        for (int j = 0; j < QK_K/16; ++j) {\n            for (int l = 0; l < 16; ++l) weights[l] = fabsf(x[16*j + l]);\n            scales[j] = make_qkx2_quants(16, 3, x + 16*j, weights, L + 16*j, &mins[j], Laux, -0.5f, 0.1f, 15, true);\n            float scale = scales[j];\n            if (scale > max_scale) {\n                max_scale = scale;\n            }\n            float min = mins[j];\n            if (min > max_min) {\n                max_min = min;\n            }\n        }\n\n        if (max_scale > 0) {\n            float iscale = q4scale/max_scale;\n            for (int j = 0; j < QK_K/16; ++j) {\n                int l = nearest_int(iscale*scales[j]);\n                y[i].scales[j] = l;\n            }\n            y[i].d = GGML_FP32_TO_FP16(max_scale/q4scale);\n        } else {\n            for (int j = 0; j < QK_K/16; ++j) y[i].scales[j] = 0;\n            y[i].d = GGML_FP32_TO_FP16(0.f);\n        }\n        if (max_min > 0) {\n            float iscale = q4scale/max_min;\n            for (int j = 0; j < QK_K/16; ++j) {\n                int l = nearest_int(iscale*mins[j]);\n                y[i].scales[j] |= (l << 4);\n            }\n            y[i].dmin = GGML_FP32_TO_FP16(max_min/q4scale);\n        } else {\n            y[i].dmin = GGML_FP32_TO_FP16(0.f);\n        }\n        for (int j = 0; j < QK_K/16; ++j) {\n            const float d = GGML_FP16_TO_FP32(y[i].d) * (y[i].scales[j] & 0xF);\n            if (!d) continue;\n            const float dm = GGML_FP16_TO_FP32(y[i].dmin) * (y[i].scales[j] >> 4);\n            for (int ii = 0; ii < 16; ++ii) {\n                int l = nearest_int((x[16*j + ii] + dm)/d);\n                l = MAX(0, MIN(3, l));\n                L[16*j + ii] = l;\n            }\n        }\n\n        for (int j = 0; j < QK_K; j += 128) {\n            for (int l = 0; l < 32; ++l) {\n                y[i].qs[j/4 + l] = L[j + l] | (L[j + l + 32] << 2) | (L[j + l + 64] << 4) | (L[j + l + 96] << 6);\n            }\n        }\n\n        x += QK_K;\n    }\n}\n\nvoid dequantize_row_q2_K(const block_q2_K * restrict x, float * restrict y, int64_t k) {\n    assert(k % QK_K == 0);\n    const int nb = k / QK_K;\n\n    for (int i = 0; i < nb; i++) {\n\n        const float d = GGML_FP16_TO_FP32(x[i].d);\n        const float min = GGML_FP16_TO_FP32(x[i].dmin);\n\n        const uint8_t * q = x[i].qs;\n\n        int is = 0;\n        float dl, ml;\n        for (int n = 0; n < QK_K; n += 128) {\n            int shift = 0;\n            for (int j = 0; j < 4; ++j) {\n\n                uint8_t sc = x[i].scales[is++];\n                dl = d * (sc & 0xF); ml = min * (sc >> 4);\n                for (int l = 0; l < 16; ++l) *y++ = dl * ((int8_t)((q[l] >> shift) & 3)) - ml;\n\n                sc = x[i].scales[is++];\n                dl = d * (sc & 0xF); ml = min * (sc >> 4);\n                for (int l = 0; l < 16; ++l) *y++ = dl * ((int8_t)((q[l+16] >> shift) & 3)) - ml;\n\n                shift += 2;\n            }\n            q += 32;\n        }\n    }\n}\n\nvoid quantize_row_q2_K(const float * restrict x, void * restrict vy, int64_t k) {\n    quantize_row_q2_K_ref(x, vy, k);\n}\n\nstatic float make_qkx3_quants(int n, int nmax, const float * restrict x, const float * restrict weights,\n        uint8_t * restrict L, float * restrict the_min, uint8_t * restrict Laux,\n        float rmin, float rdelta, int nstep, bool use_mad) {\n    float min = x[0];\n    float max = x[0];\n    float sum_w = weights ? weights[0] : x[0]*x[0];\n    float sum_x = sum_w * x[0];\n#ifdef HAVE_BUGGY_APPLE_LINKER\n    // use 'volatile' to prevent unroll and work around a bug in Apple ld64 1015.7\n    for (volatile int i = 1; i < n; ++i) {\n#else\n    for (int i = 1; i < n; ++i) {\n#endif\n        if (x[i] < min) min = x[i];\n        if (x[i] > max) max = x[i];\n        float w = weights ? weights[i] : x[i]*x[i];\n        sum_w += w;\n        sum_x += w * x[i];\n    }\n    if (min > 0) {\n        min = 0;\n    }\n    if (max <= min) {\n        memset(L, 0, n);\n        *the_min = -min;\n        return 0.f;\n    }\n    float iscale = nmax/(max - min);\n    float scale = 1/iscale;\n    float best_mad = 0;\n    for (int i = 0; i < n; ++i) {\n        int l = nearest_int(iscale*(x[i] - min));\n        L[i] = MAX(0, MIN(nmax, l));\n        float diff = scale * L[i] + min - x[i];\n        diff = use_mad ? fabsf(diff) : diff*diff;\n        float w = weights ? weights[i] : x[i]*x[i];\n        best_mad += w * diff;\n    }\n    if (nstep < 1) {\n        *the_min = -min;\n        return scale;\n    }\n    for (int is = 0; is <= nstep; ++is) {\n        iscale = (rmin + rdelta*is + nmax)/(max - min);\n        float sum_l = 0, sum_l2 = 0, sum_xl = 0;\n        for (int i = 0; i < n; ++i) {\n            int l = nearest_int(iscale*(x[i] - min));\n            l = MAX(0, MIN(nmax, l));\n            Laux[i] = l;\n            float w = weights ? weights[i] : x[i]*x[i];\n            sum_l  += w*l;\n            sum_l2 += w*l*l;\n            sum_xl += w*l*x[i];\n        }\n        float D = sum_w * sum_l2 - sum_l * sum_l;\n        if (D > 0) {\n            float this_scale = (sum_w * sum_xl - sum_x * sum_l)/D;\n            float this_min   = (sum_l2 * sum_x - sum_l * sum_xl)/D;\n            if (this_min > 0) {\n                this_min = 0;\n                this_scale = sum_xl / sum_l2;\n            }\n            float mad = 0;\n            for (int i = 0; i < n; ++i) {\n                float diff = this_scale * Laux[i] + this_min - x[i];\n                diff = use_mad ? fabsf(diff) : diff*diff;\n                float w = weights ? weights[i] : x[i]*x[i];\n                mad += w * diff;\n            }\n            if (mad < best_mad) {\n                for (int i = 0; i < n; ++i) {\n                    L[i] = Laux[i];\n                }\n                best_mad = mad;\n                scale = this_scale;\n                min = this_min;\n            }\n        }\n    }\n    *the_min = -min;\n    return scale;\n}\n\nstatic float make_qp_quants(int n, int nmax, const float * restrict x, uint8_t * restrict L, const float * quant_weights) {\n    float max = 0;\n    for (int i = 0; i < n; ++i) {\n        max = MAX(max, x[i]);\n    }\n    if (!max) { // all zero\n        for (int i = 0; i < n; ++i) { L[i] = 0; }\n        return 0.f;\n    }\n    float iscale = nmax / max;\n    for (int i = 0; i < n; ++i) {\n        L[i] = nearest_int(iscale * x[i]);\n    }\n    float scale = 1/iscale;\n    float best_mse = 0;\n    for (int i = 0; i < n; ++i) {\n        float diff = x[i] - scale*L[i];\n        float w = quant_weights[i];\n        best_mse += w*diff*diff;\n    }\n    for (int is = -4; is <= 4; ++is) {\n        if (is == 0) continue;\n        float iscale_is = (0.1f*is + nmax)/max;\n        float scale_is = 1/iscale_is;\n        float mse = 0;\n        for (int i = 0; i < n; ++i) {\n            int l = nearest_int(iscale_is*x[i]);\n            l = MIN(nmax, l);\n            float diff = x[i] - scale_is*l;\n            float w = quant_weights[i];\n            mse += w*diff*diff;\n        }\n        if (mse < best_mse) {\n            best_mse = mse;\n            iscale = iscale_is;\n        }\n    }\n    float sumlx = 0;\n    float suml2 = 0;\n    for (int i = 0; i < n; ++i) {\n        int l = nearest_int(iscale * x[i]);\n        l = MIN(nmax, l);\n        L[i] = l;\n        float w = quant_weights[i];\n        sumlx += w*x[i]*l;\n        suml2 += w*l*l;\n    }\n    for (int itry = 0; itry < 5; ++itry) {\n        int n_changed = 0;\n        for (int i = 0; i < n; ++i) {\n            float w = quant_weights[i];\n            float slx = sumlx - w*x[i]*L[i];\n            float sl2 = suml2 - w*L[i]*L[i];\n            if (slx > 0 && sl2 > 0) {\n                int new_l = nearest_int(x[i] * sl2 / slx);\n                new_l = MIN(nmax, new_l);\n                if (new_l != L[i]) {\n                    slx += w*x[i]*new_l;\n                    sl2 += w*new_l*new_l;\n                    if (slx*slx*suml2 > sumlx*sumlx*sl2) {\n                        L[i] = new_l; sumlx = slx; suml2 = sl2;\n                        ++n_changed;\n                    }\n                }\n            }\n        }\n        if (!n_changed) {\n            break;\n        }\n    }\n    return sumlx/suml2;\n}\n\nstatic void quantize_row_q2_K_impl(const float * restrict x, block_q2_K * restrict y, int k, const float * restrict quant_weights) {\n    GGML_ASSERT(quant_weights);\n    assert(k % QK_K == 0);\n    const int nb = k / QK_K;\n    const bool requantize = true;\n\n    uint8_t L[QK_K];\n    uint8_t Laux[16];\n    float mins[QK_K/16];\n    float scales[QK_K/16];\n    float sw[QK_K/16];\n    float weight[16];\n    uint8_t Ls[QK_K/16], Lm[QK_K/16];\n\n    for (int i = 0; i < nb; i++) {\n        memset(sw, 0, QK_K/16*sizeof(float));\n        float sumx2 = 0;\n        for (int j = 0; j < QK_K; ++j) sumx2 += x[j]*x[j];\n        float sigma2 = sumx2/QK_K;\n        for (int j = 0; j < QK_K/16; ++j) {\n            const float * restrict qw = quant_weights + QK_K * i + 16*j;\n            for (int l = 0; l < 16; ++l) weight[l] = qw[l] * sqrtf(sigma2 + x[16*j + l]*x[16*j + l]);\n            for (int l = 0; l < QK_K/16; ++l) sw[j] += weight[l];\n            scales[j] = make_qkx3_quants(16, 3, x + 16*j, weight, L + 16*j, &mins[j], Laux, -0.9f, 0.05f, 36, false);\n        }\n\n        float dm, mm;\n        dm  = make_qp_quants(QK_K/16, 15, scales, Ls, sw);\n        mm  = make_qp_quants(QK_K/16, 15, mins,   Lm, sw);\n\n        y[i].d    = GGML_FP32_TO_FP16(dm);\n        y[i].dmin = GGML_FP32_TO_FP16(mm);\n        dm        = GGML_FP16_TO_FP32(y[i].d);\n        mm        = GGML_FP16_TO_FP32(y[i].dmin);\n\n        for (int j = 0; j < QK_K/16; ++j) {\n            y[i].scales[j] = Ls[j] | (Lm[j] << 4);\n        }\n\n        if (requantize) {\n            for (int j = 0; j < QK_K/16; ++j) {\n                const float d = dm * (y[i].scales[j] & 0xF);\n                if (!d) continue;\n                const float m = mm * (y[i].scales[j] >> 4);\n                for (int ii = 0; ii < 16; ++ii) {\n                    int l = nearest_int((x[16*j + ii] + m)/d);\n                    l = MAX(0, MIN(3, l));\n                    L[16*j + ii] = l;\n                }\n            }\n        }\n\n        for (int j = 0; j < QK_K; j += 128) {\n            for (int l = 0; l < 32; ++l) {\n                y[i].qs[j/4 + l] = L[j + l] | (L[j + l + 32] << 2) | (L[j + l + 64] << 4) | (L[j + l + 96] << 6);\n            }\n        }\n\n        x += QK_K;\n    }\n}\n\nsize_t quantize_q2_K(const float * restrict src, void * restrict dst, int64_t nrow, int64_t n_per_row, const float * quant_weights) {\n    size_t row_size = ggml_row_size(GGML_TYPE_Q2_K, n_per_row);\n    if (!quant_weights) {\n        quantize_row_q2_K_ref(src, dst, (int64_t)nrow*n_per_row);\n    }\n    else {\n        char * qrow = (char *)dst;\n        for (int64_t row = 0; row < nrow; ++row) {\n            quantize_row_q2_K_impl(src, (block_q2_K*)qrow, n_per_row, quant_weights);\n            src += n_per_row;\n            qrow += row_size;\n        }\n    }\n    return nrow * row_size;\n}\n\n//========================= 3-bit (de)-quantization\n\nvoid quantize_row_q3_K_ref(const float * restrict x, block_q3_K * restrict y, int64_t k) {\n    assert(k % QK_K == 0);\n    const int nb = k / QK_K;\n\n    int8_t L[QK_K];\n    float scales[QK_K / 16];\n\n    for (int i = 0; i < nb; i++) {\n\n        float max_scale = 0;\n        float amax = 0;\n        for (int j = 0; j < QK_K/16; ++j) {\n            scales[j] = make_q3_quants(16, 4, x + 16*j, L + 16*j, true);\n            float scale = fabsf(scales[j]);\n            if (scale > amax) {\n                amax = scale; max_scale = scales[j];\n            }\n        }\n\n        memset(y[i].scales, 0, 12);\n        if (max_scale) {\n            float iscale = -32.f/max_scale;\n            for (int j = 0; j < QK_K/16; ++j) {\n                int8_t l = nearest_int(iscale*scales[j]);\n                l = MAX(-32, MIN(31, l)) + 32;\n                if (j < 8) {\n                    y[i].scales[j] = l & 0xF;\n                } else {\n                    y[i].scales[j-8] |= ((l & 0xF) << 4);\n                }\n                l >>= 4;\n                y[i].scales[j%4 + 8] |= (l << (2*(j/4)));\n            }\n            y[i].d = GGML_FP32_TO_FP16(1/iscale);\n        } else {\n            y[i].d = GGML_FP32_TO_FP16(0.f);\n        }\n\n        int8_t sc;\n        for (int j = 0; j < QK_K/16; ++j) {\n            sc = j < 8 ? y[i].scales[j] & 0xF : y[i].scales[j-8] >> 4;\n            sc = (sc | (((y[i].scales[8 + j%4] >> (2*(j/4))) & 3) << 4)) - 32;\n            float d = GGML_FP16_TO_FP32(y[i].d) * sc;\n            if (!d) {\n                continue;\n            }\n            for (int ii = 0; ii < 16; ++ii) {\n                int l = nearest_int(x[16*j + ii]/d);\n                l = MAX(-4, MIN(3, l));\n                L[16*j + ii] = l + 4;\n            }\n        }\n\n        memset(y[i].hmask, 0, QK_K/8);\n        // We put the high-bit for the 1st 8 quants into bit 0, the next 8 into bit 1, etc.\n        int m = 0;\n        uint8_t hm = 1;\n        for (int j = 0; j < QK_K; ++j) {\n            if (L[j] > 3) {\n                y[i].hmask[m] |= hm;\n                L[j] -= 4;\n            }\n            if (++m == QK_K/8) {\n                m = 0; hm <<= 1;\n            }\n        }\n        for (int j = 0; j < QK_K; j += 128) {\n            for (int l = 0; l < 32; ++l) {\n                y[i].qs[j/4 + l] = L[j + l] | (L[j + l + 32] << 2) | (L[j + l + 64] << 4) | (L[j + l + 96] << 6);\n            }\n        }\n\n        x += QK_K;\n    }\n}\n\nvoid dequantize_row_q3_K(const block_q3_K * restrict x, float * restrict y, int64_t k) {\n    assert(k % QK_K == 0);\n    const int nb = k / QK_K;\n\n    const uint32_t kmask1 = 0x03030303;\n    const uint32_t kmask2 = 0x0f0f0f0f;\n\n    uint32_t aux[4];\n    const int8_t * scales = (const int8_t*)aux;\n\n    for (int i = 0; i < nb; i++) {\n\n        const float d_all = GGML_FP16_TO_FP32(x[i].d);\n\n        const uint8_t * restrict q = x[i].qs;\n        const uint8_t * restrict hm = x[i].hmask;\n        uint8_t m = 1;\n\n        memcpy(aux, x[i].scales, 12);\n        uint32_t tmp = aux[2];\n        aux[2] = ((aux[0] >> 4) & kmask2) | (((tmp >> 4) & kmask1) << 4);\n        aux[3] = ((aux[1] >> 4) & kmask2) | (((tmp >> 6) & kmask1) << 4);\n        aux[0] = (aux[0] & kmask2) | (((tmp >> 0) & kmask1) << 4);\n        aux[1] = (aux[1] & kmask2) | (((tmp >> 2) & kmask1) << 4);\n\n        int is = 0;\n        float dl;\n        for (int n = 0; n < QK_K; n += 128) {\n            int shift = 0;\n            for (int j = 0; j < 4; ++j) {\n\n                dl = d_all * (scales[is++] - 32);\n                for (int l = 0; l < 16; ++l) {\n                    *y++ = dl * ((int8_t)((q[l+ 0] >> shift) & 3) - ((hm[l+ 0] & m) ? 0 : 4));\n                }\n\n                dl = d_all * (scales[is++] - 32);\n                for (int l = 0; l < 16; ++l) {\n                    *y++ = dl * ((int8_t)((q[l+16] >> shift) & 3) - ((hm[l+16] & m) ? 0 : 4));\n                }\n\n                shift += 2;\n                m <<= 1;\n            }\n            q += 32;\n        }\n\n    }\n}\n\nvoid quantize_row_q3_K(const float * restrict x, void * restrict vy, int64_t k) {\n    quantize_row_q3_K_ref(x, vy, k);\n}\n\nstatic void quantize_row_q3_K_impl(const float * restrict x, block_q3_K * restrict y, int64_t n_per_row, const float * restrict quant_weights) {\n    assert(n_per_row % QK_K == 0);\n    const int nb = n_per_row / QK_K;\n\n    int8_t L[QK_K];\n    float scales[QK_K / 16];\n    float weight[16];\n    float sw[QK_K / 16];\n    int8_t Ls[QK_K / 16];\n\n    for (int i = 0; i < nb; i++) {\n\n        float sumx2 = 0;\n        for (int j = 0; j < QK_K; ++j) sumx2 += x[j]*x[j];\n        float sigma2 = 2*sumx2/QK_K;\n\n        for (int j = 0; j < QK_K/16; ++j) {\n            if (quant_weights) {\n                const float * qw = quant_weights + QK_K * i + 16*j;\n                for (int l = 0; l < 16; ++l) weight[l] = qw[l] * sqrtf(sigma2 + x[16*j+l]*x[16*j+l]);\n            } else {\n                for (int l = 0; l < 16; ++l) weight[l] = x[16*j+l]*x[16*j+l];\n            }\n            float sumw = 0;\n            for (int l = 0; l < 16; ++l) sumw += weight[l];\n            sw[j] = sumw;\n\n            scales[j] = make_qx_quants(16, 4, x + 16*j, L + 16*j, 1, weight);\n\n        }\n\n        memset(y[i].scales, 0, 12);\n\n        float d_block = make_qx_quants(QK_K/16, 32, scales, Ls, 1, sw);\n        for (int j = 0; j < QK_K/16; ++j) {\n            int l = Ls[j];\n            if (j < 8) {\n                y[i].scales[j] = l & 0xF;\n            } else {\n                y[i].scales[j-8] |= ((l & 0xF) << 4);\n            }\n            l >>= 4;\n            y[i].scales[j%4 + 8] |= (l << (2*(j/4)));\n        }\n        y[i].d = GGML_FP32_TO_FP16(d_block);\n\n        int8_t sc;\n        for (int j = 0; j < QK_K/16; ++j) {\n            sc = j < 8 ? y[i].scales[j] & 0xF : y[i].scales[j-8] >> 4;\n            sc = (sc | (((y[i].scales[8 + j%4] >> (2*(j/4))) & 3) << 4)) - 32;\n            float d = GGML_FP16_TO_FP32(y[i].d) * sc;\n            if (!d) {\n                continue;\n            }\n            for (int ii = 0; ii < 16; ++ii) {\n                int l = nearest_int(x[16*j + ii]/d);\n                l = MAX(-4, MIN(3, l));\n                L[16*j + ii] = l + 4;\n            }\n        }\n\n        memset(y[i].hmask, 0, QK_K/8);\n        // We put the high-bit for the 1st 8 quants into bit 0, the next 8 into bit 1, etc.\n        int m = 0;\n        uint8_t hm = 1;\n        for (int j = 0; j < QK_K; ++j) {\n            if (L[j] > 3) {\n                y[i].hmask[m] |= hm;\n                L[j] -= 4;\n            }\n            if (++m == QK_K/8) {\n                m = 0; hm <<= 1;\n            }\n        }\n        for (int j = 0; j < QK_K; j += 128) {\n            for (int l = 0; l < 32; ++l) {\n                y[i].qs[j/4 + l] = L[j + l] | (L[j + l + 32] << 2) | (L[j + l + 64] << 4) | (L[j + l + 96] << 6);\n            }\n        }\n\n        x += QK_K;\n    }\n}\n\nsize_t quantize_q3_K(const float * restrict src, void * restrict dst, int64_t nrow, int64_t n_per_row, const float * quant_weights) {\n    size_t row_size = ggml_row_size(GGML_TYPE_Q3_K, n_per_row);\n    if (!quant_weights) {\n        quantize_row_q3_K_ref(src, dst, (int64_t)nrow*n_per_row);\n    }\n    else {\n        char * qrow = (char *)dst;\n        for (int64_t row = 0; row < nrow; ++row) {\n            quantize_row_q3_K_impl(src, (block_q3_K*)qrow, n_per_row, quant_weights);\n            src += n_per_row;\n            qrow += row_size;\n        }\n    }\n    return nrow * row_size;\n}\n\n// ====================== 4-bit (de)-quantization\n\nvoid quantize_row_q4_K_ref(const float * restrict x, block_q4_K * restrict y, int64_t k) {\n    assert(k % QK_K == 0);\n    const int nb = k / QK_K;\n\n    uint8_t L[QK_K];\n    uint8_t Laux[32];\n    float   weights[32];\n    float mins[QK_K/32];\n    float scales[QK_K/32];\n\n    for (int i = 0; i < nb; i++) {\n        float max_scale = 0; // as we are deducting the min, scales are always positive\n        float max_min = 0;\n        for (int j = 0; j < QK_K/32; ++j) {\n            //scales[j] = make_qkx1_quants(32, 15, x + 32*j, L + 32*j, &mins[j], 9, 0.5f);\n            float sum_x2 = 0;\n            for (int l = 0; l < 32; ++l) sum_x2 += x[32*j + l] * x[32*j + l];\n            float av_x = sqrtf(sum_x2/32);\n            for (int l = 0; l < 32; ++l) weights[l] = av_x + fabsf(x[32*j + l]);\n            scales[j] = make_qkx2_quants(32, 15, x + 32*j, weights, L + 32*j, &mins[j], Laux, -1.f, 0.1f, 20, false);\n            float scale = scales[j];\n            if (scale > max_scale) {\n                max_scale = scale;\n            }\n            float min = mins[j];\n            if (min > max_min) {\n                max_min = min;\n            }\n        }\n\n        float inv_scale = max_scale > 0 ? 63.f/max_scale : 0.f;\n        float inv_min   = max_min   > 0 ? 63.f/max_min   : 0.f;\n        for (int j = 0; j < QK_K/32; ++j) {\n            uint8_t ls = nearest_int(inv_scale*scales[j]);\n            uint8_t lm = nearest_int(inv_min*mins[j]);\n            ls = MIN(63, ls);\n            lm = MIN(63, lm);\n            if (j < 4) {\n                y[i].scales[j] = ls;\n                y[i].scales[j+4] = lm;\n            } else {\n                y[i].scales[j+4] = (ls & 0xF) | ((lm & 0xF) << 4);\n                y[i].scales[j-4] |= ((ls >> 4) << 6);\n                y[i].scales[j-0] |= ((lm >> 4) << 6);\n            }\n        }\n        y[i].d = GGML_FP32_TO_FP16(max_scale/63.f);\n        y[i].dmin = GGML_FP32_TO_FP16(max_min/63.f);\n\n        uint8_t sc, m;\n        for (int j = 0; j < QK_K/32; ++j) {\n            get_scale_min_k4(j, y[i].scales, &sc, &m);\n            const float d = GGML_FP16_TO_FP32(y[i].d) * sc;\n            if (!d) continue;\n            const float dm = GGML_FP16_TO_FP32(y[i].dmin) * m;\n            for (int ii = 0; ii < 32; ++ii) {\n                int l = nearest_int((x[32*j + ii] + dm)/d);\n                l = MAX(0, MIN(15, l));\n                L[32*j + ii] = l;\n            }\n        }\n\n        uint8_t * q = y[i].qs;\n        for (int j = 0; j < QK_K; j += 64) {\n            for (int l = 0; l < 32; ++l) q[l] = L[j + l] | (L[j + l + 32] << 4);\n            q += 32;\n        }\n\n        x += QK_K;\n    }\n}\n\nvoid dequantize_row_q4_K(const block_q4_K * restrict x, float * restrict y, int64_t k) {\n    assert(k % QK_K == 0);\n    const int nb = k / QK_K;\n\n    for (int i = 0; i < nb; i++) {\n        const uint8_t * q = x[i].qs;\n\n        const float d   = GGML_FP16_TO_FP32(x[i].d);\n        const float min = GGML_FP16_TO_FP32(x[i].dmin);\n\n        int is = 0;\n        uint8_t sc, m;\n        for (int j = 0; j < QK_K; j += 64) {\n            get_scale_min_k4(is + 0, x[i].scales, &sc, &m);\n            const float d1 = d * sc; const float m1 = min * m;\n            get_scale_min_k4(is + 1, x[i].scales, &sc, &m);\n            const float d2 = d * sc; const float m2 = min * m;\n            for (int l = 0; l < 32; ++l) *y++ = d1 * (q[l] & 0xF) - m1;\n            for (int l = 0; l < 32; ++l) *y++ = d2 * (q[l]  >> 4) - m2;\n            q += 32; is += 2;\n        }\n    }\n}\n\nvoid quantize_row_q4_K(const float * restrict x, void * restrict vy, int64_t k) {\n    assert(k % QK_K == 0);\n    block_q4_K * restrict y = vy;\n    quantize_row_q4_K_ref(x, y, k);\n}\n\nstatic void quantize_row_q4_K_impl(const float * restrict x, block_q4_K * restrict y, int64_t n_per_row, const float * quant_weights) {\n    assert(n_per_row % QK_K == 0);\n    const int64_t nb = n_per_row / QK_K;\n\n    uint8_t L[QK_K];\n    uint8_t Laux[32];\n    uint8_t Ls[QK_K/32];\n    uint8_t Lm[QK_K/32];\n    float   weights[32];\n    float   sw[QK_K/32];\n    float   mins[QK_K/32];\n    float   scales[QK_K/32];\n\n    for (int i = 0; i < nb; i++) {\n\n        float sum_x2 = 0;\n        for (int l = 0; l < QK_K; ++l) sum_x2 += x[l] * x[l];\n        float sigma2 = 2*sum_x2/QK_K;\n        float av_x = sqrtf(sigma2);\n\n        for (int j = 0; j < QK_K/32; ++j) {\n            if (quant_weights) {\n                const float * qw = quant_weights + QK_K*i + 32*j;\n                for (int l = 0; l < 32; ++l) weights[l] = qw[l] * sqrtf(sigma2 + x[32*j + l]*x[32*j + l]);\n            } else {\n                for (int l = 0; l < 32; ++l) weights[l] = av_x + fabsf(x[32*j + l]);\n            }\n            float sumw = 0;\n            for (int l = 0; l < 32; ++l) sumw += weights[l];\n            sw[j] = sumw;\n            scales[j] = make_qkx3_quants(32, 15, x + 32*j, weights, L + 32*j, &mins[j], Laux, -0.9f, 0.05f, 36, false);\n        }\n\n        float d_block = make_qp_quants(QK_K/32, 63, scales, Ls, sw);\n        float m_block = make_qp_quants(QK_K/32, 63, mins,   Lm, sw);\n        for (int j = 0; j < QK_K/32; ++j) {\n            uint8_t ls = Ls[j];\n            uint8_t lm = Lm[j];\n            if (j < 4) {\n                y[i].scales[j] = ls;\n                y[i].scales[j+4] = lm;\n            } else {\n                y[i].scales[j+4] = (ls & 0xF) | ((lm & 0xF) << 4);\n                y[i].scales[j-4] |= ((ls >> 4) << 6);\n                y[i].scales[j-0] |= ((lm >> 4) << 6);\n            }\n        }\n        y[i].d = GGML_FP32_TO_FP16(d_block);\n        y[i].dmin = GGML_FP32_TO_FP16(m_block);\n\n        uint8_t sc, m;\n        for (int j = 0; j < QK_K/32; ++j) {\n            get_scale_min_k4(j, y[i].scales, &sc, &m);\n            const float d = GGML_FP16_TO_FP32(y[i].d) * sc;\n            if (!d) continue;\n            const float dm = GGML_FP16_TO_FP32(y[i].dmin) * m;\n            for (int ii = 0; ii < 32; ++ii) {\n                int l = nearest_int((x[32*j + ii] + dm)/d);\n                l = MAX(0, MIN(15, l));\n                L[32*j + ii] = l;\n            }\n        }\n        uint8_t * q = y[i].qs;\n        for (int j = 0; j < QK_K; j += 64) {\n            for (int l = 0; l < 32; ++l) q[l] = L[j + l] | (L[j + l + 32] << 4);\n            q += 32;\n        }\n\n        x += QK_K;\n\n    }\n}\n\nsize_t quantize_q4_K(const float * restrict src, void * restrict dst, int64_t nrow, int64_t n_per_row, const float * quant_weights) {\n    size_t row_size = ggml_row_size(GGML_TYPE_Q4_K, n_per_row);\n    if (!quant_weights) {\n        quantize_row_q4_K_ref(src, dst, (int64_t)nrow*n_per_row);\n    }\n    else {\n        char * qrow = (char *)dst;\n        for (int64_t row = 0; row < nrow; ++row) {\n            quantize_row_q4_K_impl(src, (block_q4_K*)qrow, n_per_row, quant_weights);\n            src += n_per_row;\n            qrow += row_size;\n        }\n    }\n    return nrow * row_size;\n}\n\n// ====================== 5-bit (de)-quantization\n\nvoid quantize_row_q5_K_ref(const float * restrict x, block_q5_K * restrict y, int64_t k) {\n    assert(k % QK_K == 0);\n    const int64_t nb = k / QK_K;\n\n    uint8_t L[QK_K];\n    float mins[QK_K/32];\n    float scales[QK_K/32];\n    float weights[32];\n    uint8_t Laux[32];\n\n    for (int i = 0; i < nb; i++) {\n        float max_scale = 0; // as we are deducting the min, scales are always positive\n        float max_min = 0;\n        for (int j = 0; j < QK_K/32; ++j) {\n            //scales[j] = make_qkx1_quants(32, 31, x + 32*j, L + 32*j, &mins[j], 9, 0.5f);\n            float sum_x2 = 0;\n            for (int l = 0; l < 32; ++l) sum_x2 += x[32*j + l] * x[32*j + l];\n            float av_x = sqrtf(sum_x2/32);\n            for (int l = 0; l < 32; ++l) weights[l] = av_x + fabsf(x[32*j + l]);\n            scales[j] = make_qkx2_quants(32, 31, x + 32*j, weights, L + 32*j, &mins[j], Laux, -0.5f, 0.1f, 15, false);\n            float scale = scales[j];\n            if (scale > max_scale) {\n                max_scale = scale;\n            }\n            float min = mins[j];\n            if (min > max_min) {\n                max_min = min;\n            }\n        }\n\n        float inv_scale = max_scale > 0 ? 63.f/max_scale : 0.f;\n        float inv_min   = max_min   > 0 ? 63.f/max_min   : 0.f;\n        for (int j = 0; j < QK_K/32; ++j) {\n            uint8_t ls = nearest_int(inv_scale*scales[j]);\n            uint8_t lm = nearest_int(inv_min*mins[j]);\n            ls = MIN(63, ls);\n            lm = MIN(63, lm);\n            if (j < 4) {\n                y[i].scales[j] = ls;\n                y[i].scales[j+4] = lm;\n            } else {\n                y[i].scales[j+4] = (ls & 0xF) | ((lm & 0xF) << 4);\n                y[i].scales[j-4] |= ((ls >> 4) << 6);\n                y[i].scales[j-0] |= ((lm >> 4) << 6);\n            }\n        }\n        y[i].d = GGML_FP32_TO_FP16(max_scale/63.f);\n        y[i].dmin = GGML_FP32_TO_FP16(max_min/63.f);\n\n        uint8_t sc, m;\n        for (int j = 0; j < QK_K/32; ++j) {\n            get_scale_min_k4(j, y[i].scales, &sc, &m);\n            const float d = GGML_FP16_TO_FP32(y[i].d) * sc;\n            if (!d) continue;\n            const float dm = GGML_FP16_TO_FP32(y[i].dmin) * m;\n            for (int ii = 0; ii < 32; ++ii) {\n                int l = nearest_int((x[32*j + ii] + dm)/d);\n                l = MAX(0, MIN(31, l));\n                L[32*j + ii] = l;\n            }\n        }\n\n        uint8_t * restrict qh = y[i].qh;\n        uint8_t * restrict ql = y[i].qs;\n        memset(qh, 0, QK_K/8);\n\n        uint8_t m1 = 1, m2 = 2;\n        for (int n = 0; n < QK_K; n += 64) {\n            for (int j = 0; j < 32; ++j) {\n                int l1 = L[n + j];\n                if (l1 > 15) {\n                    l1 -= 16; qh[j] |= m1;\n                }\n                int l2 = L[n + j + 32];\n                if (l2 > 15) {\n                    l2 -= 16; qh[j] |= m2;\n                }\n                ql[j] = l1 | (l2 << 4);\n            }\n            m1 <<= 2; m2 <<= 2;\n            ql += 32;\n        }\n\n        x += QK_K;\n    }\n}\n\nvoid dequantize_row_q5_K(const block_q5_K * restrict x, float * restrict y, int64_t k) {\n    assert(k % QK_K == 0);\n    const int64_t nb = k / QK_K;\n\n    for (int i = 0; i < nb; i++) {\n        const uint8_t * ql = x[i].qs;\n        const uint8_t * qh = x[i].qh;\n\n        const float d = GGML_FP16_TO_FP32(x[i].d);\n        const float min = GGML_FP16_TO_FP32(x[i].dmin);\n\n        int is = 0;\n        uint8_t sc, m;\n        uint8_t u1 = 1, u2 = 2;\n        for (int j = 0; j < QK_K; j += 64) {\n            get_scale_min_k4(is + 0, x[i].scales, &sc, &m);\n            const float d1 = d * sc; const float m1 = min * m;\n            get_scale_min_k4(is + 1, x[i].scales, &sc, &m);\n            const float d2 = d * sc; const float m2 = min * m;\n            for (int l = 0; l < 32; ++l) *y++ = d1 * ((ql[l] & 0xF) + (qh[l] & u1 ? 16 : 0)) - m1;\n            for (int l = 0; l < 32; ++l) *y++ = d2 * ((ql[l]  >> 4) + (qh[l] & u2 ? 16 : 0)) - m2;\n            ql += 32; is += 2;\n            u1 <<= 2; u2 <<= 2;\n        }\n    }\n}\n\nvoid quantize_row_q5_K(const float * restrict x, void * restrict vy, int64_t k) {\n    assert(k % QK_K == 0);\n    block_q5_K * restrict y = vy;\n    quantize_row_q5_K_ref(x, y, k);\n}\n\nstatic void quantize_row_q5_K_impl(const float * restrict x, block_q5_K * restrict y, int64_t n_per_row, const float * quant_weights) {\n    assert(n_per_row % QK_K == 0);\n    const int64_t nb = n_per_row / QK_K;\n\n    uint8_t L[QK_K];\n    uint8_t Laux[32];\n    uint8_t Ls[QK_K/32];\n    uint8_t Lm[QK_K/32];\n    float   mins[QK_K/32];\n    float   scales[QK_K/32];\n    float   sw[QK_K/32];\n    float   weights[32];\n\n    for (int i = 0; i < nb; i++) {\n\n        float sum_x2 = 0;\n        for (int l = 0; l < QK_K; ++l) sum_x2 += x[l] * x[l];\n        float sigma2 = 2*sum_x2/QK_K;\n        float av_x = sqrtf(sigma2);\n\n        for (int j = 0; j < QK_K/32; ++j) {\n            if (quant_weights) {\n                const float * qw = quant_weights + QK_K*i + 32*j;\n                for (int l = 0; l < 32; ++l) weights[l] = qw[l] * sqrtf(sigma2 + x[32*j + l]*x[32*j + l]);\n            } else {\n                for (int l = 0; l < 32; ++l) weights[l] = av_x + fabsf(x[32*j + l]);\n            }\n            float sumw = 0;\n            for (int l = 0; l < 32; ++l) sumw += weights[l];\n            sw[j] = sumw;\n\n            scales[j] = make_qkx3_quants(32, 31, x + 32*j, weights, L + 32*j, &mins[j], Laux, -0.9f, 0.05f, 36, false);\n        }\n\n        float d_block = make_qp_quants(QK_K/32, 63, scales, Ls, sw);\n        float m_block = make_qp_quants(QK_K/32, 63, mins,   Lm, sw);\n\n        for (int j = 0; j < QK_K/32; ++j) {\n            uint8_t ls = Ls[j];\n            uint8_t lm = Lm[j];\n            ls = MIN(63, ls);\n            lm = MIN(63, lm);\n            if (j < 4) {\n                y[i].scales[j] = ls;\n                y[i].scales[j+4] = lm;\n            } else {\n                y[i].scales[j+4] = (ls & 0xF) | ((lm & 0xF) << 4);\n                y[i].scales[j-4] |= ((ls >> 4) << 6);\n                y[i].scales[j-0] |= ((lm >> 4) << 6);\n            }\n        }\n        y[i].d = GGML_FP32_TO_FP16(d_block);\n        y[i].dmin = GGML_FP32_TO_FP16(m_block);\n\n        uint8_t sc, m;\n        for (int j = 0; j < QK_K/32; ++j) {\n            get_scale_min_k4(j, y[i].scales, &sc, &m);\n            const float d = GGML_FP16_TO_FP32(y[i].d) * sc;\n            if (!d) continue;\n            const float dm = GGML_FP16_TO_FP32(y[i].dmin) * m;\n            for (int ii = 0; ii < 32; ++ii) {\n                int l = nearest_int((x[32*j + ii] + dm)/d);\n                l = MAX(0, MIN(31, l));\n                L[32*j + ii] = l;\n            }\n        }\n\n        uint8_t * restrict qh = y[i].qh;\n        uint8_t * restrict ql = y[i].qs;\n        memset(qh, 0, QK_K/8);\n\n        uint8_t m1 = 1, m2 = 2;\n        for (int n = 0; n < QK_K; n += 64) {\n            for (int j = 0; j < 32; ++j) {\n                int l1 = L[n + j];\n                if (l1 > 15) {\n                    l1 -= 16; qh[j] |= m1;\n                }\n                int l2 = L[n + j + 32];\n                if (l2 > 15) {\n                    l2 -= 16; qh[j] |= m2;\n                }\n                ql[j] = l1 | (l2 << 4);\n            }\n            m1 <<= 2; m2 <<= 2;\n            ql += 32;\n        }\n\n        x += QK_K;\n\n    }\n}\n\nsize_t quantize_q5_K(const float * restrict src, void * restrict dst, int64_t nrow, int64_t n_per_row, const float * quant_weights) {\n    size_t row_size = ggml_row_size(GGML_TYPE_Q5_K, n_per_row);\n    if (!quant_weights) {\n        quantize_row_q5_K_ref(src, dst, (int64_t)nrow*n_per_row);\n    }\n    else {\n        char * qrow = (char *)dst;\n        for (int64_t row = 0; row < nrow; ++row) {\n            quantize_row_q5_K_impl(src, (block_q5_K*)qrow, n_per_row, quant_weights);\n            src += n_per_row;\n            qrow += row_size;\n        }\n    }\n    return nrow * row_size;\n}\n\n// ====================== 6-bit (de)-quantization\n\nvoid quantize_row_q6_K_ref(const float * restrict x, block_q6_K * restrict y, int64_t k) {\n    assert(k % QK_K == 0);\n    const int64_t nb = k / QK_K;\n\n    int8_t L[QK_K];\n    float   scales[QK_K/16];\n\n    for (int i = 0; i < nb; i++) {\n\n        float max_scale = 0;\n        float max_abs_scale = 0;\n\n        for (int ib = 0; ib < QK_K/16; ++ib) {\n\n            const float scale = make_qx_quants(16, 32, x + 16*ib, L + 16*ib, 1, NULL);\n            scales[ib] = scale;\n\n            const float abs_scale = fabsf(scale);\n            if (abs_scale > max_abs_scale) {\n                max_abs_scale = abs_scale;\n                max_scale = scale;\n            }\n\n        }\n\n        if (max_abs_scale < GROUP_MAX_EPS) {\n            memset(&y[i], 0, sizeof(block_q6_K));\n            y[i].d = GGML_FP32_TO_FP16(0.f);\n            x += QK_K;\n            continue;\n        }\n\n        float iscale = -128.f/max_scale;\n        y[i].d = GGML_FP32_TO_FP16(1/iscale);\n        for (int ib = 0; ib < QK_K/16; ++ib) {\n            y[i].scales[ib] = MIN(127, nearest_int(iscale*scales[ib]));\n        }\n\n        for (int j = 0; j < QK_K/16; ++j) {\n            float d = GGML_FP16_TO_FP32(y[i].d) * y[i].scales[j];\n            if (!d) {\n                continue;\n            }\n            for (int ii = 0; ii < 16; ++ii) {\n                int l = nearest_int(x[16*j + ii]/d);\n                l = MAX(-32, MIN(31, l));\n                L[16*j + ii] = l + 32;\n            }\n        }\n\n        uint8_t * restrict ql = y[i].ql;\n        uint8_t * restrict qh = y[i].qh;\n        for (int j = 0; j < QK_K; j += 128) {\n            for (int l = 0; l < 32; ++l) {\n                const uint8_t q1 = L[j + l +  0] & 0xF;\n                const uint8_t q2 = L[j + l + 32] & 0xF;\n                const uint8_t q3 = L[j + l + 64] & 0xF;\n                const uint8_t q4 = L[j + l + 96] & 0xF;\n                ql[l+ 0] = q1 | (q3 << 4);\n                ql[l+32] = q2 | (q4 << 4);\n                qh[l] = (L[j + l] >> 4) | ((L[j + l + 32] >> 4) << 2) | ((L[j + l + 64] >> 4) << 4) | ((L[j + l + 96] >> 4) << 6);\n            }\n            ql += 64;\n            qh += 32;\n        }\n\n        x += QK_K;\n    }\n}\n\nvoid dequantize_row_q6_K(const block_q6_K * restrict x, float * restrict y, int64_t k) {\n    assert(k % QK_K == 0);\n    const int64_t nb = k / QK_K;\n\n    for (int i = 0; i < nb; i++) {\n        const float d = GGML_FP16_TO_FP32(x[i].d);\n\n        const uint8_t * restrict ql = x[i].ql;\n        const uint8_t * restrict qh = x[i].qh;\n        const int8_t  * restrict sc = x[i].scales;\n\n        for (int n = 0; n < QK_K; n += 128) {\n            for (int l = 0; l < 32; ++l) {\n                int is = l/16;\n                const int8_t q1 = (int8_t)((ql[l +  0] & 0xF) | (((qh[l] >> 0) & 3) << 4)) - 32;\n                const int8_t q2 = (int8_t)((ql[l + 32] & 0xF) | (((qh[l] >> 2) & 3) << 4)) - 32;\n                const int8_t q3 = (int8_t)((ql[l +  0]  >> 4) | (((qh[l] >> 4) & 3) << 4)) - 32;\n                const int8_t q4 = (int8_t)((ql[l + 32]  >> 4) | (((qh[l] >> 6) & 3) << 4)) - 32;\n                y[l +  0] = d * sc[is + 0] * q1;\n                y[l + 32] = d * sc[is + 2] * q2;\n                y[l + 64] = d * sc[is + 4] * q3;\n                y[l + 96] = d * sc[is + 6] * q4;\n            }\n            y  += 128;\n            ql += 64;\n            qh += 32;\n            sc += 8;\n        }\n    }\n}\n\nvoid quantize_row_q6_K(const float * restrict x, void * restrict vy, int64_t k) {\n    assert(k % QK_K == 0);\n    block_q6_K * restrict y = vy;\n    quantize_row_q6_K_ref(x, y, k);\n}\n\nstatic void quantize_row_q6_K_impl(const float * restrict x, block_q6_K * restrict y, int64_t n_per_row, const float * quant_weights) {\n    assert(n_per_row % QK_K == 0);\n    const int64_t nb = n_per_row / QK_K;\n\n    int8_t L[QK_K];\n    float   scales[QK_K/16];\n    //float   weights[16];\n\n    for (int i = 0; i < nb; i++) {\n\n        //float sum_x2 = 0;\n        //for (int j = 0; j < QK_K; ++j) sum_x2 += x[j]*x[j];\n        //float sigma2 = sum_x2/QK_K;\n\n        float max_scale = 0;\n        float max_abs_scale = 0;\n\n        for (int ib = 0; ib < QK_K/16; ++ib) {\n\n            float scale;\n            if (quant_weights) {\n                const float * qw = quant_weights + QK_K*i + 16*ib;\n                //for (int j = 0; j < 16; ++j) weights[j] = qw[j] * sqrtf(sigma2 + x[16*ib + j]*x[16*ib + j]);\n                //scale = make_qx_quants(16, 32, x + 16*ib, L + 16*ib, 1, weights);\n                scale = make_qx_quants(16, 32, x + 16*ib, L + 16*ib, 1, qw);\n            } else {\n                scale = make_qx_quants(16, 32, x + 16*ib, L + 16*ib, 1, NULL);\n            }\n            scales[ib] = scale;\n\n            const float abs_scale = fabsf(scale);\n            if (abs_scale > max_abs_scale) {\n                max_abs_scale = abs_scale;\n                max_scale = scale;\n            }\n\n        }\n\n        if (max_abs_scale < GROUP_MAX_EPS) {\n            memset(&y[i], 0, sizeof(block_q6_K));\n            y[i].d = GGML_FP32_TO_FP16(0.f);\n            x += QK_K;\n            continue;\n        }\n\n        float iscale = -128.f/max_scale;\n        y[i].d = GGML_FP32_TO_FP16(1/iscale);\n        for (int ib = 0; ib < QK_K/16; ++ib) {\n            y[i].scales[ib] = MIN(127, nearest_int(iscale*scales[ib]));\n        }\n\n        for (int j = 0; j < QK_K/16; ++j) {\n            float d = GGML_FP16_TO_FP32(y[i].d) * y[i].scales[j];\n            if (!d) {\n                continue;\n            }\n            for (int ii = 0; ii < 16; ++ii) {\n                int l = nearest_int(x[16*j + ii]/d);\n                l = MAX(-32, MIN(31, l));\n                L[16*j + ii] = l + 32;\n            }\n        }\n\n        uint8_t * restrict ql = y[i].ql;\n        uint8_t * restrict qh = y[i].qh;\n        for (int j = 0; j < QK_K; j += 128) {\n            for (int l = 0; l < 32; ++l) {\n                const uint8_t q1 = L[j + l +  0] & 0xF;\n                const uint8_t q2 = L[j + l + 32] & 0xF;\n                const uint8_t q3 = L[j + l + 64] & 0xF;\n                const uint8_t q4 = L[j + l + 96] & 0xF;\n                ql[l+ 0] = q1 | (q3 << 4);\n                ql[l+32] = q2 | (q4 << 4);\n                qh[l] = (L[j + l] >> 4) | ((L[j + l + 32] >> 4) << 2) | ((L[j + l + 64] >> 4) << 4) | ((L[j + l + 96] >> 4) << 6);\n            }\n            ql += 64;\n            qh += 32;\n        }\n\n        x += QK_K;\n\n    }\n}\n\nsize_t quantize_q6_K(const float * restrict src, void * restrict dst, int64_t nrow, int64_t n_per_row, const float * quant_weights) {\n    size_t row_size = ggml_row_size(GGML_TYPE_Q6_K, n_per_row);\n    if (!quant_weights) {\n        quantize_row_q6_K_ref(src, dst, (int64_t)nrow*n_per_row);\n    }\n    else {\n        char * qrow = (char *)dst;\n        for (int64_t row = 0; row < nrow; ++row) {\n            quantize_row_q6_K_impl(src, (block_q6_K*)qrow, n_per_row, quant_weights);\n            src += n_per_row;\n            qrow += row_size;\n        }\n    }\n    return nrow * row_size;\n}\n\nstatic void quantize_row_q4_0_impl(const float * restrict x, block_q4_0 * restrict y, int64_t n_per_row, const float * quant_weights) {\n    static_assert(QK4_0 == 32, \"QK4_0 must be 32\");\n\n    if (!quant_weights) {\n        quantize_row_q4_0_ref(x, y, n_per_row);\n        return;\n    }\n\n    float weight[QK4_0];\n    int8_t L[QK4_0];\n\n    float sum_x2 = 0;\n    for (int j = 0; j < n_per_row; ++j) sum_x2 += x[j]*x[j];\n    float sigma2 = sum_x2/n_per_row;\n\n    const int64_t nb = n_per_row/QK4_0;\n    for (int ib = 0; ib < nb; ++ib) {\n        const float * xb = x + QK4_0 * ib;\n        const float * qw = quant_weights + QK4_0 * ib;\n        for (int j = 0; j < QK4_0; ++j) weight[j] = qw[j] * sqrtf(sigma2 + xb[j]*xb[j]);\n        float d = make_qx_quants(QK4_0, 8, xb, L, 1, weight);\n        y[ib].d = GGML_FP32_TO_FP16(d);\n        for (int j = 0; j < 16; ++j) {\n            y[ib].qs[j] = L[j] | (L[j+16] << 4);\n        }\n    }\n}\n\nsize_t quantize_q4_0(const float * restrict src, void * restrict dst, int64_t nrow, int64_t n_per_row, const float * quant_weights) {\n    if (!quant_weights) {\n        quantize_row_q4_0_ref(src, dst, (int64_t)nrow*n_per_row);\n        return nrow * ggml_row_size(GGML_TYPE_Q4_0, n_per_row);\n    }\n    size_t row_size = ggml_row_size(GGML_TYPE_Q4_0, n_per_row);\n    char * qrow = (char *)dst;\n    for (int64_t row = 0; row < nrow; ++row) {\n        quantize_row_q4_0_impl(src, (block_q4_0*)qrow, n_per_row, quant_weights);\n        src += n_per_row;\n        qrow += row_size;\n    }\n    return nrow * row_size;\n}\n\nstatic void quantize_row_q4_1_impl(const float * restrict x, block_q4_1 * restrict y, int64_t n_per_row, const float * quant_weights) {\n    static_assert(QK4_1 == 32, \"QK4_1 must be 32\");\n\n    if (!quant_weights) {\n        quantize_row_q4_1_ref(x, y, n_per_row);\n        return;\n    }\n\n    float weight[QK4_1];\n    uint8_t L[QK4_1], Laux[QK4_1];\n\n    float sum_x2 = 0;\n    for (int j = 0; j < n_per_row; ++j) sum_x2 += x[j]*x[j];\n    float sigma2 = sum_x2/n_per_row;\n\n    const int64_t nb = n_per_row/QK4_1;\n    for (int ib = 0; ib < nb; ++ib) {\n        const float * xb = x + QK4_1 * ib;\n        const float * qw = quant_weights + QK4_1 * ib;\n        for (int j = 0; j < QK4_1; ++j) weight[j] = qw[j] * sqrtf(sigma2 + xb[j]*xb[j]);\n        float min;\n        float d = make_qkx3_quants(QK4_1, 15, xb, weight, L, &min, Laux, -0.9f, 0.05f, 36, false);\n        y[ib].d = GGML_FP32_TO_FP16(d);\n        y[ib].m = GGML_FP32_TO_FP16(-min);\n        for (int j = 0; j < 16; ++j) {\n            y[ib].qs[j] = L[j] | (L[j+16] << 4);\n        }\n    }\n}\n\nsize_t quantize_q4_1(const float * restrict src, void * restrict dst, int64_t nrow, int64_t n_per_row, const float * quant_weights) {\n    if (!quant_weights) {\n        quantize_row_q4_1_ref(src, dst, (int64_t)nrow*n_per_row);\n        return nrow * ggml_row_size(GGML_TYPE_Q4_1, n_per_row);\n    }\n    size_t row_size = ggml_row_size(GGML_TYPE_Q4_1, n_per_row);\n    char * qrow = (char *)dst;\n    for (int64_t row = 0; row < nrow; ++row) {\n        quantize_row_q4_1_impl(src, (block_q4_1*)qrow, n_per_row, quant_weights);\n        src += n_per_row;\n        qrow += row_size;\n    }\n    return nrow * row_size;\n}\n\nstatic void quantize_row_q5_0_impl(const float * restrict x, block_q5_0 * restrict y, int64_t n_per_row, const float * quant_weights) {\n    static_assert(QK5_0 == 32, \"QK5_0 must be 32\");\n\n    if (!quant_weights) {\n        quantize_row_q5_0_ref(x, y, n_per_row);\n        return;\n    }\n\n    float weight[QK5_0];\n    int8_t L[QK5_0];\n\n    float sum_x2 = 0;\n    for (int j = 0; j < n_per_row; ++j) sum_x2 += x[j]*x[j];\n    float sigma2 = sum_x2/n_per_row;\n\n    const int64_t nb = n_per_row/QK5_0;\n    for (int ib = 0; ib < nb; ++ib) {\n        const float * xb = x + QK5_0 * ib;\n        const float * qw = quant_weights + QK5_0 * ib;\n        for (int j = 0; j < QK5_0; ++j) weight[j] = qw[j] * sqrtf(sigma2 + xb[j]*xb[j]);\n        float d = make_qx_quants(QK5_0, 16, xb, L, 1, weight);\n        y[ib].d = GGML_FP32_TO_FP16(d);\n\n        uint32_t qh = 0;\n\n        for (int j = 0; j < 16; ++j) {\n            const uint8_t xi0 = L[j];\n            const uint8_t xi1 = L[j+16];\n            y[ib].qs[j] = (xi0 & 0x0F) | ((xi1 & 0x0F) << 4);\n\n            // get the 5-th bit and store it in qh at the right position\n            qh |= ((xi0 & 0x10u) >> 4) << (j + 0);\n            qh |= ((xi1 & 0x10u) >> 4) << (j + QK5_0/2);\n        }\n\n        memcpy(&y[ib].qh, &qh, sizeof(qh));\n    }\n}\n\nsize_t quantize_q5_0(const float * restrict src, void * restrict dst, int64_t nrow, int64_t n_per_row, const float * quant_weights) {\n    if (!quant_weights) {\n        quantize_row_q5_0_ref(src, dst, (int64_t)nrow*n_per_row);\n        return nrow * ggml_row_size(GGML_TYPE_Q5_0, n_per_row);\n    }\n    size_t row_size = ggml_row_size(GGML_TYPE_Q5_0, n_per_row);\n    char * qrow = (char *)dst;\n    for (int64_t row = 0; row < nrow; ++row) {\n        quantize_row_q5_0_impl(src, (block_q5_0*)qrow, n_per_row, quant_weights);\n        src += n_per_row;\n        qrow += row_size;\n    }\n    return nrow * row_size;\n}\n\nstatic void quantize_row_q5_1_impl(const float * restrict x, block_q5_1 * restrict y, int64_t n_per_row, const float * quant_weights) {\n    static_assert(QK5_1 == 32, \"QK5_1 must be 32\");\n\n    if (!quant_weights) {\n        quantize_row_q5_1_ref(x, y, n_per_row);\n        return;\n    }\n\n    float weight[QK5_1];\n    uint8_t L[QK5_1], Laux[QK5_1];\n\n    float sum_x2 = 0;\n    for (int j = 0; j < n_per_row; ++j) sum_x2 += x[j]*x[j];\n    float sigma2 = sum_x2/n_per_row;\n\n    const int64_t nb = n_per_row/QK5_1;\n    for (int ib = 0; ib < nb; ++ib) {\n        const float * xb = x + QK5_1 * ib;\n        const float * qw = quant_weights + QK5_1 * ib;\n        for (int j = 0; j < QK5_1; ++j) weight[j] = qw[j] * sqrtf(sigma2 + xb[j]*xb[j]);\n        float min;\n        float d = make_qkx3_quants(QK5_1, 31, xb, weight, L, &min, Laux, -0.9f, 0.05f, 36, false);\n        y[ib].d = GGML_FP32_TO_FP16(d);\n        y[ib].m = GGML_FP32_TO_FP16(-min);\n\n        uint32_t qh = 0;\n        for (int j = 0; j < 16; ++j) {\n            const uint8_t xi0 = L[j];\n            const uint8_t xi1 = L[j+16];\n            y[ib].qs[j] = (xi0 & 0x0F) | ((xi1 & 0x0F) << 4);\n            // get the 5-th bit and store it in qh at the right position\n            qh |= ((xi0 & 0x10u) >> 4) << (j + 0);\n            qh |= ((xi1 & 0x10u) >> 4) << (j + QK5_0/2);\n        }\n        memcpy(&y[ib].qh, &qh, sizeof(qh));\n    }\n}\n\nsize_t quantize_q5_1(const float * restrict src, void * restrict dst, int64_t nrow, int64_t n_per_row, const float * quant_weights) {\n    if (!quant_weights) {\n        quantize_row_q5_1_ref(src, dst, (int64_t)nrow*n_per_row);\n        return nrow * ggml_row_size(GGML_TYPE_Q5_1, n_per_row);\n    }\n    size_t row_size = ggml_row_size(GGML_TYPE_Q5_1, n_per_row);\n    char * qrow = (char *)dst;\n    for (int64_t row = 0; row < nrow; ++row) {\n        quantize_row_q5_1_impl(src, (block_q5_1*)qrow, n_per_row, quant_weights);\n        src += n_per_row;\n        qrow += row_size;\n    }\n    return nrow * row_size;\n}\n\nsize_t quantize_q8_0(const float * restrict src, void * restrict dst, int64_t nrow, int64_t n_per_row, const float * quant_weights) {\n    (void)quant_weights; // not used\n    const size_t row_size = ggml_row_size(GGML_TYPE_Q8_0, n_per_row);\n    quantize_row_q8_0_ref(src, dst, (int64_t)nrow*n_per_row);\n    return nrow * row_size;\n}\n\n// ====================== Ternary (de)-quantization (BitNet b1.58 and TriLMs)\n\nvoid quantize_row_tq1_0_ref(const float * restrict x, block_tq1_0 * restrict y, int64_t k) {\n    assert(k % QK_K == 0);\n    const int64_t nb = k / QK_K;\n\n    for (int64_t i = 0; i < nb; i++) {\n        float amax = 0.0f; // absolute max\n\n        for (int j = 0; j < QK_K; j++) {\n            const float v = x[j];\n            amax = MAX(amax, fabsf(v));\n        }\n\n        const float d = amax;\n        const float id = d ? 1.0f/d : 0.0f;\n\n        y[i].d = GGML_FP32_TO_FP16(d);\n\n        // 5 elements per byte, along 32 bytes\n        for (size_t j = 0; j < sizeof(y->qs) - sizeof(y->qs) % 32; j += 32) {\n            for (size_t m = 0; m < 32; ++m) {\n                uint8_t q = 0;\n                for (size_t n = 0; n < 5; ++n) {\n                    int xi = lroundf(x[m + n*32] * id) + 1; // -1, 0, 1 -> 0, 1, 2\n                    q *= 3;\n                    q += xi;\n                }\n                // ceiling division (243 == pow(3, 5))\n                q = ((uint16_t)q * 256 + (243 - 1)) / 243;\n                y[i].qs[j + m] = q;\n            }\n            x += 5*32;\n        }\n        // along 16 bytes\n        for (size_t j = sizeof(y->qs) - sizeof(y->qs) % 32; j < sizeof(y->qs); j += 16) {\n            for (size_t m = 0; m < 16; ++m) {\n                uint8_t q = 0;\n                for (size_t n = 0; n < 5; ++n) {\n                    int xi = lroundf(x[m + n*16] * id) + 1; // -1, 0, 1 -> 0, 1, 2\n                    q *= 3;\n                    q += xi;\n                }\n                // ceiling division (243 == pow(3, 5))\n                q = ((uint16_t)q * 256 + (243 - 1)) / 243;\n                y[i].qs[j + m] = q;\n            }\n            x += 5*16;\n        }\n        // 4 elements per byte\n        for (size_t j = 0; j < sizeof(y->qh); ++j) {\n            uint8_t q = 0;\n            for (size_t m = 0; m < 4; ++m) {\n                // -1, 0, 1 -> 0, 1, 2\n                int xi = lroundf(x[j + m*sizeof(y->qh)] * id) + 1;\n                q *= 3;\n                q += xi;\n            }\n            // shift the first value to the most significant trit\n            q *= 3;\n            // ceiling division (243 == pow(3, 5))\n            q = ((uint16_t)q * 256 + (243 - 1)) / 243;\n            y[i].qh[j] = q;\n        }\n        x += 4*sizeof(y->qh);\n    }\n}\n\nvoid quantize_row_tq2_0_ref(const float * restrict x, block_tq2_0 * restrict y, int64_t k) {\n    assert(k % QK_K == 0);\n    const int64_t nb = k / QK_K;\n\n    for (int64_t i = 0; i < nb; i++) {\n        float amax = 0.0f; // absolute max\n\n        for (int j = 0; j < QK_K; j++) {\n            const float v = x[j];\n            amax = MAX(amax, fabsf(v));\n        }\n\n        const float d = amax;\n        const float id = d ? 1.0f/d : 0.0f;\n\n        y[i].d = GGML_FP32_TO_FP16(d);\n\n        for (size_t j = 0; j < sizeof(y->qs); j += 32) {\n            for (size_t m = 0; m < 32; ++m) {\n                uint8_t q = 0;\n                for (size_t n = 0; n < 4; ++n) {\n                    // -1, 0, 1 -> 0, 1, 2\n                    int xi = lroundf(x[m + n*32] * id) + 1;\n                    q += (xi & 3) << (2*n);\n                }\n                y[i].qs[j + m] = q;\n            }\n            x += 4*32;\n        }\n    }\n}\n\nvoid quantize_row_tq1_0(const float * restrict x, void * restrict vy, int64_t k) {\n    assert(k % QK_K == 0);\n    block_tq1_0 * restrict y = vy;\n    quantize_row_tq1_0_ref(x, y, k);\n}\n\nvoid quantize_row_tq2_0(const float * restrict x, void * restrict vy, int64_t k) {\n    assert(k % QK_K == 0);\n    block_tq2_0 * restrict y = vy;\n    quantize_row_tq2_0_ref(x, y, k);\n}\n\nsize_t quantize_tq1_0(const float * restrict src, void * restrict dst, int64_t nrow, int64_t n_per_row, const float * quant_weights) {\n    (void)quant_weights; // not used\n    const size_t row_size = ggml_row_size(GGML_TYPE_TQ1_0, n_per_row);\n    quantize_row_tq1_0(src, dst, (int64_t)nrow*n_per_row);\n    return nrow * row_size;\n}\n\nsize_t quantize_tq2_0(const float * restrict src, void * restrict dst, int64_t nrow, int64_t n_per_row, const float * quant_weights) {\n    (void)quant_weights; // not used\n    const size_t row_size = ggml_row_size(GGML_TYPE_TQ2_0, n_per_row);\n    quantize_row_tq2_0(src, dst, (int64_t)nrow*n_per_row);\n    return nrow * row_size;\n}\n\n\nvoid dequantize_row_tq1_0(const block_tq1_0 * restrict x, float * restrict y, int64_t k) {\n    assert(k % QK_K == 0);\n    const int64_t nb = k / QK_K;\n\n    const uint8_t pow3[6] = {1, 3, 9, 27, 81, 243};\n\n    for (int64_t i = 0; i < nb; ++i) {\n\n        const float d = GGML_FP16_TO_FP32(x[i].d);\n\n        for (size_t j = 0; j < sizeof(x->qs) - sizeof(x->qs) % 32; j += 32) {\n            for (size_t n = 0; n < 5; ++n) {\n                for (size_t m = 0; m < 32; ++m) {\n                    uint8_t q = x[i].qs[j + m] * pow3[n];\n                    int16_t xi = ((uint16_t) q * 3) >> 8;\n                    *y++ = (float) (xi - 1) * d;\n                }\n            }\n        }\n        for (size_t j = sizeof(x->qs) - sizeof(x->qs) % 32; j < sizeof(x->qs); j += 16) {\n            for (size_t n = 0; n < 5; ++n) {\n                for (size_t m = 0; m < 16; ++m) {\n                    uint8_t q = x[i].qs[j + m] * pow3[n];\n                    int16_t xi = ((uint16_t) q * 3) >> 8;\n                    *y++ = (float) (xi - 1) * d;\n                }\n            }\n        }\n\n        for (size_t n = 0; n < 4; ++n) {\n            for (size_t j = 0; j < sizeof(x->qh); ++j) {\n                uint8_t q = x[i].qh[j] * pow3[n];\n                int16_t xi = ((uint16_t) q * 3) >> 8;\n                *y++ = (float) (xi - 1) * d;\n            }\n        }\n    }\n}\n\nvoid dequantize_row_tq2_0(const block_tq2_0 * restrict x, float * restrict y, int64_t k) {\n    assert(k % QK_K == 0);\n    const int64_t nb = k / QK_K;\n\n    for (int64_t i = 0; i < nb; ++i) {\n\n        const float d = GGML_FP16_TO_FP32(x[i].d);\n\n        for (size_t j = 0; j < sizeof(x->qs); j += 32) {\n            for (size_t l = 0; l < 4; ++l) {\n                for (size_t m = 0; m < 32; ++m) {\n                    int8_t q = (x[i].qs[j + m] >> (l*2)) & 3;\n                    *y++ = (float) (q - 1) * d;\n                }\n            }\n        }\n    }\n}\n\n// ====================== \"True\" 2-bit (de)-quantization\n\nvoid dequantize_row_iq2_xxs(const block_iq2_xxs * restrict x, float * restrict y, int64_t k) {\n    assert(k % QK_K == 0);\n    const int64_t nb = k / QK_K;\n\n    uint32_t aux32[2];\n    const uint8_t * aux8 = (const uint8_t *)aux32;\n\n    for (int i = 0; i < nb; i++) {\n\n        const float d = GGML_FP16_TO_FP32(x[i].d);\n\n        for (int ib32 = 0; ib32 < QK_K/32; ++ib32) {\n            memcpy(aux32, x[i].qs + 4*ib32, 2*sizeof(uint32_t));\n            const float db = d * (0.5f + (aux32[1] >> 28)) * 0.25f;\n            for (int l = 0; l < 4; ++l) {\n                const uint8_t * grid = (const uint8_t *)(iq2xxs_grid + aux8[l]);\n                const uint8_t  signs = ksigns_iq2xs[(aux32[1] >> 7*l) & 127];\n                for (int j = 0; j < 8; ++j) {\n                    y[j] = db * grid[j] * (signs & kmask_iq2xs[j] ? -1.f : 1.f);\n                }\n                y += 8;\n            }\n        }\n    }\n}\n\n// ====================== 2.3125 bpw (de)-quantization\n\nvoid dequantize_row_iq2_xs(const block_iq2_xs * restrict x, float * restrict y, int64_t k) {\n    assert(k % QK_K == 0);\n    const int64_t nb = k / QK_K;\n\n    float db[2];\n\n    for (int i = 0; i < nb; i++) {\n\n        const float d = GGML_FP16_TO_FP32(x[i].d);\n\n        for (int ib32 = 0; ib32 < QK_K/32; ++ib32) {\n            db[0] = d * (0.5f + (x[i].scales[ib32] & 0xf)) * 0.25f;\n            db[1] = d * (0.5f + (x[i].scales[ib32] >>  4)) * 0.25f;\n            for (int l = 0; l < 4; ++l) {\n                const uint8_t * grid = (const uint8_t *)(iq2xs_grid + (x[i].qs[4*ib32 + l] & 511));\n                const uint8_t  signs = ksigns_iq2xs[x[i].qs[4*ib32 + l] >> 9];\n                for (int j = 0; j < 8; ++j) {\n                    y[j] = db[l/2] * grid[j] * (signs & kmask_iq2xs[j] ? -1.f : 1.f);\n                }\n                y += 8;\n            }\n        }\n    }\n}\n\n// ====================== 2.5625 bpw (de)-quantization\n\nvoid dequantize_row_iq2_s(const block_iq2_s * restrict x, float * restrict y, int64_t k) {\n    assert(k % QK_K == 0);\n    const int64_t nb = k / QK_K;\n\n    float db[2];\n\n    for (int i = 0; i < nb; i++) {\n\n        const float d = GGML_FP16_TO_FP32(x[i].d);\n        const uint8_t * qs = x[i].qs;\n        const uint8_t * qh = x[i].qh;\n        const uint8_t * signs = qs + QK_K/8;\n\n        for (int ib32 = 0; ib32 < QK_K/32; ++ib32) {\n            db[0] = d * (0.5f + (x[i].scales[ib32] & 0xf)) * 0.25f;\n            db[1] = d * (0.5f + (x[i].scales[ib32] >>  4)) * 0.25f;\n            for (int l = 0; l < 4; ++l) {\n                const float dl = db[l/2];\n                const uint8_t * grid = (const uint8_t *)(iq2s_grid + (qs[l] | (qh[ib32] << (8-2*l) & 0x300)));\n                for (int j = 0; j < 8; ++j) {\n                    y[j] = dl * grid[j] * (signs[l] & kmask_iq2xs[j] ? -1.f : 1.f);\n                }\n                y += 8;\n            }\n            qs += 4;\n            signs += 4;\n        }\n    }\n}\n\n// ====================== 3.0625 bpw (de)-quantization\n\nvoid dequantize_row_iq3_xxs(const block_iq3_xxs * restrict x, float * restrict y, int64_t k) {\n    assert(k % QK_K == 0);\n    const int64_t nb = k / QK_K;\n\n    uint32_t aux32;\n\n    for (int i = 0; i < nb; i++) {\n\n        const float d = GGML_FP16_TO_FP32(x[i].d);\n        const uint8_t * qs = x[i].qs;\n        const uint8_t * scales_and_signs = qs + QK_K/4;\n\n        for (int ib32 = 0; ib32 < QK_K/32; ++ib32) {\n            memcpy(&aux32, scales_and_signs + 4*ib32, sizeof(uint32_t));\n            const float db = d * (0.5f + (aux32 >> 28)) * 0.5f;\n            for (int l = 0; l < 4; ++l) {\n                const uint8_t  signs = ksigns_iq2xs[(aux32 >> 7*l) & 127];\n                const uint8_t * grid1 = (const uint8_t *)(iq3xxs_grid + qs[2*l+0]);\n                const uint8_t * grid2 = (const uint8_t *)(iq3xxs_grid + qs[2*l+1]);\n                for (int j = 0; j < 4; ++j) {\n                    y[j+0] = db * grid1[j] * (signs & kmask_iq2xs[j+0] ? -1.f : 1.f);\n                    y[j+4] = db * grid2[j] * (signs & kmask_iq2xs[j+4] ? -1.f : 1.f);\n                }\n                y += 8;\n            }\n            qs += 8;\n        }\n    }\n}\n\n// ====================== 3.3125 bpw (de)-quantization\n\nvoid dequantize_row_iq3_s(const block_iq3_s * restrict x, float * restrict y, int64_t k) {\n    assert(k % QK_K == 0);\n    const int64_t nb = k / QK_K;\n\n    for (int i = 0; i < nb; i++) {\n\n        const float d = GGML_FP16_TO_FP32(x[i].d);\n        const uint8_t * qs = x[i].qs;\n        const uint8_t * qh = x[i].qh;\n        const uint8_t * signs = x[i].signs;\n\n        for (int ib32 = 0; ib32 < QK_K/32; ib32 += 2) {\n            const float db1 = d * (1 + 2*(x[i].scales[ib32/2] & 0xf));\n            const float db2 = d * (1 + 2*(x[i].scales[ib32/2] >>  4));\n            for (int l = 0; l < 4; ++l) {\n                const uint8_t * grid1 = (const uint8_t *)(iq3s_grid + (qs[2*l+0] | ((qh[0] << (8-2*l)) & 256)));\n                const uint8_t * grid2 = (const uint8_t *)(iq3s_grid + (qs[2*l+1] | ((qh[0] << (7-2*l)) & 256)));\n                for (int j = 0; j < 4; ++j) {\n                    y[j+0] = db1 * grid1[j] * (signs[l] & kmask_iq2xs[j+0] ? -1.f : 1.f);\n                    y[j+4] = db1 * grid2[j] * (signs[l] & kmask_iq2xs[j+4] ? -1.f : 1.f);\n                }\n                y += 8;\n            }\n            qs += 8;\n            signs += 4;\n            for (int l = 0; l < 4; ++l) {\n                const uint8_t * grid1 = (const uint8_t *)(iq3s_grid + (qs[2*l+0] | ((qh[1] << (8-2*l)) & 256)));\n                const uint8_t * grid2 = (const uint8_t *)(iq3s_grid + (qs[2*l+1] | ((qh[1] << (7-2*l)) & 256)));\n                for (int j = 0; j < 4; ++j) {\n                    y[j+0] = db2 * grid1[j] * (signs[l] & kmask_iq2xs[j+0] ? -1.f : 1.f);\n                    y[j+4] = db2 * grid2[j] * (signs[l] & kmask_iq2xs[j+4] ? -1.f : 1.f);\n                }\n                y += 8;\n            }\n            qh += 2;\n            qs += 8;\n            signs += 4;\n        }\n    }\n}\n\n// ====================== 1.5625 bpw (de)-quantization\n\nvoid dequantize_row_iq1_s(const block_iq1_s * restrict x, float * restrict y, int64_t k) {\n    assert(k % QK_K == 0);\n    const int64_t nb = k / QK_K;\n\n    for (int i = 0; i < nb; i++) {\n\n        const float d = GGML_FP16_TO_FP32(x[i].d);\n        const uint8_t  * qs = x[i].qs;\n        const uint16_t * qh = x[i].qh;\n\n        for (int ib = 0; ib < QK_K/32; ++ib) {\n            const float dl = d * (2*((qh[ib] >> 12) & 7) + 1);\n            const float delta = qh[ib] & 0x8000 ? -IQ1S_DELTA : IQ1S_DELTA;\n            for (int l = 0; l < 4; ++l) {\n                const int8_t * grid = (const int8_t *)(iq1s_grid + (qs[l] | (((qh[ib] >> 3*l) & 7) << 8)));\n                for (int j = 0; j < 8; ++j) {\n                    y[j] = dl * (grid[j] + delta);\n                }\n                y += 8;\n            }\n            qs += 4;\n        }\n    }\n}\n\nvoid dequantize_row_iq1_m(const block_iq1_m * restrict x, float * restrict y, int64_t k) {\n    assert(k % QK_K == 0);\n    const int64_t nb = k / QK_K;\n\n    float delta[4];\n    uint16_t idx[4];\n\n    iq1m_scale_t scale;\n\n    for (int i = 0; i < nb; i++) {\n\n        const uint16_t * sc = (const uint16_t *)x[i].scales;\n        scale.u16 = (sc[0] >> 12) | ((sc[1] >> 8) & 0x00f0) | ((sc[2] >> 4) & 0x0f00) | (sc[3] & 0xf000);\n        const float d = GGML_FP16_TO_FP32(scale.f16);\n\n        const uint8_t * qs = x[i].qs;\n        const uint8_t * qh = x[i].qh;\n\n        for (int ib = 0; ib < QK_K/32; ++ib) {\n            const float dl1 = d * (2*((sc[ib/2] >> (6*(ib%2)+0)) & 0x7) + 1);\n            const float dl2 = d * (2*((sc[ib/2] >> (6*(ib%2)+3)) & 0x7) + 1);\n\n            idx[0] = qs[0] | ((qh[0] << 8) & 0x700);\n            idx[1] = qs[1] | ((qh[0] << 4) & 0x700);\n            idx[2] = qs[2] | ((qh[1] << 8) & 0x700);\n            idx[3] = qs[3] | ((qh[1] << 4) & 0x700);\n            delta[0] = qh[0] & 0x08 ? -IQ1S_DELTA : IQ1S_DELTA;\n            delta[1] = qh[0] & 0x80 ? -IQ1S_DELTA : IQ1S_DELTA;\n            delta[2] = qh[1] & 0x08 ? -IQ1S_DELTA : IQ1S_DELTA;\n            delta[3] = qh[1] & 0x80 ? -IQ1S_DELTA : IQ1S_DELTA;\n            for (int l = 0; l < 2; ++l) {\n                const int8_t * grid = (const int8_t *)(iq1s_grid + idx[l]);\n                for (int j = 0; j < 8; ++j) {\n                    y[j] = dl1 * (grid[j] + delta[l]);\n                }\n                y += 8;\n            }\n            for (int l = 2; l < 4; ++l) {\n                const int8_t * grid = (const int8_t *)(iq1s_grid + idx[l]);\n                for (int j = 0; j < 8; ++j) {\n                    y[j] = dl2 * (grid[j] + delta[l]);\n                }\n                y += 8;\n            }\n            qs += 4;\n            qh += 2;\n        }\n    }\n}\n\nstatic const int8_t kvalues_iq4nl[16] = {-127, -104, -83, -65, -49, -35, -22, -10, 1, 13, 25, 38, 53, 69, 89, 113};\n\nvoid dequantize_row_iq4_nl(const block_iq4_nl * restrict x, float * restrict y, int64_t k) {\n    assert(k % QK4_NL == 0);\n    const int64_t nb = k / QK4_NL;\n\n    for (int i = 0; i < nb; i++) {\n\n        const uint8_t * qs = x[i].qs;\n\n        const float d = GGML_FP16_TO_FP32(x[i].d);\n        for (int j = 0; j < QK4_NL/2; ++j) {\n            y[j+       0] = d * kvalues_iq4nl[qs[j] & 0xf];\n            y[j+QK4_NL/2] = d * kvalues_iq4nl[qs[j] >>  4];\n        }\n        y  += QK4_NL;\n        qs += QK4_NL/2;\n    }\n}\n\nvoid dequantize_row_iq4_xs(const block_iq4_xs * restrict x, float * restrict y, int64_t k) {\n    assert(k % QK_K == 0);\n    const int64_t nb = k / QK_K;\n\n    for (int i = 0; i < nb; i++) {\n\n        const uint8_t * qs = x[i].qs;\n\n        const float d = GGML_FP16_TO_FP32(x[i].d);\n\n        for (int ib = 0; ib < QK_K/32; ++ib) {\n            const int ls = ((x[i].scales_l[ib/2] >> 4*(ib%2)) & 0xf) | (((x[i].scales_h >> 2*ib) & 3) << 4);\n            const float dl = d * (ls - 32);\n            for (int j = 0; j < 16; ++j) {\n                y[j+ 0] = dl * kvalues_iq4nl[qs[j] & 0xf];\n                y[j+16] = dl * kvalues_iq4nl[qs[j] >>  4];\n            }\n            y  += 32;\n            qs += 16;\n        }\n    }\n}\n\n//===================================== Q8_K ==============================================\n\nvoid quantize_row_q8_K_ref(const float * restrict x, block_q8_K * restrict y, int64_t k) {\n    assert(k % QK_K == 0);\n    const int64_t nb = k / QK_K;\n\n    for (int i = 0; i < nb; i++) {\n\n        float max = 0;\n        float amax = 0;\n        for (int j = 0; j < QK_K; ++j) {\n            float ax = fabsf(x[j]);\n            if (ax > amax) {\n                amax = ax; max = x[j];\n            }\n        }\n        if (!amax) {\n            y[i].d = 0;\n            memset(y[i].qs, 0, QK_K);\n            x += QK_K;\n            continue;\n        }\n        //const float iscale = -128.f/max;\n        // We need this change for IQ2_XXS, else the AVX implementation becomes very awkward\n        const float iscale = -127.f/max;\n        for (int j = 0; j < QK_K; ++j) {\n            int v = nearest_int(iscale*x[j]);\n            y[i].qs[j] = MIN(127, v);\n        }\n        for (int j = 0; j < QK_K/16; ++j) {\n            int sum = 0;\n            for (int ii = 0; ii < 16; ++ii) {\n                sum += y[i].qs[j*16 + ii];\n            }\n            y[i].bsums[j] = sum;\n        }\n        y[i].d = 1/iscale;\n        x += QK_K;\n    }\n}\n\nvoid dequantize_row_q8_K(const block_q8_K * restrict x, float * restrict y, int64_t k) {\n    assert(k % QK_K == 0);\n    const int64_t nb = k / QK_K;\n\n    for (int i = 0; i < nb; i++) {\n        for (int j = 0; j < QK_K; ++j) {\n            *y++ = x[i].d * x[i].qs[j];\n        }\n    }\n}\n\nvoid quantize_row_q8_K(const float * restrict x, void * restrict y, int64_t k) {\n    quantize_row_q8_K_ref(x, y, k);\n}\n\n//===================================== Dot products =================================\n\n//\n// Helper functions\n//\n#if __AVX__ || __AVX2__ || __AVX512F__\n\n// shuffles to pick the required scales in dot products\nstatic inline __m256i get_scale_shuffle_q3k(int i) {\n    static const uint8_t k_shuffle[128] = {\n         0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,     2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,\n         4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5,     6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7,\n         8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9,    10,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,\n        12,13,12,13,12,13,12,13,12,13,12,13,12,13,12,13,    14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,\n    };\n    return _mm256_loadu_si256((const __m256i*)k_shuffle + i);\n}\nstatic inline __m256i get_scale_shuffle_k4(int i) {\n    static const uint8_t k_shuffle[256] = {\n         0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,\n         2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,\n         4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5,\n         6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7,\n         8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9,\n        10,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,\n        12,13,12,13,12,13,12,13,12,13,12,13,12,13,12,13,12,13,12,13,12,13,12,13,12,13,12,13,12,13,12,13,\n        14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15\n    };\n    return _mm256_loadu_si256((const __m256i*)k_shuffle + i);\n}\nstatic inline __m128i get_scale_shuffle(int i) {\n    static const uint8_t k_shuffle[128] = {\n         0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1,\n         2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3,\n         4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5,\n         6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7,\n         8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9,\n        10,10,10,10,10,10,10,10, 11,11,11,11,11,11,11,11,\n        12,12,12,12,12,12,12,12, 13,13,13,13,13,13,13,13,\n        14,14,14,14,14,14,14,14, 15,15,15,15,15,15,15,15\n    };\n    return _mm_loadu_si128((const __m128i*)k_shuffle + i);\n}\n#elif defined(__loongarch_asx)\n// shuffles to pick the required scales in dot products\nstatic inline __m256i get_scale_shuffle_q3k(int i) {\n    static const uint8_t k_shuffle[128] = {\n         0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,     2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,\n         4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5,     6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7,\n         8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9,    10,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,\n        12,13,12,13,12,13,12,13,12,13,12,13,12,13,12,13,    14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,\n    };\n    return __lasx_xvld((const __m256i*)k_shuffle + i, 0);\n}\nstatic inline __m256i get_scale_shuffle_k4(int i) {\n    static const uint8_t k_shuffle[256] = {\n         0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,\n         2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,\n         4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5,\n         6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7,\n         8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9,\n        10,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,\n        12,13,12,13,12,13,12,13,12,13,12,13,12,13,12,13,12,13,12,13,12,13,12,13,12,13,12,13,12,13,12,13,\n        14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15\n    };\n    return __lasx_xvld((const __m256i*)k_shuffle + i, 0);\n}\nstatic inline __m128i get_scale_shuffle(int i) {\n    static const uint8_t k_shuffle[128] = {\n         0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1,\n         2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3,\n         4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5,\n         6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7,\n         8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9,\n        10,10,10,10,10,10,10,10, 11,11,11,11,11,11,11,11,\n        12,12,12,12,12,12,12,12, 13,13,13,13,13,13,13,13,\n        14,14,14,14,14,14,14,14, 15,15,15,15,15,15,15,15\n    };\n    return __lsx_vld((const __m128i*)k_shuffle + i, 0);\n}\n#endif\n\nvoid ggml_vec_dot_q4_0_q8_0(int n, float * restrict s, size_t bs, const void * restrict vx, size_t bx, const void * restrict vy, size_t by, int nrc) {\n    const int qk = QK8_0;\n    const int nb = n / qk;\n\n    assert(n % qk == 0);\n#if defined(__ARM_FEATURE_MATMUL_INT8)\n    assert((nrc == 2) || (nrc == 1));\n#else\n    assert(nrc == 1);\n#endif\n    UNUSED(nrc);\n    UNUSED(bx);\n    UNUSED(by);\n    UNUSED(bs);\n\n    const block_q4_0 * restrict x = vx;\n    const block_q8_0 * restrict y = vy;\n\n#if defined(__ARM_FEATURE_MATMUL_INT8)\n    if (nrc == 2) {\n        const block_q4_0 * restrict vx0 = vx;\n        const block_q4_0 * restrict vx1 = (const block_q4_0 *) ((const uint8_t*)vx + bx);\n        const block_q8_0 * restrict vy0 = vy;\n        const block_q8_0 * restrict vy1 = (const block_q8_0 *) ((const uint8_t*)vy + by);\n\n        float32x4_t sumv0 = vdupq_n_f32(0.0f);\n\n        for (int i = 0; i < nb; i++) {\n            const block_q4_0 * restrict b_x0 = &vx0[i];\n            const block_q4_0 * restrict b_x1 = &vx1[i];\n            const block_q8_0 * restrict b_y0 = &vy0[i];\n            const block_q8_0 * restrict b_y1 = &vy1[i];\n\n            const uint8x16_t m4b = vdupq_n_u8(0x0F);\n            const int8x16_t  s8b = vdupq_n_s8(0x8);\n\n            const uint8x16_t v0_0 = vld1q_u8(b_x0->qs);\n            const uint8x16_t v0_1 = vld1q_u8(b_x1->qs);\n\n            // 4-bit -> 8-bit\n            const int8x16_t v0_0l = vreinterpretq_s8_u8(vandq_u8  (v0_0, m4b));\n            const int8x16_t v0_0h = vreinterpretq_s8_u8(vshrq_n_u8(v0_0, 4));\n            const int8x16_t v0_1l = vreinterpretq_s8_u8(vandq_u8  (v0_1, m4b));\n            const int8x16_t v0_1h = vreinterpretq_s8_u8(vshrq_n_u8(v0_1, 4));\n\n            // sub 8\n            const int8x16_t x0_l = vsubq_s8(v0_0l, s8b);\n            const int8x16_t x0_h = vsubq_s8(v0_0h, s8b);\n            const int8x16_t x1_l = vsubq_s8(v0_1l, s8b);\n            const int8x16_t x1_h = vsubq_s8(v0_1h, s8b);\n\n            // load y\n            const int8x16_t y0_l = vld1q_s8(b_y0->qs);\n            const int8x16_t y0_h = vld1q_s8(b_y0->qs + 16);\n            const int8x16_t y1_l = vld1q_s8(b_y1->qs);\n            const int8x16_t y1_h = vld1q_s8(b_y1->qs + 16);\n\n            float32_t _scale[4] = { GGML_FP16_TO_FP32(b_x0->d)*GGML_FP16_TO_FP32(b_y0->d),\n                                    GGML_FP16_TO_FP32(b_x0->d)*GGML_FP16_TO_FP32(b_y1->d),\n                                    GGML_FP16_TO_FP32(b_x1->d)*GGML_FP16_TO_FP32(b_y0->d),\n                                    GGML_FP16_TO_FP32(b_x1->d)*GGML_FP16_TO_FP32(b_y1->d)};\n\n            float32x4_t scale = vld1q_f32(_scale);\n\n            int8x16_t l0 = vreinterpretq_s8_s64(vzip1q_s64(vreinterpretq_s64_s8(x0_l), vreinterpretq_s64_s8(x1_l)));\n            int8x16_t l1 = vreinterpretq_s8_s64(vzip2q_s64(vreinterpretq_s64_s8(x0_l), vreinterpretq_s64_s8(x1_l)));\n\n            int8x16_t l2 = vreinterpretq_s8_s64(vzip1q_s64(vreinterpretq_s64_s8(x0_h), vreinterpretq_s64_s8(x1_h)));\n            int8x16_t l3 = vreinterpretq_s8_s64(vzip2q_s64(vreinterpretq_s64_s8(x0_h), vreinterpretq_s64_s8(x1_h)));\n\n            int8x16_t r0 = vreinterpretq_s8_s64(vzip1q_s64(vreinterpretq_s64_s8(y0_l), vreinterpretq_s64_s8(y1_l)));\n            int8x16_t r1 = vreinterpretq_s8_s64(vzip2q_s64(vreinterpretq_s64_s8(y0_l), vreinterpretq_s64_s8(y1_l)));\n\n            int8x16_t r2 = vreinterpretq_s8_s64(vzip1q_s64(vreinterpretq_s64_s8(y0_h), vreinterpretq_s64_s8(y1_h)));\n            int8x16_t r3 = vreinterpretq_s8_s64(vzip2q_s64(vreinterpretq_s64_s8(y0_h), vreinterpretq_s64_s8(y1_h)));\n\n            sumv0 = vmlaq_f32(sumv0,(vcvtq_f32_s32(vmmlaq_s32((vmmlaq_s32((vmmlaq_s32((vmmlaq_s32(vdupq_n_s32(0), l0, r0)),\n                                                                                l1, r1)), l2, r2)), l3, r3))), scale);\n        }\n        float32x4_t sumv1 = vextq_f32(sumv0, sumv0, 2);\n        float32x4_t sumv2 = vzip1q_f32(sumv0, sumv1);\n\n        vst1_f32(s,      vget_low_f32(sumv2));\n        vst1_f32(s + bs, vget_high_f32(sumv2));\n        return;\n    }\n#endif\n\n    int ib = 0;\n    float sumf = 0;\n\n#if defined(__ARM_FEATURE_SVE)\n    svfloat32_t sumv0 = svdup_n_f32(0.0f);\n    svfloat32_t sumv1 = svdup_n_f32(0.0f);\n\n    const int vector_length = ggml_cpu_get_sve_cnt()*8;\n\n    // VLA Implementation using switch case\n    switch (vector_length) {\n        case 128:\n            {\n                // predicate for activating higher lanes for 4 float32 elements\n                const svbool_t ph4 = svptrue_pat_b32(SV_VL4);\n\n                for (; ib + 1 < nb; ib += 2) {\n                    const block_q4_0 * restrict x0 = &x[ib + 0];\n                    const block_q4_0 * restrict x1 = &x[ib + 1];\n                    const block_q8_0 * restrict y0 = &y[ib + 0];\n                    const block_q8_0 * restrict y1 = &y[ib + 1];\n\n                    // load x\n                    const svuint8_t qx0r = svld1rq_u8(svptrue_b8(), x0->qs);\n                    const svuint8_t qx1r = svld1rq_u8(svptrue_b8(), x1->qs);\n\n                    // 4-bit -> 8-bit\n                    const svint8_t qx0l = svreinterpret_s8_u8(svand_n_u8_m(svptrue_b8(), qx0r, 0x0F));\n                    const svint8_t qx0h = svreinterpret_s8_u8(svlsr_n_u8_m(svptrue_b8(), qx0r, 0x04));\n                    const svint8_t qx1l = svreinterpret_s8_u8(svand_n_u8_m(svptrue_b8(), qx1r, 0x0F));\n                    const svint8_t qx1h = svreinterpret_s8_u8(svlsr_n_u8_m(svptrue_b8(), qx1r, 0x04));\n\n                    // sub 8\n                    const svint8_t qx0ls = svsub_n_s8_x(svptrue_b8(), qx0h, 8);\n                    const svint8_t qx0hs = svsub_n_s8_x(svptrue_b8(), qx0l, 8);\n                    const svint8_t qx1ls = svsub_n_s8_x(svptrue_b8(), qx1h, 8);\n                    const svint8_t qx1hs = svsub_n_s8_x(svptrue_b8(), qx1l, 8);\n\n                    // load y\n                    const svint8_t qy0h = svld1_s8(svptrue_b8(), y0->qs);\n                    const svint8_t qy0l = svld1_s8(svptrue_b8(), y0->qs + 16);\n                    const svint8_t qy1h = svld1_s8(svptrue_b8(), y1->qs);\n                    const svint8_t qy1l = svld1_s8(svptrue_b8(), y1->qs + 16);\n\n                    // dot product\n                    sumv0 = svmla_n_f32_x(ph4, sumv0, svcvt_f32_s32_x(ph4, svadd_x(ph4,\n                                    svdot_s32(svdup_n_s32(0), qx0ls, qy0l),\n                                    svdot_s32(svdup_n_s32(0), qx0hs, qy0h))), GGML_FP16_TO_FP32(x0->d)*GGML_FP16_TO_FP32(y0->d));\n                    sumv1 = svmla_n_f32_x(ph4, sumv1, svcvt_f32_s32_x(ph4, svadd_x(ph4,\n                                    svdot_s32(svdup_n_s32(0), qx1ls, qy1l),\n                                    svdot_s32(svdup_n_s32(0), qx1hs, qy1h))), GGML_FP16_TO_FP32(x1->d)*GGML_FP16_TO_FP32(y1->d));\n                }\n\n                sumf = svaddv_f32(svptrue_b32(), svadd_f32_x(svptrue_b32(), sumv0, sumv1));\n            } break;\n        case 256:\n            {\n                // predicate for activating higher lanes for 16 int8 elements\n                const svbool_t ph16 = svptrue_pat_b8(SV_VL16);\n                // predicate for activating lower lanes for  16 int8 elements\n                const svbool_t pl16 = svnot_b_z(svptrue_b8(), ph16);\n\n                for (; ib + 1 < nb; ib += 2) {\n                    const block_q4_0 * restrict x0 = &x[ib + 0];\n                    const block_q4_0 * restrict x1 = &x[ib + 1];\n                    const block_q8_0 * restrict y0 = &y[ib + 0];\n                    const block_q8_0 * restrict y1 = &y[ib + 1];\n\n                    // load x\n                    const svuint8_t qx0r = svld1rq_u8(svptrue_b8(), x0->qs);\n                    const svuint8_t qx1r = svld1rq_u8(svptrue_b8(), x1->qs);\n\n                    // 4-bit -> 8-bit\n                    const svint8_t qx0 = svreinterpret_s8_u8(svlsr_n_u8_m(pl16, svand_n_u8_m(ph16, qx0r, 0x0F), 0x04));\n                    const svint8_t qx1 = svreinterpret_s8_u8(svlsr_n_u8_m(pl16, svand_n_u8_m(ph16, qx1r, 0x0F), 0x04));\n\n                    // sub 8\n                    const svint8_t qx0s = svsub_n_s8_x(svptrue_b8(), qx0, 8);\n                    const svint8_t qx1s = svsub_n_s8_x(svptrue_b8(), qx1, 8);\n\n                    // load y\n                    const svint8_t qy0 = svld1_s8(svptrue_b8(), y0->qs);\n                    const svint8_t qy1 = svld1_s8(svptrue_b8(), y1->qs);\n\n                    // dot product\n                    sumv0 = svmla_n_f32_x(svptrue_b32(), sumv0, svcvt_f32_s32_x(svptrue_b32(),\n                                svdot_s32(svdup_n_s32(0), qx0s, qy0)), GGML_FP16_TO_FP32(x0->d)*GGML_FP16_TO_FP32(y0->d));\n                    sumv1 = svmla_n_f32_x(svptrue_b32(), sumv1, svcvt_f32_s32_x(svptrue_b32(),\n                                svdot_s32(svdup_n_s32(0), qx1s, qy1)), GGML_FP16_TO_FP32(x1->d)*GGML_FP16_TO_FP32(y1->d));\n                }\n\n                sumf = svaddv_f32(svptrue_b32(), svadd_f32_x(svptrue_b32(), sumv0, sumv1));\n            } break;\n        case 512:\n            {\n                // predicate for activating higher lanes for 32 int8 elements\n                const svbool_t ph32 = svptrue_pat_b8(SV_VL32);\n\n                // predicate for activating higher lanes for 16 int8 elements\n                const svbool_t ph16 = svptrue_pat_b8(SV_VL16);\n                // predicate for activating lower lanes for 16 int8 elements from first 32 int8 activated lanes\n                const svbool_t pl16 = svnot_b_z(ph32, ph16);\n\n                for (; ib + 1 < nb; ib += 2) {\n                    const block_q4_0 * restrict x0 = &x[ib + 0];\n                    const block_q4_0 * restrict x1 = &x[ib + 1];\n                    const block_q8_0 * restrict y0 = &y[ib + 0];\n                    const block_q8_0 * restrict y1 = &y[ib + 1];\n\n                    // load x\n                    const svuint8_t qx0r = svld1rq_u8(ph32, x0->qs);\n                    const svuint8_t qx1r = svld1rq_u8(ph32, x1->qs);\n\n                    // 4-bit -> 8-bit\n                    const svint8_t qx0 = svreinterpret_s8_u8(svlsr_n_u8_m(pl16, svand_n_u8_m(ph16, qx0r, 0x0F), 0x04));\n                    const svint8_t qx1 = svreinterpret_s8_u8(svlsr_n_u8_m(pl16, svand_n_u8_m(ph16, qx1r, 0x0F), 0x04));\n\n                    // sub 8\n                    const svint8_t qx0s = svsub_n_s8_x(ph32, qx0, 8);\n                    const svint8_t qx1s = svsub_n_s8_x(ph32, qx1, 8);\n\n                    // load y\n                    const svint8_t qy0 = svld1_s8(ph32, y0->qs);\n                    const svint8_t qy1 = svld1_s8(ph32, y1->qs);\n\n                    // dot product\n                    sumv0 = svmla_n_f32_x(ph32, sumv0, svcvt_f32_s32_x(ph32,\n                                svdot_s32(svdup_n_s32(0), qx0s, qy0)), GGML_FP16_TO_FP32(x0->d)*GGML_FP16_TO_FP32(y0->d));\n                    sumv1 = svmla_n_f32_x(ph32, sumv1, svcvt_f32_s32_x(ph32,\n                                svdot_s32(svdup_n_s32(0), qx1s, qy1)), GGML_FP16_TO_FP32(x1->d)*GGML_FP16_TO_FP32(y1->d));\n                }\n\n                sumf = svaddv_f32(ph32, svadd_f32_x(ph32, sumv0, sumv1));\n            } break;\n        default:\n            assert(false && \"Unsupported vector length\");\n            break;\n    }\n\n#elif defined(__ARM_NEON)\n    float32x4_t sumv0 = vdupq_n_f32(0.0f);\n    float32x4_t sumv1 = vdupq_n_f32(0.0f);\n\n    for (; ib + 1 < nb; ib += 2) {\n        const block_q4_0 * restrict x0 = &x[ib + 0];\n        const block_q4_0 * restrict x1 = &x[ib + 1];\n        const block_q8_0 * restrict y0 = &y[ib + 0];\n        const block_q8_0 * restrict y1 = &y[ib + 1];\n\n        const uint8x16_t m4b = vdupq_n_u8(0x0F);\n        const int8x16_t  s8b = vdupq_n_s8(0x8);\n\n        const uint8x16_t v0_0 = vld1q_u8(x0->qs);\n        const uint8x16_t v0_1 = vld1q_u8(x1->qs);\n\n        // 4-bit -> 8-bit\n        const int8x16_t v0_0l = vreinterpretq_s8_u8(vandq_u8  (v0_0, m4b));\n        const int8x16_t v0_0h = vreinterpretq_s8_u8(vshrq_n_u8(v0_0, 4));\n        const int8x16_t v0_1l = vreinterpretq_s8_u8(vandq_u8  (v0_1, m4b));\n        const int8x16_t v0_1h = vreinterpretq_s8_u8(vshrq_n_u8(v0_1, 4));\n\n        // sub 8\n        const int8x16_t v0_0ls = vsubq_s8(v0_0l, s8b);\n        const int8x16_t v0_0hs = vsubq_s8(v0_0h, s8b);\n        const int8x16_t v0_1ls = vsubq_s8(v0_1l, s8b);\n        const int8x16_t v0_1hs = vsubq_s8(v0_1h, s8b);\n\n        // load y\n        const int8x16_t v1_0l = vld1q_s8(y0->qs);\n        const int8x16_t v1_0h = vld1q_s8(y0->qs + 16);\n        const int8x16_t v1_1l = vld1q_s8(y1->qs);\n        const int8x16_t v1_1h = vld1q_s8(y1->qs + 16);\n\n        // dot product into int32x4_t\n        const int32x4_t p_0 = ggml_vdotq_s32(ggml_vdotq_s32(vdupq_n_s32(0), v0_0ls, v1_0l), v0_0hs, v1_0h);\n        const int32x4_t p_1 = ggml_vdotq_s32(ggml_vdotq_s32(vdupq_n_s32(0), v0_1ls, v1_1l), v0_1hs, v1_1h);\n\n        sumv0 = vmlaq_n_f32(sumv0, vcvtq_f32_s32(p_0), GGML_FP16_TO_FP32(x0->d)*GGML_FP16_TO_FP32(y0->d));\n        sumv1 = vmlaq_n_f32(sumv1, vcvtq_f32_s32(p_1), GGML_FP16_TO_FP32(x1->d)*GGML_FP16_TO_FP32(y1->d));\n    }\n\n    sumf = vaddvq_f32(sumv0) + vaddvq_f32(sumv1);\n#elif defined(__AVX2__)\n    // Initialize accumulator with zeros\n    __m256 acc = _mm256_setzero_ps();\n\n    // Main loop\n    for (; ib < nb; ++ib) {\n        /* Compute combined scale for the block */\n        const __m256 d = _mm256_set1_ps( GGML_FP16_TO_FP32(x[ib].d) * GGML_FP16_TO_FP32(y[ib].d) );\n\n        __m256i qx = bytes_from_nibbles_32(x[ib].qs);\n\n        // Now we have a vector with bytes in [ 0 .. 15 ] interval. Offset them into [ -8 .. +7 ] interval.\n        const __m256i off = _mm256_set1_epi8( 8 );\n        qx = _mm256_sub_epi8( qx, off );\n\n        __m256i qy = _mm256_loadu_si256((const __m256i *)y[ib].qs);\n\n        const __m256 q = mul_sum_i8_pairs_float(qx, qy);\n\n        /* Multiply q with scale and accumulate */\n        acc = _mm256_fmadd_ps( d, q, acc );\n    }\n\n    sumf = hsum_float_8(acc);\n#elif defined(__AVX__)\n    const __m128i mone = _mm_set1_epi16(1);\n\n    __m256 accum1 = _mm256_setzero_ps();\n    __m256 accum2 = _mm256_setzero_ps();\n    for (; ib + 1 < nb; ib += 2) {\n        const __m128i q4bits_1 = _mm_loadu_si128((const __m128i *)x[ib + 0].qs);\n        const __m128i q4bits_2 = _mm_loadu_si128((const __m128i *)x[ib + 1].qs);\n        const __m128i q8b_1_0 = _mm_loadu_si128((const __m128i *)y[ib + 0].qs);\n        const __m128i q8b_1_1 = _mm_loadu_si128((const __m128i *)y[ib + 0].qs + 1);\n        const __m128i q8b_2_0 = _mm_loadu_si128((const __m128i *)y[ib + 1].qs);\n        const __m128i q8b_2_1 = _mm_loadu_si128((const __m128i *)y[ib + 1].qs + 1);\n\n        const __m128i q4b_1_0 = _mm_sub_epi8(_mm_and_si128(_mm_set1_epi8(15), q4bits_1), _mm_set1_epi8(8));\n        const __m128i q4b_1_1 = _mm_sub_epi8(_mm_and_si128(_mm_set1_epi8(15), _mm_srli_epi16(q4bits_1, 4)), _mm_set1_epi8(8));\n        const __m128i q4b_2_0 = _mm_sub_epi8(_mm_and_si128(_mm_set1_epi8(15), q4bits_2), _mm_set1_epi8(8));\n        const __m128i q4b_2_1 = _mm_sub_epi8(_mm_and_si128(_mm_set1_epi8(15), _mm_srli_epi16(q4bits_2, 4)), _mm_set1_epi8(8));\n        const __m128i p16_1_0 = mul_add_epi8_sse(q4b_1_0, q8b_1_0);\n        const __m128i p16_1_1 = mul_add_epi8_sse(q4b_1_1, q8b_1_1);\n        const __m128i p16_2_0 = mul_add_epi8_sse(q4b_2_0, q8b_2_0);\n        const __m128i p16_2_1 = mul_add_epi8_sse(q4b_2_1, q8b_2_1);\n        const __m128i p_1_0 = _mm_madd_epi16(p16_1_0, mone);\n        const __m128i p_1_1 = _mm_madd_epi16(p16_1_1, mone);\n        const __m128i p_2_0 = _mm_madd_epi16(p16_2_0, mone);\n        const __m128i p_2_1 = _mm_madd_epi16(p16_2_1, mone);\n        accum1 = _mm256_add_ps(_mm256_mul_ps(_mm256_set1_ps(GGML_FP16_TO_FP32(y[ib + 0].d)*GGML_FP16_TO_FP32(x[ib + 0].d)),\n                _mm256_cvtepi32_ps(MM256_SET_M128I(p_1_1, p_1_0))), accum1);\n        accum2 = _mm256_add_ps(_mm256_mul_ps(_mm256_set1_ps(GGML_FP16_TO_FP32(y[ib + 1].d)*GGML_FP16_TO_FP32(x[ib + 1].d)),\n                _mm256_cvtepi32_ps(MM256_SET_M128I(p_2_1, p_2_0))), accum2);\n    }\n\n    sumf = hsum_float_8(_mm256_add_ps(accum1, accum2));\n#elif defined(__SSSE3__)\n    // set constants\n    const __m128i lowMask = _mm_set1_epi8(0xF);\n    const __m128i off = _mm_set1_epi8(8);\n\n    // Initialize accumulator with zeros\n    __m128 acc_0 = _mm_setzero_ps();\n    __m128 acc_1 = _mm_setzero_ps();\n    __m128 acc_2 = _mm_setzero_ps();\n    __m128 acc_3 = _mm_setzero_ps();\n\n    for (; ib + 1 < nb; ib += 2) {\n        _mm_prefetch(&x[ib] + sizeof(block_q4_0), _MM_HINT_T0);\n        _mm_prefetch(&y[ib] + sizeof(block_q8_0), _MM_HINT_T0);\n\n        // Compute combined scale for the block 0 and 1\n        const __m128 d_0_1 = _mm_set1_ps( GGML_FP16_TO_FP32(x[ib].d) * GGML_FP16_TO_FP32(y[ib].d) );\n\n        const __m128i tmp_0_1 = _mm_loadu_si128((const __m128i *)x[ib].qs);\n\n        __m128i bx_0 = _mm_and_si128(lowMask, tmp_0_1);\n        __m128i by_0 = _mm_loadu_si128((const __m128i *)y[ib].qs);\n        bx_0 = _mm_sub_epi8(bx_0, off);\n        const __m128i i32_0 = mul_sum_i8_pairs(bx_0, by_0);\n\n        __m128i bx_1 = _mm_and_si128(lowMask, _mm_srli_epi64(tmp_0_1, 4));\n        __m128i by_1 = _mm_loadu_si128((const __m128i *)(y[ib].qs + 16));\n        bx_1 = _mm_sub_epi8(bx_1, off);\n        const __m128i i32_1 = mul_sum_i8_pairs(bx_1, by_1);\n\n        _mm_prefetch(&x[ib] + 2 * sizeof(block_q4_0), _MM_HINT_T0);\n        _mm_prefetch(&y[ib] + 2 * sizeof(block_q8_0), _MM_HINT_T0);\n\n        // Compute combined scale for the block 2 and 3\n        const __m128 d_2_3 = _mm_set1_ps( GGML_FP16_TO_FP32(x[ib + 1].d) * GGML_FP16_TO_FP32(y[ib + 1].d) );\n\n        const __m128i tmp_2_3 = _mm_loadu_si128((const __m128i *)x[ib + 1].qs);\n\n        __m128i bx_2 = _mm_and_si128(lowMask, tmp_2_3);\n        __m128i by_2 = _mm_loadu_si128((const __m128i *)y[ib + 1].qs);\n        bx_2 = _mm_sub_epi8(bx_2, off);\n        const __m128i i32_2 = mul_sum_i8_pairs(bx_2, by_2);\n\n        __m128i bx_3 = _mm_and_si128(lowMask, _mm_srli_epi64(tmp_2_3, 4));\n        __m128i by_3 = _mm_loadu_si128((const __m128i *)(y[ib + 1].qs + 16));\n        bx_3 = _mm_sub_epi8(bx_3, off);\n        const __m128i i32_3 = mul_sum_i8_pairs(bx_3, by_3);\n\n        // Convert int32_t to float\n        __m128 p0 = _mm_cvtepi32_ps(i32_0);\n        __m128 p1 = _mm_cvtepi32_ps(i32_1);\n        __m128 p2 = _mm_cvtepi32_ps(i32_2);\n        __m128 p3 = _mm_cvtepi32_ps(i32_3);\n\n        // Apply the scale\n        __m128 p0_d = _mm_mul_ps( d_0_1, p0 );\n        __m128 p1_d = _mm_mul_ps( d_0_1, p1 );\n        __m128 p2_d = _mm_mul_ps( d_2_3, p2 );\n        __m128 p3_d = _mm_mul_ps( d_2_3, p3 );\n\n        // Acummulate\n        acc_0 = _mm_add_ps(p0_d, acc_0);\n        acc_1 = _mm_add_ps(p1_d, acc_1);\n        acc_2 = _mm_add_ps(p2_d, acc_2);\n        acc_3 = _mm_add_ps(p3_d, acc_3);\n    }\n\n    sumf = hsum_float_4x4(acc_0, acc_1, acc_2, acc_3);\n#elif defined(__riscv_v_intrinsic)\n    size_t vl = __riscv_vsetvl_e8m1(qk/2);\n\n    for (; ib < nb; ++ib) {\n        // load elements\n        vuint8mf2_t tx = __riscv_vle8_v_u8mf2(x[ib].qs, vl);\n\n        vint8mf2_t y0 = __riscv_vle8_v_i8mf2(y[ib].qs, vl);\n        vint8mf2_t y1 = __riscv_vle8_v_i8mf2(y[ib].qs+16, vl);\n\n        // mask and store lower part of x, and then upper part\n        vuint8mf2_t x_a = __riscv_vand_vx_u8mf2(tx, 0x0F, vl);\n        vuint8mf2_t x_l = __riscv_vsrl_vx_u8mf2(tx, 0x04, vl);\n\n        vint8mf2_t x_ai = __riscv_vreinterpret_v_u8mf2_i8mf2(x_a);\n        vint8mf2_t x_li = __riscv_vreinterpret_v_u8mf2_i8mf2(x_l);\n\n        // subtract offset\n        vint8mf2_t v0 = __riscv_vsub_vx_i8mf2(x_ai, 8, vl);\n        vint8mf2_t v1 = __riscv_vsub_vx_i8mf2(x_li, 8, vl);\n\n        vint16m1_t vec_mul1 = __riscv_vwmul_vv_i16m1(v0, y0, vl);\n        vint16m1_t vec_mul2 = __riscv_vwmul_vv_i16m1(v1, y1, vl);\n\n        vint32m1_t vec_zero = __riscv_vmv_v_x_i32m1(0, vl);\n\n        vint32m1_t vs1 = __riscv_vwredsum_vs_i16m1_i32m1(vec_mul1, vec_zero, vl);\n        vint32m1_t vs2 = __riscv_vwredsum_vs_i16m1_i32m1(vec_mul2, vs1, vl);\n\n        int sumi = __riscv_vmv_x_s_i32m1_i32(vs2);\n\n        sumf += sumi*GGML_FP16_TO_FP32(x[ib].d)*GGML_FP16_TO_FP32(y[ib].d);\n    }\n\n#elif defined(__POWER9_VECTOR__)\n    const vector signed char lowMask = vec_splats((signed char)0xF);\n    const vector signed int v0 = vec_splats((int32_t)0);\n    const vector unsigned char v4 = vec_splats((unsigned char)0x4);\n    const vector signed char v8 = vec_splats((signed char)0x8);\n\n    vector float vsumf0 = vec_splats(0.0f);\n\n#pragma GCC unroll 8\n    for (; ib < nb; ++ib) {\n        __builtin_prefetch(x[ib].qs, 0, 1);\n        __builtin_prefetch(y[ib].qs, 0, 1);\n\n        vector float vxd = vec_splats(GGML_FP16_TO_FP32(x[ib].d));\n        vector float vyd = vec_splats(GGML_FP16_TO_FP32(y[ib].d));\n        vector float vd = vec_mul(vxd, vyd);\n\n        vector signed char qxs = (vector signed char)vec_xl( 0, x[ib].qs);\n        vector signed char q8y0 = vec_xl( 0, y[ib].qs);\n        vector signed char q8y1 = vec_xl(16, y[ib].qs);\n\n        vector signed char q4x0 = vec_and(qxs, lowMask);\n        vector signed char q4x1 = vec_sr(qxs, v4);\n\n        q4x0 = vec_sub(q4x0, v8);\n        q4x1 = vec_sub(q4x1, v8);\n\n        vector signed short qv0 = vec_add(vec_mule(q4x0, q8y0), vec_mulo(q4x0, q8y0));\n        vector signed short qv1 = vec_add(vec_mule(q4x1, q8y1), vec_mulo(q4x1, q8y1));\n\n        vector signed int vsumi0 = v0;\n\n        vsumi0 = vec_sum4s(qv0, vsumi0);\n        vsumi0 = vec_sum4s(qv1, vsumi0);\n\n        vsumf0 = vec_madd(vec_ctf(vsumi0, 0), vd, vsumf0);\n    }\n\n    vsumf0 = vec_add(vsumf0, vec_sld(vsumf0, vsumf0, 4));\n    vsumf0 = vec_add(vsumf0, vec_sld(vsumf0, vsumf0, 8));\n\n    sumf = vec_extract(vsumf0, 0);\n\n#elif defined(__loongarch_asx)\n    // Initialize accumulator with zeros\n    __m256 acc = (__m256)__lasx_xvldi(0);\n\n    // Main loop\n    for (; ib < nb; ++ib) {\n        /* Compute combined scale for the block */\n        const __m256 d = __lasx_xvreplfr2vr_s( GGML_FP16_TO_FP32(x[ib].d) * GGML_FP16_TO_FP32(y[ib].d) );\n\n        __m256i qx = bytes_from_nibbles_32(x[ib].qs);\n\n        // Now we have a vector with bytes in [ 0 .. 15 ] interval. Offset them into [ -8 .. +7 ] interval.\n        const __m256i off = __lasx_xvreplgr2vr_b( 8 );\n        qx = __lasx_xvsub_b( qx, off );\n\n        __m256i qy = __lasx_xvld((const __m256i *)y[ib].qs, 0);\n\n        const __m256 q = mul_sum_i8_pairs_float(qx, qy);\n\n        /* Multiply q with scale and accumulate */\n        acc = __lasx_xvfmadd_s( d, q, acc );\n    }\n\n    sumf = hsum_float_8(acc);\n#elif defined(__loongarch_sx)\n    // set constants\n    const __m128i low_mask = __lsx_vreplgr2vr_b(0xF);\n    const __m128i off = __lsx_vreplgr2vr_b(8);\n\n    // Initialize accumulator with zeros\n    __m128 acc_0 = __lsx_vldi(0);\n    __m128 acc_1 = __lsx_vldi(0);\n    __m128 acc_2 = __lsx_vldi(0);\n    __m128 acc_3 = __lsx_vldi(0);\n\n    for (; ib + 1 < nb; ib += 2) {\n\n        // Compute combined scale for the block 0 and 1\n        const __m128 d_0_1 = __lsx_vreplgr2vr_w( GGML_FP16_TO_FP32(x[ib].d) * GGML_FP16_TO_FP32(y[ib].d) );\n\n        const __m128i tmp_0_1 = __lsx_vld((const __m128i *)x[ib].qs, 0);\n\n        __m128i bx_0 = __lsx_vand_v(low_mask, tmp_0_1);\n        __m128i by_0 = __lsx_vld((const __m128i *)y[ib].qs, 0);\n        bx_0 = __lsx_vsub_b(bx_0, off);\n        const __m128i i32_0 = mul_sum_i8_pairs(bx_0, by_0);\n\n        __m128i bx_1 = __lsx_vand_v(low_mask, __lsx_vsrli_d(tmp_0_1, 4));\n        __m128i by_1 = __lsx_vld((const __m128i *)(y[ib].qs + 16), 0);\n        bx_1 = __lsx_vsub_b(bx_1, off);\n        const __m128i i32_1 = mul_sum_i8_pairs(bx_1, by_1);\n\n        //_mm_prefetch(&x[ib] + 2 * sizeof(block_q4_0), _MM_HINT_T0);\n        //_mm_prefetch(&y[ib] + 2 * sizeof(block_q8_0), _MM_HINT_T0);\n\n        // Compute combined scale for the block 2 and 3\n        const __m128 d_2_3 = __lsx_vreplgr2vr_w( GGML_FP16_TO_FP32(x[ib + 1].d) * GGML_FP16_TO_FP32(y[ib + 1].d) );\n\n        const __m128i tmp_2_3 = __lsx_vld((const __m128i *)x[ib + 1].qs, 0);\n\n        __m128i bx_2 = __lsx_vand_v(low_mask, tmp_2_3);\n        __m128i by_2 = __lsx_vld((const __m128i *)y[ib + 1].qs, 0);\n        bx_2 = __lsx_vsub_b(bx_2, off);\n        const __m128i i32_2 = mul_sum_i8_pairs(bx_2, by_2);\n\n        __m128i bx_3 = __lsx_vand_v(low_mask, __lsx_vsrli_d(tmp_2_3, 4));\n        __m128i by_3 = __lsx_vld((const __m128i *)(y[ib + 1].qs + 16), 0);\n        bx_3 = __lsx_vsub_b(bx_3, off);\n        const __m128i i32_3 = mul_sum_i8_pairs(bx_3, by_3);\n\n        // Convert int32_t to float\n        __m128 p0 = __lsx_vffint_s_w(i32_0);\n        __m128 p1 = __lsx_vffint_s_w(i32_1);\n        __m128 p2 = __lsx_vffint_s_w(i32_2);\n        __m128 p3 = __lsx_vffint_s_w(i32_3);\n\n        // Apply the scale\n        __m128 p0_d = __lsx_vfmul_s( d_0_1, p0 );\n        __m128 p1_d = __lsx_vfmul_s( d_0_1, p1 );\n        __m128 p2_d = __lsx_vfmul_s( d_2_3, p2 );\n        __m128 p3_d = __lsx_vfmul_s( d_2_3, p3 );\n\n        // Acummulate\n        acc_0 = __lsx_vfadd_s(p0_d, acc_0);\n        acc_1 = __lsx_vfadd_s(p1_d, acc_1);\n        acc_2 = __lsx_vfadd_s(p2_d, acc_2);\n        acc_3 = __lsx_vfadd_s(p3_d, acc_3);\n    }\n\n    sumf = hsum_float_4x4(acc_0, acc_1, acc_2, acc_3);\n#endif\n    for (; ib < nb; ++ib) {\n        int sumi0 = 0;\n        int sumi1 = 0;\n\n        for (int j = 0; j < qk/2; ++j) {\n            const int v0 = (x[ib].qs[j] & 0x0F) - 8;\n            const int v1 = (x[ib].qs[j] >>   4) - 8;\n\n            sumi0 += (v0 * y[ib].qs[j]);\n            sumi1 += (v1 * y[ib].qs[j + qk/2]);\n        }\n\n        int sumi = sumi0 + sumi1;\n        sumf += sumi*GGML_FP16_TO_FP32(x[ib].d)*GGML_FP16_TO_FP32(y[ib].d);\n    }\n\n    *s = sumf;\n}\n\nvoid ggml_vec_dot_q4_1_q8_1(int n, float * restrict s, size_t bs, const void * restrict vx, size_t bx, const void * restrict vy, size_t by, int nrc) {\n    const int qk = QK8_1;\n    const int nb = n / qk;\n\n    assert(n % qk == 0);\n#if defined(__ARM_FEATURE_MATMUL_INT8)\n    assert((nrc == 2) || (nrc == 1));\n#else\n    assert(nrc == 1);\n#endif\n    UNUSED(nrc);\n    UNUSED(bx);\n    UNUSED(by);\n    UNUSED(bs);\n\n    const block_q4_1 * restrict x = vx;\n    const block_q8_1 * restrict y = vy;\n\n#if defined(__ARM_FEATURE_MATMUL_INT8)\n    if (nrc == 2) {\n        const block_q4_1 * restrict vx0 = vx;\n        const block_q4_1 * restrict vx1 = (const block_q4_1 *) ((const uint8_t*)vx + bx);\n        const block_q8_1 * restrict vy0 = vy;\n        const block_q8_1 * restrict vy1 = (const block_q8_1 *) ((const uint8_t*)vy + by);\n\n        float32x4_t sumv0 = vdupq_n_f32(0.0f);\n        float32x4_t summs0 = vdupq_n_f32(0.0f);\n\n        for (int i = 0; i < nb; i++) {\n            const block_q4_1 * restrict b_x0 = &vx0[i];\n            const block_q4_1 * restrict b_x1 = &vx1[i];\n            const block_q8_1 * restrict b_y0 = &vy0[i];\n            const block_q8_1 * restrict b_y1 = &vy1[i];\n\n            float32_t summs_t[4] = {GGML_FP16_TO_FP32(b_x0->m) * GGML_FP16_TO_FP32(b_y0->s),\n                                    GGML_FP16_TO_FP32(b_x1->m) * GGML_FP16_TO_FP32(b_y0->s),\n                                    GGML_FP16_TO_FP32(b_x0->m) * GGML_FP16_TO_FP32(b_y1->s),\n                                    GGML_FP16_TO_FP32(b_x1->m) * GGML_FP16_TO_FP32(b_y1->s)};\n            summs0 = vaddq_f32(summs0, vld1q_f32(summs_t));\n\n            const uint8x16_t m4b = vdupq_n_u8(0x0F);\n\n            const uint8x16_t v0_0 = vld1q_u8(b_x0->qs);\n            const uint8x16_t v0_1 = vld1q_u8(b_x1->qs);\n\n            // 4-bit -> 8-bit\n            const int8x16_t x0_l = vreinterpretq_s8_u8(vandq_u8  (v0_0, m4b));\n            const int8x16_t x0_h = vreinterpretq_s8_u8(vshrq_n_u8(v0_0, 4));\n            const int8x16_t x1_l = vreinterpretq_s8_u8(vandq_u8  (v0_1, m4b));\n            const int8x16_t x1_h = vreinterpretq_s8_u8(vshrq_n_u8(v0_1, 4));\n\n            // load y\n            const int8x16_t y0_l = vld1q_s8(b_y0->qs);\n            const int8x16_t y0_h = vld1q_s8(b_y0->qs + 16);\n            const int8x16_t y1_l = vld1q_s8(b_y1->qs);\n            const int8x16_t y1_h = vld1q_s8(b_y1->qs + 16);\n\n            // mmla into int32x4_t\n            float32_t _scale[4] = {GGML_FP16_TO_FP32(b_x0->d)*b_y0->d,\n                                   GGML_FP16_TO_FP32(b_x0->d)*b_y1->d,\n                                   GGML_FP16_TO_FP32(b_x1->d)*b_y0->d,\n                                   GGML_FP16_TO_FP32(b_x1->d)*b_y1->d};\n            float32x4_t scale = vld1q_f32(_scale);\n\n            int8x16_t l0 = vreinterpretq_s8_s64(vzip1q_s64(vreinterpretq_s64_s8(x0_l), vreinterpretq_s64_s8(x1_l)));\n            int8x16_t l1 = vreinterpretq_s8_s64(vzip2q_s64(vreinterpretq_s64_s8(x0_l), vreinterpretq_s64_s8(x1_l)));\n\n            int8x16_t l2 = vreinterpretq_s8_s64(vzip1q_s64(vreinterpretq_s64_s8(x0_h), vreinterpretq_s64_s8(x1_h)));\n            int8x16_t l3 = vreinterpretq_s8_s64(vzip2q_s64(vreinterpretq_s64_s8(x0_h), vreinterpretq_s64_s8(x1_h)));\n\n            int8x16_t r0 = vreinterpretq_s8_s64(vzip1q_s64(vreinterpretq_s64_s8(y0_l), vreinterpretq_s64_s8(y1_l)));\n            int8x16_t r1 = vreinterpretq_s8_s64(vzip2q_s64(vreinterpretq_s64_s8(y0_l), vreinterpretq_s64_s8(y1_l)));\n\n            int8x16_t r2 = vreinterpretq_s8_s64(vzip1q_s64(vreinterpretq_s64_s8(y0_h), vreinterpretq_s64_s8(y1_h)));\n            int8x16_t r3 = vreinterpretq_s8_s64(vzip2q_s64(vreinterpretq_s64_s8(y0_h), vreinterpretq_s64_s8(y1_h)));\n            sumv0 = vmlaq_f32(sumv0,(vcvtq_f32_s32(vmmlaq_s32((vmmlaq_s32((vmmlaq_s32((vmmlaq_s32(vdupq_n_s32(0), l0, r0)),\n                                                                                l1, r1)), l2, r2)), l3, r3))), scale);\n        }\n\n        float32x4_t sumv1 = vextq_f32(sumv0, sumv0, 2);\n        float32x4_t sumv2 = vzip1q_f32(sumv0, sumv1);\n        sumv2 = vaddq_f32(sumv2, summs0);\n\n        vst1_f32(s,      vget_low_f32 (sumv2));\n        vst1_f32(s + bs, vget_high_f32(sumv2));\n        return;\n    }\n#endif\n\n    int ib = 0;\n    float sumf = 0;\n\n    // TODO: add WASM SIMD\n#if defined(__ARM_NEON)\n    float32x4_t sumv0 = vdupq_n_f32(0.0f);\n    float32x4_t sumv1 = vdupq_n_f32(0.0f);\n\n    float summs = 0;\n\n    for (; ib + 1 < nb; ib += 2) {\n        const block_q4_1 * restrict x0 = &x[ib + 0];\n        const block_q4_1 * restrict x1 = &x[ib + 1];\n        const block_q8_1 * restrict y0 = &y[ib + 0];\n        const block_q8_1 * restrict y1 = &y[ib + 1];\n\n        summs += GGML_FP16_TO_FP32(x0->m) * GGML_FP16_TO_FP32(y0->s) + GGML_FP16_TO_FP32(x1->m) * GGML_FP16_TO_FP32(y1->s);\n\n        const uint8x16_t m4b = vdupq_n_u8(0x0F);\n\n        const uint8x16_t v0_0 = vld1q_u8(x0->qs);\n        const uint8x16_t v0_1 = vld1q_u8(x1->qs);\n\n        // 4-bit -> 8-bit\n        const int8x16_t v0_0l = vreinterpretq_s8_u8(vandq_u8  (v0_0, m4b));\n        const int8x16_t v0_0h = vreinterpretq_s8_u8(vshrq_n_u8(v0_0, 4));\n        const int8x16_t v0_1l = vreinterpretq_s8_u8(vandq_u8  (v0_1, m4b));\n        const int8x16_t v0_1h = vreinterpretq_s8_u8(vshrq_n_u8(v0_1, 4));\n\n        // load y\n        const int8x16_t v1_0l = vld1q_s8(y0->qs);\n        const int8x16_t v1_0h = vld1q_s8(y0->qs + 16);\n        const int8x16_t v1_1l = vld1q_s8(y1->qs);\n        const int8x16_t v1_1h = vld1q_s8(y1->qs + 16);\n\n        // dot product into int32x4_t\n        const int32x4_t p_0 = ggml_vdotq_s32(ggml_vdotq_s32(vdupq_n_s32(0), v0_0l, v1_0l), v0_0h, v1_0h);\n        const int32x4_t p_1 = ggml_vdotq_s32(ggml_vdotq_s32(vdupq_n_s32(0), v0_1l, v1_1l), v0_1h, v1_1h);\n\n        sumv0 = vmlaq_n_f32(sumv0, vcvtq_f32_s32(p_0), GGML_FP16_TO_FP32(x0->d)*GGML_FP16_TO_FP32(y0->d));\n        sumv1 = vmlaq_n_f32(sumv1, vcvtq_f32_s32(p_1), GGML_FP16_TO_FP32(x1->d)*GGML_FP16_TO_FP32(y1->d));\n    }\n\n    sumf = vaddvq_f32(sumv0) + vaddvq_f32(sumv1) + summs;\n#elif defined(__AVX2__) || defined(__AVX__)\n    // Initialize accumulator with zeros\n    __m256 acc = _mm256_setzero_ps();\n\n    float summs = 0;\n\n    // Main loop\n    for (; ib < nb; ++ib) {\n        const float d0 = GGML_FP16_TO_FP32(x[ib].d);\n        const float d1 = GGML_FP16_TO_FP32(y[ib].d);\n\n        summs += GGML_FP16_TO_FP32(x[ib].m) * GGML_FP16_TO_FP32(y[ib].s);\n\n        const __m256 d0v = _mm256_set1_ps( d0 );\n        const __m256 d1v = _mm256_set1_ps( d1 );\n\n        // Compute combined scales\n        const __m256 d0d1 = _mm256_mul_ps( d0v, d1v );\n\n        // Load 16 bytes, and unpack 4 bit fields into bytes, making 32 bytes\n        const __m256i qx = bytes_from_nibbles_32(x[ib].qs);\n        const __m256i qy = _mm256_loadu_si256( (const __m256i *)y[ib].qs );\n\n        const __m256 xy = mul_sum_us8_pairs_float(qx, qy);\n\n        // Accumulate d0*d1*x*y\n#if defined(__AVX2__)\n        acc = _mm256_fmadd_ps( d0d1, xy, acc );\n#else\n        acc = _mm256_add_ps( _mm256_mul_ps( d0d1, xy ), acc );\n#endif\n    }\n\n    sumf = hsum_float_8(acc) + summs;\n#elif defined(__riscv_v_intrinsic)\n    size_t vl = __riscv_vsetvl_e8m1(qk/2);\n\n    for (; ib < nb; ++ib) {\n        // load elements\n        vuint8mf2_t tx = __riscv_vle8_v_u8mf2(x[ib].qs, vl);\n\n        vint8mf2_t y0 = __riscv_vle8_v_i8mf2(y[ib].qs, vl);\n        vint8mf2_t y1 = __riscv_vle8_v_i8mf2(y[ib].qs+16, vl);\n\n        // mask and store lower part of x, and then upper part\n        vuint8mf2_t x_a = __riscv_vand_vx_u8mf2(tx, 0x0F, vl);\n        vuint8mf2_t x_l = __riscv_vsrl_vx_u8mf2(tx, 0x04, vl);\n\n        vint8mf2_t v0 = __riscv_vreinterpret_v_u8mf2_i8mf2(x_a);\n        vint8mf2_t v1 = __riscv_vreinterpret_v_u8mf2_i8mf2(x_l);\n\n        vint16m1_t vec_mul1 = __riscv_vwmul_vv_i16m1(v0, y0, vl);\n        vint16m1_t vec_mul2 = __riscv_vwmul_vv_i16m1(v1, y1, vl);\n\n        vint32m1_t vec_zero = __riscv_vmv_v_x_i32m1(0, vl);\n\n        vint32m1_t vs1 = __riscv_vwredsum_vs_i16m1_i32m1(vec_mul1, vec_zero, vl);\n        vint32m1_t vs2 = __riscv_vwredsum_vs_i16m1_i32m1(vec_mul2, vs1, vl);\n\n        int sumi = __riscv_vmv_x_s_i32m1_i32(vs2);\n\n        sumf += (GGML_FP16_TO_FP32(x[ib].d)*GGML_FP16_TO_FP32(y[ib].d))*sumi + GGML_FP16_TO_FP32(x[ib].m)*GGML_FP16_TO_FP32(y[ib].s);\n    }\n\n#elif defined(__POWER9_VECTOR__)\n    const vector signed char lowMask = vec_splats((signed char)0xF);\n    const vector signed int v0 = vec_splats((int32_t)0);\n    const vector unsigned char v4 = vec_splats((unsigned char)0x4);\n\n    vector float vsumf0 = vec_splats(0.0f);\n\n#pragma GCC unroll 4\n    for (; ib < nb; ++ib) {\n        __builtin_prefetch(x[ib].qs, 0, 1);\n        __builtin_prefetch(y[ib].qs, 0, 1);\n\n        vector float vxd = vec_splats(GGML_FP16_TO_FP32(x[ib].d));\n        vector float vyd = vec_splats(GGML_FP16_TO_FP32(y[ib].d));\n        vector float vd = vec_mul(vxd, vyd);\n\n        vector float vxmin = vec_splats(GGML_FP16_TO_FP32(x[ib].m));\n        vector float vys = {GGML_FP16_TO_FP32(y[ib].s), 0.0f, 0.0f, 0.0f};\n        vsumf0 = vec_madd(vxmin, vys, vsumf0);\n\n        vector signed char qxs = (vector signed char)vec_xl( 0, x[ib].qs);\n        vector signed char q8y0 = vec_xl( 0, y[ib].qs);\n        vector signed char q8y1 = vec_xl(16, y[ib].qs);\n\n        vector unsigned char q4x0 = (vector unsigned char)vec_and(qxs, lowMask);\n        vector unsigned char q4x1 = (vector unsigned char)vec_sr(qxs, v4);\n\n        vector signed int vsumi0 = v0;\n\n        vsumi0 = vec_msum(q8y0, q4x0, vsumi0);\n        vsumi0 = vec_msum(q8y1, q4x1, vsumi0);\n\n        vsumf0 = vec_madd(vec_ctf(vsumi0, 0), vd, vsumf0);\n    }\n\n    vsumf0 = vec_add(vsumf0, vec_sld(vsumf0, vsumf0, 4));\n    vsumf0 = vec_add(vsumf0, vec_sld(vsumf0, vsumf0, 8));\n\n    sumf = vec_extract(vsumf0, 0);\n\n#elif defined(__loongarch_asx)\n    // Initialize accumulator with zeros\n    __m256 acc = (__m256)__lasx_xvldi(0);\n\n    float summs = 0;\n\n    // Main loop\n    for (; ib < nb; ++ib) {\n        const float d0 = GGML_FP16_TO_FP32(x[ib].d);\n        const float d1 = GGML_FP16_TO_FP32(y[ib].d);\n\n        summs += GGML_FP16_TO_FP32(x[ib].m) * GGML_FP16_TO_FP32(y[ib].s);\n\n        const __m256 d0v = __lasx_xvreplfr2vr_s( d0 );\n        const __m256 d1v = __lasx_xvreplfr2vr_s( d1 );\n\n        // Compute combined scales\n        const __m256 d0d1 = __lasx_xvfmul_s( d0v, d1v );\n\n        // Load 16 bytes, and unpack 4 bit fields into bytes, making 32 bytes\n        const __m256i qx = bytes_from_nibbles_32(x[ib].qs);\n        const __m256i qy = __lasx_xvld( (const __m256i *)y[ib].qs, 0);\n\n        const __m256 xy = mul_sum_us8_pairs_float(qx, qy);\n\n        // Accumulate d0*d1*x*y\n        acc = __lasx_xvfmadd_s( d0d1, xy, acc );\n    }\n\n    sumf = hsum_float_8(acc) + summs;\n#endif\n    for (; ib < nb; ++ib) {\n        int sumi0 = 0;\n        int sumi1 = 0;\n\n        for (int j = 0; j < qk/2; ++j) {\n            const int v0 = (x[ib].qs[j] & 0x0F);\n            const int v1 = (x[ib].qs[j] >>   4);\n\n            sumi0 += (v0 * y[ib].qs[j]);\n            sumi1 += (v1 * y[ib].qs[j + qk/2]);\n        }\n\n        int sumi = sumi0 + sumi1;\n        sumf += (GGML_FP16_TO_FP32(x[ib].d)*GGML_FP16_TO_FP32(y[ib].d))*sumi + GGML_FP16_TO_FP32(x[ib].m)*GGML_FP16_TO_FP32(y[ib].s);\n    }\n\n    *s = sumf;\n}\n\nvoid ggml_vec_dot_q5_0_q8_0(int n, float * restrict s, size_t bs, const void * restrict vx, size_t bx, const void * restrict vy, size_t by, int nrc) {\n    const int qk = QK8_0;\n    const int nb = n / qk;\n\n    int ib = 0;\n    float sumf = 0;\n\n    assert(n % qk == 0);\n    assert(qk == QK5_0);\n    assert(nrc == 1);\n    UNUSED(nrc);\n    UNUSED(bx);\n    UNUSED(by);\n    UNUSED(bs);\n\n    const block_q5_0 * restrict x = vx;\n    const block_q8_0 * restrict y = vy;\n\n#if defined(__ARM_NEON)\n    float32x4_t sumv0 = vdupq_n_f32(0.0f);\n    float32x4_t sumv1 = vdupq_n_f32(0.0f);\n\n    uint32_t qh0;\n    uint32_t qh1;\n\n    uint64_t tmp0[4];\n    uint64_t tmp1[4];\n\n    for (; ib + 1 < nb; ib += 2) {\n        const block_q5_0 * restrict x0 = &x[ib];\n        const block_q5_0 * restrict x1 = &x[ib + 1];\n        const block_q8_0 * restrict y0 = &y[ib];\n        const block_q8_0 * restrict y1 = &y[ib + 1];\n\n        const uint8x16_t m4b = vdupq_n_u8(0x0F);\n\n        // extract the 5th bit via lookup table ((!b) << 4)\n        memcpy(&qh0, x0->qh, sizeof(qh0));\n        memcpy(&qh1, x1->qh, sizeof(qh1));\n\n        tmp0[0] = table_b2b_1[(qh0 >>  0) & 0xFF];\n        tmp0[1] = table_b2b_1[(qh0 >>  8) & 0xFF];\n        tmp0[2] = table_b2b_1[(qh0 >> 16) & 0xFF];\n        tmp0[3] = table_b2b_1[(qh0 >> 24)       ];\n\n        tmp1[0] = table_b2b_1[(qh1 >>  0) & 0xFF];\n        tmp1[1] = table_b2b_1[(qh1 >>  8) & 0xFF];\n        tmp1[2] = table_b2b_1[(qh1 >> 16) & 0xFF];\n        tmp1[3] = table_b2b_1[(qh1 >> 24)       ];\n\n        const int8x16_t qhl0 = vld1q_s8((const int8_t *)(tmp0 + 0));\n        const int8x16_t qhh0 = vld1q_s8((const int8_t *)(tmp0 + 2));\n        const int8x16_t qhl1 = vld1q_s8((const int8_t *)(tmp1 + 0));\n        const int8x16_t qhh1 = vld1q_s8((const int8_t *)(tmp1 + 2));\n\n        const uint8x16_t v0_0 = vld1q_u8(x0->qs);\n        const uint8x16_t v0_1 = vld1q_u8(x1->qs);\n\n        // 4-bit -> 8-bit\n        int8x16_t v0_0l = vreinterpretq_s8_u8(vandq_u8  (v0_0, m4b));\n        int8x16_t v0_0h = vreinterpretq_s8_u8(vshrq_n_u8(v0_0, 4));\n        int8x16_t v0_1l = vreinterpretq_s8_u8(vandq_u8  (v0_1, m4b));\n        int8x16_t v0_1h = vreinterpretq_s8_u8(vshrq_n_u8(v0_1, 4));\n\n        // add high bit and sub 16 (equivalent to sub 0x10 when bit is zero)\n        const int8x16_t v0_0lf = vsubq_s8(v0_0l, qhl0);\n        const int8x16_t v0_0hf = vsubq_s8(v0_0h, qhh0);\n        const int8x16_t v0_1lf = vsubq_s8(v0_1l, qhl1);\n        const int8x16_t v0_1hf = vsubq_s8(v0_1h, qhh1);\n\n        // load y\n        const int8x16_t v1_0l = vld1q_s8(y0->qs);\n        const int8x16_t v1_0h = vld1q_s8(y0->qs + 16);\n        const int8x16_t v1_1l = vld1q_s8(y1->qs);\n        const int8x16_t v1_1h = vld1q_s8(y1->qs + 16);\n\n        sumv0 = vmlaq_n_f32(sumv0, vcvtq_f32_s32(vaddq_s32(\n                        ggml_vdotq_s32(vdupq_n_s32(0), v0_0lf, v1_0l),\n                        ggml_vdotq_s32(vdupq_n_s32(0), v0_0hf, v1_0h))), GGML_FP16_TO_FP32(x0->d)*GGML_FP16_TO_FP32(y0->d));\n        sumv1 = vmlaq_n_f32(sumv1, vcvtq_f32_s32(vaddq_s32(\n                        ggml_vdotq_s32(vdupq_n_s32(0), v0_1lf, v1_1l),\n                        ggml_vdotq_s32(vdupq_n_s32(0), v0_1hf, v1_1h))), GGML_FP16_TO_FP32(x1->d)*GGML_FP16_TO_FP32(y1->d));\n    }\n\n    sumf = vaddvq_f32(sumv0) + vaddvq_f32(sumv1);\n#elif defined(__wasm_simd128__)\n    v128_t sumv = wasm_f32x4_splat(0.0f);\n\n    uint32_t qh;\n    uint64_t tmp[4];\n\n    // TODO: check if unrolling this is better\n    for (; ib < nb; ++ib) {\n        const block_q5_0 * restrict x0 = &x[ib];\n        const block_q8_0 * restrict y0 = &y[ib];\n\n        const v128_t m4b  = wasm_i8x16_splat(0x0F);\n\n        // extract the 5th bit\n        memcpy(&qh, x0->qh, sizeof(qh));\n\n        tmp[0] = table_b2b_1[(qh >>  0) & 0xFF];\n        tmp[1] = table_b2b_1[(qh >>  8) & 0xFF];\n        tmp[2] = table_b2b_1[(qh >> 16) & 0xFF];\n        tmp[3] = table_b2b_1[(qh >> 24)       ];\n\n        const v128_t qhl = wasm_v128_load(tmp + 0);\n        const v128_t qhh = wasm_v128_load(tmp + 2);\n\n        const v128_t v0 = wasm_v128_load(x0->qs);\n\n        // 4-bit -> 8-bit\n        const v128_t v0l = wasm_v128_and (v0, m4b);\n        const v128_t v0h = wasm_u8x16_shr(v0, 4);\n\n        // add high bit and sub 16 (equivalent to sub 0x10 when bit is zero)\n        const v128_t v0lf = wasm_i8x16_sub(v0l, qhl);\n        const v128_t v0hf = wasm_i8x16_sub(v0h, qhh);\n\n        // load y\n        const v128_t v1l = wasm_v128_load(y0->qs);\n        const v128_t v1h = wasm_v128_load(y0->qs + 16);\n\n        // int8x16 -> int16x8\n        const v128_t v0lfl = wasm_i16x8_extend_low_i8x16 (v0lf);\n        const v128_t v0lfh = wasm_i16x8_extend_high_i8x16(v0lf);\n        const v128_t v0hfl = wasm_i16x8_extend_low_i8x16 (v0hf);\n        const v128_t v0hfh = wasm_i16x8_extend_high_i8x16(v0hf);\n\n        const v128_t v1ll = wasm_i16x8_extend_low_i8x16 (v1l);\n        const v128_t v1lh = wasm_i16x8_extend_high_i8x16(v1l);\n        const v128_t v1hl = wasm_i16x8_extend_low_i8x16 (v1h);\n        const v128_t v1hh = wasm_i16x8_extend_high_i8x16(v1h);\n\n        // dot product\n        sumv = wasm_f32x4_add(sumv, wasm_f32x4_mul(wasm_f32x4_convert_i32x4(\n                        wasm_i32x4_add(\n                            wasm_i32x4_add(wasm_i32x4_dot_i16x8(v0lfl, v1ll),\n                                           wasm_i32x4_dot_i16x8(v0lfh, v1lh)),\n                            wasm_i32x4_add(wasm_i32x4_dot_i16x8(v0hfl, v1hl),\n                                           wasm_i32x4_dot_i16x8(v0hfh, v1hh)))),\n                    wasm_f32x4_splat(GGML_FP16_TO_FP32(x0->d) * GGML_FP16_TO_FP32(y0->d))));\n    }\n\n    sumf = wasm_f32x4_extract_lane(sumv, 0) + wasm_f32x4_extract_lane(sumv, 1) +\n           wasm_f32x4_extract_lane(sumv, 2) + wasm_f32x4_extract_lane(sumv, 3);\n#elif defined(__AVX2__)\n    // Initialize accumulator with zeros\n    __m256 acc = _mm256_setzero_ps();\n\n    // Main loop\n    for (; ib < nb; ++ib) {\n        /* Compute combined scale for the block */\n        const __m256 d = _mm256_set1_ps(GGML_FP16_TO_FP32(x[ib].d) * GGML_FP16_TO_FP32(y[ib].d));\n\n        __m256i qx = bytes_from_nibbles_32(x[ib].qs);\n        __m256i bxhi = bytes_from_bits_32(x[ib].qh);\n        bxhi = _mm256_andnot_si256(bxhi, _mm256_set1_epi8((char)0xF0));\n        qx = _mm256_or_si256(qx, bxhi);\n\n        __m256i qy = _mm256_loadu_si256((const __m256i *)y[ib].qs);\n\n        const __m256 q = mul_sum_i8_pairs_float(qx, qy);\n\n        /* Multiply q with scale and accumulate */\n        acc = _mm256_fmadd_ps(d, q, acc);\n    }\n\n    sumf = hsum_float_8(acc);\n#elif defined(__AVX__)\n    // Initialize accumulator with zeros\n    __m256 acc = _mm256_setzero_ps();\n    __m128i mask = _mm_set1_epi8((char)0xF0);\n\n    // Main loop\n    for (; ib < nb; ++ib) {\n        /* Compute combined scale for the block */\n        const __m256 d = _mm256_set1_ps(GGML_FP16_TO_FP32(x[ib].d) * GGML_FP16_TO_FP32(y[ib].d));\n\n        __m256i bx_0 = bytes_from_nibbles_32(x[ib].qs);\n        const __m256i bxhi = bytes_from_bits_32(x[ib].qh);\n        __m128i bxhil = _mm256_castsi256_si128(bxhi);\n        __m128i bxhih = _mm256_extractf128_si256(bxhi, 1);\n        bxhil = _mm_andnot_si128(bxhil, mask);\n        bxhih = _mm_andnot_si128(bxhih, mask);\n        __m128i bxl = _mm256_castsi256_si128(bx_0);\n        __m128i bxh = _mm256_extractf128_si256(bx_0, 1);\n        bxl = _mm_or_si128(bxl, bxhil);\n        bxh = _mm_or_si128(bxh, bxhih);\n        bx_0 = MM256_SET_M128I(bxh, bxl);\n\n        const __m256i by_0 = _mm256_loadu_si256((const __m256i *)y[ib].qs);\n\n        const __m256 q = mul_sum_i8_pairs_float(bx_0, by_0);\n\n        /* Multiply q with scale and accumulate */\n        acc = _mm256_add_ps(_mm256_mul_ps(d, q), acc);\n    }\n\n    sumf = hsum_float_8(acc);\n#elif defined(__riscv_v_intrinsic)\n    uint32_t qh;\n\n    size_t vl = __riscv_vsetvl_e8m1(qk/2);\n\n    // These temporary registers are for masking and shift operations\n    vuint32m2_t vt_1 = __riscv_vid_v_u32m2(vl);\n    vuint32m2_t vt_2 = __riscv_vsll_vv_u32m2(__riscv_vmv_v_x_u32m2(1, vl), vt_1, vl);\n\n    vuint32m2_t vt_3 = __riscv_vsll_vx_u32m2(vt_2, 16, vl);\n    vuint32m2_t vt_4 = __riscv_vadd_vx_u32m2(vt_1, 12, vl);\n\n    for (; ib < nb; ++ib) {\n        memcpy(&qh, x[ib].qh, sizeof(uint32_t));\n\n        // ((qh & (1u << (j + 0 ))) >> (j + 0 )) << 4;\n        vuint32m2_t xha_0 = __riscv_vand_vx_u32m2(vt_2, qh, vl);\n        vuint32m2_t xhr_0 = __riscv_vsrl_vv_u32m2(xha_0, vt_1, vl);\n        vuint32m2_t xhl_0 = __riscv_vsll_vx_u32m2(xhr_0, 4, vl);\n\n        // ((qh & (1u << (j + 16))) >> (j + 12));\n        vuint32m2_t xha_1 = __riscv_vand_vx_u32m2(vt_3, qh, vl);\n        vuint32m2_t xhl_1 = __riscv_vsrl_vv_u32m2(xha_1, vt_4, vl);\n\n        // narrowing\n        vuint16m1_t xhc_0 = __riscv_vncvt_x_x_w_u16m1(xhl_0, vl);\n        vuint8mf2_t xh_0 = __riscv_vncvt_x_x_w_u8mf2(xhc_0, vl);\n\n        vuint16m1_t xhc_1 = __riscv_vncvt_x_x_w_u16m1(xhl_1, vl);\n        vuint8mf2_t xh_1 = __riscv_vncvt_x_x_w_u8mf2(xhc_1, vl);\n\n        // load\n        vuint8mf2_t tx = __riscv_vle8_v_u8mf2(x[ib].qs, vl);\n\n        vint8mf2_t y0 = __riscv_vle8_v_i8mf2(y[ib].qs, vl);\n        vint8mf2_t y1 = __riscv_vle8_v_i8mf2(y[ib].qs+16, vl);\n\n        vuint8mf2_t x_at = __riscv_vand_vx_u8mf2(tx, 0x0F, vl);\n        vuint8mf2_t x_lt = __riscv_vsrl_vx_u8mf2(tx, 0x04, vl);\n\n        vuint8mf2_t x_a = __riscv_vor_vv_u8mf2(x_at, xh_0, vl);\n        vuint8mf2_t x_l = __riscv_vor_vv_u8mf2(x_lt, xh_1, vl);\n\n        vint8mf2_t x_ai = __riscv_vreinterpret_v_u8mf2_i8mf2(x_a);\n        vint8mf2_t x_li = __riscv_vreinterpret_v_u8mf2_i8mf2(x_l);\n\n        vint8mf2_t v0 = __riscv_vsub_vx_i8mf2(x_ai, 16, vl);\n        vint8mf2_t v1 = __riscv_vsub_vx_i8mf2(x_li, 16, vl);\n\n        vint16m1_t vec_mul1 = __riscv_vwmul_vv_i16m1(v0, y0, vl);\n        vint16m1_t vec_mul2 = __riscv_vwmul_vv_i16m1(v1, y1, vl);\n\n        vint32m1_t vec_zero = __riscv_vmv_v_x_i32m1(0, vl);\n\n        vint32m1_t vs1 = __riscv_vwredsum_vs_i16m1_i32m1(vec_mul1, vec_zero, vl);\n        vint32m1_t vs2 = __riscv_vwredsum_vs_i16m1_i32m1(vec_mul2, vs1, vl);\n\n        int sumi = __riscv_vmv_x_s_i32m1_i32(vs2);\n\n        sumf += (GGML_FP16_TO_FP32(x[ib].d)*GGML_FP16_TO_FP32(y[ib].d)) * sumi;\n    }\n\n#elif defined(__POWER9_VECTOR__)\n    const vector signed char lowMask = vec_splats((signed char)0xF);\n    const vector unsigned char v4 = vec_splats((unsigned char)4);\n\n    vector float vsumf0 = vec_splats(0.0f);\n\n#pragma GCC unroll 4\n    for (; ib < nb; ++ib) {\n        __builtin_prefetch(x[ib].qs, 0, 1);\n        __builtin_prefetch(y[ib].qs, 0, 1);\n\n        vector float vxd = vec_splats(GGML_FP16_TO_FP32(x[ib].d));\n        vector float vyd = vec_splats(GGML_FP16_TO_FP32(y[ib].d));\n        vector float vd = vec_mul(vxd, vyd);\n\n        vector signed long long aux64x2_0 = {(uint64_t)(table_b2b_1[x[ib].qh[0]]), (uint64_t)(table_b2b_1[x[ib].qh[1]])};\n        vector signed long long aux64x2_1 = {(uint64_t)(table_b2b_1[x[ib].qh[2]]), (uint64_t)(table_b2b_1[x[ib].qh[3]])};\n\n        vector signed char qh0 = (vector signed char)aux64x2_0;\n        vector signed char qh1 = (vector signed char)aux64x2_1;\n\n        vector signed char qxs = (vector signed char)vec_xl( 0, x[ib].qs);\n\n        vector signed char q5x0 = vec_sub(vec_and (qxs, lowMask), qh0);\n        vector signed char q5x1 = vec_sub(vec_sr(qxs, v4), qh1);\n\n        vector signed char q8y0 = vec_xl(  0, y[ib].qs);\n        vector signed char q8y1 = vec_xl( 16, y[ib].qs);\n\n        vector signed short qv0 = vec_add(vec_mule(q5x0, q8y0), vec_mulo(q5x0, q8y0));\n        vector signed short qv1 = vec_add(vec_mule(q5x1, q8y1), vec_mulo(q5x1, q8y1));\n\n        qv0 = vec_add(qv0, qv1);\n\n        vector signed int vsumi0 = vec_add(vec_unpackh(qv0), vec_unpackl(qv0));\n\n        vsumf0 = vec_madd(vec_ctf(vsumi0, 0), vd, vsumf0);\n    }\n\n    vsumf0 = vec_add(vsumf0, vec_sld(vsumf0, vsumf0, 4));\n    vsumf0 = vec_add(vsumf0, vec_sld(vsumf0, vsumf0, 8));\n\n    sumf = vec_extract(vsumf0, 0);\n\n#elif defined(__loongarch_asx)\n    // Initialize accumulator with zeros\n    __m256 acc = (__m256)__lasx_xvldi(0);\n\n    // Main loop\n    for (; ib < nb; ++ib) {\n        /* Compute combined scale for the block */\n        const __m256 d = __lasx_xvreplfr2vr_s(GGML_FP16_TO_FP32(x[ib].d) * GGML_FP16_TO_FP32(y[ib].d)); //FIXME\n\n        __m256i qx = bytes_from_nibbles_32(x[ib].qs);\n        __m256i bxhi = bytes_from_bits_32(x[ib].qh);\n        bxhi = __lasx_xvandn_v(bxhi, __lasx_xvreplgr2vr_b((char)0xF0));\n        qx = __lasx_xvor_v(qx, bxhi);\n\n        __m256i qy = __lasx_xvld((const __m256i *)y[ib].qs, 0);\n\n        const __m256 q = mul_sum_i8_pairs_float(qx, qy);\n\n        /* Multiply q with scale and accumulate */\n        acc = __lasx_xvfmadd_s(d, q, acc);\n    }\n\n    sumf = hsum_float_8(acc);\n#endif\n    for (; ib < nb; ++ib) {\n        uint32_t qh;\n        memcpy(&qh, x[ib].qh, sizeof(qh));\n\n        int sumi0 = 0;\n        int sumi1 = 0;\n\n        for (int j = 0; j < qk/2; ++j) {\n            const uint8_t xh_0 = ((qh & (1u << (j + 0 ))) >> (j + 0 )) << 4;\n            const uint8_t xh_1 = ((qh & (1u << (j + 16))) >> (j + 12));\n\n            const int32_t x0 = (int8_t)(((x[ib].qs[j] & 0x0F) | xh_0) - 16);\n            const int32_t x1 = (int8_t)(((x[ib].qs[j] >>   4) | xh_1) - 16);\n\n            sumi0 += (x0 * y[ib].qs[j]);\n            sumi1 += (x1 * y[ib].qs[j + qk/2]);\n        }\n\n        int sumi = sumi0 + sumi1;\n        sumf += (GGML_FP16_TO_FP32(x[ib].d)*GGML_FP16_TO_FP32(y[ib].d)) * sumi;\n    }\n\n    *s = sumf;\n}\n\nvoid ggml_vec_dot_q5_1_q8_1(int n, float * restrict s, size_t bs, const void * restrict vx, size_t bx, const void * restrict vy, size_t by, int nrc) {\n    const int qk = QK8_1;\n    const int nb = n / qk;\n\n    int ib = 0;\n    float sumf = 0;\n\n    assert(n % qk == 0);\n    assert(qk == QK5_1);\n    assert(nrc == 1);\n    UNUSED(nrc);\n    UNUSED(bx);\n    UNUSED(by);\n    UNUSED(bs);\n\n    const block_q5_1 * restrict x = vx;\n    const block_q8_1 * restrict y = vy;\n\n#if defined(__ARM_NEON)\n    float32x4_t sumv0 = vdupq_n_f32(0.0f);\n    float32x4_t sumv1 = vdupq_n_f32(0.0f);\n\n    float summs0 = 0.0f;\n    float summs1 = 0.0f;\n\n    uint32_t qh0;\n    uint32_t qh1;\n\n    uint64_t tmp0[4];\n    uint64_t tmp1[4];\n\n    for (; ib + 1 < nb; ib += 2) {\n        const block_q5_1 * restrict x0 = &x[ib];\n        const block_q5_1 * restrict x1 = &x[ib + 1];\n        const block_q8_1 * restrict y0 = &y[ib];\n        const block_q8_1 * restrict y1 = &y[ib + 1];\n\n        const uint8x16_t m4b = vdupq_n_u8(0x0F);\n\n        summs0 += GGML_FP16_TO_FP32(x0->m) * GGML_FP16_TO_FP32(y0->s);\n        summs1 += GGML_FP16_TO_FP32(x1->m) * GGML_FP16_TO_FP32(y1->s);\n\n        // extract the 5th bit via lookup table ((b) << 4)\n        memcpy(&qh0, x0->qh, sizeof(qh0));\n        memcpy(&qh1, x1->qh, sizeof(qh1));\n\n        tmp0[0] = table_b2b_0[(qh0 >>  0) & 0xFF];\n        tmp0[1] = table_b2b_0[(qh0 >>  8) & 0xFF];\n        tmp0[2] = table_b2b_0[(qh0 >> 16) & 0xFF];\n        tmp0[3] = table_b2b_0[(qh0 >> 24)       ];\n\n        tmp1[0] = table_b2b_0[(qh1 >>  0) & 0xFF];\n        tmp1[1] = table_b2b_0[(qh1 >>  8) & 0xFF];\n        tmp1[2] = table_b2b_0[(qh1 >> 16) & 0xFF];\n        tmp1[3] = table_b2b_0[(qh1 >> 24)       ];\n\n        const int8x16_t qhl0 = vld1q_s8((const int8_t *)(tmp0 + 0));\n        const int8x16_t qhh0 = vld1q_s8((const int8_t *)(tmp0 + 2));\n        const int8x16_t qhl1 = vld1q_s8((const int8_t *)(tmp1 + 0));\n        const int8x16_t qhh1 = vld1q_s8((const int8_t *)(tmp1 + 2));\n\n        const uint8x16_t v0_0 = vld1q_u8(x0->qs);\n        const uint8x16_t v0_1 = vld1q_u8(x1->qs);\n\n        // 4-bit -> 8-bit\n        const int8x16_t v0_0l = vreinterpretq_s8_u8(vandq_u8  (v0_0, m4b));\n        const int8x16_t v0_0h = vreinterpretq_s8_u8(vshrq_n_u8(v0_0, 4));\n        const int8x16_t v0_1l = vreinterpretq_s8_u8(vandq_u8  (v0_1, m4b));\n        const int8x16_t v0_1h = vreinterpretq_s8_u8(vshrq_n_u8(v0_1, 4));\n\n        // add high bit\n        const int8x16_t v0_0lf = vorrq_s8(v0_0l, qhl0);\n        const int8x16_t v0_0hf = vorrq_s8(v0_0h, qhh0);\n        const int8x16_t v0_1lf = vorrq_s8(v0_1l, qhl1);\n        const int8x16_t v0_1hf = vorrq_s8(v0_1h, qhh1);\n\n        // load y\n        const int8x16_t v1_0l = vld1q_s8(y0->qs);\n        const int8x16_t v1_0h = vld1q_s8(y0->qs + 16);\n        const int8x16_t v1_1l = vld1q_s8(y1->qs);\n        const int8x16_t v1_1h = vld1q_s8(y1->qs + 16);\n\n        sumv0 = vmlaq_n_f32(sumv0, vcvtq_f32_s32(vaddq_s32(\n                        ggml_vdotq_s32(vdupq_n_s32(0), v0_0lf, v1_0l),\n                        ggml_vdotq_s32(vdupq_n_s32(0), v0_0hf, v1_0h))), GGML_FP16_TO_FP32(x0->d)*GGML_FP16_TO_FP32(y0->d));\n        sumv1 = vmlaq_n_f32(sumv1, vcvtq_f32_s32(vaddq_s32(\n                        ggml_vdotq_s32(vdupq_n_s32(0), v0_1lf, v1_1l),\n                        ggml_vdotq_s32(vdupq_n_s32(0), v0_1hf, v1_1h))), GGML_FP16_TO_FP32(x1->d)*GGML_FP16_TO_FP32(y1->d));\n    }\n\n    sumf = vaddvq_f32(sumv0) + vaddvq_f32(sumv1) + summs0 + summs1;\n#elif defined(__wasm_simd128__)\n    v128_t sumv = wasm_f32x4_splat(0.0f);\n\n    float summs = 0.0f;\n\n    uint32_t qh;\n    uint64_t tmp[4];\n\n    // TODO: check if unrolling this is better\n    for (; ib < nb; ++ib) {\n        const block_q5_1 * restrict x0 = &x[ib];\n        const block_q8_1 * restrict y0 = &y[ib];\n\n        summs += GGML_FP16_TO_FP32(x0->m) * GGML_FP16_TO_FP32(y0->s);\n\n        const v128_t m4b = wasm_i8x16_splat(0x0F);\n\n        // extract the 5th bit\n        memcpy(&qh, x0->qh, sizeof(qh));\n\n        tmp[0] = table_b2b_0[(qh >>  0) & 0xFF];\n        tmp[1] = table_b2b_0[(qh >>  8) & 0xFF];\n        tmp[2] = table_b2b_0[(qh >> 16) & 0xFF];\n        tmp[3] = table_b2b_0[(qh >> 24)       ];\n\n        const v128_t qhl = wasm_v128_load(tmp + 0);\n        const v128_t qhh = wasm_v128_load(tmp + 2);\n\n        const v128_t v0 = wasm_v128_load(x0->qs);\n\n        // 4-bit -> 8-bit\n        const v128_t v0l = wasm_v128_and (v0, m4b);\n        const v128_t v0h = wasm_u8x16_shr(v0, 4);\n\n        // add high bit\n        const v128_t v0lf = wasm_v128_or(v0l, qhl);\n        const v128_t v0hf = wasm_v128_or(v0h, qhh);\n\n        // load y\n        const v128_t v1l = wasm_v128_load(y0->qs);\n        const v128_t v1h = wasm_v128_load(y0->qs + 16);\n\n        // int8x16 -> int16x8\n        const v128_t v0lfl = wasm_i16x8_extend_low_i8x16 (v0lf);\n        const v128_t v0lfh = wasm_i16x8_extend_high_i8x16(v0lf);\n        const v128_t v0hfl = wasm_i16x8_extend_low_i8x16 (v0hf);\n        const v128_t v0hfh = wasm_i16x8_extend_high_i8x16(v0hf);\n\n        const v128_t v1ll = wasm_i16x8_extend_low_i8x16 (v1l);\n        const v128_t v1lh = wasm_i16x8_extend_high_i8x16(v1l);\n        const v128_t v1hl = wasm_i16x8_extend_low_i8x16 (v1h);\n        const v128_t v1hh = wasm_i16x8_extend_high_i8x16(v1h);\n\n        // dot product\n        sumv = wasm_f32x4_add(sumv,\n                wasm_f32x4_mul(wasm_f32x4_convert_i32x4(wasm_i32x4_add(\n                            wasm_i32x4_add(wasm_i32x4_dot_i16x8(v0lfl, v1ll),\n                                           wasm_i32x4_dot_i16x8(v0lfh, v1lh)),\n                            wasm_i32x4_add(wasm_i32x4_dot_i16x8(v0hfl, v1hl),\n                                           wasm_i32x4_dot_i16x8(v0hfh, v1hh)))),\n                    wasm_f32x4_splat(GGML_FP16_TO_FP32(x0->d) * GGML_FP16_TO_FP32(y0->d))));\n    }\n\n    sumf = wasm_f32x4_extract_lane(sumv, 0) + wasm_f32x4_extract_lane(sumv, 1) +\n           wasm_f32x4_extract_lane(sumv, 2) + wasm_f32x4_extract_lane(sumv, 3) + summs;\n#elif defined(__AVX2__)\n    // Initialize accumulator with zeros\n    __m256 acc = _mm256_setzero_ps();\n\n    float summs = 0.0f;\n\n    // Main loop\n    for (; ib < nb; ++ib) {\n        const __m256 dx = _mm256_set1_ps(GGML_FP16_TO_FP32(x[ib].d));\n\n        summs += GGML_FP16_TO_FP32(x[ib].m) * GGML_FP16_TO_FP32(y[ib].s);\n\n        __m256i qx = bytes_from_nibbles_32(x[ib].qs);\n        __m256i bxhi = bytes_from_bits_32(x[ib].qh);\n        bxhi = _mm256_and_si256(bxhi, _mm256_set1_epi8(0x10));\n        qx = _mm256_or_si256(qx, bxhi);\n\n        const __m256 dy = _mm256_set1_ps(GGML_FP16_TO_FP32(y[ib].d));\n        const __m256i qy = _mm256_loadu_si256((const __m256i *)y[ib].qs);\n\n        const __m256 q = mul_sum_us8_pairs_float(qx, qy);\n\n        acc = _mm256_fmadd_ps(q, _mm256_mul_ps(dx, dy), acc);\n    }\n\n    sumf = hsum_float_8(acc) + summs;\n#elif defined(__AVX__)\n    // Initialize accumulator with zeros\n    __m256 acc = _mm256_setzero_ps();\n    __m128i mask = _mm_set1_epi8(0x10);\n\n    float summs = 0.0f;\n\n    // Main loop\n    for (; ib < nb; ++ib) {\n        const __m256 dx = _mm256_set1_ps(GGML_FP16_TO_FP32(x[ib].d));\n\n        summs += GGML_FP16_TO_FP32(x[ib].m) * GGML_FP16_TO_FP32(y[ib].s);\n\n        __m256i bx_0 = bytes_from_nibbles_32(x[ib].qs);\n        const __m256i bxhi = bytes_from_bits_32(x[ib].qh);\n        __m128i bxhil = _mm256_castsi256_si128(bxhi);\n        __m128i bxhih = _mm256_extractf128_si256(bxhi, 1);\n        bxhil = _mm_and_si128(bxhil, mask);\n        bxhih = _mm_and_si128(bxhih, mask);\n        __m128i bxl = _mm256_castsi256_si128(bx_0);\n        __m128i bxh = _mm256_extractf128_si256(bx_0, 1);\n        bxl = _mm_or_si128(bxl, bxhil);\n        bxh = _mm_or_si128(bxh, bxhih);\n        bx_0 = MM256_SET_M128I(bxh, bxl);\n\n        const __m256 dy = _mm256_set1_ps(GGML_FP16_TO_FP32(y[ib].d));\n        const __m256i by_0 = _mm256_loadu_si256((const __m256i *)y[ib].qs);\n\n        const __m256 q = mul_sum_us8_pairs_float(bx_0, by_0);\n\n        acc = _mm256_add_ps(_mm256_mul_ps(q, _mm256_mul_ps(dx, dy)), acc);\n    }\n\n    sumf = hsum_float_8(acc) + summs;\n#elif defined(__riscv_v_intrinsic)\n    uint32_t qh;\n\n    size_t vl = __riscv_vsetvl_e8m1(qk/2);\n\n    // temporary registers for shift operations\n    vuint32m2_t vt_1 = __riscv_vid_v_u32m2(vl);\n    vuint32m2_t vt_2 = __riscv_vadd_vx_u32m2(vt_1, 12, vl);\n\n    for (; ib < nb; ++ib) {\n        memcpy(&qh, x[ib].qh, sizeof(uint32_t));\n\n        // load qh\n        vuint32m2_t vqh = __riscv_vmv_v_x_u32m2(qh, vl);\n\n        // ((qh >> (j +  0)) << 4) & 0x10;\n        vuint32m2_t xhr_0 = __riscv_vsrl_vv_u32m2(vqh, vt_1, vl);\n        vuint32m2_t xhl_0 = __riscv_vsll_vx_u32m2(xhr_0, 4, vl);\n        vuint32m2_t xha_0 = __riscv_vand_vx_u32m2(xhl_0, 0x10, vl);\n\n        // ((qh >> (j + 12))     ) & 0x10;\n        vuint32m2_t xhr_1 = __riscv_vsrl_vv_u32m2(vqh, vt_2, vl);\n        vuint32m2_t xha_1 = __riscv_vand_vx_u32m2(xhr_1, 0x10, vl);\n\n        // narrowing\n        vuint16m1_t xhc_0 = __riscv_vncvt_x_x_w_u16m1(xha_0, vl);\n        vuint8mf2_t xh_0 = __riscv_vncvt_x_x_w_u8mf2(xhc_0, vl);\n\n        vuint16m1_t xhc_1 = __riscv_vncvt_x_x_w_u16m1(xha_1, vl);\n        vuint8mf2_t xh_1 = __riscv_vncvt_x_x_w_u8mf2(xhc_1, vl);\n\n        // load\n        vuint8mf2_t tx = __riscv_vle8_v_u8mf2(x[ib].qs, vl);\n\n        vint8mf2_t y0 = __riscv_vle8_v_i8mf2(y[ib].qs, vl);\n        vint8mf2_t y1 = __riscv_vle8_v_i8mf2(y[ib].qs+16, vl);\n\n        vuint8mf2_t x_at = __riscv_vand_vx_u8mf2(tx, 0x0F, vl);\n        vuint8mf2_t x_lt = __riscv_vsrl_vx_u8mf2(tx, 0x04, vl);\n\n        vuint8mf2_t x_a = __riscv_vor_vv_u8mf2(x_at, xh_0, vl);\n        vuint8mf2_t x_l = __riscv_vor_vv_u8mf2(x_lt, xh_1, vl);\n\n        vint8mf2_t v0 = __riscv_vreinterpret_v_u8mf2_i8mf2(x_a);\n        vint8mf2_t v1 = __riscv_vreinterpret_v_u8mf2_i8mf2(x_l);\n\n        vint16m1_t vec_mul1 = __riscv_vwmul_vv_i16m1(v0, y0, vl);\n        vint16m1_t vec_mul2 = __riscv_vwmul_vv_i16m1(v1, y1, vl);\n\n        vint32m1_t vec_zero = __riscv_vmv_v_x_i32m1(0, vl);\n\n        vint32m1_t vs1 = __riscv_vwredsum_vs_i16m1_i32m1(vec_mul1, vec_zero, vl);\n        vint32m1_t vs2 = __riscv_vwredsum_vs_i16m1_i32m1(vec_mul2, vs1, vl);\n\n        int sumi = __riscv_vmv_x_s_i32m1_i32(vs2);\n\n        sumf += (GGML_FP16_TO_FP32(x[ib].d)*GGML_FP16_TO_FP32(y[ib].d))*sumi + GGML_FP16_TO_FP32(x[ib].m)*GGML_FP16_TO_FP32(y[ib].s);\n    }\n\n#elif defined(__POWER9_VECTOR__)\n    const vector signed char lowMask = vec_splats((signed char)0xF);\n    const vector signed int v0 = vec_splats((int32_t)0);\n    const vector unsigned char v4 = vec_splats((unsigned char)0x4);\n\n    vector float vsumf0 = vec_splats(0.0f);\n\n#pragma GCC unroll 4\n    for (; ib < nb; ++ib) {\n        __builtin_prefetch(x[ib].qs, 0, 1);\n        __builtin_prefetch(y[ib].qs, 0, 1);\n\n        vector float vxd = vec_splats(GGML_FP16_TO_FP32(x[ib].d));\n        vector float vyd = vec_splats(GGML_FP16_TO_FP32(y[ib].d));\n        vector float vd = vec_mul(vxd, vyd);\n\n        vector float vxmin = vec_splats(GGML_FP16_TO_FP32(x[ib].m));\n        vector float vys = {GGML_FP16_TO_FP32(y[ib].s), 0.f, 0.f, 0.f};\n        vsumf0 = vec_madd(vxmin, vys, vsumf0);\n\n        vector unsigned long long aux64x2_0 = {(uint64_t)(table_b2b_0[x[ib].qh[0]]), (uint64_t)(table_b2b_0[x[ib].qh[1]])};\n        vector unsigned long long aux64x2_1 = {(uint64_t)(table_b2b_0[x[ib].qh[2]]), (uint64_t)(table_b2b_0[x[ib].qh[3]])};\n\n        vector signed char qh0 = (vector signed char)aux64x2_0;\n        vector signed char qh1 = (vector signed char)aux64x2_1;\n\n        vector signed char qxs = (vector signed char)vec_xl( 0, x[ib].qs);\n\n        vector unsigned char q5x0 = (vector unsigned char)vec_or(vec_and(qxs, lowMask), qh0);\n        vector unsigned char q5x1 = (vector unsigned char)vec_or(vec_sr(qxs, v4), qh1);\n\n        vector signed char q8y0 = vec_xl(  0, y[ib].qs);\n        vector signed char q8y1 = vec_xl( 16, y[ib].qs);\n\n        vector signed int vsumi0 = v0;\n\n        vsumi0 = vec_msum(q8y0, q5x0, vsumi0);\n        vsumi0 = vec_msum(q8y1, q5x1, vsumi0);\n\n        vsumf0 = vec_madd(vec_ctf(vsumi0, 0), vd, vsumf0);\n    }\n\n    vsumf0 = vec_add(vsumf0, vec_sld(vsumf0, vsumf0, 4));\n    vsumf0 = vec_add(vsumf0, vec_sld(vsumf0, vsumf0, 8));\n\n    sumf = vec_extract(vsumf0, 0);\n\n#elif defined(__loongarch_asx)\n    // Initialize accumulator with zeros\n    __m256 acc = (__m256)__lasx_xvldi(0);\n\n    float summs = 0.0f;\n\n    // Main loop\n    for (; ib < nb; ++ib) {\n        const __m256 dx = __lasx_xvreplfr2vr_s(GGML_FP16_TO_FP32(x[ib].d));\n\n        summs += GGML_FP16_TO_FP32(x[ib].m) * GGML_FP16_TO_FP32(y[ib].s);\n\n        __m256i qx = bytes_from_nibbles_32(x[ib].qs);\n        __m256i bxhi = bytes_from_bits_32(x[ib].qh);\n        bxhi = __lasx_xvand_v(bxhi, __lasx_xvreplgr2vr_b(0x10));\n        qx = __lasx_xvor_v(qx, bxhi);\n\n        const __m256 dy = __lasx_xvreplfr2vr_s(GGML_FP16_TO_FP32(y[ib].d));\n        const __m256i qy = __lasx_xvld((const __m256i *)y[ib].qs, 0);\n\n        const __m256 q = mul_sum_us8_pairs_float(qx, qy);\n\n        acc = __lasx_xvfmadd_s(q, __lasx_xvfmul_s(dx, dy), acc);\n    }\n\n    sumf = hsum_float_8(acc) + summs;\n#endif\n    for (; ib < nb; ++ib) {\n        uint32_t qh;\n        memcpy(&qh, x[ib].qh, sizeof(qh));\n\n        int sumi0 = 0;\n        int sumi1 = 0;\n\n        for (int j = 0; j < qk/2; ++j) {\n            const uint8_t xh_0 = ((qh >> (j +  0)) << 4) & 0x10;\n            const uint8_t xh_1 = ((qh >> (j + 12))     ) & 0x10;\n\n            const int32_t x0 = (x[ib].qs[j] & 0xF) | xh_0;\n            const int32_t x1 = (x[ib].qs[j] >>  4) | xh_1;\n\n            sumi0 += (x0 * y[ib].qs[j]);\n            sumi1 += (x1 * y[ib].qs[j + qk/2]);\n        }\n\n        int sumi = sumi0 + sumi1;\n        sumf += (GGML_FP16_TO_FP32(x[ib].d)*GGML_FP16_TO_FP32(y[ib].d))*sumi + GGML_FP16_TO_FP32(x[ib].m)*GGML_FP16_TO_FP32(y[ib].s);\n    }\n\n    *s = sumf;\n}\n\nvoid ggml_vec_dot_q8_0_q8_0(int n, float * restrict s, size_t bs, const void * restrict vx, size_t bx, const void * restrict vy, size_t by, int nrc) {\n    const int qk = QK8_0;\n    const int nb = n / qk;\n\n    assert(n % qk == 0);\n#if defined(__ARM_FEATURE_MATMUL_INT8)\n    assert((nrc == 2) || (nrc == 1));\n#else\n    assert(nrc == 1);\n#endif\n    UNUSED(nrc);\n    UNUSED(bx);\n    UNUSED(by);\n    UNUSED(bs);\n\n    const block_q8_0 * restrict x = vx;\n    const block_q8_0 * restrict y = vy;\n\n#if defined(__ARM_FEATURE_MATMUL_INT8)\n    if (nrc == 2) {\n        const block_q8_0 * restrict vx0 = vx;\n        const block_q8_0 * restrict vx1 = (const block_q8_0 *) ((const uint8_t*)vx + bx);\n        const block_q8_0 * restrict vy0 = vy;\n        const block_q8_0 * restrict vy1 = (const block_q8_0 *) ((const uint8_t*)vy + by);\n\n        float32x4_t sumv0 = vdupq_n_f32(0.0f);\n\n        for (int i = 0; i < nb; i++) {\n            const block_q8_0 * restrict b_x0 = &vx0[i];\n            const block_q8_0 * restrict b_y0 = &vy0[i];\n\n            const block_q8_0 * restrict b_x1 = &vx1[i];\n            const block_q8_0 * restrict b_y1 = &vy1[i];\n\n            const int8x16_t x0_l = vld1q_s8(b_x0->qs);\n            const int8x16_t x0_h = vld1q_s8(b_x0->qs + 16);\n            const int8x16_t x1_l = vld1q_s8(b_x1->qs);\n            const int8x16_t x1_h = vld1q_s8(b_x1->qs + 16);\n\n            // load y\n            const int8x16_t y0_l = vld1q_s8(b_y0->qs);\n            const int8x16_t y0_h = vld1q_s8(b_y0->qs + 16);\n            const int8x16_t y1_l = vld1q_s8(b_y1->qs);\n            const int8x16_t y1_h = vld1q_s8(b_y1->qs + 16);\n\n            float32_t _scale[4] = {GGML_FP16_TO_FP32(b_x0->d)*GGML_FP16_TO_FP32(b_y0->d),\n                                   GGML_FP16_TO_FP32(b_x0->d)*GGML_FP16_TO_FP32(b_y1->d),\n                                   GGML_FP16_TO_FP32(b_x1->d)*GGML_FP16_TO_FP32(b_y0->d),\n                                   GGML_FP16_TO_FP32(b_x1->d)*GGML_FP16_TO_FP32(b_y1->d)};\n            float32x4_t scale = vld1q_f32(_scale);\n\n            int8x16_t l0 = vreinterpretq_s8_s64(vzip1q_s64(vreinterpretq_s64_s8(x0_l), vreinterpretq_s64_s8(x1_l)));\n            int8x16_t l1 = vreinterpretq_s8_s64(vzip2q_s64(vreinterpretq_s64_s8(x0_l), vreinterpretq_s64_s8(x1_l)));\n\n            int8x16_t l2 = vreinterpretq_s8_s64(vzip1q_s64(vreinterpretq_s64_s8(x0_h), vreinterpretq_s64_s8(x1_h)));\n            int8x16_t l3 = vreinterpretq_s8_s64(vzip2q_s64(vreinterpretq_s64_s8(x0_h), vreinterpretq_s64_s8(x1_h)));\n\n            int8x16_t r0 = vreinterpretq_s8_s64(vzip1q_s64(vreinterpretq_s64_s8(y0_l), vreinterpretq_s64_s8(y1_l)));\n            int8x16_t r1 = vreinterpretq_s8_s64(vzip2q_s64(vreinterpretq_s64_s8(y0_l), vreinterpretq_s64_s8(y1_l)));\n\n            int8x16_t r2 = vreinterpretq_s8_s64(vzip1q_s64(vreinterpretq_s64_s8(y0_h), vreinterpretq_s64_s8(y1_h)));\n            int8x16_t r3 = vreinterpretq_s8_s64(vzip2q_s64(vreinterpretq_s64_s8(y0_h), vreinterpretq_s64_s8(y1_h)));\n\n            sumv0 = vmlaq_f32(sumv0,(vcvtq_f32_s32(vmmlaq_s32((vmmlaq_s32((vmmlaq_s32((vmmlaq_s32(vdupq_n_s32(0), l0, r0)),\n                                                                                       l1, r1)), l2, r2)), l3, r3))), scale);\n        }\n        float32x4_t sumv1 = vextq_f32(sumv0, sumv0, 2);\n        float32x4_t sumv2 = vzip1q_f32(sumv0, sumv1);\n\n        vst1_f32(s, vget_low_f32(sumv2));\n        vst1_f32(s + bs, vget_high_f32(sumv2));\n        return;\n    }\n#endif\n\n    int ib = 0;\n    float sumf = 0;\n\n#if defined(__ARM_FEATURE_SVE)\n    svfloat32_t sumv0 = svdup_n_f32(0.0f);\n    svfloat32_t sumv1 = svdup_n_f32(0.0f);\n\n    const int vector_length = ggml_cpu_get_sve_cnt()*8;\n\n    //VLA Implemenation for SVE\n    switch (vector_length) {\n        case 128:\n            {\n                // predicate for activating lanes for 16 Int8 elements\n                const svbool_t ph16 = svptrue_pat_b8 (SV_VL16);\n                const svbool_t pl16 = svptrue_pat_b32(SV_VL4);\n\n                for (; ib + 1 < nb; ib += 2) {\n                    const block_q8_0 * restrict x0 = &x[ib + 0];\n                    const block_q8_0 * restrict x1 = &x[ib + 1];\n                    const block_q8_0 * restrict y0 = &y[ib + 0];\n                    const block_q8_0 * restrict y1 = &y[ib + 1];\n\n                    // load x\n                    const svint8_t qx0_0 = svld1_s8(ph16, x0->qs);\n                    const svint8_t qx0_1 = svld1_s8(ph16, x0->qs+16);\n                    const svint8_t qx1_0 = svld1_s8(ph16, x1->qs);\n                    const svint8_t qx1_1 = svld1_s8(ph16, x1->qs+16);\n\n                    // load y\n                    const svint8_t qy0_0 = svld1_s8(ph16, y0->qs);\n                    const svint8_t qy0_1 = svld1_s8(ph16, y0->qs+16);\n                    const svint8_t qy1_0 = svld1_s8(ph16, y1->qs);\n                    const svint8_t qy1_1 = svld1_s8(ph16, y1->qs+16);\n\n                    sumv0 = svmla_n_f32_x(pl16, sumv0, svcvt_f32_s32_x(pl16, svadd_x(pl16,\n                                    svdot_s32(svdup_n_s32(0), qx0_0, qy0_0),\n                                    svdot_s32(svdup_n_s32(0), qx0_1, qy0_1))), GGML_FP16_TO_FP32(x0->d)*GGML_FP16_TO_FP32(y0->d));\n                    sumv1 = svmla_n_f32_x(pl16, sumv1, svcvt_f32_s32_x(pl16, svadd_x(pl16,\n                                    svdot_s32(svdup_n_s32(0), qx1_0, qy1_0),\n                                    svdot_s32(svdup_n_s32(0), qx1_1, qy1_1))), GGML_FP16_TO_FP32(x1->d)*GGML_FP16_TO_FP32(y1->d));\n                }\n\n                sumf = svaddv_f32(pl16, svadd_f32_x(pl16, sumv0, sumv1));\n            } break;\n        case 256:\n            {\n                //printf(\"sve256\");\n                for (; ib + 1 < nb; ib += 2) {\n                    const block_q8_0 * restrict x0 = &x[ib + 0];\n                    const block_q8_0 * restrict x1 = &x[ib + 1];\n                    const block_q8_0 * restrict y0 = &y[ib + 0];\n                    const block_q8_0 * restrict y1 = &y[ib + 1];\n\n                    // load x\n                    const svint8_t qx0 = svld1_s8(svptrue_b8(), x0->qs);\n                    const svint8_t qx1 = svld1_s8(svptrue_b8(), x1->qs);\n\n                    // load y\n                    const svint8_t qy0 = svld1_s8(svptrue_b8(), y0->qs);\n                    const svint8_t qy1 = svld1_s8(svptrue_b8(), y1->qs);\n\n                    sumv0 = svmla_n_f32_x(svptrue_b32(), sumv0, svcvt_f32_s32_x(svptrue_b32(),\n                                svdot_s32(svdup_n_s32(0), qx0, qy0)), GGML_FP16_TO_FP32(x0->d)*GGML_FP16_TO_FP32(y0->d));\n                    sumv1 = svmla_n_f32_x(svptrue_b32(), sumv1, svcvt_f32_s32_x(svptrue_b32(),\n                                svdot_s32(svdup_n_s32(0), qx1, qy1)), GGML_FP16_TO_FP32(x1->d)*GGML_FP16_TO_FP32(y1->d));\n                }\n\n                sumf = svaddv_f32(svptrue_b32(), svadd_f32_x(svptrue_b32(), sumv0, sumv1));\n            } break;\n        case 512:\n            {\n                // predicate for activating high 256 bit\n                const svbool_t ph32 = svptrue_pat_b8(SV_VL32);\n                // predicate for activating low 256 bit\n                const svbool_t pl32 = svnot_b_z(svptrue_b8(), ph32);\n\n                // predicate for activating high lanes for 8 float32 elements\n                const svbool_t ph8 = svptrue_pat_b32(SV_VL8);\n                // predicate for activating low lanes for 8 float32 elements\n                const svbool_t pl8 = svnot_b_z(svptrue_b32(), ph8);\n\n                svfloat32_t sumv00 = svdup_n_f32(0.0f);\n\n                for (; ib + 1 < nb; ib += 2) {\n                    const block_q8_0 * restrict x0 = &x[ib + 0];\n                    const block_q8_0 * restrict x1 = &x[ib + 1];\n                    const block_q8_0 * restrict y0 = &y[ib + 0];\n                    const block_q8_0 * restrict y1 = &y[ib + 1];\n\n                    //load 32 int8_t in first half of vector and put another 32 int8_t in second vector lower bits\n                    // and add them to make one 64 element vector\n                    // load x\n                    const svint8_t qx_32 = svld1_s8(ph32, x0->qs);\n                          svint8_t qx_64 = svld1_s8(pl32, x0->qs + 2);\n\n                    qx_64 = svadd_s8_x(svptrue_b8(), qx_32, qx_64);\n\n                    // load y\n                    const svint8_t qy_32 = svld1_s8(ph32, y0->qs);\n                          svint8_t qy_64 = svld1_s8(pl32, y0->qs + 2);\n\n                    qy_64 = svadd_s8_x(svptrue_b8(), qy_32, qy_64);\n\n                    // scale creation\n                    const float32_t deq1 = GGML_FP16_TO_FP32(x0->d)*GGML_FP16_TO_FP32(y0->d);\n                    const float32_t deq2 = GGML_FP16_TO_FP32(x1->d)*GGML_FP16_TO_FP32(y1->d);\n\n                    // duplicate deq1 in first half of vector and deq2 in second half of vector\n                    const svfloat32_t temp = svdup_f32_m(svdup_f32_z(ph8, deq1), pl8, deq2);\n\n                    const svfloat32_t sumvt = svcvt_f32_s32_x(svptrue_b32(), svdot_s32(svdup_n_s32(0), qx_64, qy_64));\n\n                    sumv00 = svmla_f32_m(svptrue_b32(), sumv00, sumvt, temp);\n                }\n\n                sumf = svaddv_f32(svptrue_b32(), sumv00);\n                break;\n            }\n        default:\n            assert(false && \"Unsupported vector length\");\n            break;\n    }\n#elif defined(__ARM_NEON)\n    float32x4_t sumv0 = vdupq_n_f32(0.0f);\n    float32x4_t sumv1 = vdupq_n_f32(0.0f);\n\n    for (; ib + 1 < nb; ib += 2) {\n        const block_q8_0 * restrict x0 = &x[ib + 0];\n        const block_q8_0 * restrict x1 = &x[ib + 1];\n        const block_q8_0 * restrict y0 = &y[ib + 0];\n        const block_q8_0 * restrict y1 = &y[ib + 1];\n\n        const int8x16_t x0_0 = vld1q_s8(x0->qs);\n        const int8x16_t x0_1 = vld1q_s8(x0->qs + 16);\n        const int8x16_t x1_0 = vld1q_s8(x1->qs);\n        const int8x16_t x1_1 = vld1q_s8(x1->qs + 16);\n\n        // load y\n        const int8x16_t y0_0 = vld1q_s8(y0->qs);\n        const int8x16_t y0_1 = vld1q_s8(y0->qs + 16);\n        const int8x16_t y1_0 = vld1q_s8(y1->qs);\n        const int8x16_t y1_1 = vld1q_s8(y1->qs + 16);\n\n        sumv0 = vmlaq_n_f32(sumv0, vcvtq_f32_s32(vaddq_s32(\n                        ggml_vdotq_s32(vdupq_n_s32(0), x0_0, y0_0),\n                        ggml_vdotq_s32(vdupq_n_s32(0), x0_1, y0_1))), GGML_FP16_TO_FP32(x0->d)*GGML_FP16_TO_FP32(y0->d));\n\n        sumv1 = vmlaq_n_f32(sumv1, vcvtq_f32_s32(vaddq_s32(\n                        ggml_vdotq_s32(vdupq_n_s32(0), x1_0, y1_0),\n                        ggml_vdotq_s32(vdupq_n_s32(0), x1_1, y1_1))), GGML_FP16_TO_FP32(x1->d)*GGML_FP16_TO_FP32(y1->d));\n    }\n\n    sumf = vaddvq_f32(sumv0) + vaddvq_f32(sumv1);\n#elif defined(__AVX2__) || defined(__AVX__)\n    // Initialize accumulator with zeros\n    __m256 acc = _mm256_setzero_ps();\n\n    // Main loop\n    for (; ib < nb; ++ib) {\n        // Compute combined scale for the block\n        const __m256 d = _mm256_set1_ps(GGML_FP16_TO_FP32(x[ib].d) * GGML_FP16_TO_FP32(y[ib].d));\n        __m256i qx = _mm256_loadu_si256((const __m256i *)x[ib].qs);\n        __m256i qy = _mm256_loadu_si256((const __m256i *)y[ib].qs);\n\n        const __m256 q = mul_sum_i8_pairs_float(qx, qy);\n\n        // Multiply q with scale and accumulate\n#if defined(__AVX2__)\n        acc = _mm256_fmadd_ps( d, q, acc );\n#else\n        acc = _mm256_add_ps( _mm256_mul_ps( d, q ), acc );\n#endif\n    }\n\n    sumf = hsum_float_8(acc);\n#elif defined(__riscv_v_intrinsic)\n    size_t vl = __riscv_vsetvl_e8m1(qk);\n\n    for (; ib < nb; ++ib) {\n        // load elements\n        vint8m1_t bx_0 = __riscv_vle8_v_i8m1(x[ib].qs, vl);\n        vint8m1_t by_0 = __riscv_vle8_v_i8m1(y[ib].qs, vl);\n\n        vint16m2_t vw_mul = __riscv_vwmul_vv_i16m2(bx_0, by_0, vl);\n\n        vint32m1_t v_zero = __riscv_vmv_v_x_i32m1(0, vl);\n        vint32m1_t v_sum = __riscv_vwredsum_vs_i16m2_i32m1(vw_mul, v_zero, vl);\n\n        int sumi = __riscv_vmv_x_s_i32m1_i32(v_sum);\n\n        sumf += sumi*(GGML_FP16_TO_FP32(x[ib].d)*GGML_FP16_TO_FP32(y[ib].d));\n    }\n#elif defined(__POWER9_VECTOR__)\n    const vector signed int v0 = vec_splats((int32_t)0);\n    vector float vsumf0 = vec_splats(0.0f);\n\n#pragma GCC unroll 8\n    for (; ib < nb; ++ib) {\n        __builtin_prefetch(x[ib].qs, 0, 1);\n        __builtin_prefetch(y[ib].qs, 0, 1);\n\n        vector float vxd = vec_splats(GGML_FP16_TO_FP32(x[ib].d));\n        vector float vyd = vec_splats(GGML_FP16_TO_FP32(y[ib].d));\n        vector float vd = vec_mul(vxd, vyd);\n\n        vector signed char q8x0 = vec_xl( 0, x[ib].qs);\n        vector signed char q8x1 = vec_xl(16, x[ib].qs);\n        vector signed char q8y0 = vec_xl( 0, y[ib].qs);\n        vector signed char q8y1 = vec_xl(16, y[ib].qs);\n\n        vector signed short qv0 = vec_mule(q8x0, q8y0);\n        vector signed short qv1 = vec_mulo(q8x0, q8y0);\n        vector signed short qv2 = vec_mule(q8x1, q8y1);\n        vector signed short qv3 = vec_mulo(q8x1, q8y1);\n\n        vector signed int vsumi0 = v0;\n        vector signed int vsumi1 = v0;\n\n        vsumi0 = vec_sum4s(qv0, vsumi0);\n        vsumi1 = vec_sum4s(qv1, vsumi1);\n        vsumi0 = vec_sum4s(qv2, vsumi0);\n        vsumi1 = vec_sum4s(qv3, vsumi1);\n\n        vsumi0 = vec_add(vsumi0, vsumi1);\n\n        vsumf0 = vec_madd(vec_ctf(vsumi0, 0), vd, vsumf0);\n    }\n\n    vsumf0 = vec_add(vsumf0, vec_sld(vsumf0, vsumf0, 4));\n    vsumf0 = vec_add(vsumf0, vec_sld(vsumf0, vsumf0, 8));\n\n    sumf = vec_extract(vsumf0, 0);\n\n#elif defined(__loongarch_asx)\n    // Initialize accumulator with zeros\n    __m256 acc = (__m256)__lasx_xvldi(0);\n\n    // Main loop\n    for (; ib < nb; ++ib) {\n        // Compute combined scale for the block\n        const __m256 d = __lasx_xvreplfr2vr_s(GGML_FP16_TO_FP32(x[ib].d) * GGML_FP16_TO_FP32(y[ib].d));\n        __m256i qx = __lasx_xvld((const __m256i *)x[ib].qs, 0);\n        __m256i qy = __lasx_xvld((const __m256i *)y[ib].qs, 0);\n\n        const __m256 q = mul_sum_i8_pairs_float(qx, qy);\n\n        // Multiply q with scale and accumulate\n        acc = __lasx_xvfmadd_s( d, q, acc );\n    }\n\n    sumf = hsum_float_8(acc);\n#endif\n    for (; ib < nb; ++ib) {\n        int sumi = 0;\n\n        for (int j = 0; j < qk; j++) {\n            sumi += x[ib].qs[j]*y[ib].qs[j];\n        }\n\n        sumf += sumi*(GGML_FP16_TO_FP32(x[ib].d)*GGML_FP16_TO_FP32(y[ib].d));\n    }\n\n    *s = sumf;\n}\n\nvoid ggml_vec_dot_tq1_0_q8_K(int n, float * restrict s, size_t bs, const void * restrict vx, size_t bx, const void * restrict vy, size_t by, int nrc) {\n    assert(nrc == 1);\n    UNUSED(nrc);\n    UNUSED(bx);\n    UNUSED(by);\n    UNUSED(bs);\n\n    const block_tq1_0 * restrict x = vx;\n    const block_q8_K  * restrict y = vy;\n\n    const int nb = n / QK_K;\n\n#if defined(__ARM_NEON)\n    float sumf = 0.0f;\n\n    uint8_t k_shift[16] = {1, 1, 1, 1, 3, 3, 3, 3, 9, 9, 9, 9, 27, 27, 27, 27};\n\n    const uint8x16_t shift = vld1q_u8(k_shift);\n\n    for (int i = 0; i < nb; ++i) {\n#if defined(__ARM_FEATURE_DOTPROD)\n        int32x4_t sumi0 = vdupq_n_s32(0);\n        int32x4_t sumi1 = vdupq_n_s32(0);\n#else\n        int16x8_t sumi0 = vdupq_n_s16(0);\n        int16x8_t sumi1 = vdupq_n_s16(0);\n#endif\n\n        // first 32 bytes of 5 elements\n        {\n            uint8x16_t qx0 = vld1q_u8(x[i].qs + 0);\n            uint8x16_t qx1 = vld1q_u8(x[i].qs + 16);\n            uint8x16_t qx2 = vmulq_u8(qx0, vdupq_n_u8(3));\n            uint8x16_t qx3 = vmulq_u8(qx1, vdupq_n_u8(3));\n            uint8x16_t qx4 = vmulq_u8(qx0, vdupq_n_u8(9));\n            uint8x16_t qx5 = vmulq_u8(qx1, vdupq_n_u8(9));\n            uint8x16_t qx6 = vmulq_u8(qx0, vdupq_n_u8(27));\n            uint8x16_t qx7 = vmulq_u8(qx1, vdupq_n_u8(27));\n            uint8x16_t qx8 = vmulq_u8(qx0, vdupq_n_u8(81));\n            uint8x16_t qx9 = vmulq_u8(qx1, vdupq_n_u8(81));\n\n            // multiply by 3 and keep the 2 bits above 8 bits\n            int8x16_t sqx0 = vreinterpretq_s8_u8(vshrq_n_u8(vhaddq_u8(qx0, vshrq_n_u8(qx0, 1)), 6));\n            int8x16_t sqx1 = vreinterpretq_s8_u8(vshrq_n_u8(vhaddq_u8(qx1, vshrq_n_u8(qx1, 1)), 6));\n            int8x16_t sqx2 = vreinterpretq_s8_u8(vshrq_n_u8(vhaddq_u8(qx2, vshrq_n_u8(qx2, 1)), 6));\n            int8x16_t sqx3 = vreinterpretq_s8_u8(vshrq_n_u8(vhaddq_u8(qx3, vshrq_n_u8(qx3, 1)), 6));\n            int8x16_t sqx4 = vreinterpretq_s8_u8(vshrq_n_u8(vhaddq_u8(qx4, vshrq_n_u8(qx4, 1)), 6));\n            int8x16_t sqx5 = vreinterpretq_s8_u8(vshrq_n_u8(vhaddq_u8(qx5, vshrq_n_u8(qx5, 1)), 6));\n            int8x16_t sqx6 = vreinterpretq_s8_u8(vshrq_n_u8(vhaddq_u8(qx6, vshrq_n_u8(qx6, 1)), 6));\n            int8x16_t sqx7 = vreinterpretq_s8_u8(vshrq_n_u8(vhaddq_u8(qx7, vshrq_n_u8(qx7, 1)), 6));\n            int8x16_t sqx8 = vreinterpretq_s8_u8(vshrq_n_u8(vhaddq_u8(qx8, vshrq_n_u8(qx8, 1)), 6));\n            int8x16_t sqx9 = vreinterpretq_s8_u8(vshrq_n_u8(vhaddq_u8(qx9, vshrq_n_u8(qx9, 1)), 6));\n\n            const int8x16_t qy0 = vld1q_s8(y[i].qs +   0);\n            const int8x16_t qy1 = vld1q_s8(y[i].qs +  16);\n            const int8x16_t qy2 = vld1q_s8(y[i].qs +  32);\n            const int8x16_t qy3 = vld1q_s8(y[i].qs +  48);\n            const int8x16_t qy4 = vld1q_s8(y[i].qs +  64);\n            const int8x16_t qy5 = vld1q_s8(y[i].qs +  80);\n            const int8x16_t qy6 = vld1q_s8(y[i].qs +  96);\n            const int8x16_t qy7 = vld1q_s8(y[i].qs + 112);\n            const int8x16_t qy8 = vld1q_s8(y[i].qs + 128);\n            const int8x16_t qy9 = vld1q_s8(y[i].qs + 144);\n\n#if defined(__ARM_FEATURE_DOTPROD)\n            sumi0 = vdotq_s32(sumi0, sqx0, qy0);\n            sumi1 = vdotq_s32(sumi1, sqx1, qy1);\n            sumi0 = vdotq_s32(sumi0, sqx2, qy2);\n            sumi1 = vdotq_s32(sumi1, sqx3, qy3);\n            sumi0 = vdotq_s32(sumi0, sqx4, qy4);\n            sumi1 = vdotq_s32(sumi1, sqx5, qy5);\n            sumi0 = vdotq_s32(sumi0, sqx6, qy6);\n            sumi1 = vdotq_s32(sumi1, sqx7, qy7);\n            sumi0 = vdotq_s32(sumi0, sqx8, qy8);\n            sumi1 = vdotq_s32(sumi1, sqx9, qy9);\n#else\n            sumi0 = vmlal_s8(sumi0, vget_low_s8(sqx0), vget_low_s8(qy0));\n            sumi1 = vmlal_s8(sumi1, vget_high_s8(sqx0), vget_high_s8(qy0));\n            sumi0 = vmlal_s8(sumi0, vget_low_s8(sqx1), vget_low_s8(qy1));\n            sumi1 = vmlal_s8(sumi1, vget_high_s8(sqx1), vget_high_s8(qy1));\n            sumi0 = vmlal_s8(sumi0, vget_low_s8(sqx2), vget_low_s8(qy2));\n            sumi1 = vmlal_s8(sumi1, vget_high_s8(sqx2), vget_high_s8(qy2));\n            sumi0 = vmlal_s8(sumi0, vget_low_s8(sqx3), vget_low_s8(qy3));\n            sumi1 = vmlal_s8(sumi1, vget_high_s8(sqx3), vget_high_s8(qy3));\n            sumi0 = vmlal_s8(sumi0, vget_low_s8(sqx4), vget_low_s8(qy4));\n            sumi1 = vmlal_s8(sumi1, vget_high_s8(sqx4), vget_high_s8(qy4));\n            sumi0 = vmlal_s8(sumi0, vget_low_s8(sqx5), vget_low_s8(qy5));\n            sumi1 = vmlal_s8(sumi1, vget_high_s8(sqx5), vget_high_s8(qy5));\n            sumi0 = vmlal_s8(sumi0, vget_low_s8(sqx6), vget_low_s8(qy6));\n            sumi1 = vmlal_s8(sumi1, vget_high_s8(sqx6), vget_high_s8(qy6));\n            sumi0 = vmlal_s8(sumi0, vget_low_s8(sqx7), vget_low_s8(qy7));\n            sumi1 = vmlal_s8(sumi1, vget_high_s8(sqx7), vget_high_s8(qy7));\n            sumi0 = vmlal_s8(sumi0, vget_low_s8(sqx8), vget_low_s8(qy8));\n            sumi1 = vmlal_s8(sumi1, vget_high_s8(sqx8), vget_high_s8(qy8));\n            sumi0 = vmlal_s8(sumi0, vget_low_s8(sqx9), vget_low_s8(qy9));\n            sumi1 = vmlal_s8(sumi1, vget_high_s8(sqx9), vget_high_s8(qy9));\n#endif\n        }\n\n        // last 16 bytes of 5-element, along with the 4 bytes of 4 elements\n        {\n            uint8x16_t qx0 = vld1q_u8(x[i].qs + 32);\n            uint8x16_t qx1 = vmulq_u8(qx0, vdupq_n_u8(3));\n            uint8x16_t qx2 = vmulq_u8(qx0, vdupq_n_u8(9));\n            uint8x16_t qx3 = vmulq_u8(qx0, vdupq_n_u8(27));\n            uint8x16_t qx4 = vmulq_u8(qx0, vdupq_n_u8(81));\n            uint32_t qh;\n            memcpy(&qh, x[i].qh, sizeof(qh)); // potentially unaligned\n            uint8x16_t qx5 = vreinterpretq_u8_u32(vdupq_n_u32(qh));\n            qx5 = vmulq_u8(qx5, shift);\n\n            // multiply by 3 and keep the 2 bits above 8 bits\n            int8x16_t sqx0 = vreinterpretq_s8_u8(vshrq_n_u8(vhaddq_u8(qx0, vshrq_n_u8(qx0, 1)), 6));\n            int8x16_t sqx1 = vreinterpretq_s8_u8(vshrq_n_u8(vhaddq_u8(qx1, vshrq_n_u8(qx1, 1)), 6));\n            int8x16_t sqx2 = vreinterpretq_s8_u8(vshrq_n_u8(vhaddq_u8(qx2, vshrq_n_u8(qx2, 1)), 6));\n            int8x16_t sqx3 = vreinterpretq_s8_u8(vshrq_n_u8(vhaddq_u8(qx3, vshrq_n_u8(qx3, 1)), 6));\n            int8x16_t sqx4 = vreinterpretq_s8_u8(vshrq_n_u8(vhaddq_u8(qx4, vshrq_n_u8(qx4, 1)), 6));\n            int8x16_t sqx5 = vreinterpretq_s8_u8(vshrq_n_u8(vhaddq_u8(qx5, vshrq_n_u8(qx5, 1)), 6));\n\n            const int8x16_t qy0 = vld1q_s8(y[i].qs + 160);\n            const int8x16_t qy1 = vld1q_s8(y[i].qs + 176);\n            const int8x16_t qy2 = vld1q_s8(y[i].qs + 192);\n            const int8x16_t qy3 = vld1q_s8(y[i].qs + 208);\n            const int8x16_t qy4 = vld1q_s8(y[i].qs + 224);\n            const int8x16_t qy5 = vld1q_s8(y[i].qs + 240);\n\n#if defined(__ARM_FEATURE_DOTPROD)\n            sumi0 = vdotq_s32(sumi0, sqx0, qy0);\n            sumi1 = vdotq_s32(sumi1, sqx1, qy1);\n            sumi0 = vdotq_s32(sumi0, sqx2, qy2);\n            sumi1 = vdotq_s32(sumi1, sqx3, qy3);\n            sumi0 = vdotq_s32(sumi0, sqx4, qy4);\n            sumi1 = vdotq_s32(sumi1, sqx5, qy5);\n#else\n            sumi0 = vmlal_s8(sumi0, vget_low_s8(sqx0), vget_low_s8(qy0));\n            sumi1 = vmlal_s8(sumi1, vget_high_s8(sqx0), vget_high_s8(qy0));\n            sumi0 = vmlal_s8(sumi0, vget_low_s8(sqx1), vget_low_s8(qy1));\n            sumi1 = vmlal_s8(sumi1, vget_high_s8(sqx1), vget_high_s8(qy1));\n            sumi0 = vmlal_s8(sumi0, vget_low_s8(sqx2), vget_low_s8(qy2));\n            sumi1 = vmlal_s8(sumi1, vget_high_s8(sqx2), vget_high_s8(qy2));\n            sumi0 = vmlal_s8(sumi0, vget_low_s8(sqx3), vget_low_s8(qy3));\n            sumi1 = vmlal_s8(sumi1, vget_high_s8(sqx3), vget_high_s8(qy3));\n            sumi0 = vmlal_s8(sumi0, vget_low_s8(sqx4), vget_low_s8(qy4));\n            sumi1 = vmlal_s8(sumi1, vget_high_s8(sqx4), vget_high_s8(qy4));\n            sumi0 = vmlal_s8(sumi0, vget_low_s8(sqx5), vget_low_s8(qy5));\n            sumi1 = vmlal_s8(sumi1, vget_high_s8(sqx5), vget_high_s8(qy5));\n#endif\n        }\n\n        const int16x8_t ysum0 = vld1q_s16(y[i].bsums);\n        const int16x8_t ysum1 = vld1q_s16(y[i].bsums + 8);\n\n        const float d = GGML_FP16_TO_FP32(x[i].d) * y[i].d;\n\n#if defined(__ARM_FEATURE_DOTPROD)\n        sumi0 = vaddq_s32(sumi0, sumi1);\n        sumi0 = vsubq_s32(sumi0, vpaddlq_s16(vaddq_s16(ysum0, ysum1)));\n\n        sumf += d * (float) vaddvq_s32(sumi0);\n#else\n        sumi0 = vaddq_s16(sumi0, sumi1);\n        sumi0 = vsubq_s16(sumi0, vaddq_s16(ysum0, ysum1));\n\n        sumf += d * (float) vaddlvq_s16(sumi0);\n#endif\n    }\n\n    *s = sumf;\n\n#elif defined(__AVX2__)\n    __m256 sumf = _mm256_setzero_ps();\n\n    for (int i = 0; i < nb; ++i) {\n        // 16-bit sums\n        __m256i sumi0 = _mm256_setzero_si256();\n        __m256i sumi1 = _mm256_setzero_si256();\n        __m256i sumi2 = _mm256_setzero_si256();\n\n        // first 32 bytes of 5 elements\n        {\n            __m256i qx0 = _mm256_loadu_si256((const __m256i *) (x[i].qs));\n            // 8-bit multiplies with shifts, masks and adds\n            __m256i qx1 = _mm256_add_epi8(qx0, _mm256_add_epi8(qx0, qx0)); // 1 * 3\n            __m256i qx2 = _mm256_add_epi8(_mm256_and_si256(_mm256_slli_epi16(qx0, 3), _mm256_set1_epi8(-8)), qx0); // 1 * 9\n            __m256i qx3 = _mm256_add_epi8(_mm256_and_si256(_mm256_slli_epi16(qx1, 3), _mm256_set1_epi8(-8)), qx1); // 3 * 9\n            __m256i qx4 = _mm256_add_epi8(_mm256_and_si256(_mm256_slli_epi16(qx2, 3), _mm256_set1_epi8(-8)), qx2); // 9 * 9\n\n            // TODO: can _mm256_mulhi_epu16 be faster even if 16-bits?\n\n            // Cancel the +1 from avg so that it behaves like a halving add\n            qx0 = _mm256_subs_epu8(qx0, _mm256_set1_epi8(1));\n            qx1 = _mm256_subs_epu8(qx1, _mm256_set1_epi8(1));\n            qx2 = _mm256_subs_epu8(qx2, _mm256_set1_epi8(1));\n            qx3 = _mm256_subs_epu8(qx3, _mm256_set1_epi8(1));\n            qx4 = _mm256_subs_epu8(qx4, _mm256_set1_epi8(1));\n            // Multiply by 3 and get the top 2 bits\n            qx0 = _mm256_avg_epu8(qx0, _mm256_avg_epu8(qx0, _mm256_setzero_si256()));\n            qx1 = _mm256_avg_epu8(qx1, _mm256_avg_epu8(qx1, _mm256_setzero_si256()));\n            qx2 = _mm256_avg_epu8(qx2, _mm256_avg_epu8(qx2, _mm256_setzero_si256()));\n            qx3 = _mm256_avg_epu8(qx3, _mm256_avg_epu8(qx3, _mm256_setzero_si256()));\n            qx4 = _mm256_avg_epu8(qx4, _mm256_avg_epu8(qx4, _mm256_setzero_si256()));\n            qx0 = _mm256_and_si256(_mm256_srli_epi16(qx0, 6), _mm256_set1_epi8(3));\n            qx1 = _mm256_and_si256(_mm256_srli_epi16(qx1, 6), _mm256_set1_epi8(3));\n            qx2 = _mm256_and_si256(_mm256_srli_epi16(qx2, 6), _mm256_set1_epi8(3));\n            qx3 = _mm256_and_si256(_mm256_srli_epi16(qx3, 6), _mm256_set1_epi8(3));\n            qx4 = _mm256_and_si256(_mm256_srli_epi16(qx4, 6), _mm256_set1_epi8(3));\n\n            const __m256i qy0 = _mm256_loadu_si256((const __m256i *) (y[i].qs +   0));\n            const __m256i qy1 = _mm256_loadu_si256((const __m256i *) (y[i].qs +  32));\n            const __m256i qy2 = _mm256_loadu_si256((const __m256i *) (y[i].qs +  64));\n            const __m256i qy3 = _mm256_loadu_si256((const __m256i *) (y[i].qs +  96));\n            const __m256i qy4 = _mm256_loadu_si256((const __m256i *) (y[i].qs + 128));\n\n            qx0 = _mm256_maddubs_epi16(qx0, qy0);\n            qx1 = _mm256_maddubs_epi16(qx1, qy1);\n            qx2 = _mm256_maddubs_epi16(qx2, qy2);\n            qx3 = _mm256_maddubs_epi16(qx3, qy3);\n            qx4 = _mm256_maddubs_epi16(qx4, qy4);\n\n            sumi0 = _mm256_add_epi16(sumi0, _mm256_add_epi16(qx0, qx1));\n            sumi1 = _mm256_add_epi16(sumi1, _mm256_add_epi16(qx2, qx3));\n            sumi2 = _mm256_add_epi16(sumi2, qx4);\n        }\n\n        // last 16 bytes of 5-element, along with the 4 bytes of 4 elements\n        {\n            __m128i qx0 = _mm_loadu_si128((const __m128i *) (x[i].qs + 32));\n            uint32_t qh;\n            memcpy(&qh, x[i].qh, sizeof(qh)); // potentially unaligned\n            __m256i qx5_l = _mm256_cvtepu8_epi16(_mm_set1_epi32(qh));\n            __m128i qx1 = _mm_add_epi8(qx0, _mm_add_epi8(qx0, qx0)); // 1 * 3\n            __m128i qx2 = _mm_add_epi8(_mm_and_si128(_mm_slli_epi16(qx0, 3), _mm_set1_epi8(-8)), qx0); // 1 * 9\n            __m128i qx3 = _mm_add_epi8(_mm_and_si128(_mm_slli_epi16(qx1, 3), _mm_set1_epi8(-8)), qx1); // 3 * 9\n            __m128i qx4 = _mm_add_epi8(_mm_and_si128(_mm_slli_epi16(qx2, 3), _mm_set1_epi8(-8)), qx2); // 9 * 9\n            __m256i qx01 = MM256_SET_M128I(qx1, qx0);\n            __m256i qx23 = MM256_SET_M128I(qx3, qx2);\n\n            // avx2 does not have 8-bit multiplies, so 16-bit it is.\n            qx5_l = _mm256_mullo_epi16(qx5_l, _mm256_set_epi16(27, 27, 27, 27, 9, 9, 9, 9, 3, 3, 3, 3, 1, 1, 1, 1));\n            qx5_l = _mm256_and_si256(qx5_l, _mm256_set1_epi16(0xFF));\n            __m128i qx5 = _mm_packus_epi16(_mm256_castsi256_si128(qx5_l), _mm256_extracti128_si256(qx5_l, 1));\n\n            __m256i qx45 = MM256_SET_M128I(qx5, qx4);\n\n            // Cancel the +1 from avg so that it behaves like a halving add\n            qx01 = _mm256_subs_epu8(qx01, _mm256_set1_epi8(1));\n            qx23 = _mm256_subs_epu8(qx23, _mm256_set1_epi8(1));\n            qx45 = _mm256_subs_epu8(qx45, _mm256_set1_epi8(1));\n            // Multiply by 3 and get the top 2 bits\n            qx01 = _mm256_avg_epu8(qx01, _mm256_avg_epu8(qx01, _mm256_setzero_si256()));\n            qx23 = _mm256_avg_epu8(qx23, _mm256_avg_epu8(qx23, _mm256_setzero_si256()));\n            qx45 = _mm256_avg_epu8(qx45, _mm256_avg_epu8(qx45, _mm256_setzero_si256()));\n            qx01 = _mm256_and_si256(_mm256_srli_epi16(qx01, 6), _mm256_set1_epi8(3));\n            qx23 = _mm256_and_si256(_mm256_srli_epi16(qx23, 6), _mm256_set1_epi8(3));\n            qx45 = _mm256_and_si256(_mm256_srli_epi16(qx45, 6), _mm256_set1_epi8(3));\n\n            const __m256i qy01 = _mm256_loadu_si256((const __m256i *) (y[i].qs + 160));\n            const __m256i qy23 = _mm256_loadu_si256((const __m256i *) (y[i].qs + 192));\n            const __m256i qy45 = _mm256_loadu_si256((const __m256i *) (y[i].qs + 224));\n\n            qx01 = _mm256_maddubs_epi16(qx01, qy01);\n            qx23 = _mm256_maddubs_epi16(qx23, qy23);\n            qx45 = _mm256_maddubs_epi16(qx45, qy45);\n\n            sumi0 = _mm256_add_epi16(sumi0, qx01);\n            sumi1 = _mm256_add_epi16(sumi1, qx23);\n            sumi2 = _mm256_add_epi16(sumi2, qx45);\n        }\n\n        const __m256i ysum = _mm256_loadu_si256((const __m256i *) y[i].bsums);\n        const __m256 d = _mm256_set1_ps(y[i].d * GGML_FP16_TO_FP32(x[i].d));\n\n        sumi0 = _mm256_sub_epi16(sumi0, ysum);\n        sumi0 = _mm256_add_epi16(sumi0, _mm256_add_epi16(sumi1, sumi2));\n        sumi0 = _mm256_madd_epi16(sumi0, _mm256_set1_epi16(1));\n\n        sumf = _mm256_add_ps(_mm256_mul_ps(_mm256_cvtepi32_ps(sumi0), d), sumf);\n    }\n\n    *s = hsum_float_8(sumf);\n\n#else\n    const uint8_t pow3[6] = {1, 3, 9, 27, 81, 243};\n\n    float sumf = 0.0f;\n\n    for (int i = 0; i < nb; ++i) {\n        int sum = 0;\n\n        for (size_t j = 0; j < sizeof(x->qs) - sizeof(x->qs) % 32; j += 32) {\n            for (size_t l = 0; l < 5; ++l) {\n                for (size_t m = 0; m < 32; ++m) {\n                    uint8_t q = x[i].qs[j + m] * pow3[l];\n                    uint16_t xi = ((uint16_t) q * 3) >> 8;\n                    sum += (xi - 1) * y[i].qs[j*5 + l*32 + m];\n                }\n            }\n        }\n        for (size_t j = sizeof(x->qs) - sizeof(x->qs) % 32; j < sizeof(x->qs); j += 16) {\n            for (size_t l = 0; l < 5; ++l) {\n                for (size_t m = 0; m < 16; ++m) {\n                    uint8_t q = x[i].qs[j + m] * pow3[l];\n                    uint16_t xi = ((uint16_t) q * 3) >> 8;\n                    sum += (xi - 1) * y[i].qs[j*5 + l*16 + m];\n                }\n            }\n        }\n\n        for (size_t l = 0; l < 4; ++l) {\n            for (size_t j = 0; j < sizeof(x->qh); ++j) {\n                uint8_t q = x[i].qh[j] * pow3[l];\n                uint16_t xi = ((uint16_t) q * 3) >> 8;\n                sum += (xi - 1) * y[i].qs[sizeof(x->qs)*5 + l*sizeof(x->qh) + j];\n            }\n        }\n\n        sumf += (float) sum * (GGML_FP16_TO_FP32(x[i].d) * y[i].d);\n    }\n\n    *s = sumf;\n#endif\n}\n\nvoid ggml_vec_dot_tq2_0_q8_K(int n, float * restrict s, size_t bs, const void * restrict vx, size_t bx, const void * restrict vy, size_t by, int nrc) {\n    assert(nrc == 1);\n    UNUSED(nrc);\n    UNUSED(bx);\n    UNUSED(by);\n    UNUSED(bs);\n\n    const block_tq2_0 * restrict x = vx;\n    const block_q8_K  * restrict y = vy;\n\n    const int nb = n / QK_K;\n\n#if defined(__ARM_NEON)\n    float sumf = 0.0f;\n\n    const uint8x16_t m3 = vdupq_n_u8(3);\n\n    for (int i = 0; i < nb; ++i) {\n#if defined(__ARM_FEATURE_DOTPROD)\n        int32x4_t sumi0 = vdupq_n_s32(0);\n        int32x4_t sumi1 = vdupq_n_s32(0);\n#else\n        int16x8_t sumi0 = vdupq_n_s16(0);\n        int16x8_t sumi1 = vdupq_n_s16(0);\n#endif\n\n        for (size_t j = 0; j < sizeof(x->qs); j += 32) {\n            uint8x16_t qx0 = vld1q_u8(x[i].qs + j);\n            uint8x16_t qx1 = vld1q_u8(x[i].qs + j + 16);\n            uint8x16_t qx2 = vshrq_n_u8(qx0, 2);\n            uint8x16_t qx3 = vshrq_n_u8(qx1, 2);\n            uint8x16_t qx4 = vshrq_n_u8(qx0, 4);\n            uint8x16_t qx5 = vshrq_n_u8(qx1, 4);\n            uint8x16_t qx6 = vshrq_n_u8(qx0, 6);\n            uint8x16_t qx7 = vshrq_n_u8(qx1, 6);\n\n            int8x16_t sqx0 = vreinterpretq_s8_u8(vandq_u8(qx0, m3));\n            int8x16_t sqx1 = vreinterpretq_s8_u8(vandq_u8(qx1, m3));\n            int8x16_t sqx2 = vreinterpretq_s8_u8(vandq_u8(qx2, m3));\n            int8x16_t sqx3 = vreinterpretq_s8_u8(vandq_u8(qx3, m3));\n            int8x16_t sqx4 = vreinterpretq_s8_u8(vandq_u8(qx4, m3));\n            int8x16_t sqx5 = vreinterpretq_s8_u8(vandq_u8(qx5, m3));\n            int8x16_t sqx6 = vreinterpretq_s8_u8(vandq_u8(qx6, m3));\n            int8x16_t sqx7 = vreinterpretq_s8_u8(vandq_u8(qx7, m3));\n\n            const int8x16_t qy0 = vld1q_s8(y[i].qs + j*4 +   0);\n            const int8x16_t qy1 = vld1q_s8(y[i].qs + j*4 +  16);\n            const int8x16_t qy2 = vld1q_s8(y[i].qs + j*4 +  32);\n            const int8x16_t qy3 = vld1q_s8(y[i].qs + j*4 +  48);\n            const int8x16_t qy4 = vld1q_s8(y[i].qs + j*4 +  64);\n            const int8x16_t qy5 = vld1q_s8(y[i].qs + j*4 +  80);\n            const int8x16_t qy6 = vld1q_s8(y[i].qs + j*4 +  96);\n            const int8x16_t qy7 = vld1q_s8(y[i].qs + j*4 + 112);\n\n#if defined(__ARM_FEATURE_DOTPROD)\n            sumi0 = vdotq_s32(sumi0, sqx0, qy0);\n            sumi1 = vdotq_s32(sumi1, sqx1, qy1);\n            sumi0 = vdotq_s32(sumi0, sqx2, qy2);\n            sumi1 = vdotq_s32(sumi1, sqx3, qy3);\n            sumi0 = vdotq_s32(sumi0, sqx4, qy4);\n            sumi1 = vdotq_s32(sumi1, sqx5, qy5);\n            sumi0 = vdotq_s32(sumi0, sqx6, qy6);\n            sumi1 = vdotq_s32(sumi1, sqx7, qy7);\n#else\n            sumi0 = vmlal_s8(sumi0, vget_low_s8(sqx0), vget_low_s8(qy0));\n            sumi1 = vmlal_s8(sumi1, vget_high_s8(sqx0), vget_high_s8(qy0));\n            sumi0 = vmlal_s8(sumi0, vget_low_s8(sqx1), vget_low_s8(qy1));\n            sumi1 = vmlal_s8(sumi1, vget_high_s8(sqx1), vget_high_s8(qy1));\n            sumi0 = vmlal_s8(sumi0, vget_low_s8(sqx2), vget_low_s8(qy2));\n            sumi1 = vmlal_s8(sumi1, vget_high_s8(sqx2), vget_high_s8(qy2));\n            sumi0 = vmlal_s8(sumi0, vget_low_s8(sqx3), vget_low_s8(qy3));\n            sumi1 = vmlal_s8(sumi1, vget_high_s8(sqx3), vget_high_s8(qy3));\n            sumi0 = vmlal_s8(sumi0, vget_low_s8(sqx4), vget_low_s8(qy4));\n            sumi1 = vmlal_s8(sumi1, vget_high_s8(sqx4), vget_high_s8(qy4));\n            sumi0 = vmlal_s8(sumi0, vget_low_s8(sqx5), vget_low_s8(qy5));\n            sumi1 = vmlal_s8(sumi1, vget_high_s8(sqx5), vget_high_s8(qy5));\n            sumi0 = vmlal_s8(sumi0, vget_low_s8(sqx6), vget_low_s8(qy6));\n            sumi1 = vmlal_s8(sumi1, vget_high_s8(sqx6), vget_high_s8(qy6));\n            sumi0 = vmlal_s8(sumi0, vget_low_s8(sqx7), vget_low_s8(qy7));\n            sumi1 = vmlal_s8(sumi1, vget_high_s8(sqx7), vget_high_s8(qy7));\n#endif\n        }\n\n        const int16x8_t ysum0 = vld1q_s16(y[i].bsums);\n        const int16x8_t ysum1 = vld1q_s16(y[i].bsums + 8);\n\n        const float d = GGML_FP16_TO_FP32(x[i].d) * y[i].d;\n\n#if defined(__ARM_FEATURE_DOTPROD)\n        sumi0 = vaddq_s32(sumi0, sumi1);\n        sumi0 = vsubq_s32(sumi0, vpaddlq_s16(vaddq_s16(ysum0, ysum1)));\n\n        sumf += d * (float) vaddvq_s32(sumi0);\n#else\n        sumi0 = vaddq_s16(sumi0, sumi1);\n        sumi0 = vsubq_s16(sumi0, vaddq_s16(ysum0, ysum1));\n\n        sumf += d * (float) vaddlvq_s16(sumi0);\n#endif\n    }\n\n    *s = sumf;\n\n#elif defined(__AVX2__)\n    __m256 sumf = _mm256_setzero_ps();\n\n    for (int i = 0; i < nb; ++i) {\n        // 16-bit sums, because 256*127 still fits\n        __m256i sumi0 = _mm256_setzero_si256();\n        __m256i sumi1 = _mm256_setzero_si256();\n\n        for (size_t j = 0; j < sizeof(x->qs); j += 32) {\n            __m256i qx0 = _mm256_loadu_si256((const __m256i *) (x[i].qs + j));\n            __m256i qx1 = _mm256_srli_epi16(qx0, 2);\n            __m256i qx2 = _mm256_srli_epi16(qx0, 4);\n            __m256i qx3 = _mm256_srli_epi16(qx0, 6);\n\n            // 0, 1, 2 (should not be 3)\n            qx0 = _mm256_and_si256(qx0, _mm256_set1_epi8(3));\n            qx1 = _mm256_and_si256(qx1, _mm256_set1_epi8(3));\n            qx2 = _mm256_and_si256(qx2, _mm256_set1_epi8(3));\n            qx3 = _mm256_and_si256(qx3, _mm256_set1_epi8(3));\n\n            const __m256i qy0 = _mm256_loadu_si256((const __m256i *) (y[i].qs + j*4 +  0));\n            const __m256i qy1 = _mm256_loadu_si256((const __m256i *) (y[i].qs + j*4 + 32));\n            const __m256i qy2 = _mm256_loadu_si256((const __m256i *) (y[i].qs + j*4 + 64));\n            const __m256i qy3 = _mm256_loadu_si256((const __m256i *) (y[i].qs + j*4 + 96));\n\n            qx0 = _mm256_maddubs_epi16(qx0, qy0);\n            qx1 = _mm256_maddubs_epi16(qx1, qy1);\n            qx2 = _mm256_maddubs_epi16(qx2, qy2);\n            qx3 = _mm256_maddubs_epi16(qx3, qy3);\n\n            sumi0 = _mm256_add_epi16(sumi0, _mm256_add_epi16(qx0, qx1));\n            sumi1 = _mm256_add_epi16(sumi1, _mm256_add_epi16(qx2, qx3));\n        }\n\n        const __m256i ysum = _mm256_loadu_si256((const __m256i *) y[i].bsums);\n        const __m256 d = _mm256_set1_ps(y[i].d * GGML_FP16_TO_FP32(x[i].d));\n\n        sumi0 = _mm256_add_epi16(sumi0, sumi1);\n        sumi0 = _mm256_sub_epi16(sumi0, ysum);\n        sumi0 = _mm256_madd_epi16(sumi0, _mm256_set1_epi16(1));\n\n        sumf = _mm256_add_ps(_mm256_mul_ps(_mm256_cvtepi32_ps(sumi0), d), sumf);\n    }\n\n    *s = hsum_float_8(sumf);\n\n#else\n    float sumf = 0.0f;\n\n    for (int i = 0; i < nb; ++i) {\n        int32_t sumi = 0;\n\n        for (size_t j = 0; j < sizeof(x->qs); j += 32) {\n            for (size_t l = 0; l < 4; ++l) {\n                for (size_t k = 0; k < 32; ++k) {\n                    sumi += y[i].qs[j*4 + l*32 + k] * (((x[i].qs[j + k] >> (l*2)) & 3) - 1);\n                }\n            }\n        }\n\n        const float d = y[i].d * GGML_FP16_TO_FP32(x[i].d);\n\n        sumf += (float) sumi * d;\n    }\n\n    *s = sumf;\n#endif\n}\n\nvoid ggml_vec_dot_q2_K_q8_K(int n, float * restrict s, size_t bs, const void * restrict vx, size_t bx, const void * restrict vy, size_t by, int nrc) {\n    assert(nrc == 1);\n    UNUSED(nrc);\n    UNUSED(bx);\n    UNUSED(by);\n    UNUSED(bs);\n\n    const block_q2_K * restrict x = vx;\n    const block_q8_K * restrict y = vy;\n\n    const int nb = n / QK_K;\n\n#ifdef __ARM_NEON\n    const uint8x16_t m3 = vdupq_n_u8(0x3);\n    const uint8x16_t m4 = vdupq_n_u8(0xF);\n\n    const int32x4_t vzero = vdupq_n_s32(0);\n\n    ggml_int8x16x2_t q2bytes;\n    uint8_t aux[16];\n\n    float sum = 0;\n\n    for (int i = 0; i < nb; ++i) {\n        const float d = y[i].d * GGML_FP16_TO_FP32(x[i].d);\n        const float dmin = -y[i].d * GGML_FP16_TO_FP32(x[i].dmin);\n\n        const uint8_t * restrict q2 = x[i].qs;\n        const int8_t  * restrict q8 = y[i].qs;\n        const uint8_t * restrict sc = x[i].scales;\n\n        const uint8x16_t mins_and_scales = vld1q_u8(sc);\n        const uint8x16_t scales = vandq_u8(mins_and_scales, m4);\n        vst1q_u8(aux, scales);\n\n        const uint8x16_t mins = vshrq_n_u8(mins_and_scales, 4);\n        const ggml_int16x8x2_t q8sums = ggml_vld1q_s16_x2(y[i].bsums);\n        const ggml_int16x8x2_t mins16 = {{vreinterpretq_s16_u16(vmovl_u8(vget_low_u8(mins))), vreinterpretq_s16_u16(vmovl_u8(vget_high_u8(mins)))}};\n        const int32x4_t s0 = vaddq_s32(vmull_s16(vget_low_s16 (mins16.val[0]), vget_low_s16 (q8sums.val[0])),\n                                       vmull_s16(vget_high_s16(mins16.val[0]), vget_high_s16(q8sums.val[0])));\n        const int32x4_t s1 = vaddq_s32(vmull_s16(vget_low_s16 (mins16.val[1]), vget_low_s16 (q8sums.val[1])),\n                                       vmull_s16(vget_high_s16(mins16.val[1]), vget_high_s16(q8sums.val[1])));\n        sum += dmin * vaddvq_s32(vaddq_s32(s0, s1));\n\n        int isum = 0;\n        int is = 0;\n\n// We use this macro instead of a function call because for some reason\n// the code runs 2-3% slower, even if the function is declared inline\n#define MULTIPLY_ACCUM_WITH_SCALE(index)\\\n        isum += vaddvq_s32(ggml_vdotq_s32(vzero, q2bytes.val[0], q8bytes.val[0])) * aux[is+(index)];\\\n        isum += vaddvq_s32(ggml_vdotq_s32(vzero, q2bytes.val[1], q8bytes.val[1])) * aux[is+1+(index)];\n\n#define SHIFT_MULTIPLY_ACCUM_WITH_SCALE(shift, index)\\\n        q8bytes = ggml_vld1q_s8_x2(q8); q8 += 32;\\\n        q2bytes.val[0] = vreinterpretq_s8_u8(vandq_u8(vshrq_n_u8(q2bits.val[0], (shift)), m3));\\\n        q2bytes.val[1] = vreinterpretq_s8_u8(vandq_u8(vshrq_n_u8(q2bits.val[1], (shift)), m3));\\\n        MULTIPLY_ACCUM_WITH_SCALE((index));\n\n        for (int j = 0; j < QK_K/128; ++j) {\n            const ggml_uint8x16x2_t q2bits = ggml_vld1q_u8_x2(q2); q2 += 32;\n\n            ggml_int8x16x2_t q8bytes = ggml_vld1q_s8_x2(q8); q8 += 32;\n            q2bytes.val[0] = vreinterpretq_s8_u8(vandq_u8(q2bits.val[0], m3));\n            q2bytes.val[1] = vreinterpretq_s8_u8(vandq_u8(q2bits.val[1], m3));\n\n            MULTIPLY_ACCUM_WITH_SCALE(0);\n\n            SHIFT_MULTIPLY_ACCUM_WITH_SCALE(2, 2);\n            SHIFT_MULTIPLY_ACCUM_WITH_SCALE(4, 4);\n            SHIFT_MULTIPLY_ACCUM_WITH_SCALE(6, 6);\n\n            is += 8;\n        }\n\n        sum += d * isum;\n    }\n\n    *s = sum;\n\n#elif defined __AVX2__\n\n    const __m256i m3 = _mm256_set1_epi8(3);\n    const __m128i m4 = _mm_set1_epi8(0xF);\n\n    __m256 acc = _mm256_setzero_ps();\n\n    for (int i = 0; i < nb; ++i) {\n\n        const float d = y[i].d * GGML_FP16_TO_FP32(x[i].d);\n        const float dmin = -y[i].d * GGML_FP16_TO_FP32(x[i].dmin);\n\n        const uint8_t * restrict q2 = x[i].qs;\n        const int8_t  * restrict q8 = y[i].qs;\n\n        const __m128i mins_and_scales = _mm_loadu_si128((const __m128i*)x[i].scales);\n        const __m128i scales8 = _mm_and_si128(mins_and_scales, m4);\n        const __m128i mins8 = _mm_and_si128(_mm_srli_epi16(mins_and_scales, 4), m4);\n        const __m256i mins = _mm256_cvtepi8_epi16(mins8);\n        const __m256i prod = _mm256_madd_epi16(mins, _mm256_loadu_si256((const __m256i*)y[i].bsums));\n\n        acc = _mm256_fmadd_ps(_mm256_broadcast_ss(&dmin), _mm256_cvtepi32_ps(prod), acc);\n\n        const __m256i all_scales = _mm256_cvtepi8_epi16(scales8);\n        const __m128i l_scales = _mm256_extracti128_si256(all_scales, 0);\n        const __m128i h_scales = _mm256_extracti128_si256(all_scales, 1);\n        const __m256i scales[2] = {MM256_SET_M128I(l_scales, l_scales), MM256_SET_M128I(h_scales, h_scales)};\n\n        __m256i sumi = _mm256_setzero_si256();\n\n        for (int j = 0; j < QK_K/128; ++j) {\n\n            const __m256i q2bits = _mm256_loadu_si256((const __m256i*)q2); q2 += 32;\n\n            const __m256i q8_0 = _mm256_loadu_si256((const __m256i*)q8); q8 += 32;\n            const __m256i q8_1 = _mm256_loadu_si256((const __m256i*)q8); q8 += 32;\n            const __m256i q8_2 = _mm256_loadu_si256((const __m256i*)q8); q8 += 32;\n            const __m256i q8_3 = _mm256_loadu_si256((const __m256i*)q8); q8 += 32;\n\n            const __m256i q2_0 = _mm256_and_si256(q2bits, m3);\n            const __m256i q2_1 = _mm256_and_si256(_mm256_srli_epi16(q2bits, 2), m3);\n            const __m256i q2_2 = _mm256_and_si256(_mm256_srli_epi16(q2bits, 4), m3);\n            const __m256i q2_3 = _mm256_and_si256(_mm256_srli_epi16(q2bits, 6), m3);\n\n            __m256i p0 = _mm256_maddubs_epi16(q2_0, q8_0);\n            __m256i p1 = _mm256_maddubs_epi16(q2_1, q8_1);\n            __m256i p2 = _mm256_maddubs_epi16(q2_2, q8_2);\n            __m256i p3 = _mm256_maddubs_epi16(q2_3, q8_3);\n\n            p0 = _mm256_madd_epi16(_mm256_shuffle_epi8(scales[j], get_scale_shuffle_q3k(0)), p0);\n            p1 = _mm256_madd_epi16(_mm256_shuffle_epi8(scales[j], get_scale_shuffle_q3k(1)), p1);\n            p2 = _mm256_madd_epi16(_mm256_shuffle_epi8(scales[j], get_scale_shuffle_q3k(2)), p2);\n            p3 = _mm256_madd_epi16(_mm256_shuffle_epi8(scales[j], get_scale_shuffle_q3k(3)), p3);\n\n            p0 = _mm256_add_epi32(p0, p1);\n            p2 = _mm256_add_epi32(p2, p3);\n\n            sumi = _mm256_add_epi32(sumi, _mm256_add_epi32(p0, p2));\n        }\n\n        acc = _mm256_fmadd_ps(_mm256_broadcast_ss(&d), _mm256_cvtepi32_ps(sumi), acc);\n\n    }\n\n    *s = hsum_float_8(acc);\n\n#elif defined __AVX__\n\n    const __m128i m3 = _mm_set1_epi8(0x3);\n    const __m128i m4 = _mm_set1_epi8(0xF);\n    const __m128i m2 = _mm_set1_epi8(0x2);\n\n    __m256 acc = _mm256_setzero_ps();\n\n    for (int i = 0; i < nb; ++i) {\n\n        const float dall = y[i].d * GGML_FP16_TO_FP32(x[i].d);\n        const float dmin = -y[i].d * GGML_FP16_TO_FP32(x[i].dmin);\n\n        const uint8_t * restrict q2 = x[i].qs;\n        const int8_t  * restrict q8 = y[i].qs;\n\n        // load mins and scales from block_q2_K.scales[QK_K/16]\n        const __m128i mins_and_scales = _mm_loadu_si128((const __m128i*)x[i].scales);\n        const __m128i scales16 = _mm_and_si128(mins_and_scales, m4);\n        const __m128i mins16 = _mm_and_si128(_mm_srli_epi16(mins_and_scales, 4), m4);\n        const __m128i mins_0 = _mm_cvtepi8_epi16(mins16);\n        const __m128i mins_1 = _mm_cvtepi8_epi16(_mm_unpackhi_epi64(mins16, mins16));\n\n        // summs = y[i].bsums * (x[i].scales >> 4) in 16bits*8*2 to 32bits*4*2\n        const __m128i summs_0 = _mm_madd_epi16(mins_0, _mm_loadu_si128((const __m128i*)&y[i].bsums[0]));\n        const __m128i summs_1 = _mm_madd_epi16(mins_1, _mm_loadu_si128((const __m128i*)&y[i].bsums[8]));\n\n        // sumf += -dmin * summs in 32bits*8\n        acc = _mm256_add_ps(_mm256_mul_ps(_mm256_broadcast_ss(&dmin), _mm256_cvtepi32_ps(MM256_SET_M128I(summs_1, summs_0))), acc);\n\n        const __m128i scales_0 = _mm_cvtepi8_epi16(scales16);\n        const __m128i scales_1 = _mm_cvtepi8_epi16(_mm_unpackhi_epi64(scales16, scales16));\n        const __m128i scales[2] = { scales_0, scales_1 };\n\n        __m128i sumi_0 = _mm_setzero_si128();\n        __m128i sumi_1 = _mm_setzero_si128();\n\n        for (int j = 0; j < QK_K/128; ++j) {\n\n            // load Q8 quants int8*16*8 from block_q8_K.qs[QK_K]\n            const __m128i q8_0 = _mm_loadu_si128((const __m128i*)q8); q8 += 16;\n            const __m128i q8_1 = _mm_loadu_si128((const __m128i*)q8); q8 += 16;\n            const __m128i q8_2 = _mm_loadu_si128((const __m128i*)q8); q8 += 16;\n            const __m128i q8_3 = _mm_loadu_si128((const __m128i*)q8); q8 += 16;\n            const __m128i q8_4 = _mm_loadu_si128((const __m128i*)q8); q8 += 16;\n            const __m128i q8_5 = _mm_loadu_si128((const __m128i*)q8); q8 += 16;\n            const __m128i q8_6 = _mm_loadu_si128((const __m128i*)q8); q8 += 16;\n            const __m128i q8_7 = _mm_loadu_si128((const __m128i*)q8); q8 += 16;\n\n            // load 2bits*16*8 from block_q2_K.qs[QK_K/4]\n            __m128i q2bits = _mm_loadu_si128((const __m128i*)q2); q2 += 16;\n            const __m128i q2_0 = _mm_and_si128(q2bits, m3);\n            const __m128i q2_2 = _mm_and_si128(_mm_srli_epi16(q2bits, 2), m3);\n            const __m128i q2_4 = _mm_and_si128(_mm_srli_epi16(q2bits, 4), m3);\n            const __m128i q2_6 = _mm_and_si128(_mm_srli_epi16(q2bits, 6), m3);\n            q2bits = _mm_loadu_si128((const __m128i*)q2); q2 += 16;\n            const __m128i q2_1 = _mm_and_si128(q2bits, m3);\n            const __m128i q2_3 = _mm_and_si128(_mm_srli_epi16(q2bits, 2), m3);\n            const __m128i q2_5 = _mm_and_si128(_mm_srli_epi16(q2bits, 4), m3);\n            const __m128i q2_7 = _mm_and_si128(_mm_srli_epi16(q2bits, 6), m3);\n\n            // isuml = q8[l] * ((q2[l] >> shift) & 3) in 8bits*16*8 to 16bits*8*8\n            __m128i p0 = _mm_maddubs_epi16(q2_0, q8_0);\n            __m128i p1 = _mm_maddubs_epi16(q2_1, q8_1);\n            __m128i p2 = _mm_maddubs_epi16(q2_2, q8_2);\n            __m128i p3 = _mm_maddubs_epi16(q2_3, q8_3);\n            __m128i p4 = _mm_maddubs_epi16(q2_4, q8_4);\n            __m128i p5 = _mm_maddubs_epi16(q2_5, q8_5);\n            __m128i p6 = _mm_maddubs_epi16(q2_6, q8_6);\n            __m128i p7 = _mm_maddubs_epi16(q2_7, q8_7);\n\n            // isum += (x[i].scales[is++] & 0xF) * isuml in 16bits*8*8 to 32bits*4*8\n            __m128i shuffle = _mm_set1_epi16(0x0100);\n            p0 = _mm_madd_epi16(_mm_shuffle_epi8(scales[j], shuffle), p0);\n            shuffle = _mm_add_epi16(shuffle, m2);\n            p1 = _mm_madd_epi16(_mm_shuffle_epi8(scales[j], shuffle), p1);\n            shuffle = _mm_add_epi16(shuffle, m2);\n            p2 = _mm_madd_epi16(_mm_shuffle_epi8(scales[j], shuffle), p2);\n            shuffle = _mm_add_epi16(shuffle, m2);\n            p3 = _mm_madd_epi16(_mm_shuffle_epi8(scales[j], shuffle), p3);\n            shuffle = _mm_add_epi16(shuffle, m2);\n            p4 = _mm_madd_epi16(_mm_shuffle_epi8(scales[j], shuffle), p4);\n            shuffle = _mm_add_epi16(shuffle, m2);\n            p5 = _mm_madd_epi16(_mm_shuffle_epi8(scales[j], shuffle), p5);\n            shuffle = _mm_add_epi16(shuffle, m2);\n            p6 = _mm_madd_epi16(_mm_shuffle_epi8(scales[j], shuffle), p6);\n            shuffle = _mm_add_epi16(shuffle, m2);\n            p7 = _mm_madd_epi16(_mm_shuffle_epi8(scales[j], shuffle), p7);\n\n            p0 = _mm_add_epi32(p0, p1);\n            p2 = _mm_add_epi32(p2, p3);\n            p4 = _mm_add_epi32(p4, p5);\n            p6 = _mm_add_epi32(p6, p7);\n\n            // isum in 32bits*4*2\n            sumi_0 = _mm_add_epi32(sumi_0, _mm_add_epi32(p0, p2));\n            sumi_1 = _mm_add_epi32(sumi_1, _mm_add_epi32(p4, p6));\n        }\n\n        // sumf += dall * isum - dmin * summs in 32bits\n        __m256i sumi = MM256_SET_M128I(sumi_1, sumi_0);\n        acc = _mm256_add_ps(_mm256_mul_ps(_mm256_broadcast_ss(&dall), _mm256_cvtepi32_ps(sumi)), acc);\n    }\n\n    *s = hsum_float_8(acc);\n\n#elif defined __riscv_v_intrinsic\n\n    float sumf = 0;\n    uint8_t temp_01[32] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};\n\n    for (int i = 0; i < nb; ++i) {\n\n        const uint8_t * q2 = x[i].qs;\n        const  int8_t * q8 = y[i].qs;\n        const uint8_t * sc = x[i].scales;\n\n        const float dall = y[i].d * GGML_FP16_TO_FP32(x[i].d);\n        const float dmin = -y[i].d * GGML_FP16_TO_FP32(x[i].dmin);\n\n        size_t vl = 16;\n\n        vuint8m1_t scales = __riscv_vle8_v_u8m1(sc, vl);\n        vuint8m1_t aux = __riscv_vand_vx_u8m1(scales, 0x0F, vl);\n\n        vint16m1_t q8sums = __riscv_vle16_v_i16m1(y[i].bsums, vl);\n\n        vuint8mf2_t scales_2 = __riscv_vle8_v_u8mf2(sc, vl);\n        vuint8mf2_t mins8 = __riscv_vsrl_vx_u8mf2(scales_2, 0x4, vl);\n        vint16m1_t mins = __riscv_vreinterpret_v_u16m1_i16m1(__riscv_vzext_vf2_u16m1(mins8, vl));\n        vint32m2_t prod = __riscv_vwmul_vv_i32m2(q8sums, mins, vl);\n        vint32m1_t vsums = __riscv_vredsum_vs_i32m2_i32m1(prod, __riscv_vmv_v_x_i32m1(0, 1), vl);\n\n        sumf  += dmin * __riscv_vmv_x_s_i32m1_i32(vsums);\n\n        vl = 32;\n\n        vint32m1_t vzero = __riscv_vmv_v_x_i32m1(0, 1);\n        vuint8m1_t v_b = __riscv_vle8_v_u8m1(temp_01, vl);\n\n        uint8_t is=0;\n        int isum=0;\n\n        for (int j = 0; j < QK_K/128; ++j) {\n            // load Q2\n            vuint8m1_t q2_x = __riscv_vle8_v_u8m1(q2, vl);\n\n            vuint8m1_t q2_0 = __riscv_vand_vx_u8m1(q2_x, 0x03, vl);\n            vuint8m1_t q2_1 = __riscv_vand_vx_u8m1(__riscv_vsrl_vx_u8m1(q2_x, 0x2, vl), 0x03 , vl);\n            vuint8m1_t q2_2 = __riscv_vand_vx_u8m1(__riscv_vsrl_vx_u8m1(q2_x, 0x4, vl), 0x03 , vl);\n            vuint8m1_t q2_3 = __riscv_vand_vx_u8m1(__riscv_vsrl_vx_u8m1(q2_x, 0x6, vl), 0x03 , vl);\n\n            // duplicate scale elements for product\n            vuint8m1_t sc0 = __riscv_vrgather_vv_u8m1(aux, __riscv_vadd_vx_u8m1(v_b, 0+is, vl), vl);\n            vuint8m1_t sc1 = __riscv_vrgather_vv_u8m1(aux, __riscv_vadd_vx_u8m1(v_b, 2+is, vl), vl);\n            vuint8m1_t sc2 = __riscv_vrgather_vv_u8m1(aux, __riscv_vadd_vx_u8m1(v_b, 4+is, vl), vl);\n            vuint8m1_t sc3 = __riscv_vrgather_vv_u8m1(aux, __riscv_vadd_vx_u8m1(v_b, 6+is, vl), vl);\n\n            vint16m2_t p0 = __riscv_vreinterpret_v_u16m2_i16m2(__riscv_vwmulu_vv_u16m2(q2_0, sc0, vl));\n            vint16m2_t p1 = __riscv_vreinterpret_v_u16m2_i16m2(__riscv_vwmulu_vv_u16m2(q2_1, sc1, vl));\n            vint16m2_t p2 = __riscv_vreinterpret_v_u16m2_i16m2(__riscv_vwmulu_vv_u16m2(q2_2, sc2, vl));\n            vint16m2_t p3 = __riscv_vreinterpret_v_u16m2_i16m2(__riscv_vwmulu_vv_u16m2(q2_3, sc3, vl));\n\n            // load Q8\n            vint8m1_t q8_0 = __riscv_vle8_v_i8m1(q8, vl);\n            vint8m1_t q8_1 = __riscv_vle8_v_i8m1(q8+32, vl);\n            vint8m1_t q8_2 = __riscv_vle8_v_i8m1(q8+64, vl);\n            vint8m1_t q8_3 = __riscv_vle8_v_i8m1(q8+96, vl);\n\n            vint32m4_t s0 = __riscv_vwmul_vv_i32m4(p0, __riscv_vwcvt_x_x_v_i16m2(q8_0, vl), vl);\n            vint32m4_t s1 = __riscv_vwmul_vv_i32m4(p1, __riscv_vwcvt_x_x_v_i16m2(q8_1, vl), vl);\n            vint32m4_t s2 = __riscv_vwmul_vv_i32m4(p2, __riscv_vwcvt_x_x_v_i16m2(q8_2, vl), vl);\n            vint32m4_t s3 = __riscv_vwmul_vv_i32m4(p3, __riscv_vwcvt_x_x_v_i16m2(q8_3, vl), vl);\n\n            vint32m1_t isum0 = __riscv_vredsum_vs_i32m4_i32m1(__riscv_vadd_vv_i32m4(s0, s1, vl), vzero, vl);\n            vint32m1_t isum1 = __riscv_vredsum_vs_i32m4_i32m1(__riscv_vadd_vv_i32m4(s2, s3, vl), isum0, vl);\n\n            isum += __riscv_vmv_x_s_i32m1_i32(isum1);\n\n            q2+=32;  q8+=128;  is=8;\n\n        }\n\n        sumf += dall * isum;\n\n    }\n\n    *s = sumf;\n\n#elif defined(__POWER9_VECTOR__)\n    const vector signed char lowMask = vec_splats((signed char)0x3);\n    const vector signed char lowScaleMask = vec_splats((signed char)0xF);\n    const vector int v0 = vec_splats((int32_t)0);\n    const vector unsigned char v2 = vec_splats((unsigned char)0x2);\n    const vector unsigned char v6 = vec_splats((unsigned char)0x6);\n    const vector unsigned char v4 = vec_splats((unsigned char)0x4);\n\n    vector float vsumf0 = vec_splats(0.0f);\n    vector float vsumf1 = vec_splats(0.0f);\n    vector float vsumf2 = vec_splats(0.0f);\n    vector float vsumf3 = vec_splats(0.0f);\n\n    for (int i = 0; i < nb; ++i) {\n        vector float vxd = vec_splats(GGML_FP16_TO_FP32(x[i].d));\n        vector float vyd = vec_splats(y[i].d);\n        vector float vd = vec_mul(vxd, vyd);\n\n        vector float vxmin = vec_splats(GGML_FP16_TO_FP32(x[i].dmin));\n        vector float vdmin = vec_mul(vxmin, vyd);\n\n        vector signed short q8ysums0 = vec_xl( 0, y[i].bsums);\n        vector signed short q8ysums1 = vec_xl(16, y[i].bsums);\n\n        vector signed char q2xmins = (vector signed char)vec_xl( 0, x[i].scales);\n        vector signed char vscales = vec_and(q2xmins, lowScaleMask);\n\n        q2xmins = vec_sr(q2xmins, v4);\n        vector signed short q2xmins0 = vec_unpackh(q2xmins);\n        vector signed short q2xmins1 = vec_unpackl(q2xmins);\n\n        vector signed int prod0 = vec_mule(q2xmins0, q8ysums0);\n        vector signed int prod1 = vec_mulo(q2xmins0, q8ysums0);\n        vector signed int prod2 = vec_mule(q2xmins1, q8ysums1);\n        vector signed int prod3 = vec_mulo(q2xmins1, q8ysums1);\n\n        vsumf0 = vec_nmsub(vec_ctf(prod0, 0), vdmin, vsumf0);\n        vsumf1 = vec_nmsub(vec_ctf(prod1, 0), vdmin, vsumf1);\n        vsumf2 = vec_nmsub(vec_ctf(prod2, 0), vdmin, vsumf2);\n        vsumf3 = vec_nmsub(vec_ctf(prod3, 0), vdmin, vsumf3);\n\n        vector signed int vsumi0 = v0;\n        vector signed int vsumi1 = v0;\n        vector signed int vsumi2 = v0;\n        vector signed int vsumi3 = v0;\n        vector signed int vsumi4 = v0;\n        vector signed int vsumi5 = v0;\n        vector signed int vsumi6 = v0;\n        vector signed int vsumi7 = v0;\n\n        const uint8_t * restrict q2 = x[i].qs;\n        const int8_t  * restrict q8 = y[i].qs;\n\n        for (int j = 0; j < QK_K/128; ++j) {\n            __builtin_prefetch(q2, 0, 1);\n            __builtin_prefetch(q8, 0, 1);\n\n            vector signed char qxs0 = (vector signed char)vec_xl( 0, q2);\n            vector signed char qxs1 = (vector signed char)vec_xl(16, q2);\n            q2 += 32;\n\n            vector unsigned char q2x00 = (vector unsigned char)vec_and(qxs0, lowMask);\n            vector unsigned char q2x01 = (vector unsigned char)vec_and(vec_sr(qxs0, v2), lowMask);\n            vector unsigned char q2x02 = (vector unsigned char)vec_and(vec_sr(qxs0, v4), lowMask);\n            vector unsigned char q2x03 = (vector unsigned char)vec_and(vec_sr(qxs0, v6), lowMask);\n            vector unsigned char q2x10 = (vector unsigned char)vec_and(qxs1, lowMask);\n            vector unsigned char q2x11 = (vector unsigned char)vec_and(vec_sr(qxs1, v2), lowMask);\n            vector unsigned char q2x12 = (vector unsigned char)vec_and(vec_sr(qxs1, v4), lowMask);\n            vector unsigned char q2x13 = (vector unsigned char)vec_and(vec_sr(qxs1, v6), lowMask);\n\n            vector signed char q8y00 = vec_xl(  0, q8);\n            vector signed char q8y10 = vec_xl( 16, q8);\n            vector signed char q8y01 = vec_xl( 32, q8);\n            vector signed char q8y11 = vec_xl( 48, q8);\n            vector signed char q8y02 = vec_xl( 64, q8);\n            vector signed char q8y12 = vec_xl( 80, q8);\n            vector signed char q8y03 = vec_xl( 96, q8);\n            vector signed char q8y13 = vec_xl(112, q8);\n            q8 += 128;\n\n            vector signed int qv0 = vec_msum(q8y00, q2x00, v0);\n            vector signed int qv1 = vec_msum(q8y01, q2x01, v0);\n            vector signed int qv2 = vec_msum(q8y02, q2x02, v0);\n            vector signed int qv3 = vec_msum(q8y03, q2x03, v0);\n            vector signed int qv4 = vec_msum(q8y10, q2x10, v0);\n            vector signed int qv5 = vec_msum(q8y11, q2x11, v0);\n            vector signed int qv6 = vec_msum(q8y12, q2x12, v0);\n            vector signed int qv7 = vec_msum(q8y13, q2x13, v0);\n\n            vector signed short vscales_07 = vec_unpackh(vscales);\n            vector signed int vscales_03 = vec_unpackh(vscales_07);\n            vector signed int vscales_47 = vec_unpackl(vscales_07);\n            vector signed int vs0 = vec_splat(vscales_03, 0);\n            vector signed int vs1 = vec_splat(vscales_03, 1);\n            vector signed int vs2 = vec_splat(vscales_03, 2);\n            vector signed int vs3 = vec_splat(vscales_03, 3);\n            vector signed int vs4 = vec_splat(vscales_47, 0);\n            vector signed int vs5 = vec_splat(vscales_47, 1);\n            vector signed int vs6 = vec_splat(vscales_47, 2);\n            vector signed int vs7 = vec_splat(vscales_47, 3);\n            vscales = vec_sld(vscales, vscales, 8);\n\n            vsumi0 = vec_add(vec_mul(qv0, vs0), vsumi0);\n            vsumi1 = vec_add(vec_mul(qv1, vs2), vsumi1);\n            vsumi2 = vec_add(vec_mul(qv2, vs4), vsumi2);\n            vsumi3 = vec_add(vec_mul(qv3, vs6), vsumi3);\n            vsumi4 = vec_add(vec_mul(qv4, vs1), vsumi4);\n            vsumi5 = vec_add(vec_mul(qv5, vs3), vsumi5);\n            vsumi6 = vec_add(vec_mul(qv6, vs5), vsumi6);\n            vsumi7 = vec_add(vec_mul(qv7, vs7), vsumi7);\n        }\n\n        vsumi0 = vec_add(vsumi0, vsumi4);\n        vsumi1 = vec_add(vsumi1, vsumi5);\n        vsumi2 = vec_add(vsumi2, vsumi6);\n        vsumi3 = vec_add(vsumi3, vsumi7);\n\n        vsumf0 = vec_madd(vec_ctf(vsumi0, 0), vd, vsumf0);\n        vsumf1 = vec_madd(vec_ctf(vsumi1, 0), vd, vsumf1);\n        vsumf2 = vec_madd(vec_ctf(vsumi2, 0), vd, vsumf2);\n        vsumf3 = vec_madd(vec_ctf(vsumi3, 0), vd, vsumf3);\n    }\n\n    vsumf0 = vec_add(vsumf0, vsumf2);\n    vsumf1 = vec_add(vsumf1, vsumf3);\n\n    vsumf0 = vec_add(vsumf0, vsumf1);\n\n    vsumf0 = vec_add(vsumf0, vec_sld(vsumf0, vsumf0, 4));\n    vsumf0 = vec_add(vsumf0, vec_sld(vsumf0, vsumf0, 8));\n\n    *s = vec_extract(vsumf0, 0);\n\n#elif defined __loongarch_asx\n\n    const __m256i m3 = __lasx_xvreplgr2vr_b(3);\n    const __m128i m4 = __lsx_vreplgr2vr_b(0xF);\n\n    __m256 acc = (__m256)__lasx_xvldi(0);\n\n    for (int i = 0; i < nb; ++i) {\n\n        const float d = y[i].d * GGML_FP16_TO_FP32(x[i].d);\n        const float dmin = -y[i].d * GGML_FP16_TO_FP32(x[i].dmin);\n\n        const uint8_t * restrict q2 = x[i].qs;\n        const int8_t  * restrict q8 = y[i].qs;\n\n        const __m128i mins_and_scales = __lsx_vld((const __m128i*)x[i].scales, 0);\n        const __m128i scales8 = __lsx_vand_v(mins_and_scales, m4);\n        const __m128i mins8 = __lsx_vand_v(__lsx_vsrli_h(mins_and_scales, 4), m4);\n        const __m256i mins = lasx_ext8_16(mins8);\n        const __m256i prod = lasx_madd_h(mins, __lasx_xvld((const __m256i*)y[i].bsums, 0));\n\n        acc = __lasx_xvfmadd_s(__lasx_xvreplfr2vr_s(dmin), __lasx_xvffint_s_w(prod), acc);\n\n        const __m256i all_scales = lasx_ext8_16(scales8);\n        const __m128i l_scales = lasx_extracti128(all_scales, 0);\n        const __m128i h_scales = lasx_extracti128(all_scales, 1);\n        const __m256i scales[2] = {lasx_insertf128(l_scales, l_scales), lasx_insertf128(h_scales, h_scales)};\n\n        __m256i sumi = __lasx_xvldi(0);\n\n        for (int j = 0; j < QK_K/128; ++j) {\n\n            const __m256i q2bits = __lasx_xvld((const __m256i*)q2, 0); q2 += 32;\n\n            const __m256i q8_0 = __lasx_xvld((const __m256i*)q8, 0); q8 += 32;\n            const __m256i q8_1 = __lasx_xvld((const __m256i*)q8, 0); q8 += 32;\n            const __m256i q8_2 = __lasx_xvld((const __m256i*)q8, 0); q8 += 32;\n            const __m256i q8_3 = __lasx_xvld((const __m256i*)q8, 0); q8 += 32;\n\n            const __m256i q2_0 = __lasx_xvand_v(q2bits, m3);\n            const __m256i q2_1 = __lasx_xvand_v(__lasx_xvsrli_h(q2bits, 2), m3);\n            const __m256i q2_2 = __lasx_xvand_v(__lasx_xvsrli_h(q2bits, 4), m3);\n            const __m256i q2_3 = __lasx_xvand_v(__lasx_xvsrli_h(q2bits, 6), m3);\n\n            __m256i p0 = lasx_maddubs_h(q2_0, q8_0);\n            __m256i p1 = lasx_maddubs_h(q2_1, q8_1);\n            __m256i p2 = lasx_maddubs_h(q2_2, q8_2);\n            __m256i p3 = lasx_maddubs_h(q2_3, q8_3);\n\n            p0 = lasx_madd_h(lasx_shuffle_b(scales[j], get_scale_shuffle_q3k(0)), p0);\n            p1 = lasx_madd_h(lasx_shuffle_b(scales[j], get_scale_shuffle_q3k(1)), p1);\n            p2 = lasx_madd_h(lasx_shuffle_b(scales[j], get_scale_shuffle_q3k(2)), p2);\n            p3 = lasx_madd_h(lasx_shuffle_b(scales[j], get_scale_shuffle_q3k(3)), p3);\n\n            p0 = __lasx_xvadd_w(p0, p1);\n            p2 = __lasx_xvadd_w(p2, p3);\n\n            sumi = __lasx_xvadd_w(sumi, __lasx_xvadd_w(p0, p2));\n        }\n\n        acc = __lasx_xvfmadd_s(__lasx_xvreplfr2vr_s(d), __lasx_xvffint_s_w(sumi), acc);\n\n    }\n\n    *s = hsum_float_8(acc);\n\n#else\n\n    float sumf = 0;\n\n    for (int i = 0; i < nb; ++i) {\n\n        const uint8_t * q2 = x[i].qs;\n        const  int8_t * q8 = y[i].qs;\n        const uint8_t * sc = x[i].scales;\n\n        int summs = 0;\n        for (int j = 0; j < 16; ++j) {\n            summs += y[i].bsums[j] * (sc[j] >> 4);\n        }\n\n        const float dall = y[i].d * GGML_FP16_TO_FP32(x[i].d);\n        const float dmin = y[i].d * GGML_FP16_TO_FP32(x[i].dmin);\n\n        int isum = 0;\n        int is = 0;\n        int d;\n        for (int k = 0; k < QK_K/128; ++k) {\n            int shift = 0;\n            for (int j = 0; j < 4; ++j) {\n                d = sc[is++] & 0xF;\n                int isuml = 0;\n                for (int l =  0; l < 16; ++l) isuml += q8[l] * ((q2[l] >> shift) & 3);\n                isum += d * isuml;\n                d = sc[is++] & 0xF;\n                isuml = 0;\n                for (int l = 16; l < 32; ++l) isuml += q8[l] * ((q2[l] >> shift) & 3);\n                isum += d * isuml;\n                shift += 2;\n                q8 += 32;\n            }\n            q2 += 32;\n        }\n        sumf += dall * isum - dmin * summs;\n    }\n    *s = sumf;\n#endif\n}\n\nvoid ggml_vec_dot_q3_K_q8_K(int n, float * restrict s, size_t bs, const void * restrict vx, size_t bx, const void * restrict vy, size_t by, int nrc) {\n    assert(n % QK_K == 0);\n    assert(nrc == 1);\n    UNUSED(nrc);\n    UNUSED(bx);\n    UNUSED(by);\n    UNUSED(bs);\n\n    const uint32_t kmask1 = 0x03030303;\n    const uint32_t kmask2 = 0x0f0f0f0f;\n\n    const block_q3_K * restrict x = vx;\n    const block_q8_K * restrict y = vy;\n\n    const int nb = n / QK_K;\n\n#ifdef __ARM_NEON\n\n    uint32_t aux[3];\n    uint32_t utmp[4];\n\n    const uint8x16_t m3b = vdupq_n_u8(0x3);\n    const int32x4_t  vzero = vdupq_n_s32(0);\n\n    const uint8x16_t m0 = vdupq_n_u8(1);\n    const uint8x16_t m1 = vshlq_n_u8(m0, 1);\n    const uint8x16_t m2 = vshlq_n_u8(m0, 2);\n    const uint8x16_t m3 = vshlq_n_u8(m0, 3);\n    const int8_t m32 = 32;\n\n    ggml_int8x16x4_t q3bytes;\n\n    float sum = 0;\n\n    for (int i = 0; i < nb; ++i) {\n\n        const float d = y[i].d * GGML_FP16_TO_FP32(x[i].d);\n\n        const uint8_t * restrict q3 = x[i].qs;\n        const uint8_t * restrict qh = x[i].hmask;\n        const int8_t  * restrict q8 = y[i].qs;\n\n        ggml_uint8x16x2_t qhbits = ggml_vld1q_u8_x2(qh);\n\n        ggml_uint8x16x4_t q3h;\n\n        int32_t isum = 0;\n\n        // Set up scales\n        memcpy(aux, x[i].scales, 12);\n        utmp[3] = ((aux[1] >> 4) & kmask2) | (((aux[2] >> 6) & kmask1) << 4);\n        utmp[2] = ((aux[0] >> 4) & kmask2) | (((aux[2] >> 4) & kmask1) << 4);\n        utmp[1] = (aux[1] & kmask2) | (((aux[2] >> 2) & kmask1) << 4);\n        utmp[0] = (aux[0] & kmask2) | (((aux[2] >> 0) & kmask1) << 4);\n\n        int8_t * scale = (int8_t *)utmp;\n        for (int j = 0; j < 16; ++j) scale[j] -= m32;\n\n        for (int j = 0; j < QK_K/128; ++j) {\n\n            const ggml_uint8x16x2_t q3bits = ggml_vld1q_u8_x2(q3); q3 += 32;\n            const ggml_int8x16x4_t q8bytes_1 = ggml_vld1q_s8_x4(q8); q8 += 64;\n            const ggml_int8x16x4_t q8bytes_2 = ggml_vld1q_s8_x4(q8); q8 += 64;\n\n            q3h.val[0] = vshlq_n_u8(vbicq_u8(m0, qhbits.val[0]), 2);\n            q3h.val[1] = vshlq_n_u8(vbicq_u8(m0, qhbits.val[1]), 2);\n            q3h.val[2] = vshlq_n_u8(vbicq_u8(m1, qhbits.val[0]), 1);\n            q3h.val[3] = vshlq_n_u8(vbicq_u8(m1, qhbits.val[1]), 1);\n\n            q3bytes.val[0] = vsubq_s8(vreinterpretq_s8_u8(vandq_u8(q3bits.val[0], m3b)), vreinterpretq_s8_u8(q3h.val[0]));\n            q3bytes.val[1] = vsubq_s8(vreinterpretq_s8_u8(vandq_u8(q3bits.val[1], m3b)), vreinterpretq_s8_u8(q3h.val[1]));\n            q3bytes.val[2] = vsubq_s8(vreinterpretq_s8_u8(vandq_u8(vshrq_n_u8(q3bits.val[0], 2), m3b)), vreinterpretq_s8_u8(q3h.val[2]));\n            q3bytes.val[3] = vsubq_s8(vreinterpretq_s8_u8(vandq_u8(vshrq_n_u8(q3bits.val[1], 2), m3b)), vreinterpretq_s8_u8(q3h.val[3]));\n\n            isum += vaddvq_s32(ggml_vdotq_s32(vzero, q3bytes.val[0], q8bytes_1.val[0])) * scale[0];\n            isum += vaddvq_s32(ggml_vdotq_s32(vzero, q3bytes.val[1], q8bytes_1.val[1])) * scale[1];\n            isum += vaddvq_s32(ggml_vdotq_s32(vzero, q3bytes.val[2], q8bytes_1.val[2])) * scale[2];\n            isum += vaddvq_s32(ggml_vdotq_s32(vzero, q3bytes.val[3], q8bytes_1.val[3])) * scale[3];\n\n            scale += 4;\n\n            q3h.val[0] = vbicq_u8(m2, qhbits.val[0]);\n            q3h.val[1] = vbicq_u8(m2, qhbits.val[1]);\n            q3h.val[2] = vshrq_n_u8(vbicq_u8(m3, qhbits.val[0]), 1);\n            q3h.val[3] = vshrq_n_u8(vbicq_u8(m3, qhbits.val[1]), 1);\n\n            q3bytes.val[0] = vsubq_s8(vreinterpretq_s8_u8(vandq_u8(vshrq_n_u8(q3bits.val[0], 4), m3b)), vreinterpretq_s8_u8(q3h.val[0]));\n            q3bytes.val[1] = vsubq_s8(vreinterpretq_s8_u8(vandq_u8(vshrq_n_u8(q3bits.val[1], 4), m3b)), vreinterpretq_s8_u8(q3h.val[1]));\n            q3bytes.val[2] = vsubq_s8(vreinterpretq_s8_u8(vandq_u8(vshrq_n_u8(q3bits.val[0], 6), m3b)), vreinterpretq_s8_u8(q3h.val[2]));\n            q3bytes.val[3] = vsubq_s8(vreinterpretq_s8_u8(vandq_u8(vshrq_n_u8(q3bits.val[1], 6), m3b)), vreinterpretq_s8_u8(q3h.val[3]));\n\n            isum += vaddvq_s32(ggml_vdotq_s32(vzero, q3bytes.val[0], q8bytes_2.val[0])) * scale[0];\n            isum += vaddvq_s32(ggml_vdotq_s32(vzero, q3bytes.val[1], q8bytes_2.val[1])) * scale[1];\n            isum += vaddvq_s32(ggml_vdotq_s32(vzero, q3bytes.val[2], q8bytes_2.val[2])) * scale[2];\n            isum += vaddvq_s32(ggml_vdotq_s32(vzero, q3bytes.val[3], q8bytes_2.val[3])) * scale[3];\n\n            scale += 4;\n\n            if (j == 0) {\n                qhbits.val[0] = vshrq_n_u8(qhbits.val[0], 4);\n                qhbits.val[1] = vshrq_n_u8(qhbits.val[1], 4);\n            }\n\n        }\n        sum += d * isum;\n\n    }\n\n    *s = sum;\n\n#elif defined __AVX2__\n\n    const __m256i m3 = _mm256_set1_epi8(3);\n    const __m256i mone = _mm256_set1_epi8(1);\n    const __m128i m32 = _mm_set1_epi8(32);\n\n    __m256 acc = _mm256_setzero_ps();\n\n    uint32_t aux[3];\n\n    for (int i = 0; i < nb; ++i) {\n\n        const float d = y[i].d * GGML_FP16_TO_FP32(x[i].d);\n\n        const uint8_t * restrict q3 = x[i].qs;\n        const int8_t  * restrict q8 = y[i].qs;\n\n        // Set up scales\n        memcpy(aux, x[i].scales, 12);\n        __m128i scales128 = _mm_set_epi32(\n                ((aux[1] >> 4) & kmask2) | (((aux[2] >> 6) & kmask1) << 4),\n                ((aux[0] >> 4) & kmask2) | (((aux[2] >> 4) & kmask1) << 4),\n                (aux[1] & kmask2) | (((aux[2] >> 2) & kmask1) << 4),\n                (aux[0] & kmask2) | (((aux[2] >> 0) & kmask1) << 4));\n        scales128 = _mm_sub_epi8(scales128, m32);\n        const __m256i all_scales = _mm256_cvtepi8_epi16(scales128);\n        const __m128i l_scales = _mm256_extracti128_si256(all_scales, 0);\n        const __m128i h_scales = _mm256_extracti128_si256(all_scales, 1);\n        const __m256i scales[2] = {MM256_SET_M128I(l_scales, l_scales), MM256_SET_M128I(h_scales, h_scales)};\n\n        // high bit\n        const __m256i hbits = _mm256_loadu_si256((const __m256i*)x[i].hmask);\n\n        // integer accumulator\n        __m256i sumi = _mm256_setzero_si256();\n\n        int bit = 0;\n        int is  = 0;\n\n        for (int j = 0; j < QK_K/128; ++j) {\n            // load low 2 bits\n            const __m256i q3bits = _mm256_loadu_si256((const __m256i*)q3); q3 += 32;\n\n            // prepare low and high bits\n            const __m256i q3l_0 = _mm256_and_si256(q3bits, m3);\n            const __m256i q3h_0 = _mm256_slli_epi16(_mm256_srli_epi16(_mm256_andnot_si256(hbits, _mm256_slli_epi16(mone, bit)), bit), 2);\n            ++bit;\n\n            const __m256i q3l_1 = _mm256_and_si256(_mm256_srli_epi16(q3bits, 2), m3);\n            const __m256i q3h_1 = _mm256_slli_epi16(_mm256_srli_epi16(_mm256_andnot_si256(hbits, _mm256_slli_epi16(mone, bit)), bit), 2);\n            ++bit;\n\n            const __m256i q3l_2 = _mm256_and_si256(_mm256_srli_epi16(q3bits, 4), m3);\n            const __m256i q3h_2 = _mm256_slli_epi16(_mm256_srli_epi16(_mm256_andnot_si256(hbits, _mm256_slli_epi16(mone, bit)), bit), 2);\n            ++bit;\n\n            const __m256i q3l_3 = _mm256_and_si256(_mm256_srli_epi16(q3bits, 6), m3);\n            const __m256i q3h_3 = _mm256_slli_epi16(_mm256_srli_epi16(_mm256_andnot_si256(hbits, _mm256_slli_epi16(mone, bit)), bit), 2);\n            ++bit;\n\n            // load Q8 quants\n            const __m256i q8_0 = _mm256_loadu_si256((const __m256i*)q8); q8 += 32;\n            const __m256i q8_1 = _mm256_loadu_si256((const __m256i*)q8); q8 += 32;\n            const __m256i q8_2 = _mm256_loadu_si256((const __m256i*)q8); q8 += 32;\n            const __m256i q8_3 = _mm256_loadu_si256((const __m256i*)q8); q8 += 32;\n\n            // Dot product: we multiply the 2 low bits and 1 high bit part separately, so we can use _mm256_maddubs_epi16,\n            // and then subtract. The high bit part has the 2 already subtracted (and so, it is zero if the high bit was not set,\n            // and 2 if the high bit was set)\n            __m256i q8s_0 = _mm256_maddubs_epi16(q3h_0, q8_0);\n            __m256i q8s_1 = _mm256_maddubs_epi16(q3h_1, q8_1);\n            __m256i q8s_2 = _mm256_maddubs_epi16(q3h_2, q8_2);\n            __m256i q8s_3 = _mm256_maddubs_epi16(q3h_3, q8_3);\n\n            __m256i p16_0 = _mm256_maddubs_epi16(q3l_0, q8_0);\n            __m256i p16_1 = _mm256_maddubs_epi16(q3l_1, q8_1);\n            __m256i p16_2 = _mm256_maddubs_epi16(q3l_2, q8_2);\n            __m256i p16_3 = _mm256_maddubs_epi16(q3l_3, q8_3);\n\n            p16_0 = _mm256_sub_epi16(p16_0, q8s_0);\n            p16_1 = _mm256_sub_epi16(p16_1, q8s_1);\n            p16_2 = _mm256_sub_epi16(p16_2, q8s_2);\n            p16_3 = _mm256_sub_epi16(p16_3, q8s_3);\n\n            // multiply with scales\n            p16_0 = _mm256_madd_epi16(_mm256_shuffle_epi8(scales[j], get_scale_shuffle_q3k(is + 0)), p16_0);\n            p16_1 = _mm256_madd_epi16(_mm256_shuffle_epi8(scales[j], get_scale_shuffle_q3k(is + 1)), p16_1);\n            p16_2 = _mm256_madd_epi16(_mm256_shuffle_epi8(scales[j], get_scale_shuffle_q3k(is + 2)), p16_2);\n            p16_3 = _mm256_madd_epi16(_mm256_shuffle_epi8(scales[j], get_scale_shuffle_q3k(is + 3)), p16_3);\n\n            // accumulate\n            p16_0 = _mm256_add_epi32(p16_0, p16_1);\n            p16_2 = _mm256_add_epi32(p16_2, p16_3);\n            sumi  = _mm256_add_epi32(sumi, _mm256_add_epi32(p16_0, p16_2));\n\n        }\n\n        // multiply with block scale and accumulate\n        acc = _mm256_fmadd_ps(_mm256_broadcast_ss(&d), _mm256_cvtepi32_ps(sumi), acc);\n\n    }\n\n    *s = hsum_float_8(acc);\n\n#elif defined __AVX__\n\n    const __m128i m3 = _mm_set1_epi8(3);\n    const __m128i mone = _mm_set1_epi8(1);\n    const __m128i m32 = _mm_set1_epi8(32);\n    const __m128i m2 = _mm_set1_epi8(2);\n\n    __m256 acc = _mm256_setzero_ps();\n\n    const uint32_t *aux;\n\n    for (int i = 0; i < nb; ++i) {\n\n        const float d = y[i].d * GGML_FP16_TO_FP32(x[i].d);\n\n        const uint8_t * restrict q3 = x[i].qs;\n        const int8_t  * restrict q8 = y[i].qs;\n\n        // Set up scales\n        aux = (const uint32_t *)x[i].scales;\n        __m128i scales128 = _mm_set_epi32(\n                ((aux[1] >> 4) & kmask2) | (((aux[2] >> 6) & kmask1) << 4),\n                ((aux[0] >> 4) & kmask2) | (((aux[2] >> 4) & kmask1) << 4),\n                (aux[1] & kmask2) | (((aux[2] >> 2) & kmask1) << 4),\n                (aux[0] & kmask2) | (((aux[2] >> 0) & kmask1) << 4));\n        scales128 = _mm_sub_epi8(scales128, m32);\n        const __m128i scales_0 = _mm_cvtepi8_epi16(scales128);\n        const __m128i scales_1 = _mm_cvtepi8_epi16(_mm_unpackhi_epi64(scales128, scales128));\n        const __m128i scales[2] = { scales_0, scales_1 };\n\n        // high bit *128*2 from block_q3_K.hmask[QK_K/8]\n        const __m128i hbits_0 = _mm_loadu_si128((const __m128i*)&x[i].hmask[0]);\n        const __m128i hbits_1 = _mm_loadu_si128((const __m128i*)&x[i].hmask[16]);\n\n        // integer accumulator\n        __m128i sumi_0 = _mm_setzero_si128();\n        __m128i sumi_1 = _mm_setzero_si128();\n\n        for (int j = 0; j < QK_K/128; ++j) {\n            // load low 2 bits *64*2 from block_q3_K.qs[QK_K/4]\n            const __m128i q3bits_0 = _mm_loadu_si128((const __m128i*)q3); q3 += 16;\n            const __m128i q3bits_1 = _mm_loadu_si128((const __m128i*)q3); q3 += 16;\n\n            // prepare low and high bits\n            const int bit = j << 2;\n\n            const __m128i q3l_0 = _mm_and_si128(q3bits_0, m3);\n            const __m128i q3l_1 = _mm_and_si128(q3bits_1, m3);\n            const __m128i q3h_0 = _mm_slli_epi16(_mm_srli_epi16(_mm_andnot_si128(hbits_0, _mm_slli_epi16(mone, bit)), bit), 2);\n            const __m128i q3h_1 = _mm_slli_epi16(_mm_srli_epi16(_mm_andnot_si128(hbits_1, _mm_slli_epi16(mone, bit)), bit), 2);\n\n            const __m128i q3l_2 = _mm_and_si128(_mm_srli_epi16(q3bits_0, 2), m3);\n            const __m128i q3l_3 = _mm_and_si128(_mm_srli_epi16(q3bits_1, 2), m3);\n            const __m128i q3h_2 = _mm_slli_epi16(_mm_srli_epi16(_mm_andnot_si128(hbits_0, _mm_slli_epi16(mone, bit+1)), bit+1), 2);\n            const __m128i q3h_3 = _mm_slli_epi16(_mm_srli_epi16(_mm_andnot_si128(hbits_1, _mm_slli_epi16(mone, bit+1)), bit+1), 2);\n\n            const __m128i q3l_4 = _mm_and_si128(_mm_srli_epi16(q3bits_0, 4), m3);\n            const __m128i q3l_5 = _mm_and_si128(_mm_srli_epi16(q3bits_1, 4), m3);\n            const __m128i q3h_4 = _mm_slli_epi16(_mm_srli_epi16(_mm_andnot_si128(hbits_0, _mm_slli_epi16(mone, bit+2)), bit+2), 2);\n            const __m128i q3h_5 = _mm_slli_epi16(_mm_srli_epi16(_mm_andnot_si128(hbits_1, _mm_slli_epi16(mone, bit+2)), bit+2), 2);\n\n            const __m128i q3l_6 = _mm_and_si128(_mm_srli_epi16(q3bits_0, 6), m3);\n            const __m128i q3l_7 = _mm_and_si128(_mm_srli_epi16(q3bits_1, 6), m3);\n            const __m128i q3h_6 = _mm_slli_epi16(_mm_srli_epi16(_mm_andnot_si128(hbits_0, _mm_slli_epi16(mone, bit+3)), bit+3), 2);\n            const __m128i q3h_7 = _mm_slli_epi16(_mm_srli_epi16(_mm_andnot_si128(hbits_1, _mm_slli_epi16(mone, bit+3)), bit+3), 2);\n\n            // load Q8 quants from block_q8_K.qs[QK_K]\n            const __m128i q8_0 = _mm_loadu_si128((const __m128i*)q8); q8 += 16;\n            const __m128i q8_1 = _mm_loadu_si128((const __m128i*)q8); q8 += 16;\n            const __m128i q8_2 = _mm_loadu_si128((const __m128i*)q8); q8 += 16;\n            const __m128i q8_3 = _mm_loadu_si128((const __m128i*)q8); q8 += 16;\n            const __m128i q8_4 = _mm_loadu_si128((const __m128i*)q8); q8 += 16;\n            const __m128i q8_5 = _mm_loadu_si128((const __m128i*)q8); q8 += 16;\n            const __m128i q8_6 = _mm_loadu_si128((const __m128i*)q8); q8 += 16;\n            const __m128i q8_7 = _mm_loadu_si128((const __m128i*)q8); q8 += 16;\n\n            // Dot product: we multiply the 2 low bits and 1 high bit part separately, so we can use _mm256_maddubs_epi16,\n            // and then subtract. The high bit part has the 2 already subtracted (and so, it is zero if the high bit was not set,\n            // and 2 if the high bit was set)\n            __m128i q8s_0 = _mm_maddubs_epi16(q3h_0, q8_0);\n            __m128i q8s_1 = _mm_maddubs_epi16(q3h_1, q8_1);\n            __m128i q8s_2 = _mm_maddubs_epi16(q3h_2, q8_2);\n            __m128i q8s_3 = _mm_maddubs_epi16(q3h_3, q8_3);\n            __m128i q8s_4 = _mm_maddubs_epi16(q3h_4, q8_4);\n            __m128i q8s_5 = _mm_maddubs_epi16(q3h_5, q8_5);\n            __m128i q8s_6 = _mm_maddubs_epi16(q3h_6, q8_6);\n            __m128i q8s_7 = _mm_maddubs_epi16(q3h_7, q8_7);\n\n            __m128i p16_0 = _mm_maddubs_epi16(q3l_0, q8_0);\n            __m128i p16_1 = _mm_maddubs_epi16(q3l_1, q8_1);\n            __m128i p16_2 = _mm_maddubs_epi16(q3l_2, q8_2);\n            __m128i p16_3 = _mm_maddubs_epi16(q3l_3, q8_3);\n            __m128i p16_4 = _mm_maddubs_epi16(q3l_4, q8_4);\n            __m128i p16_5 = _mm_maddubs_epi16(q3l_5, q8_5);\n            __m128i p16_6 = _mm_maddubs_epi16(q3l_6, q8_6);\n            __m128i p16_7 = _mm_maddubs_epi16(q3l_7, q8_7);\n\n            p16_0 = _mm_sub_epi16(p16_0, q8s_0);\n            p16_1 = _mm_sub_epi16(p16_1, q8s_1);\n            p16_2 = _mm_sub_epi16(p16_2, q8s_2);\n            p16_3 = _mm_sub_epi16(p16_3, q8s_3);\n            p16_4 = _mm_sub_epi16(p16_4, q8s_4);\n            p16_5 = _mm_sub_epi16(p16_5, q8s_5);\n            p16_6 = _mm_sub_epi16(p16_6, q8s_6);\n            p16_7 = _mm_sub_epi16(p16_7, q8s_7);\n\n            // multiply with scales\n            __m128i shuffle = _mm_set1_epi16(0x0100);\n            p16_0 = _mm_madd_epi16(_mm_shuffle_epi8(scales[j], shuffle), p16_0);\n            shuffle = _mm_add_epi16(shuffle, m2);\n            p16_1 = _mm_madd_epi16(_mm_shuffle_epi8(scales[j], shuffle), p16_1);\n            shuffle = _mm_add_epi16(shuffle, m2);\n            p16_2 = _mm_madd_epi16(_mm_shuffle_epi8(scales[j], shuffle), p16_2);\n            shuffle = _mm_add_epi16(shuffle, m2);\n            p16_3 = _mm_madd_epi16(_mm_shuffle_epi8(scales[j], shuffle), p16_3);\n            shuffle = _mm_add_epi16(shuffle, m2);\n            p16_4 = _mm_madd_epi16(_mm_shuffle_epi8(scales[j], shuffle), p16_4);\n            shuffle = _mm_add_epi16(shuffle, m2);\n            p16_5 = _mm_madd_epi16(_mm_shuffle_epi8(scales[j], shuffle), p16_5);\n            shuffle = _mm_add_epi16(shuffle, m2);\n            p16_6 = _mm_madd_epi16(_mm_shuffle_epi8(scales[j], shuffle), p16_6);\n            shuffle = _mm_add_epi16(shuffle, m2);\n            p16_7 = _mm_madd_epi16(_mm_shuffle_epi8(scales[j], shuffle), p16_7);\n\n            // accumulate\n            p16_0 = _mm_add_epi32(p16_0, p16_1);\n            p16_2 = _mm_add_epi32(p16_2, p16_3);\n            p16_4 = _mm_add_epi32(p16_4, p16_5);\n            p16_6 = _mm_add_epi32(p16_6, p16_7);\n            sumi_0 = _mm_add_epi32(sumi_0, _mm_add_epi32(p16_0, p16_2));\n            sumi_1 = _mm_add_epi32(sumi_1, _mm_add_epi32(p16_4, p16_6));\n\n        }\n\n        // multiply with block scale and accumulate\n        __m256i sumi = MM256_SET_M128I(sumi_1, sumi_0);\n        acc = _mm256_add_ps(_mm256_mul_ps(_mm256_broadcast_ss(&d), _mm256_cvtepi32_ps(sumi)), acc);\n\n    }\n\n    *s = hsum_float_8(acc);\n\n#elif defined __riscv_v_intrinsic\n\n    uint32_t aux[3];\n    uint32_t utmp[4];\n\n    float sumf = 0;\n    for (int i = 0; i < nb; ++i) {\n\n        const uint8_t * restrict q3 = x[i].qs;\n        const uint8_t * restrict qh = x[i].hmask;\n        const  int8_t * restrict q8 = y[i].qs;\n\n        memcpy(aux, x[i].scales, 12);\n        utmp[3] = ((aux[1] >> 4) & kmask2) | (((aux[2] >> 6) & kmask1) << 4);\n        utmp[2] = ((aux[0] >> 4) & kmask2) | (((aux[2] >> 4) & kmask1) << 4);\n        utmp[1] = (aux[1] & kmask2) | (((aux[2] >> 2) & kmask1) << 4);\n        utmp[0] = (aux[0] & kmask2) | (((aux[2] >> 0) & kmask1) << 4);\n\n        int8_t * scale = (int8_t *)utmp;\n        for (int j = 0; j < 16; ++j) scale[j] -= 32;\n\n\n        size_t vl = 32;\n        uint8_t m =  1;\n\n        vint32m1_t vzero = __riscv_vmv_v_x_i32m1(0, 1);\n        vuint8m1_t vqh = __riscv_vle8_v_u8m1(qh, vl);\n\n        int sum_t = 0;\n\n        for (int j = 0; j < QK_K; j += 128) {\n\n            vl = 32;\n\n            // load Q3\n            vuint8m1_t q3_x = __riscv_vle8_v_u8m1(q3, vl);\n\n            vint8m1_t q3_0 = __riscv_vreinterpret_v_u8m1_i8m1(__riscv_vand_vx_u8m1(q3_x, 0x03, vl));\n            vint8m1_t q3_1 = __riscv_vreinterpret_v_u8m1_i8m1(__riscv_vand_vx_u8m1(__riscv_vsrl_vx_u8m1(q3_x, 0x2, vl), 0x03 , vl));\n            vint8m1_t q3_2 = __riscv_vreinterpret_v_u8m1_i8m1(__riscv_vand_vx_u8m1(__riscv_vsrl_vx_u8m1(q3_x, 0x4, vl), 0x03 , vl));\n            vint8m1_t q3_3 = __riscv_vreinterpret_v_u8m1_i8m1(__riscv_vand_vx_u8m1(__riscv_vsrl_vx_u8m1(q3_x, 0x6, vl), 0x03 , vl));\n\n            // compute mask for subtraction\n            vuint8m1_t qh_m0 = __riscv_vand_vx_u8m1(vqh, m, vl);\n            vbool8_t vmask_0 = __riscv_vmseq_vx_u8m1_b8(qh_m0, 0, vl);\n            vint8m1_t q3_m0 = __riscv_vsub_vx_i8m1_mu(vmask_0, q3_0, q3_0, 0x4, vl);\n            m <<= 1;\n\n            vuint8m1_t qh_m1 = __riscv_vand_vx_u8m1(vqh, m, vl);\n            vbool8_t vmask_1 = __riscv_vmseq_vx_u8m1_b8(qh_m1, 0, vl);\n            vint8m1_t q3_m1 = __riscv_vsub_vx_i8m1_mu(vmask_1, q3_1, q3_1, 0x4, vl);\n            m <<= 1;\n\n            vuint8m1_t qh_m2 = __riscv_vand_vx_u8m1(vqh, m, vl);\n            vbool8_t vmask_2 = __riscv_vmseq_vx_u8m1_b8(qh_m2, 0, vl);\n            vint8m1_t q3_m2 = __riscv_vsub_vx_i8m1_mu(vmask_2, q3_2, q3_2, 0x4, vl);\n            m <<= 1;\n\n            vuint8m1_t qh_m3 = __riscv_vand_vx_u8m1(vqh, m, vl);\n            vbool8_t vmask_3 = __riscv_vmseq_vx_u8m1_b8(qh_m3, 0, vl);\n            vint8m1_t q3_m3 = __riscv_vsub_vx_i8m1_mu(vmask_3, q3_3, q3_3, 0x4, vl);\n            m <<= 1;\n\n            // load Q8 and take product with Q3\n            vint16m2_t a0 = __riscv_vwmul_vv_i16m2(q3_m0, __riscv_vle8_v_i8m1(q8, vl), vl);\n            vint16m2_t a1 = __riscv_vwmul_vv_i16m2(q3_m1, __riscv_vle8_v_i8m1(q8+32, vl), vl);\n            vint16m2_t a2 = __riscv_vwmul_vv_i16m2(q3_m2, __riscv_vle8_v_i8m1(q8+64, vl), vl);\n            vint16m2_t a3 = __riscv_vwmul_vv_i16m2(q3_m3, __riscv_vle8_v_i8m1(q8+96, vl), vl);\n\n            vl = 16;\n\n            // retrieve lane to multiply with scale\n            vint32m2_t aux0_0 = __riscv_vwmul_vx_i32m2(__riscv_vget_v_i16m2_i16m1(a0, 0), (scale[0]), vl);\n            vint32m2_t aux0_1 = __riscv_vwmul_vx_i32m2(__riscv_vget_v_i16m2_i16m1(a0, 1), (scale[1]), vl);\n            vint32m2_t aux1_0 = __riscv_vwmul_vx_i32m2(__riscv_vget_v_i16m2_i16m1(a1, 0), (scale[2]), vl);\n            vint32m2_t aux1_1 = __riscv_vwmul_vx_i32m2(__riscv_vget_v_i16m2_i16m1(a1, 1), (scale[3]), vl);\n            vint32m2_t aux2_0 = __riscv_vwmul_vx_i32m2(__riscv_vget_v_i16m2_i16m1(a2, 0), (scale[4]), vl);\n            vint32m2_t aux2_1 = __riscv_vwmul_vx_i32m2(__riscv_vget_v_i16m2_i16m1(a2, 1), (scale[5]), vl);\n            vint32m2_t aux3_0 = __riscv_vwmul_vx_i32m2(__riscv_vget_v_i16m2_i16m1(a3, 0), (scale[6]), vl);\n            vint32m2_t aux3_1 = __riscv_vwmul_vx_i32m2(__riscv_vget_v_i16m2_i16m1(a3, 1), (scale[7]), vl);\n\n            vint32m1_t isum0 = __riscv_vredsum_vs_i32m2_i32m1(__riscv_vadd_vv_i32m2(aux0_0, aux0_1, vl), vzero, vl);\n            vint32m1_t isum1 = __riscv_vredsum_vs_i32m2_i32m1(__riscv_vadd_vv_i32m2(aux1_0, aux1_1, vl), isum0, vl);\n            vint32m1_t isum2 = __riscv_vredsum_vs_i32m2_i32m1(__riscv_vadd_vv_i32m2(aux2_0, aux2_1, vl), isum1, vl);\n            vint32m1_t isum3 = __riscv_vredsum_vs_i32m2_i32m1(__riscv_vadd_vv_i32m2(aux3_0, aux3_1, vl), isum2, vl);\n\n            sum_t +=  __riscv_vmv_x_s_i32m1_i32(isum3);\n\n            q3 += 32;    q8 += 128;   scale += 8;\n\n        }\n\n        const float d = GGML_FP16_TO_FP32(x[i].d) * y[i].d;\n\n        sumf += d*sum_t;\n\n    }\n\n    *s = sumf;\n\n#elif defined(__POWER9_VECTOR__)\n    const vector signed char lowMask = vec_splats((signed char)0x3);\n    const vector signed char lowMask1 = vec_splats((int8_t)0xf);\n    const vector signed char lowMask2 = vec_splats((int8_t)0x30);\n    const vector int v0 = vec_splats((int32_t)0);\n    const vector signed char v1 = vec_splats((signed char)0x1);\n    const vector unsigned char v2 = vec_splats((unsigned char)0x2);\n    const vector unsigned char v3 = vec_splats((unsigned char)0x3);\n    const vector unsigned char v4 = vec_splats((unsigned char)0x4);\n    const vector unsigned char v6 = vec_splats((unsigned char)0x6);\n    const vector signed char off = vec_splats((signed char)0x20);\n\n    vector float vsumf0 = vec_splats(0.0f);\n    vector float vsumf1 = vec_splats(0.0f);\n    vector float vsumf2 = vec_splats(0.0f);\n    vector float vsumf3 = vec_splats(0.0f);\n\n    for (int i = 0; i < nb; ++i) {\n        vector float vxd = vec_splats(GGML_FP16_TO_FP32(x[i].d));\n        vector float vyd = vec_splats(y[i].d);\n        vector float vd = vec_mul(vxd, vyd);\n\n        UNUSED(kmask1);\n        UNUSED(kmask2);\n\n        vector signed char u0 = (vector signed char)vec_xl_len(x[i].scales, 8);\n        vector signed char u1 = vec_and(u0, lowMask1);\n        vector signed char u2 = (vector signed char)vec_xl_len(x[i].scales + 8, 4);\n        vector signed char u3 = (vector signed char)vec_mergeh((vector signed int)u2, (vector signed int)vec_sr(u2, v2));\n        vector signed char u30 = vec_sl(vec_and(u3, lowMask), v4);\n        vector signed char u31 = vec_and(u3, lowMask2);\n\n        u1 = vec_or(u1, u30);\n        u2 = vec_or(vec_sr(u0, v4), u31);\n\n        vector signed char vscales = (vector signed char)vec_mergeh((vector signed long long)u1, (vector signed long long)u2);\n        vector signed char qxhs0 = (vector signed char)vec_xl( 0, x[i].hmask);\n        vector signed char qxhs1 = (vector signed char)vec_xl(16, x[i].hmask);\n\n        vscales = vec_sub(vscales, off);\n\n        vector signed int vsumi0 = v0;\n        vector signed int vsumi1 = v0;\n        vector signed int vsumi2 = v0;\n        vector signed int vsumi3 = v0;\n        vector signed int vsumi4 = v0;\n        vector signed int vsumi5 = v0;\n        vector signed int vsumi6 = v0;\n        vector signed int vsumi7 = v0;\n\n        const uint8_t * restrict q3 = x[i].qs;\n        const int8_t  * restrict q8 = y[i].qs;\n\n        for (int j = 0; j < QK_K/128; ++j) {\n            __builtin_prefetch(q3, 0, 1);\n            __builtin_prefetch(q8, 0, 1);\n\n            vector signed char qxs0 = (vector signed char)vec_xl( 0, q3);\n            vector signed char qxs1 = (vector signed char)vec_xl(16, q3);\n            q3 += 32;\n\n            //the low 2 bits\n            vector signed char qxs00 = vec_and(qxs0, lowMask);\n            vector signed char qxs01 = vec_and(vec_sr(qxs0, v2), lowMask);\n            vector signed char qxs02 = vec_and(vec_sr(qxs0, v4), lowMask);\n            vector signed char qxs03 = vec_and(vec_sr(qxs0, v6), lowMask);\n            vector signed char qxs10 = vec_and(qxs1, lowMask);\n            vector signed char qxs11 = vec_and(vec_sr(qxs1, v2), lowMask);\n            vector signed char qxs12 = vec_and(vec_sr(qxs1, v4), lowMask);\n            vector signed char qxs13 = vec_and(vec_sr(qxs1, v6), lowMask);\n\n            //the 3rd bit\n            vector signed char qxh00 = vec_sl(vec_andc(v1, qxhs0), v2);\n            vector signed char qxh01 = vec_sl(vec_andc(v1, vec_sr(qxhs0, (vector unsigned char)v1)), v2);\n            vector signed char qxh02 = vec_sl(vec_andc(v1, vec_sr(qxhs0, v2)), v2);\n            vector signed char qxh03 = vec_sl(vec_andc(v1, vec_sr(qxhs0, v3)), v2);\n            vector signed char qxh10 = vec_sl(vec_andc(v1, qxhs1), v2);\n            vector signed char qxh11 = vec_sl(vec_andc(v1, vec_sr(qxhs1, (vector unsigned char)v1)), v2);\n            vector signed char qxh12 = vec_sl(vec_andc(v1, vec_sr(qxhs1, v2)), v2);\n            vector signed char qxh13 = vec_sl(vec_andc(v1, vec_sr(qxhs1, v3)), v2);\n            qxhs0 = vec_sr(qxhs0, v4);\n            qxhs1 = vec_sr(qxhs1, v4);\n\n            vector signed char q3x00 = vec_sub(qxs00, qxh00);\n            vector signed char q3x01 = vec_sub(qxs01, qxh01);\n            vector signed char q3x02 = vec_sub(qxs02, qxh02);\n            vector signed char q3x03 = vec_sub(qxs03, qxh03);\n            vector signed char q3x10 = vec_sub(qxs10, qxh10);\n            vector signed char q3x11 = vec_sub(qxs11, qxh11);\n            vector signed char q3x12 = vec_sub(qxs12, qxh12);\n            vector signed char q3x13 = vec_sub(qxs13, qxh13);\n\n            vector signed char q8y00 = vec_xl(  0, q8);\n            vector signed char q8y10 = vec_xl( 16, q8);\n            vector signed char q8y01 = vec_xl( 32, q8);\n            vector signed char q8y11 = vec_xl( 48, q8);\n            vector signed char q8y02 = vec_xl( 64, q8);\n            vector signed char q8y12 = vec_xl( 80, q8);\n            vector signed char q8y03 = vec_xl( 96, q8);\n            vector signed char q8y13 = vec_xl(112, q8);\n            q8 += 128;\n\n            vector signed short vscales_h = vec_unpackh(vscales);\n            vector signed short vs0 = vec_splat(vscales_h, 0);\n            vector signed short vs1 = vec_splat(vscales_h, 1);\n            vector signed short vs2 = vec_splat(vscales_h, 2);\n            vector signed short vs3 = vec_splat(vscales_h, 3);\n            vector signed short vs4 = vec_splat(vscales_h, 4);\n            vector signed short vs5 = vec_splat(vscales_h, 5);\n            vector signed short vs6 = vec_splat(vscales_h, 6);\n            vector signed short vs7 = vec_splat(vscales_h, 7);\n            vscales = vec_sld(vscales, vscales, 8);\n\n            vector signed short qv00 = vec_add(vec_mule(q3x00, q8y00), vec_mulo(q3x00, q8y00));\n            vector signed short qv01 = vec_add(vec_mule(q3x01, q8y01), vec_mulo(q3x01, q8y01));\n            vector signed short qv02 = vec_add(vec_mule(q3x02, q8y02), vec_mulo(q3x02, q8y02));\n            vector signed short qv03 = vec_add(vec_mule(q3x03, q8y03), vec_mulo(q3x03, q8y03));\n            vector signed short qv10 = vec_add(vec_mule(q3x10, q8y10), vec_mulo(q3x10, q8y10));\n            vector signed short qv11 = vec_add(vec_mule(q3x11, q8y11), vec_mulo(q3x11, q8y11));\n            vector signed short qv12 = vec_add(vec_mule(q3x12, q8y12), vec_mulo(q3x12, q8y12));\n            vector signed short qv13 = vec_add(vec_mule(q3x13, q8y13), vec_mulo(q3x13, q8y13));\n\n            vsumi0 = vec_msum(qv00, vs0, vsumi0);\n            vsumi1 = vec_msum(qv01, vs2, vsumi1);\n            vsumi2 = vec_msum(qv02, vs4, vsumi2);\n            vsumi3 = vec_msum(qv03, vs6, vsumi3);\n            vsumi4 = vec_msum(qv10, vs1, vsumi4);\n            vsumi5 = vec_msum(qv11, vs3, vsumi5);\n            vsumi6 = vec_msum(qv12, vs5, vsumi6);\n            vsumi7 = vec_msum(qv13, vs7, vsumi7);\n        }\n\n        vsumi0 = vec_add(vsumi0, vsumi4);\n        vsumi1 = vec_add(vsumi1, vsumi5);\n        vsumi2 = vec_add(vsumi2, vsumi6);\n        vsumi3 = vec_add(vsumi3, vsumi7);\n\n        vsumf0 = vec_madd(vec_ctf(vsumi0, 0), vd, vsumf0);\n        vsumf1 = vec_madd(vec_ctf(vsumi1, 0), vd, vsumf1);\n        vsumf2 = vec_madd(vec_ctf(vsumi2, 0), vd, vsumf2);\n        vsumf3 = vec_madd(vec_ctf(vsumi3, 0), vd, vsumf3);\n    }\n\n    vsumf0 = vec_add(vsumf0, vsumf2);\n    vsumf1 = vec_add(vsumf1, vsumf3);\n\n    vsumf0 = vec_add(vsumf0, vsumf1);\n\n    vsumf0 = vec_add(vsumf0, vec_sld(vsumf0, vsumf0, 4));\n    vsumf0 = vec_add(vsumf0, vec_sld(vsumf0, vsumf0, 8));\n\n    *s = vec_extract(vsumf0, 0);\n\n#elif defined __loongarch_asx\n\n    const __m256i m3 = __lasx_xvreplgr2vr_b(3);\n    const __m256i mone = __lasx_xvreplgr2vr_b(1);\n    const __m128i m32 = __lsx_vreplgr2vr_b(32);\n\n    __m256 acc = (__m256)__lasx_xvldi(0);\n\n    uint32_t aux[3];\n\n    for (int i = 0; i < nb; ++i) {\n\n        const float d = y[i].d * GGML_FP16_TO_FP32(x[i].d);\n        const uint8_t * restrict q3 = x[i].qs;\n        const int8_t  * restrict q8 = y[i].qs;\n        // Set up scales\n        memcpy(aux, x[i].scales, 12);\n        __m128i scales128 = lsx_set_w(\n                ((aux[1] >> 4) & kmask2) | (((aux[2] >> 6) & kmask1) << 4),\n                ((aux[0] >> 4) & kmask2) | (((aux[2] >> 4) & kmask1) << 4),\n                (aux[1] & kmask2) | (((aux[2] >> 2) & kmask1) << 4),\n                (aux[0] & kmask2) | (((aux[2] >> 0) & kmask1) << 4));\n        scales128 = __lsx_vsub_b(scales128, m32);\n        const __m256i all_scales = lasx_ext8_16(scales128);\n        const __m128i l_scales = lasx_extracti128(all_scales, 0);\n        const __m128i h_scales = lasx_extracti128(all_scales, 1);\n        const __m256i scales[2] = {lasx_insertf128(l_scales, l_scales), lasx_insertf128(h_scales, h_scales)};\n\n        // high bit\n        const __m256i hbits = __lasx_xvld((const __m256i*)x[i].hmask, 0);\n\n        // integer accumulator\n        __m256i sumi = __lasx_xvldi(0);\n\n        int bit = 0;\n        int is  = 0;\n        __m256i xvbit;\n\n\n        for (int j = 0; j < QK_K/128; ++j) {\n            // load low 2 bits\n            const __m256i q3bits = __lasx_xvld((const __m256i*)q3, 0); q3 += 32;\n\n            xvbit = __lasx_xvreplgr2vr_h(bit);\n            // prepare low and high bits\n            const __m256i q3l_0 = __lasx_xvand_v(q3bits, m3);\n            const __m256i q3h_0 = __lasx_xvslli_h(__lasx_xvsrl_h(__lasx_xvandn_v(hbits, __lasx_xvsll_h(mone, xvbit)), xvbit), 2);\n            ++bit;\n\n            xvbit = __lasx_xvreplgr2vr_h(bit);\n            const __m256i q3l_1 = __lasx_xvand_v(__lasx_xvsrli_h(q3bits, 2), m3);\n            const __m256i q3h_1 = __lasx_xvslli_h(__lasx_xvsrl_h(__lasx_xvandn_v(hbits, __lasx_xvsll_h(mone, xvbit)), xvbit), 2);\n            ++bit;\n\n            xvbit = __lasx_xvreplgr2vr_h(bit);\n            const __m256i q3l_2 = __lasx_xvand_v(__lasx_xvsrli_h(q3bits, 4), m3);\n            const __m256i q3h_2 = __lasx_xvslli_h(__lasx_xvsrl_h(__lasx_xvandn_v(hbits, __lasx_xvsll_h(mone, xvbit)), xvbit), 2);\n            ++bit;\n\n            xvbit = __lasx_xvreplgr2vr_h(bit);\n            const __m256i q3l_3 = __lasx_xvand_v(__lasx_xvsrli_h(q3bits, 6), m3);\n            const __m256i q3h_3 = __lasx_xvslli_h(__lasx_xvsrl_h(__lasx_xvandn_v(hbits, __lasx_xvsll_h(mone, xvbit)), xvbit), 2);\n            ++bit;\n\n            // load Q8 quants\n            const __m256i q8_0 = __lasx_xvld((const __m256i*)q8, 0); q8 += 32;\n            const __m256i q8_1 = __lasx_xvld((const __m256i*)q8, 0); q8 += 32;\n            const __m256i q8_2 = __lasx_xvld((const __m256i*)q8, 0); q8 += 32;\n            const __m256i q8_3 = __lasx_xvld((const __m256i*)q8, 0); q8 += 32;\n\n            // Dot product: we multiply the 2 low bits and 1 high bit part separately, so we can use lasx_maddubs_h,\n            // and then subtract. The high bit part has the 2 already subtracted (and so, it is zero if the high bit was not set,\n            // and 2 if the high bit was set)\n            __m256i q8s_0 = lasx_maddubs_h(q3h_0, q8_0);\n            __m256i q8s_1 = lasx_maddubs_h(q3h_1, q8_1);\n            __m256i q8s_2 = lasx_maddubs_h(q3h_2, q8_2);\n            __m256i q8s_3 = lasx_maddubs_h(q3h_3, q8_3);\n\n            __m256i p16_0 = lasx_maddubs_h(q3l_0, q8_0);\n            __m256i p16_1 = lasx_maddubs_h(q3l_1, q8_1);\n            __m256i p16_2 = lasx_maddubs_h(q3l_2, q8_2);\n            __m256i p16_3 = lasx_maddubs_h(q3l_3, q8_3);\n\n            p16_0 = __lasx_xvsub_h(p16_0, q8s_0);\n            p16_1 = __lasx_xvsub_h(p16_1, q8s_1);\n            p16_2 = __lasx_xvsub_h(p16_2, q8s_2);\n            p16_3 = __lasx_xvsub_h(p16_3, q8s_3);\n\n            // multiply with scales\n            p16_0 = lasx_madd_h(lasx_shuffle_b(scales[j], get_scale_shuffle_q3k(is + 0)), p16_0);\n            p16_1 = lasx_madd_h(lasx_shuffle_b(scales[j], get_scale_shuffle_q3k(is + 1)), p16_1);\n            p16_2 = lasx_madd_h(lasx_shuffle_b(scales[j], get_scale_shuffle_q3k(is + 2)), p16_2);\n            p16_3 = lasx_madd_h(lasx_shuffle_b(scales[j], get_scale_shuffle_q3k(is + 3)), p16_3);\n\n            // accumulate\n            p16_0 = __lasx_xvadd_w(p16_0, p16_1);\n            p16_2 = __lasx_xvadd_w(p16_2, p16_3);\n            sumi  = __lasx_xvadd_w(sumi, __lasx_xvadd_w(p16_0, p16_2));\n        }\n        // multiply with block scale and accumulate\n        acc = __lasx_xvfmadd_s(__lasx_xvreplfr2vr_s(d), __lasx_xvffint_s_w(sumi), acc);//FIXME\n    }\n\n    *s = hsum_float_8(acc);\n\n#else\n    // scalar version\n    // This function is written like this so the compiler can manage to vectorize most of it\n    // Using -Ofast, GCC and clang manage to produce code that is within a factor of 2 or so from the\n    // manually vectorized version above. Every other version I tried would run at least 4 times slower.\n    // The ideal situation would be if we could just write the code once, and the compiler would\n    // automatically produce the best possible set of machine instructions, instead of us having to manually\n    // write vectorized versions for AVX, ARM_NEON, etc.\n\n    int8_t  aux8[QK_K];\n    int16_t aux16[8];\n    float   sums [8];\n    int32_t aux32[8];\n    memset(sums, 0, 8*sizeof(float));\n\n    uint32_t auxs[4];\n    const int8_t * scales = (const int8_t*)auxs;\n\n    float sumf = 0;\n    for (int i = 0; i < nb; ++i) {\n        const uint8_t * restrict q3 = x[i].qs;\n        const uint8_t * restrict hm = x[i].hmask;\n        const  int8_t * restrict q8 = y[i].qs;\n        memset(aux32, 0, 8*sizeof(int32_t));\n        int8_t * restrict a = aux8;\n        uint8_t m = 1;\n        for (int j = 0; j < QK_K; j += 128) {\n            for (int l = 0; l < 32; ++l) a[l] = q3[l] & 3;\n            for (int l = 0; l < 32; ++l) a[l] -= (hm[l] & m ? 0 : 4);\n            a += 32; m <<= 1;\n            for (int l = 0; l < 32; ++l) a[l] = (q3[l] >> 2) & 3;\n            for (int l = 0; l < 32; ++l) a[l] -= (hm[l] & m ? 0 : 4);\n            a += 32; m <<= 1;\n            for (int l = 0; l < 32; ++l) a[l] = (q3[l] >> 4) & 3;\n            for (int l = 0; l < 32; ++l) a[l] -= (hm[l] & m ? 0 : 4);\n            a += 32; m <<= 1;\n            for (int l = 0; l < 32; ++l) a[l] = (q3[l] >> 6) & 3;\n            for (int l = 0; l < 32; ++l) a[l] -= (hm[l] & m ? 0 : 4);\n            a += 32; m <<= 1;\n            q3 += 32;\n        }\n        a = aux8;\n\n        memcpy(auxs, x[i].scales, 12);\n        uint32_t tmp = auxs[2];\n        auxs[2] = ((auxs[0] >> 4) & kmask2) | (((tmp >> 4) & kmask1) << 4);\n        auxs[3] = ((auxs[1] >> 4) & kmask2) | (((tmp >> 6) & kmask1) << 4);\n        auxs[0] = (auxs[0] & kmask2) | (((tmp >> 0) & kmask1) << 4);\n        auxs[1] = (auxs[1] & kmask2) | (((tmp >> 2) & kmask1) << 4);\n        for (int j = 0; j < QK_K/16; ++j) {\n            for (int l = 0; l < 8; ++l) aux16[l] = q8[l] * a[l];\n            for (int l = 0; l < 8; ++l) aux32[l] += (scales[j] - 32) * aux16[l];\n            q8 += 8; a += 8;\n            for (int l = 0; l < 8; ++l) aux16[l] = q8[l] * a[l];\n            for (int l = 0; l < 8; ++l) aux32[l] += (scales[j] - 32) * aux16[l];\n            q8 += 8; a += 8;\n        }\n        const float d = GGML_FP16_TO_FP32(x[i].d) * y[i].d;\n        for (int l = 0; l < 8; ++l) sums[l] += d * aux32[l];\n    }\n    for (int l = 0; l < 8; ++l) sumf += sums[l];\n    *s = sumf;\n\n#endif\n\n}\n\nvoid ggml_vec_dot_q4_K_q8_K(int n, float * restrict s, size_t bs, const void * restrict vx, size_t bx, const void * restrict vy, size_t by, int nrc) {\n    assert(n % QK_K == 0);\n    assert(nrc == 1);\n    UNUSED(nrc);\n    UNUSED(bx);\n    UNUSED(by);\n    UNUSED(bs);\n\n    const block_q4_K * restrict x = vx;\n    const block_q8_K * restrict y = vy;\n\n    const int nb = n / QK_K;\n\n    static const uint32_t kmask1 = 0x3f3f3f3f;\n    static const uint32_t kmask2 = 0x0f0f0f0f;\n    static const uint32_t kmask3 = 0x03030303;\n\n    uint32_t utmp[4];\n\n#ifdef __ARM_NEON\n    const uint8x16_t m4b = vdupq_n_u8(0xf);\n    const int32x4_t mzero = vdupq_n_s32(0);\n\n    ggml_int8x16x2_t q4bytes;\n    ggml_int8x16x2_t q8bytes;\n\n    float sumf = 0;\n\n    for (int i = 0; i < nb; ++i) {\n\n        const float d = y[i].d * GGML_FP16_TO_FP32(x[i].d);\n        const float dmin = y[i].d * GGML_FP16_TO_FP32(x[i].dmin);\n\n        const int16x8_t q8sums = vpaddq_s16(vld1q_s16(y[i].bsums), vld1q_s16(y[i].bsums + 8));\n\n        memcpy(utmp, x[i].scales, 12);\n\n        uint32x2_t mins8 = { 0 };\n        mins8 = vset_lane_u32(utmp[1] & kmask1, mins8, 0);\n        mins8 = vset_lane_u32(((utmp[2] >> 4) & kmask2) | (((utmp[1] >> 6) & kmask3) << 4), mins8, 1);\n\n        utmp[1] = (utmp[2] & kmask2) | (((utmp[0] >> 6) & kmask3) << 4);\n        utmp[0] &= kmask1;\n\n        const int16x8_t mins = vreinterpretq_s16_u16(vmovl_u8(vreinterpret_u8_u32(mins8)));\n        const int32x4_t prod = vaddq_s32(vmull_s16(vget_low_s16 (q8sums), vget_low_s16 (mins)),\n                                         vmull_s16(vget_high_s16(q8sums), vget_high_s16(mins)));\n        sumf -= dmin * vaddvq_s32(prod);\n\n        const uint8_t * scales = (const uint8_t *)utmp;\n\n        const uint8_t * restrict q4 = x[i].qs;\n        const int8_t  * restrict q8 = y[i].qs;\n\n        int32_t sumi1 = 0;\n        int32_t sumi2 = 0;\n\n        for (int j = 0; j < QK_K/64; ++j) {\n            const ggml_uint8x16x2_t q4bits = ggml_vld1q_u8_x2(q4); q4 += 32;\n\n            q8bytes = ggml_vld1q_s8_x2(q8); q8 += 32;\n            q4bytes.val[0] = vreinterpretq_s8_u8(vandq_u8  (q4bits.val[0], m4b));\n            q4bytes.val[1] = vreinterpretq_s8_u8(vandq_u8  (q4bits.val[1], m4b));\n\n            const int32x4_t p1 = ggml_vdotq_s32(ggml_vdotq_s32(mzero, q4bytes.val[0], q8bytes.val[0]), q4bytes.val[1], q8bytes.val[1]);\n            sumi1 += vaddvq_s32(p1) * scales[2*j+0];\n\n            q8bytes = ggml_vld1q_s8_x2(q8); q8 += 32;\n            q4bytes.val[0] = vreinterpretq_s8_u8(vshrq_n_u8(q4bits.val[0], 4));\n            q4bytes.val[1] = vreinterpretq_s8_u8(vshrq_n_u8(q4bits.val[1], 4));\n\n            const int32x4_t p2 = ggml_vdotq_s32(ggml_vdotq_s32(mzero, q4bytes.val[0], q8bytes.val[0]), q4bytes.val[1], q8bytes.val[1]);\n\n            sumi2 += vaddvq_s32(p2) * scales[2*j+1];\n        }\n\n        sumf += d * (sumi1 + sumi2);\n\n    }\n\n    *s = sumf;\n\n#elif defined __AVX2__\n\n    const __m256i m4 = _mm256_set1_epi8(0xF);\n\n    __m256 acc = _mm256_setzero_ps();\n    __m128 acc_m = _mm_setzero_ps();\n\n   for (int i = 0; i < nb; ++i) {\n\n        const float d = y[i].d * GGML_FP16_TO_FP32(x[i].d);\n        const float dmin = -y[i].d * GGML_FP16_TO_FP32(x[i].dmin);\n\n        memcpy(utmp, x[i].scales, 12);\n        utmp[3] = ((utmp[2] >> 4) & kmask2) | (((utmp[1] >> 6) & kmask3) << 4);\n        const uint32_t uaux = utmp[1] & kmask1;\n        utmp[1] = (utmp[2] & kmask2) | (((utmp[0] >> 6) & kmask3) << 4);\n        utmp[2] = uaux;\n        utmp[0] &= kmask1;\n\n        const uint8_t * restrict q4 = x[i].qs;\n        const int8_t  * restrict q8 = y[i].qs;\n\n        const __m256i mins_and_scales = _mm256_cvtepu8_epi16(_mm_set_epi32(utmp[3], utmp[2], utmp[1], utmp[0]));\n\n        const __m256i q8sums = _mm256_loadu_si256((const __m256i*)y[i].bsums);\n        const __m128i q8s = _mm_hadd_epi16(_mm256_extracti128_si256(q8sums, 0), _mm256_extracti128_si256(q8sums, 1));\n        const __m128i prod = _mm_madd_epi16(_mm256_extracti128_si256(mins_and_scales, 1), q8s);\n        acc_m = _mm_fmadd_ps(_mm_set1_ps(dmin), _mm_cvtepi32_ps(prod), acc_m);\n\n        const __m128i sc128  = _mm256_extracti128_si256(mins_and_scales, 0);\n        const __m256i scales = MM256_SET_M128I(sc128, sc128);\n\n        __m256i sumi = _mm256_setzero_si256();\n\n        for (int j = 0; j < QK_K/64; ++j) {\n\n            const __m256i scale_l = _mm256_shuffle_epi8(scales, get_scale_shuffle_k4(2*j+0));\n            const __m256i scale_h = _mm256_shuffle_epi8(scales, get_scale_shuffle_k4(2*j+1));\n\n            const __m256i q4bits = _mm256_loadu_si256((const __m256i*)q4); q4 += 32;\n            const __m256i q4l = _mm256_and_si256(q4bits, m4);\n            const __m256i q4h = _mm256_and_si256(_mm256_srli_epi16(q4bits, 4), m4);\n\n            const __m256i q8l = _mm256_loadu_si256((const __m256i*)q8); q8 += 32;\n            __m256i p16l = _mm256_maddubs_epi16(q4l, q8l);\n            p16l = _mm256_madd_epi16(scale_l, p16l);\n\n            const __m256i q8h = _mm256_loadu_si256((const __m256i*)q8); q8 += 32;\n            __m256i p16h = _mm256_maddubs_epi16(q4h, q8h);\n            p16h = _mm256_madd_epi16(scale_h, p16h);\n            const __m256i sumj = _mm256_add_epi32(p16l, p16h);\n\n            sumi = _mm256_add_epi32(sumi, sumj);\n        }\n\n        __m256 vd = _mm256_set1_ps(d);\n        acc = _mm256_fmadd_ps(vd, _mm256_cvtepi32_ps(sumi), acc);\n\n    }\n\n    acc_m = _mm_add_ps(acc_m, _mm_movehl_ps(acc_m, acc_m));\n    acc_m = _mm_add_ss(acc_m, _mm_movehdup_ps(acc_m));\n\n    *s = hsum_float_8(acc) + _mm_cvtss_f32(acc_m);\n\n#elif defined __AVX__\n\n    const __m128i m4 = _mm_set1_epi8(0xF);\n    const __m128i m2 = _mm_set1_epi8(0x2);\n\n    __m256 acc = _mm256_setzero_ps();\n    __m128 acc_m = _mm_setzero_ps();\n\n   for (int i = 0; i < nb; ++i) {\n\n        const float d = y[i].d * GGML_FP16_TO_FP32(x[i].d);\n        const float dmin = -y[i].d * GGML_FP16_TO_FP32(x[i].dmin);\n\n        const uint8_t * restrict q4 = x[i].qs;\n        const int8_t  * restrict q8 = y[i].qs;\n\n        memcpy(utmp, x[i].scales, 12);\n        utmp[3] = ((utmp[2] >> 4) & kmask2) | (((utmp[1] >> 6) & kmask3) << 4);\n        const uint32_t uaux = utmp[1] & kmask1;\n        utmp[1] = (utmp[2] & kmask2) | (((utmp[0] >> 6) & kmask3) << 4);\n        utmp[2] = uaux;\n        utmp[0] &= kmask1;\n\n        const __m128i utmps = _mm_set_epi32(utmp[3], utmp[2], utmp[1], utmp[0]);\n        const __m128i scales = _mm_cvtepu8_epi16(utmps);\n        const __m128i mins = _mm_cvtepu8_epi16(_mm_unpackhi_epi64(utmps, utmps));\n\n        const __m128i q8sums_0 = _mm_loadu_si128((const __m128i*)&y[i].bsums[0]);\n        const __m128i q8sums_1 = _mm_loadu_si128((const __m128i*)&y[i].bsums[8]);\n        const __m128i q8s = _mm_hadd_epi16(q8sums_0, q8sums_1);\n        const __m128i prod = _mm_madd_epi16(mins, q8s);\n        acc_m = _mm_add_ps(_mm_mul_ps(_mm_set1_ps(dmin), _mm_cvtepi32_ps(prod)), acc_m);\n\n        __m128i sumi_0 = _mm_setzero_si128();\n        __m128i sumi_1 = _mm_setzero_si128();\n\n        __m128i shuffle = _mm_set1_epi16(0x0100);\n        for (int j = 0; j < QK_K/64; ++j) {\n\n            const __m128i scale_l = _mm_shuffle_epi8(scales, shuffle);\n            shuffle = _mm_add_epi16(shuffle, m2);\n            const __m128i scale_h = _mm_shuffle_epi8(scales, shuffle);\n            shuffle = _mm_add_epi16(shuffle, m2);\n\n            __m128i q4bits = _mm_loadu_si128((const __m128i*)q4); q4 += 16;\n            const __m128i q4l_0 = _mm_and_si128(q4bits, m4);\n            const __m128i q4h_0 = _mm_and_si128(_mm_srli_epi16(q4bits, 4), m4);\n            q4bits = _mm_loadu_si128((const __m128i*)q4); q4 += 16;\n            const __m128i q4l_1 = _mm_and_si128(q4bits, m4);\n            const __m128i q4h_1 = _mm_and_si128(_mm_srli_epi16(q4bits, 4), m4);\n\n            const __m128i q8l_0 = _mm_loadu_si128((const __m128i*)q8); q8 += 16;\n            __m128i p16l = _mm_maddubs_epi16(q4l_0, q8l_0);\n            p16l = _mm_madd_epi16(scale_l, p16l);\n            sumi_0 = _mm_add_epi32(sumi_0, p16l);\n            const __m128i q8l_1 = _mm_loadu_si128((const __m128i*)q8); q8 += 16;\n            p16l = _mm_maddubs_epi16(q4l_1, q8l_1);\n            p16l = _mm_madd_epi16(scale_l, p16l);\n            sumi_1 = _mm_add_epi32(sumi_1, p16l);\n\n            const __m128i q8h_0 = _mm_loadu_si128((const __m128i*)q8); q8 += 16;\n            __m128i p16h = _mm_maddubs_epi16(q4h_0, q8h_0);\n            p16h = _mm_madd_epi16(scale_h, p16h);\n            sumi_0 = _mm_add_epi32(sumi_0, p16h);\n            const __m128i q8h_1 = _mm_loadu_si128((const __m128i*)q8); q8 += 16;\n            p16h = _mm_maddubs_epi16(q4h_1, q8h_1);\n            p16h = _mm_madd_epi16(scale_h, p16h);\n            sumi_1 = _mm_add_epi32(sumi_1, p16h);\n\n        }\n\n        __m256 vd = _mm256_set1_ps(d);\n        __m256i sumi = MM256_SET_M128I(sumi_1, sumi_0);\n        acc = _mm256_add_ps(_mm256_mul_ps(vd, _mm256_cvtepi32_ps(sumi)), acc);\n\n    }\n\n    acc_m = _mm_add_ps(acc_m, _mm_movehl_ps(acc_m, acc_m));\n    acc_m = _mm_add_ss(acc_m, _mm_movehdup_ps(acc_m));\n\n    *s = hsum_float_8(acc) + _mm_cvtss_f32(acc_m);\n\n#elif defined __riscv_v_intrinsic\n\n    const uint8_t * scales = (const uint8_t*)&utmp[0];\n    const uint8_t * mins   = (const uint8_t*)&utmp[2];\n\n    float sumf = 0;\n\n    for (int i = 0; i < nb; ++i) {\n\n        size_t vl = 8;\n\n        const float d = y[i].d * GGML_FP16_TO_FP32(x[i].d);\n        const float dmin = y[i].d * GGML_FP16_TO_FP32(x[i].dmin);\n\n        vint16mf2_t q8sums_0 = __riscv_vlse16_v_i16mf2(y[i].bsums, 4, vl);\n        vint16mf2_t q8sums_1 = __riscv_vlse16_v_i16mf2(y[i].bsums+1, 4, vl);\n        vint16mf2_t q8sums   = __riscv_vadd_vv_i16mf2(q8sums_0, q8sums_1, vl);\n\n        memcpy(utmp, x[i].scales, 12);\n        utmp[3] = ((utmp[2] >> 4) & kmask2) | (((utmp[1] >> 6) & kmask3) << 4);\n        const uint32_t uaux = utmp[1] & kmask1;\n        utmp[1] = (utmp[2] & kmask2) | (((utmp[0] >> 6) & kmask3) << 4);\n        utmp[2] = uaux;\n        utmp[0] &= kmask1;\n\n        vuint8mf4_t mins8  = __riscv_vle8_v_u8mf4(mins, vl);\n        vint16mf2_t v_mins = __riscv_vreinterpret_v_u16mf2_i16mf2(__riscv_vzext_vf2_u16mf2(mins8, vl));\n        vint32m1_t  prod   = __riscv_vwmul_vv_i32m1(q8sums, v_mins, vl);\n\n        vint32m1_t sumi = __riscv_vredsum_vs_i32m1_i32m1(prod, __riscv_vmv_v_x_i32m1(0, 1), vl);\n        sumf -= dmin * __riscv_vmv_x_s_i32m1_i32(sumi);\n\n        const uint8_t * restrict q4 = x[i].qs;\n        const int8_t  * restrict q8 = y[i].qs;\n\n        vl = 32;\n\n        int32_t sum_1 = 0;\n        int32_t sum_2 = 0;\n\n        vint16m1_t vzero = __riscv_vmv_v_x_i16m1(0, 1);\n\n        for (int j = 0; j < QK_K/64; ++j) {\n            // load Q4\n            vuint8m1_t q4_x = __riscv_vle8_v_u8m1(q4, vl);\n\n            // load Q8 and multiply it with lower Q4 nibble\n            vint8m1_t  q8_0 = __riscv_vle8_v_i8m1(q8, vl);\n            vint8m1_t  q4_0 = __riscv_vreinterpret_v_u8m1_i8m1(__riscv_vand_vx_u8m1(q4_x, 0x0F, vl));\n            vint16m2_t qv_0 = __riscv_vwmul_vv_i16m2(q4_0, q8_0, vl);\n            vint16m1_t vs_0 = __riscv_vredsum_vs_i16m2_i16m1(qv_0, vzero, vl);\n\n            sum_1 += __riscv_vmv_x_s_i16m1_i16(vs_0) * scales[2*j+0];\n\n            // load Q8 and multiply it with upper Q4 nibble\n            vint8m1_t  q8_1 = __riscv_vle8_v_i8m1(q8+32, vl);\n            vint8m1_t  q4_1 = __riscv_vreinterpret_v_u8m1_i8m1(__riscv_vsrl_vx_u8m1(q4_x, 0x04, vl));\n            vint16m2_t qv_1 = __riscv_vwmul_vv_i16m2(q4_1, q8_1, vl);\n            vint16m1_t vs_1 = __riscv_vredsum_vs_i16m2_i16m1(qv_1, vzero, vl);\n\n            sum_2 += __riscv_vmv_x_s_i16m1_i16(vs_1) * scales[2*j+1];\n\n            q4 += 32;    q8 += 64;\n\n        }\n\n        sumf += d*(sum_1 + sum_2);\n\n    }\n\n    *s = sumf;\n\n#elif defined(__POWER9_VECTOR__)\n    const vector signed char lowMask = vec_splats((signed char)0xF);\n    const vector signed char lowMask1 = vec_splats((int8_t)0x3f);\n    const vector signed char lowMask2 = vec_splats((int8_t)0x30);\n    const vector int v0 = vec_splats((int32_t)0);\n    const vector unsigned char v2 = vec_splats((uint8_t)2);\n    const vector unsigned char v4 = vec_splats((unsigned char)0x4);\n\n    vector float vsumf0 = vec_splats(0.0f);\n    vector float vsumf1 = vec_splats(0.0f);\n    vector float vsumf2 = vec_splats(0.0f);\n    vector float vsumf3 = vec_splats(0.0f);\n\n    for (int i = 0; i < nb; ++i) {\n        vector float vxd = vec_splats(GGML_FP16_TO_FP32(x[i].d));\n        vector float vyd = vec_splats(y[i].d);\n        vector float vd = vec_mul(vxd, vyd);\n\n        vector float vxmin = vec_splats(GGML_FP16_TO_FP32(x[i].dmin));\n        vector float vdmin = vec_mul(vxmin, vyd);\n\n        vector signed short q8ysums0 = vec_xl( 0, y[i].bsums);\n        vector signed short q8ysums1 = vec_xl(16, y[i].bsums);\n\n        UNUSED(kmask1);\n        UNUSED(kmask2);\n        UNUSED(kmask3);\n        UNUSED(utmp);\n\n        vector signed char u0 = (vector signed char)vec_xl_len(x[i].scales, 8);\n        vector signed char u1 = vec_and(vec_sr(u0, v2), lowMask2);\n        vector signed char u2 = (vector signed char)vec_xl_len(x[i].scales + 8, 4);\n        vector signed char u3 = vec_sr(u2, v4);\n\n        vector signed char u30 = u1;\n        vector signed char u31 = (vector signed char)vec_mergeh((vector signed int)vec_and(u2, lowMask), (vector signed int)u3);\n\n        u1 = vec_and(u0, lowMask1);\n        u2 = vec_or(u30, u31);\n\n        vector signed char utmps = (vector signed char)vec_mergeh((vector signed int)u1, (vector signed int)u2);\n\n        vector signed short vscales = vec_unpackh(utmps);\n        vector signed short q4xmins = vec_unpackl(utmps);\n        vector signed short q4xmins0 = vec_mergeh(q4xmins, q4xmins);\n        vector signed short q4xmins1 = vec_mergel(q4xmins, q4xmins);\n\n        vector signed int prod0 = vec_mule(q4xmins0, q8ysums0);\n        vector signed int prod1 = vec_mule(q4xmins1, q8ysums1);\n        vector signed int prod2 = vec_mulo(q4xmins0, q8ysums0);\n        vector signed int prod3 = vec_mulo(q4xmins1, q8ysums1);\n\n        vsumf0 = vec_nmsub(vec_ctf(prod0, 0), vdmin, vsumf0);\n        vsumf1 = vec_nmsub(vec_ctf(prod1, 0), vdmin, vsumf1);\n        vsumf2 = vec_nmsub(vec_ctf(prod2, 0), vdmin, vsumf2);\n        vsumf3 = vec_nmsub(vec_ctf(prod3, 0), vdmin, vsumf3);\n\n        vector signed int vsumi0 = v0;\n        vector signed int vsumi1 = v0;\n        vector signed int vsumi2 = v0;\n        vector signed int vsumi3 = v0;\n\n        const uint8_t * restrict q4 = x[i].qs;\n        const int8_t  * restrict q8 = y[i].qs;\n\n        for (int j = 0; j < QK_K/64; j+=2) {\n            __builtin_prefetch(q4, 0, 1);\n            __builtin_prefetch(q8, 0, 1);\n\n            vector signed char qxs0 = (vector signed char)vec_xl( 0, q4);\n            vector signed char qxs1 = (vector signed char)vec_xl(16, q4);\n            vector signed char qxs2 = (vector signed char)vec_xl(32, q4);\n            vector signed char qxs3 = (vector signed char)vec_xl(48, q4);\n            q4 += 64;\n\n            vector unsigned char q4x00 = (vector unsigned char)vec_and(qxs0, lowMask);\n            vector unsigned char q4x01 = (vector unsigned char)vec_sr(qxs0, v4);\n            vector unsigned char q4x10 = (vector unsigned char)vec_and(qxs1, lowMask);\n            vector unsigned char q4x11 = (vector unsigned char)vec_sr(qxs1, v4);\n            vector unsigned char q4x20 = (vector unsigned char)vec_and(qxs2, lowMask);\n            vector unsigned char q4x21 = (vector unsigned char)vec_sr(qxs2, v4);\n            vector unsigned char q4x30 = (vector unsigned char)vec_and(qxs3, lowMask);\n            vector unsigned char q4x31 = (vector unsigned char)vec_sr(qxs3, v4);\n\n            vector signed char q8y00 = vec_xl(  0, q8);\n            vector signed char q8y10 = vec_xl( 16, q8);\n            vector signed char q8y01 = vec_xl( 32, q8);\n            vector signed char q8y11 = vec_xl( 48, q8);\n            vector signed char q8y20 = vec_xl( 64, q8);\n            vector signed char q8y30 = vec_xl( 80, q8);\n            vector signed char q8y21 = vec_xl( 96, q8);\n            vector signed char q8y31 = vec_xl(112, q8);\n            q8 += 128;\n\n            vector signed int qv00 = vec_msum(q8y00, q4x00, v0);\n            vector signed int qv01 = vec_msum(q8y01, q4x01, v0);\n            vector signed int qv10 = vec_msum(q8y10, q4x10, v0);\n            vector signed int qv11 = vec_msum(q8y11, q4x11, v0);\n            vector signed int qv20 = vec_msum(q8y20, q4x20, v0);\n            vector signed int qv21 = vec_msum(q8y21, q4x21, v0);\n            vector signed int qv30 = vec_msum(q8y30, q4x30, v0);\n            vector signed int qv31 = vec_msum(q8y31, q4x31, v0);\n\n            vector signed int vscales_h = vec_unpackh(vscales);\n            vector signed int vs0 = vec_splat(vscales_h, 0);\n            vector signed int vs1 = vec_splat(vscales_h, 1);\n            vector signed int vs2 = vec_splat(vscales_h, 2);\n            vector signed int vs3 = vec_splat(vscales_h, 3);\n            vscales = vec_sld(vscales, vscales, 8);\n\n            vsumi0 = vec_add(vec_mul(qv00, vs0), vsumi0);\n            vsumi1 = vec_add(vec_mul(qv01, vs1), vsumi1);\n            vsumi2 = vec_add(vec_mul(qv20, vs2), vsumi2);\n            vsumi3 = vec_add(vec_mul(qv21, vs3), vsumi3);\n\n            vsumi0 = vec_add(vec_mul(qv10, vs0), vsumi0);\n            vsumi1 = vec_add(vec_mul(qv11, vs1), vsumi1);\n            vsumi2 = vec_add(vec_mul(qv30, vs2), vsumi2);\n            vsumi3 = vec_add(vec_mul(qv31, vs3), vsumi3);\n        }\n\n        vsumf0 = vec_madd(vec_ctf(vsumi0, 0), vd, vsumf0);\n        vsumf1 = vec_madd(vec_ctf(vsumi1, 0), vd, vsumf1);\n        vsumf2 = vec_madd(vec_ctf(vsumi2, 0), vd, vsumf2);\n        vsumf3 = vec_madd(vec_ctf(vsumi3, 0), vd, vsumf3);\n    }\n\n    vsumf0 = vec_add(vsumf0, vsumf2);\n    vsumf1 = vec_add(vsumf1, vsumf3);\n\n    vsumf0 = vec_add(vsumf0, vsumf1);\n\n    vsumf0 = vec_add(vsumf0, vec_sld(vsumf0, vsumf0, 4));\n    vsumf0 = vec_add(vsumf0, vec_sld(vsumf0, vsumf0, 8));\n\n    *s = vec_extract(vsumf0, 0);\n\n#elif defined __loongarch_asx\n    GGML_UNUSED(kmask1);\n    GGML_UNUSED(kmask2);\n    GGML_UNUSED(kmask3);\n\n    const __m256i m4 = __lasx_xvreplgr2vr_b(0xF);\n\n    __m256 acc = (__m256)__lasx_xvldi(0);\n    __m128 acc_m = (__m128)__lsx_vldi(0);\n\n   for (int i = 0; i < nb; ++i) {\n\n        const float d = y[i].d * GGML_FP16_TO_FP32(x[i].d);\n        const float dmin = -y[i].d * GGML_FP16_TO_FP32(x[i].dmin);\n\n        memcpy(utmp, x[i].scales, 12);\n        utmp[3] = ((utmp[2] >> 4) & kmask2) | (((utmp[1] >> 6) & kmask3) << 4);\n        const uint32_t uaux = utmp[1] & kmask1;\n        utmp[1] = (utmp[2] & kmask2) | (((utmp[0] >> 6) & kmask3) << 4);\n        utmp[2] = uaux;\n        utmp[0] &= kmask1;\n\n        const uint8_t * restrict q4 = x[i].qs;\n        const int8_t  * restrict q8 = y[i].qs;\n\n        const __m256i mins_and_scales = lasx_extu8_16(lsx_set_w(utmp[3], utmp[2], utmp[1], utmp[0]));\n\n        const __m256i q8sums = __lasx_xvld((const __m256i*)y[i].bsums, 0);\n        const __m128i q8s = lsx_hadd_h(lasx_extracti128(q8sums, 0), lasx_extracti128(q8sums, 1));\n        const __m128i prod = lsx_madd_h(lasx_extracti128(mins_and_scales, 1), q8s);\n        acc_m = __lsx_vfmadd_s(__lsx_vreplfr2vr_s(dmin), __lsx_vffint_s_w(prod), acc_m);\n\n        const __m128i sc128  = lasx_extracti128(mins_and_scales, 0);\n        const __m256i scales = lasx_insertf128(sc128, sc128);\n\n        __m256i sumi = __lasx_xvldi(0);\n\n        for (int j = 0; j < QK_K/64; ++j) {\n\n            const __m256i scale_l = lasx_shuffle_b(scales, get_scale_shuffle_k4(2*j+0));\n            const __m256i scale_h = lasx_shuffle_b(scales, get_scale_shuffle_k4(2*j+1));\n\n            const __m256i q4bits = __lasx_xvld((const __m256i*)q4, 0); q4 += 32;\n            const __m256i q4l = __lasx_xvand_v(q4bits, m4);\n            const __m256i q4h = __lasx_xvand_v(__lasx_xvsrli_h(q4bits, 4), m4);\n\n            const __m256i q8l = __lasx_xvld((const __m256i*)q8, 0); q8 += 32;\n            __m256i p16l = lasx_maddubs_h(q4l, q8l);\n            p16l = lasx_madd_h(scale_l, p16l);\n\n            const __m256i q8h = __lasx_xvld((const __m256i*)q8, 0); q8 += 32;\n            __m256i p16h = lasx_maddubs_h(q4h, q8h);\n            p16h = lasx_madd_h(scale_h, p16h);\n            const __m256i sumj = __lasx_xvadd_w(p16l, p16h);\n\n            sumi = __lasx_xvadd_w(sumi, sumj);\n        }\n\n        __m256 vd = __lasx_xvreplfr2vr_s(d);\n        acc = __lasx_xvfmadd_s(vd, __lasx_xvffint_s_w(sumi), acc);\n\n    }\n\n    acc_m = __lsx_vfadd_s(acc_m, (__m128)__lsx_vpermi_w((__m128i)acc_m, (__m128i)acc_m, 0xee));\n    __m128i tmp1 = __lsx_vinsgr2vr_w(__lsx_vldi(0), __lsx_vpickve2gr_w((__m128i)acc_m, 1), 0);\n    acc_m = __lsx_vfadd_s(acc_m, (__m128)tmp1);\n\n\n    ft_union fi;\n    fi.i = __lsx_vpickve2gr_w(acc_m, 0);\n    *s = hsum_float_8(acc) + fi.f ;\n#else\n\n    const uint8_t * scales = (const uint8_t*)&utmp[0];\n    const uint8_t * mins   = (const uint8_t*)&utmp[2];\n\n    int8_t  aux8[QK_K];\n    int16_t aux16[8];\n    float   sums [8];\n    int32_t aux32[8];\n    memset(sums, 0, 8*sizeof(float));\n\n    float sumf = 0;\n    for (int i = 0; i < nb; ++i) {\n        const uint8_t * restrict q4 = x[i].qs;\n        const  int8_t * restrict q8 = y[i].qs;\n        memset(aux32, 0, 8*sizeof(int32_t));\n        int8_t * restrict a = aux8;\n        for (int j = 0; j < QK_K/64; ++j) {\n            for (int l = 0; l < 32; ++l) a[l] = (int8_t)(q4[l] & 0xF);\n            a += 32;\n            for (int l = 0; l < 32; ++l) a[l] = (int8_t)(q4[l]  >> 4);\n            a += 32; q4 += 32;\n        }\n        memcpy(utmp, x[i].scales, 12);\n        utmp[3] = ((utmp[2] >> 4) & kmask2) | (((utmp[1] >> 6) & kmask3) << 4);\n        const uint32_t uaux = utmp[1] & kmask1;\n        utmp[1] = (utmp[2] & kmask2) | (((utmp[0] >> 6) & kmask3) << 4);\n        utmp[2] = uaux;\n        utmp[0] &= kmask1;\n\n        int sumi = 0;\n        for (int j = 0; j < QK_K/16; ++j) sumi += y[i].bsums[j] * mins[j/2];\n        a = aux8;\n        int is = 0;\n        for (int j = 0; j < QK_K/32; ++j) {\n            int32_t scale = scales[is++];\n            for (int l = 0; l < 8; ++l) aux16[l] = q8[l] * a[l];\n            for (int l = 0; l < 8; ++l) aux32[l] += scale * aux16[l];\n            q8 += 8; a += 8;\n            for (int l = 0; l < 8; ++l) aux16[l] = q8[l] * a[l];\n            for (int l = 0; l < 8; ++l) aux32[l] += scale * aux16[l];\n            q8 += 8; a += 8;\n            for (int l = 0; l < 8; ++l) aux16[l] = q8[l] * a[l];\n            for (int l = 0; l < 8; ++l) aux32[l] += scale * aux16[l];\n            q8 += 8; a += 8;\n            for (int l = 0; l < 8; ++l) aux16[l] = q8[l] * a[l];\n            for (int l = 0; l < 8; ++l) aux32[l] += scale * aux16[l];\n            q8 += 8; a += 8;\n        }\n        const float d = GGML_FP16_TO_FP32(x[i].d) * y[i].d;\n        for (int l = 0; l < 8; ++l) sums[l] += d * aux32[l];\n        const float dmin = GGML_FP16_TO_FP32(x[i].dmin) * y[i].d;\n        sumf -= dmin * sumi;\n    }\n    for (int l = 0; l < 8; ++l) sumf += sums[l];\n    *s = sumf;\n#endif\n}\n\nvoid ggml_vec_dot_q5_K_q8_K(int n, float * restrict s, size_t bs, const void * restrict vx, size_t bx, const void * restrict vy,  size_t by, int nrc) {\n    assert(n % QK_K == 0);\n    assert(nrc == 1);\n    UNUSED(nrc);\n    UNUSED(bx);\n    UNUSED(by);\n    UNUSED(bs);\n\n    const block_q5_K * restrict x = vx;\n    const block_q8_K * restrict y = vy;\n\n    const int nb = n / QK_K;\n\n    static const uint32_t kmask1 = 0x3f3f3f3f;\n    static const uint32_t kmask2 = 0x0f0f0f0f;\n    static const uint32_t kmask3 = 0x03030303;\n\n    uint32_t utmp[4];\n\n#ifdef __ARM_NEON\n    const uint8x16_t m4b = vdupq_n_u8(0xf);\n    const uint8x16_t mone = vdupq_n_u8(1);\n    const uint8x16_t mtwo = vdupq_n_u8(2);\n    const int32x4_t mzero = vdupq_n_s32(0);\n\n    ggml_int8x16x4_t q5bytes;\n\n    float sumf = 0;\n\n    for (int i = 0; i < nb; ++i) {\n\n        const float d = y[i].d * GGML_FP16_TO_FP32(x[i].d);\n        const float dmin = y[i].d * GGML_FP16_TO_FP32(x[i].dmin);\n\n        const int16x8_t q8sums = vpaddq_s16(vld1q_s16(y[i].bsums), vld1q_s16(y[i].bsums + 8));\n\n        memcpy(utmp, x[i].scales, 12);\n        utmp[3] = ((utmp[2] >> 4) & kmask2) | (((utmp[1] >> 6) & kmask3) << 4);\n        const uint32_t uaux = utmp[1] & kmask1;\n        utmp[1] = (utmp[2] & kmask2) | (((utmp[0] >> 6) & kmask3) << 4);\n        utmp[2] = uaux;\n        utmp[0] &= kmask1;\n\n        const uint8x8_t mins8 = vld1_u8((const uint8_t*)utmp + 8);\n        const int16x8_t mins = vreinterpretq_s16_u16(vmovl_u8(mins8));\n        const int32x4_t prod = vaddq_s32(vmull_s16(vget_low_s16 (q8sums), vget_low_s16 (mins)),\n                                         vmull_s16(vget_high_s16(q8sums), vget_high_s16(mins)));\n        int32_t sumi_mins = vaddvq_s32(prod);\n\n        const uint8_t * scales = (const uint8_t *)utmp;\n\n        const uint8_t * restrict q5 = x[i].qs;\n        const uint8_t * restrict qh = x[i].qh;\n        const int8_t  * restrict q8 = y[i].qs;\n\n        ggml_uint8x16x2_t qhbits = ggml_vld1q_u8_x2(qh);\n\n        ggml_uint8x16x4_t q5h;\n\n        int32_t sumi = 0;\n\n        for (int j = 0; j < QK_K/64; ++j) {\n\n            const ggml_uint8x16x2_t q5bits = ggml_vld1q_u8_x2(q5); q5 += 32;\n            const ggml_int8x16x4_t q8bytes = ggml_vld1q_s8_x4(q8); q8 += 64;\n\n            q5h.val[0] = vshlq_n_u8(vandq_u8(mone, qhbits.val[0]), 4);\n            q5h.val[1] = vshlq_n_u8(vandq_u8(mone, qhbits.val[1]), 4);\n            q5h.val[2] = vshlq_n_u8(vandq_u8(mtwo, qhbits.val[0]), 3);\n            q5h.val[3] = vshlq_n_u8(vandq_u8(mtwo, qhbits.val[1]), 3);\n            qhbits.val[0] = vshrq_n_u8(qhbits.val[0], 2);\n            qhbits.val[1] = vshrq_n_u8(qhbits.val[1], 2);\n\n            q5bytes.val[0] = vreinterpretq_s8_u8(vorrq_u8(vandq_u8(q5bits.val[0], m4b), q5h.val[0]));\n            q5bytes.val[1] = vreinterpretq_s8_u8(vorrq_u8(vandq_u8(q5bits.val[1], m4b), q5h.val[1]));\n            q5bytes.val[2] = vreinterpretq_s8_u8(vorrq_u8(vshrq_n_u8(q5bits.val[0], 4), q5h.val[2]));\n            q5bytes.val[3] = vreinterpretq_s8_u8(vorrq_u8(vshrq_n_u8(q5bits.val[1], 4), q5h.val[3]));\n\n            sumi += vaddvq_s32(ggml_vdotq_s32(ggml_vdotq_s32(mzero, q5bytes.val[0], q8bytes.val[0]), q5bytes.val[1], q8bytes.val[1])) * *scales++;\n            sumi += vaddvq_s32(ggml_vdotq_s32(ggml_vdotq_s32(mzero, q5bytes.val[2], q8bytes.val[2]), q5bytes.val[3], q8bytes.val[3])) * *scales++;\n        }\n\n        sumf += d * sumi - dmin * sumi_mins;\n    }\n\n    *s = sumf;\n\n#elif defined __AVX2__\n\n    const __m256i m4 = _mm256_set1_epi8(0xF);\n    const __m128i mzero = _mm_setzero_si128();\n    const __m256i mone  = _mm256_set1_epi8(1);\n\n    __m256 acc = _mm256_setzero_ps();\n\n    float summs = 0.f;\n\n    for (int i = 0; i < nb; ++i) {\n        const uint8_t * restrict q5 = x[i].qs;\n        const int8_t  * restrict q8 = y[i].qs;\n\n        const float d = y[i].d * GGML_FP16_TO_FP32(x[i].d);\n        const float dmin = -y[i].d * GGML_FP16_TO_FP32(x[i].dmin);\n\n        memcpy(utmp, x[i].scales, 12);\n        utmp[3] = ((utmp[2] >> 4) & kmask2) | (((utmp[1] >> 6) & kmask3) << 4);\n        const uint32_t uaux = utmp[1] & kmask1;\n        utmp[1] = (utmp[2] & kmask2) | (((utmp[0] >> 6) & kmask3) << 4);\n        utmp[2] = uaux;\n        utmp[0] &= kmask1;\n\n        const __m256i mins_and_scales = _mm256_cvtepu8_epi16(_mm_set_epi32(utmp[3], utmp[2], utmp[1], utmp[0]));\n\n        const __m256i q8sums = _mm256_loadu_si256((const __m256i*)y[i].bsums);\n        const __m128i q8s = _mm_hadd_epi16(_mm256_extracti128_si256(q8sums, 0), _mm256_extracti128_si256(q8sums, 1));\n        const __m128i prod = _mm_madd_epi16(_mm256_extracti128_si256(mins_and_scales, 1), q8s);\n        const __m128i hsum = _mm_hadd_epi32(_mm_hadd_epi32(prod, mzero), mzero);\n        summs += dmin * _mm_extract_epi32(hsum, 0);\n\n        const __m128i sc128  = _mm256_extracti128_si256(mins_and_scales, 0);\n        const __m256i scales = MM256_SET_M128I(sc128, sc128);\n\n        const __m256i hbits = _mm256_loadu_si256((const __m256i*)x[i].qh);\n        __m256i hmask = mone;\n\n        __m256i sumi = _mm256_setzero_si256();\n\n        int bit = 0;\n\n        for (int j = 0; j < QK_K/64; ++j) {\n\n            const __m256i scale_0 = _mm256_shuffle_epi8(scales, get_scale_shuffle_k4(2*j+0));\n            const __m256i scale_1 = _mm256_shuffle_epi8(scales, get_scale_shuffle_k4(2*j+1));\n\n            const __m256i q5bits = _mm256_loadu_si256((const __m256i*)q5); q5 += 32;\n\n            const __m256i q5l_0 = _mm256_and_si256(q5bits, m4);\n            const __m256i q5h_0 = _mm256_slli_epi16(_mm256_srli_epi16(_mm256_and_si256(hbits, hmask), bit++), 4);\n            const __m256i q5_0  = _mm256_add_epi8(q5l_0, q5h_0);\n            hmask = _mm256_slli_epi16(hmask, 1);\n\n            const __m256i q5l_1 = _mm256_and_si256(_mm256_srli_epi16(q5bits, 4), m4);\n            const __m256i q5h_1 = _mm256_slli_epi16(_mm256_srli_epi16(_mm256_and_si256(hbits, hmask), bit++), 4);\n            const __m256i q5_1  = _mm256_add_epi8(q5l_1, q5h_1);\n            hmask = _mm256_slli_epi16(hmask, 1);\n\n            const __m256i q8_0 = _mm256_loadu_si256((const __m256i*)q8); q8 += 32;\n            const __m256i q8_1 = _mm256_loadu_si256((const __m256i*)q8); q8 += 32;\n\n            __m256i p16_0 = _mm256_maddubs_epi16(q5_0, q8_0);\n            __m256i p16_1 = _mm256_maddubs_epi16(q5_1, q8_1);\n\n            p16_0 = _mm256_madd_epi16(scale_0, p16_0);\n            p16_1 = _mm256_madd_epi16(scale_1, p16_1);\n\n            sumi = _mm256_add_epi32(sumi, _mm256_add_epi32(p16_0, p16_1));\n\n        }\n\n        __m256 vd = _mm256_set1_ps(d);\n        acc = _mm256_fmadd_ps(vd, _mm256_cvtepi32_ps(sumi), acc);\n\n    }\n\n    *s = hsum_float_8(acc) + summs;\n\n#elif defined __AVX__\n\n    const __m128i m4 = _mm_set1_epi8(0xF);\n    const __m128i mzero = _mm_setzero_si128();\n    const __m128i mone  = _mm_set1_epi8(1);\n    const __m128i m2 = _mm_set1_epi8(2);\n\n    __m256 acc = _mm256_setzero_ps();\n\n    float summs = 0.f;\n\n    for (int i = 0; i < nb; ++i) {\n\n        const float d = y[i].d * GGML_FP16_TO_FP32(x[i].d);\n        const float dmin = -y[i].d * GGML_FP16_TO_FP32(x[i].dmin);\n\n        const uint8_t * restrict q5 = x[i].qs;\n        const int8_t  * restrict q8 = y[i].qs;\n\n        memcpy(utmp, x[i].scales, 12);\n        utmp[3] = ((utmp[2] >> 4) & kmask2) | (((utmp[1] >> 6) & kmask3) << 4);\n        const uint32_t uaux = utmp[1] & kmask1;\n        utmp[1] = (utmp[2] & kmask2) | (((utmp[0] >> 6) & kmask3) << 4);\n        utmp[2] = uaux;\n        utmp[0] &= kmask1;\n\n        const __m128i utmps = _mm_set_epi32(utmp[3], utmp[2], utmp[1], utmp[0]);\n        const __m128i scales = _mm_cvtepu8_epi16(utmps);\n        const __m128i mins = _mm_cvtepu8_epi16(_mm_unpackhi_epi64(utmps, utmps));\n\n        const __m128i q8sums_0 = _mm_loadu_si128((const __m128i*)&y[i].bsums[0]);\n        const __m128i q8sums_1 = _mm_loadu_si128((const __m128i*)&y[i].bsums[8]);\n        const __m128i q8s = _mm_hadd_epi16(q8sums_0, q8sums_1);\n        const __m128i prod = _mm_madd_epi16(mins, q8s);\n        const __m128i hsum = _mm_hadd_epi32(_mm_hadd_epi32(prod, mzero), mzero);\n        summs += dmin * _mm_extract_epi32(hsum, 0);\n\n        const __m128i hbits_0 = _mm_loadu_si128((const __m128i*)&x[i].qh[0]);\n        const __m128i hbits_1 = _mm_loadu_si128((const __m128i*)&x[i].qh[16]);\n        __m128i hmask = mone;\n\n        __m128i sumi_0 = _mm_setzero_si128();\n        __m128i sumi_1 = _mm_setzero_si128();\n\n        int bit = 0;\n\n        __m128i shuffle = _mm_set1_epi16(0x0100);\n        for (int j = 0; j < QK_K/64; ++j) {\n\n            const __m128i scale_0 = _mm_shuffle_epi8(scales, shuffle);\n            shuffle = _mm_add_epi16(shuffle, m2);\n            const __m128i scale_1 = _mm_shuffle_epi8(scales, shuffle);\n            shuffle = _mm_add_epi16(shuffle, m2);\n\n            const __m128i q5bits_0 = _mm_loadu_si128((const __m128i*)q5); q5 += 16;\n            const __m128i q5bits_1 = _mm_loadu_si128((const __m128i*)q5); q5 += 16;\n\n            __m128i q5l_0 = _mm_and_si128(q5bits_0, m4);\n            __m128i q5l_1 = _mm_and_si128(q5bits_1, m4);\n            __m128i q5h_0 = _mm_slli_epi16(_mm_srli_epi16(_mm_and_si128(hbits_0, hmask), bit), 4);\n            __m128i q5h_1 = _mm_slli_epi16(_mm_srli_epi16(_mm_and_si128(hbits_1, hmask), bit++), 4);\n            __m128i q5_0  = _mm_add_epi8(q5l_0, q5h_0);\n            __m128i q5_1  = _mm_add_epi8(q5l_1, q5h_1);\n            hmask = _mm_slli_epi16(hmask, 1);\n\n            __m128i q8_0 = _mm_loadu_si128((const __m128i*)q8); q8 += 16;\n            __m128i q8_1 = _mm_loadu_si128((const __m128i*)q8); q8 += 16;\n            __m128i p16_0 = _mm_maddubs_epi16(q5_0, q8_0);\n            __m128i p16_1 = _mm_maddubs_epi16(q5_1, q8_1);\n            p16_0 = _mm_madd_epi16(scale_0, p16_0);\n            p16_1 = _mm_madd_epi16(scale_0, p16_1);\n\n            q5l_0 = _mm_and_si128(_mm_srli_epi16(q5bits_0, 4), m4);\n            q5l_1 = _mm_and_si128(_mm_srli_epi16(q5bits_1, 4), m4);\n            q5h_0 = _mm_slli_epi16(_mm_srli_epi16(_mm_and_si128(hbits_0, hmask), bit), 4);\n            q5h_1 = _mm_slli_epi16(_mm_srli_epi16(_mm_and_si128(hbits_1, hmask), bit++), 4);\n            q5_0  = _mm_add_epi8(q5l_0, q5h_0);\n            q5_1  = _mm_add_epi8(q5l_1, q5h_1);\n            hmask = _mm_slli_epi16(hmask, 1);\n\n            q8_0 = _mm_loadu_si128((const __m128i*)q8); q8 += 16;\n            q8_1 = _mm_loadu_si128((const __m128i*)q8); q8 += 16;\n            __m128i p16_2 = _mm_maddubs_epi16(q5_0, q8_0);\n            __m128i p16_3 = _mm_maddubs_epi16(q5_1, q8_1);\n            p16_2 = _mm_madd_epi16(scale_1, p16_2);\n            p16_3 = _mm_madd_epi16(scale_1, p16_3);\n\n            sumi_0 = _mm_add_epi32(sumi_0, _mm_add_epi32(p16_0, p16_2));\n            sumi_1 = _mm_add_epi32(sumi_1, _mm_add_epi32(p16_1, p16_3));\n\n        }\n\n        __m256 vd = _mm256_set1_ps(d);\n        __m256i sumi = MM256_SET_M128I(sumi_1, sumi_0);\n        acc = _mm256_add_ps(_mm256_mul_ps(vd, _mm256_cvtepi32_ps(sumi)), acc);\n\n    }\n\n    *s = hsum_float_8(acc) + summs;\n\n#elif defined __riscv_v_intrinsic\n\n    const uint8_t * scales = (const uint8_t*)&utmp[0];\n    const uint8_t * mins   = (const uint8_t*)&utmp[2];\n\n    float sumf = 0;\n    float sums = 0.0;\n\n    size_t vl;\n\n    for (int i = 0; i < nb; ++i) {\n\n        vl = 8;\n\n        const uint8_t * restrict q5 = x[i].qs;\n        const uint8_t * restrict hm = x[i].qh;\n        const  int8_t * restrict q8 = y[i].qs;\n\n        const float d = GGML_FP16_TO_FP32(x[i].d) * y[i].d;\n        const float dmin = GGML_FP16_TO_FP32(x[i].dmin) * y[i].d;\n\n        vint16mf2_t q8sums_0 = __riscv_vlse16_v_i16mf2(y[i].bsums, 4, vl);\n        vint16mf2_t q8sums_1 = __riscv_vlse16_v_i16mf2(y[i].bsums+1, 4, vl);\n        vint16mf2_t q8sums = __riscv_vadd_vv_i16mf2(q8sums_0, q8sums_1, vl);\n\n        memcpy(utmp, x[i].scales, 12);\n        utmp[3] = ((utmp[2] >> 4) & kmask2) | (((utmp[1] >> 6) & kmask3) << 4);\n        const uint32_t uaux = utmp[1] & kmask1;\n        utmp[1] = (utmp[2] & kmask2) | (((utmp[0] >> 6) & kmask3) << 4);\n        utmp[2] = uaux;\n        utmp[0] &= kmask1;\n\n        vuint8mf4_t mins8 = __riscv_vle8_v_u8mf4(mins, vl);\n        vint16mf2_t v_mins = __riscv_vreinterpret_v_u16mf2_i16mf2(__riscv_vzext_vf2_u16mf2(mins8, vl));\n        vint32m1_t prod = __riscv_vwmul_vv_i32m1(q8sums, v_mins, vl);\n\n        vint32m1_t sumi = __riscv_vredsum_vs_i32m1_i32m1(prod, __riscv_vmv_v_x_i32m1(0, 1), vl);\n        sumf -= dmin * __riscv_vmv_x_s_i32m1_i32(sumi);\n\n        vl = 32;\n        int32_t aux32 = 0;\n        int is = 0;\n\n        uint8_t m = 1;\n        vint32m1_t vzero = __riscv_vmv_v_x_i32m1(0, 1);\n        vuint8m1_t vqh = __riscv_vle8_v_u8m1(hm, vl);\n\n        for (int j = 0; j < QK_K/64; ++j) {\n            // load Q5 and Q8\n            vuint8m1_t q5_x = __riscv_vle8_v_u8m1(q5, vl);\n            vint8m1_t  q8_y1 = __riscv_vle8_v_i8m1(q8, vl);\n            vint8m1_t  q8_y2 = __riscv_vle8_v_i8m1(q8+32, vl);\n\n            // compute mask for addition\n            vint8m1_t q5_a = __riscv_vreinterpret_v_u8m1_i8m1(__riscv_vand_vx_u8m1(q5_x, 0x0F, vl));\n            vuint8m1_t qh_m1 = __riscv_vand_vx_u8m1(vqh, m, vl);\n            vbool8_t vmask_1 = __riscv_vmsne_vx_u8m1_b8(qh_m1, 0, vl);\n            vint8m1_t q5_m1 = __riscv_vadd_vx_i8m1_mu(vmask_1, q5_a, q5_a, 16, vl);\n            m <<= 1;\n\n            vint8m1_t q5_l = __riscv_vreinterpret_v_u8m1_i8m1(__riscv_vsrl_vx_u8m1(q5_x, 0x04, vl));\n            vuint8m1_t qh_m2 = __riscv_vand_vx_u8m1(vqh, m, vl);\n            vbool8_t vmask_2 = __riscv_vmsne_vx_u8m1_b8(qh_m2, 0, vl);\n            vint8m1_t q5_m2 = __riscv_vadd_vx_i8m1_mu(vmask_2, q5_l, q5_l, 16, vl);\n            m <<= 1;\n\n            vint16m2_t v0 = __riscv_vwmul_vv_i16m2(q5_m1, q8_y1, vl);\n            vint16m2_t v1 = __riscv_vwmul_vv_i16m2(q5_m2, q8_y2, vl);\n\n            vint32m4_t vs1 = __riscv_vwmul_vx_i32m4(v0, scales[is++], vl);\n            vint32m4_t vs2 = __riscv_vwmul_vx_i32m4(v1, scales[is++], vl);\n\n            vint32m1_t vacc1 = __riscv_vredsum_vs_i32m4_i32m1(vs1, vzero, vl);\n            vint32m1_t vacc2 = __riscv_vredsum_vs_i32m4_i32m1(vs2, vzero, vl);\n\n            aux32 += __riscv_vmv_x_s_i32m1_i32(vacc1) + __riscv_vmv_x_s_i32m1_i32(vacc2);\n            q5 += 32;    q8 += 64;\n\n        }\n\n        vfloat32m1_t vaux = __riscv_vfmul_vf_f32m1(__riscv_vfmv_v_f_f32m1(aux32, 1), d, 1);\n        sums += __riscv_vfmv_f_s_f32m1_f32(vaux);\n\n    }\n\n    *s = sumf+sums;\n\n#elif defined(__POWER9_VECTOR__)\n    const vector signed char lowMask = vec_splats((signed char)0xF);\n    const vector signed char lowMask1 = vec_splats((int8_t)0x3f);\n    const vector signed char lowMask2 = vec_splats((int8_t)0x30);\n    const vector int v0 = vec_splats((int32_t)0);\n    const vector unsigned char v1 = vec_splats((unsigned char)0x1);\n    const vector unsigned char v2 = vec_splats((unsigned char)0x2);\n    const vector unsigned char v3 = vec_splats((unsigned char)0x3);\n    const vector unsigned char v4 = vec_splats((unsigned char)0x4);\n\n    vector float vsumf0 = vec_splats(0.0f);\n    vector float vsumf1 = vec_splats(0.0f);\n    vector float vsumf2 = vec_splats(0.0f);\n    vector float vsumf3 = vec_splats(0.0f);\n\n    for (int i = 0; i < nb; ++i) {\n        vector float vxd = vec_splats(GGML_FP16_TO_FP32(x[i].d));\n        vector float vyd = vec_splats(y[i].d);\n        vector float vd = vec_mul(vxd, vyd);\n\n        vector float vxmin = vec_splats(GGML_FP16_TO_FP32(x[i].dmin));\n        vector float vdmin = vec_mul(vxmin, vyd);\n\n        UNUSED(kmask1);\n        UNUSED(kmask2);\n        UNUSED(kmask3);\n        UNUSED(utmp);\n\n        vector signed char u0 = (vector signed char)vec_xl_len(x[i].scales, 8);\n        vector signed char u1 = vec_and(vec_sr(u0, v2), lowMask2);\n        vector signed char u2 = (vector signed char)vec_xl_len(x[i].scales + 8, 4);\n        vector signed char u3 = vec_sr(u2, v4);\n\n        vector signed char u30 = u1;\n        vector signed char u31 = (vector signed char)vec_mergeh((vector signed int)vec_and(u2, lowMask), (vector signed int)u3);\n\n        u1 = vec_and(u0, lowMask1);\n        u2 = vec_or(u30, u31);\n\n        vector signed char utmps = (vector signed char)vec_mergeh((vector signed int)u1, (vector signed int)u2);\n\n        vector signed short q8ysums0 = vec_xl( 0, y[i].bsums);\n        vector signed short q8ysums1 = vec_xl(16, y[i].bsums);\n\n        vector signed short vscales = vec_unpackh(utmps);\n\n        vector signed short q5xmins = vec_unpackl(utmps);\n        vector signed short q5xmins0 = vec_mergeh(q5xmins, q5xmins);\n        vector signed short q5xmins1 = vec_mergel(q5xmins, q5xmins);\n\n        vector signed int prod0 = vec_mule(q5xmins0, q8ysums0);\n        vector signed int prod1 = vec_mule(q5xmins1, q8ysums1);\n        vector signed int prod2 = vec_mulo(q5xmins0, q8ysums0);\n        vector signed int prod3 = vec_mulo(q5xmins1, q8ysums1);\n\n        vsumf0 = vec_nmsub(vec_ctf(prod0, 0), vdmin, vsumf0);\n        vsumf1 = vec_nmsub(vec_ctf(prod1, 0), vdmin, vsumf1);\n        vsumf2 = vec_nmsub(vec_ctf(prod2, 0), vdmin, vsumf2);\n        vsumf3 = vec_nmsub(vec_ctf(prod3, 0), vdmin, vsumf3);\n\n        vector signed char qxhs0 = (vector signed char)vec_xl( 0, x[i].qh);\n        vector signed char qxhs1 = (vector signed char)vec_xl(16, x[i].qh);\n\n        vector signed int vsumi0 = v0;\n        vector signed int vsumi1 = v0;\n        vector signed int vsumi2 = v0;\n        vector signed int vsumi3 = v0;\n\n        const uint8_t * restrict q5 = x[i].qs;\n        const int8_t  * restrict q8 = y[i].qs;\n\n        for (int j = 0; j < QK_K/64; ++j) {\n            __builtin_prefetch(q5, 0, 1);\n            __builtin_prefetch(q8, 0, 1);\n\n            vector signed char qxs0 = (vector signed char)vec_xl( 0, q5);\n            vector signed char qxs1 = (vector signed char)vec_xl(16, q5);\n            q5 += 32;\n\n            vector signed char qxs00 = vec_and(qxs0, lowMask);\n            vector signed char qxs01 = vec_sr(qxs0, v4);\n            vector signed char qxs10 = vec_and(qxs1, lowMask);\n            vector signed char qxs11 = vec_sr(qxs1, v4);\n\n            vector signed char q5h00 = vec_sl(vec_and((vector signed char)v1, qxhs0), v4);\n            vector signed char q5h01 = vec_sl(vec_and((vector signed char)v2, qxhs0), v3);\n            vector signed char q5h10 = vec_sl(vec_and((vector signed char)v1, qxhs1), v4);\n            vector signed char q5h11 = vec_sl(vec_and((vector signed char)v2, qxhs1), v3);\n            qxhs0 = vec_sr(qxhs0, v2);\n            qxhs1 = vec_sr(qxhs1, v2);\n\n            vector unsigned char q5x00 = (vector unsigned char)vec_or(q5h00, qxs00);\n            vector unsigned char q5x01 = (vector unsigned char)vec_or(q5h01, qxs01);\n            vector unsigned char q5x10 = (vector unsigned char)vec_or(q5h10, qxs10);\n            vector unsigned char q5x11 = (vector unsigned char)vec_or(q5h11, qxs11);\n\n            vector signed char q8y00 = vec_xl( 0, q8);\n            vector signed char q8y10 = vec_xl(16, q8);\n            vector signed char q8y01 = vec_xl(32, q8);\n            vector signed char q8y11 = vec_xl(48, q8);\n            q8 += 64;\n\n            vector signed int qv00 = vec_msum(q8y00, q5x00, v0);\n            vector signed int qv01 = vec_msum(q8y01, q5x01, v0);\n            vector signed int qv10 = vec_msum(q8y10, q5x10, v0);\n            vector signed int qv11 = vec_msum(q8y11, q5x11, v0);\n\n            vector signed int vscales_h = vec_unpackh(vscales);\n            vector signed int vs0 = vec_splat(vscales_h, 0);\n            vector signed int vs1 = vec_splat(vscales_h, 1);\n            vscales = vec_sld(vscales, vscales, 12);\n\n            vsumi0 = vec_add(vec_mul(qv00, vs0), vsumi0);\n            vsumi1 = vec_add(vec_mul(qv10, vs0), vsumi1);\n            vsumi2 = vec_add(vec_mul(qv01, vs1), vsumi2);\n            vsumi3 = vec_add(vec_mul(qv11, vs1), vsumi3);\n        }\n\n        vsumf0 = vec_madd(vec_ctf(vsumi0, 0), vd, vsumf0);\n        vsumf1 = vec_madd(vec_ctf(vsumi1, 0), vd, vsumf1);\n        vsumf2 = vec_madd(vec_ctf(vsumi2, 0), vd, vsumf2);\n        vsumf3 = vec_madd(vec_ctf(vsumi3, 0), vd, vsumf3);\n    }\n\n    vsumf0 = vec_add(vsumf0, vsumf2);\n    vsumf1 = vec_add(vsumf1, vsumf3);\n\n    vsumf0 = vec_add(vsumf0, vsumf1);\n\n    vsumf0 = vec_add(vsumf0, vec_sld(vsumf0, vsumf0, 4));\n    vsumf0 = vec_add(vsumf0, vec_sld(vsumf0, vsumf0, 8));\n\n    *s = vec_extract(vsumf0, 0);\n\n#elif defined __loongarch_asx\n    GGML_UNUSED(kmask1);\n    GGML_UNUSED(kmask2);\n    GGML_UNUSED(kmask3);\n\n    const __m256i m4 = __lasx_xvreplgr2vr_b(0xF);\n    const __m128i mzero = __lsx_vldi(0);\n    const __m256i mone  = __lasx_xvreplgr2vr_b(1);\n\n    __m256 acc = (__m256)__lasx_xvldi(0);\n\n    float summs = 0.f;\n\n   for (int i = 0; i < nb; ++i) {\n\n        const uint8_t * restrict q5 = x[i].qs;\n        const int8_t  * restrict q8 = y[i].qs;\n\n        const float d = y[i].d * GGML_FP16_TO_FP32(x[i].d);\n        const float dmin = -y[i].d * GGML_FP16_TO_FP32(x[i].dmin);\n\n        memcpy(utmp, x[i].scales, 12);\n        utmp[3] = ((utmp[2] >> 4) & kmask2) | (((utmp[1] >> 6) & kmask3) << 4);\n        const uint32_t uaux = utmp[1] & kmask1;\n        utmp[1] = (utmp[2] & kmask2) | (((utmp[0] >> 6) & kmask3) << 4);\n        utmp[2] = uaux;\n        utmp[0] &= kmask1;\n\n        const __m256i mins_and_scales = lasx_extu8_16(lsx_set_w(utmp[3], utmp[2], utmp[1], utmp[0]));\n\n        const __m256i q8sums = __lasx_xvld((const __m256i*)y[i].bsums, 0);\n        const __m128i q8s = lsx_hadd_h(lasx_extracti128(q8sums, 0), lasx_extracti128(q8sums, 1));\n        const __m128i prod = lsx_madd_h(lasx_extracti128(mins_and_scales, 1), q8s);\n        const __m128i hsum = lsx_hadd_w(lsx_hadd_w(prod, mzero), mzero);\n        summs += dmin * __lsx_vpickve2gr_w(hsum, 0);    //TODO check\n\n        const __m128i sc128  = lasx_extracti128(mins_and_scales, 0);\n        const __m256i scales = lasx_insertf128(sc128, sc128);\n\n        const __m256i hbits = __lasx_xvld((const __m256i*)x[i].qh, 0);\n        __m256i hmask = mone;\n\n        __m256i sumi = __lasx_xvldi(0);\n\n        int bit = 0;\n        __m256i xvbit;\n\n        for (int j = 0; j < QK_K/64; ++j) {\n\n            const __m256i scale_0 = lasx_shuffle_b(scales, get_scale_shuffle_k4(2*j+0));\n            const __m256i scale_1 = lasx_shuffle_b(scales, get_scale_shuffle_k4(2*j+1));\n\n            const __m256i q5bits = __lasx_xvld((const __m256i*)q5, 0); q5 += 32;\n\n            xvbit = __lasx_xvreplgr2vr_h(bit++);\n            const __m256i q5l_0 = __lasx_xvand_v(q5bits, m4);\n            const __m256i q5h_0 = __lasx_xvslli_h(__lasx_xvsrl_h(__lasx_xvand_v(hbits, hmask), xvbit), 4);\n            const __m256i q5_0  = __lasx_xvadd_b(q5l_0, q5h_0);\n            hmask = __lasx_xvslli_h(hmask, 1);\n\n            xvbit = __lasx_xvreplgr2vr_h(bit++);\n            const __m256i q5l_1 = __lasx_xvand_v(__lasx_xvsrli_h(q5bits, 4), m4);\n            const __m256i q5h_1 = __lasx_xvslli_h(__lasx_xvsrl_h(__lasx_xvand_v(hbits, hmask), xvbit), 4);\n            const __m256i q5_1  = __lasx_xvadd_b(q5l_1, q5h_1);\n            hmask = __lasx_xvslli_h(hmask, 1);\n\n            const __m256i q8_0 = __lasx_xvld((const __m256i*)q8, 0); q8 += 32;\n            const __m256i q8_1 = __lasx_xvld((const __m256i*)q8, 0); q8 += 32;\n\n            __m256i p16_0 = lasx_maddubs_h(q5_0, q8_0);\n            __m256i p16_1 = lasx_maddubs_h(q5_1, q8_1);\n\n            p16_0 = lasx_madd_h(scale_0, p16_0);\n            p16_1 = lasx_madd_h(scale_1, p16_1);\n\n            sumi = __lasx_xvadd_w(sumi, __lasx_xvadd_w(p16_0, p16_1));\n\n        }\n\n        __m256 vd = __lasx_xvreplfr2vr_s(d);\n        acc = __lasx_xvfmadd_s(vd, __lasx_xvffint_s_w(sumi), acc);\n\n    }\n\n    *s = hsum_float_8(acc) + summs;\n\n#else\n\n    const uint8_t * scales = (const uint8_t*)&utmp[0];\n    const uint8_t * mins   = (const uint8_t*)&utmp[2];\n\n    int8_t  aux8[QK_K];\n    int16_t aux16[8];\n    float   sums [8];\n    int32_t aux32[8];\n    memset(sums, 0, 8*sizeof(float));\n\n    float sumf = 0;\n    for (int i = 0; i < nb; ++i) {\n        const uint8_t * restrict q4 = x[i].qs;\n        const uint8_t * restrict hm = x[i].qh;\n        const  int8_t * restrict q8 = y[i].qs;\n        memset(aux32, 0, 8*sizeof(int32_t));\n        int8_t * restrict a = aux8;\n        uint8_t m = 1;\n        for (int j = 0; j < QK_K/64; ++j) {\n            for (int l = 0; l < 32; ++l) a[l] = (int8_t)(q4[l] & 0xF);\n            for (int l = 0; l < 32; ++l) a[l] += (hm[l] & m ? 16 : 0);\n            a += 32; m <<= 1;\n            for (int l = 0; l < 32; ++l) a[l] = (int8_t)(q4[l]  >> 4);\n            for (int l = 0; l < 32; ++l) a[l] += (hm[l] & m ? 16 : 0);\n            a += 32; m <<= 1;\n            q4 += 32;\n        }\n        memcpy(utmp, x[i].scales, 12);\n        utmp[3] = ((utmp[2] >> 4) & kmask2) | (((utmp[1] >> 6) & kmask3) << 4);\n        const uint32_t uaux = utmp[1] & kmask1;\n        utmp[1] = (utmp[2] & kmask2) | (((utmp[0] >> 6) & kmask3) << 4);\n        utmp[2] = uaux;\n        utmp[0] &= kmask1;\n\n        int sumi = 0;\n        for (int j = 0; j < QK_K/16; ++j) sumi += y[i].bsums[j] * mins[j/2];\n        a = aux8;\n        int is = 0;\n        for (int j = 0; j < QK_K/32; ++j) {\n            int32_t scale = scales[is++];\n            for (int l = 0; l < 8; ++l) aux16[l] = q8[l] * a[l];\n            for (int l = 0; l < 8; ++l) aux32[l] += scale * aux16[l];\n            q8 += 8; a += 8;\n            for (int l = 0; l < 8; ++l) aux16[l] = q8[l] * a[l];\n            for (int l = 0; l < 8; ++l) aux32[l] += scale * aux16[l];\n            q8 += 8; a += 8;\n            for (int l = 0; l < 8; ++l) aux16[l] = q8[l] * a[l];\n            for (int l = 0; l < 8; ++l) aux32[l] += scale * aux16[l];\n            q8 += 8; a += 8;\n            for (int l = 0; l < 8; ++l) aux16[l] = q8[l] * a[l];\n            for (int l = 0; l < 8; ++l) aux32[l] += scale * aux16[l];\n            q8 += 8; a += 8;\n        }\n        const float d = GGML_FP16_TO_FP32(x[i].d) * y[i].d;\n        for (int l = 0; l < 8; ++l) sums[l] += d * aux32[l];\n        const float dmin = GGML_FP16_TO_FP32(x[i].dmin) * y[i].d;\n        sumf -= dmin * sumi;\n    }\n    for (int l = 0; l < 8; ++l) sumf += sums[l];\n    *s = sumf;\n#endif\n}\n\nvoid ggml_vec_dot_q6_K_q8_K(int n, float * restrict s, size_t bs, const void * restrict vx, size_t bx, const void * restrict vy, size_t by, int nrc) {\n    assert(n % QK_K == 0);\n    assert(nrc == 1);\n    UNUSED(nrc);\n    UNUSED(bx);\n    UNUSED(by);\n    UNUSED(bs);\n\n    const block_q6_K * restrict x = vx;\n    const block_q8_K * restrict y = vy;\n\n    const int nb = n / QK_K;\n\n#ifdef __ARM_NEON\n    float sum = 0;\n\n    const uint8x16_t m4b = vdupq_n_u8(0xF);\n    const int32x4_t  vzero = vdupq_n_s32(0);\n    //const int8x16_t  m32s = vdupq_n_s8(32);\n\n    const uint8x16_t mone = vdupq_n_u8(3);\n\n    ggml_int8x16x4_t q6bytes;\n    ggml_uint8x16x4_t q6h;\n\n    for (int i = 0; i < nb; ++i) {\n\n        const float d_all = GGML_FP16_TO_FP32(x[i].d);\n\n        const uint8_t * restrict q6 = x[i].ql;\n        const uint8_t * restrict qh = x[i].qh;\n        const int8_t  * restrict q8 = y[i].qs;\n\n        const int8_t * restrict scale = x[i].scales;\n\n        const ggml_int16x8x2_t q8sums = ggml_vld1q_s16_x2(y[i].bsums);\n        const int8x16_t scales = vld1q_s8(scale);\n        const ggml_int16x8x2_t q6scales = {{vmovl_s8(vget_low_s8(scales)), vmovl_s8(vget_high_s8(scales))}};\n\n        const int32x4_t prod = vaddq_s32(vaddq_s32(vmull_s16(vget_low_s16 (q8sums.val[0]), vget_low_s16 (q6scales.val[0])),\n                                                   vmull_s16(vget_high_s16(q8sums.val[0]), vget_high_s16(q6scales.val[0]))),\n                                         vaddq_s32(vmull_s16(vget_low_s16 (q8sums.val[1]), vget_low_s16 (q6scales.val[1])),\n                                                   vmull_s16(vget_high_s16(q8sums.val[1]), vget_high_s16(q6scales.val[1]))));\n        int32_t isum_mins = vaddvq_s32(prod);\n\n        int32_t isum = 0;\n\n        for (int j = 0; j < QK_K/128; ++j) {\n\n            ggml_uint8x16x2_t qhbits = ggml_vld1q_u8_x2(qh); qh += 32;\n            ggml_uint8x16x4_t q6bits = ggml_vld1q_u8_x4(q6); q6 += 64;\n            ggml_int8x16x4_t q8bytes = ggml_vld1q_s8_x4(q8); q8 += 64;\n\n            q6h.val[0] = vshlq_n_u8(vandq_u8(mone, qhbits.val[0]), 4);\n            q6h.val[1] = vshlq_n_u8(vandq_u8(mone, qhbits.val[1]), 4);\n            uint8x16_t shifted = vshrq_n_u8(qhbits.val[0], 2);\n            q6h.val[2] = vshlq_n_u8(vandq_u8(mone, shifted), 4);\n            shifted = vshrq_n_u8(qhbits.val[1], 2);\n            q6h.val[3] = vshlq_n_u8(vandq_u8(mone, shifted), 4);\n\n            //q6bytes.val[0] = vsubq_s8(vreinterpretq_s8_u8(vorrq_u8(vandq_u8(q6bits.val[0], m4b), q6h.val[0])), m32s);\n            //q6bytes.val[1] = vsubq_s8(vreinterpretq_s8_u8(vorrq_u8(vandq_u8(q6bits.val[1], m4b), q6h.val[1])), m32s);\n            //q6bytes.val[2] = vsubq_s8(vreinterpretq_s8_u8(vorrq_u8(vandq_u8(q6bits.val[2], m4b), q6h.val[2])), m32s);\n            //q6bytes.val[3] = vsubq_s8(vreinterpretq_s8_u8(vorrq_u8(vandq_u8(q6bits.val[3], m4b), q6h.val[3])), m32s);\n            q6bytes.val[0] = vreinterpretq_s8_u8(vorrq_u8(vandq_u8(q6bits.val[0], m4b), q6h.val[0]));\n            q6bytes.val[1] = vreinterpretq_s8_u8(vorrq_u8(vandq_u8(q6bits.val[1], m4b), q6h.val[1]));\n            q6bytes.val[2] = vreinterpretq_s8_u8(vorrq_u8(vandq_u8(q6bits.val[2], m4b), q6h.val[2]));\n            q6bytes.val[3] = vreinterpretq_s8_u8(vorrq_u8(vandq_u8(q6bits.val[3], m4b), q6h.val[3]));\n\n            isum += vaddvq_s32(ggml_vdotq_s32(vzero, q6bytes.val[0], q8bytes.val[0])) * scale[0] +\n                    vaddvq_s32(ggml_vdotq_s32(vzero, q6bytes.val[1], q8bytes.val[1])) * scale[1] +\n                    vaddvq_s32(ggml_vdotq_s32(vzero, q6bytes.val[2], q8bytes.val[2])) * scale[2] +\n                    vaddvq_s32(ggml_vdotq_s32(vzero, q6bytes.val[3], q8bytes.val[3])) * scale[3];\n\n            scale += 4;\n\n            q8bytes = ggml_vld1q_s8_x4(q8); q8 += 64;\n\n            shifted = vshrq_n_u8(qhbits.val[0], 4);\n            q6h.val[0] = vshlq_n_u8(vandq_u8(mone, shifted), 4);\n            shifted = vshrq_n_u8(qhbits.val[1], 4);\n            q6h.val[1] = vshlq_n_u8(vandq_u8(mone, shifted), 4);\n            shifted = vshrq_n_u8(qhbits.val[0], 6);\n            q6h.val[2] = vshlq_n_u8(vandq_u8(mone, shifted), 4);\n            shifted = vshrq_n_u8(qhbits.val[1], 6);\n            q6h.val[3] = vshlq_n_u8(vandq_u8(mone, shifted), 4);\n\n            //q6bytes.val[0] = vsubq_s8(vreinterpretq_s8_u8(vorrq_u8(vshrq_n_u8(q6bits.val[0], 4), q6h.val[0])), m32s);\n            //q6bytes.val[1] = vsubq_s8(vreinterpretq_s8_u8(vorrq_u8(vshrq_n_u8(q6bits.val[1], 4), q6h.val[1])), m32s);\n            //q6bytes.val[2] = vsubq_s8(vreinterpretq_s8_u8(vorrq_u8(vshrq_n_u8(q6bits.val[2], 4), q6h.val[2])), m32s);\n            //q6bytes.val[3] = vsubq_s8(vreinterpretq_s8_u8(vorrq_u8(vshrq_n_u8(q6bits.val[3], 4), q6h.val[3])), m32s);\n            q6bytes.val[0] = vreinterpretq_s8_u8(vorrq_u8(vshrq_n_u8(q6bits.val[0], 4), q6h.val[0]));\n            q6bytes.val[1] = vreinterpretq_s8_u8(vorrq_u8(vshrq_n_u8(q6bits.val[1], 4), q6h.val[1]));\n            q6bytes.val[2] = vreinterpretq_s8_u8(vorrq_u8(vshrq_n_u8(q6bits.val[2], 4), q6h.val[2]));\n            q6bytes.val[3] = vreinterpretq_s8_u8(vorrq_u8(vshrq_n_u8(q6bits.val[3], 4), q6h.val[3]));\n\n            isum += vaddvq_s32(ggml_vdotq_s32(vzero, q6bytes.val[0], q8bytes.val[0])) * scale[0] +\n                    vaddvq_s32(ggml_vdotq_s32(vzero, q6bytes.val[1], q8bytes.val[1])) * scale[1] +\n                    vaddvq_s32(ggml_vdotq_s32(vzero, q6bytes.val[2], q8bytes.val[2])) * scale[2] +\n                    vaddvq_s32(ggml_vdotq_s32(vzero, q6bytes.val[3], q8bytes.val[3])) * scale[3];\n            scale += 4;\n        }\n        //sum += isum * d_all * y[i].d;\n        sum += d_all * y[i].d * (isum - 32 * isum_mins);\n\n    }\n    *s = sum;\n\n#elif defined __AVX2__\n\n    const __m256i m4 = _mm256_set1_epi8(0xF);\n    const __m256i m2 = _mm256_set1_epi8(3);\n    const __m256i m32s = _mm256_set1_epi8(32);\n\n    __m256 acc = _mm256_setzero_ps();\n\n    for (int i = 0; i < nb; ++i) {\n\n        const float d = y[i].d * GGML_FP16_TO_FP32(x[i].d);\n\n        const uint8_t * restrict q4 = x[i].ql;\n        const uint8_t * restrict qh = x[i].qh;\n        const int8_t  * restrict q8 = y[i].qs;\n\n        const __m128i scales = _mm_loadu_si128((const __m128i*)x[i].scales);\n\n        __m256i sumi = _mm256_setzero_si256();\n\n        int is = 0;\n\n        for (int j = 0; j < QK_K/128; ++j) {\n\n            const __m128i scale_0 = _mm_shuffle_epi8(scales, get_scale_shuffle(is + 0));\n            const __m128i scale_1 = _mm_shuffle_epi8(scales, get_scale_shuffle(is + 1));\n            const __m128i scale_2 = _mm_shuffle_epi8(scales, get_scale_shuffle(is + 2));\n            const __m128i scale_3 = _mm_shuffle_epi8(scales, get_scale_shuffle(is + 3));\n            is += 4;\n\n            const __m256i q4bits1 = _mm256_loadu_si256((const __m256i*)q4); q4 += 32;\n            const __m256i q4bits2 = _mm256_loadu_si256((const __m256i*)q4); q4 += 32;\n            const __m256i q4bitsH = _mm256_loadu_si256((const __m256i*)qh); qh += 32;\n\n            const __m256i q4h_0 = _mm256_slli_epi16(_mm256_and_si256(q4bitsH, m2), 4);\n            const __m256i q4h_1 = _mm256_slli_epi16(_mm256_and_si256(_mm256_srli_epi16(q4bitsH, 2), m2), 4);\n            const __m256i q4h_2 = _mm256_slli_epi16(_mm256_and_si256(_mm256_srli_epi16(q4bitsH, 4), m2), 4);\n            const __m256i q4h_3 = _mm256_slli_epi16(_mm256_and_si256(_mm256_srli_epi16(q4bitsH, 6), m2), 4);\n\n            const __m256i q4_0 = _mm256_or_si256(_mm256_and_si256(q4bits1, m4), q4h_0);\n            const __m256i q4_1 = _mm256_or_si256(_mm256_and_si256(q4bits2, m4), q4h_1);\n            const __m256i q4_2 = _mm256_or_si256(_mm256_and_si256(_mm256_srli_epi16(q4bits1, 4), m4), q4h_2);\n            const __m256i q4_3 = _mm256_or_si256(_mm256_and_si256(_mm256_srli_epi16(q4bits2, 4), m4), q4h_3);\n\n            const __m256i q8_0 = _mm256_loadu_si256((const __m256i*)q8); q8 += 32;\n            const __m256i q8_1 = _mm256_loadu_si256((const __m256i*)q8); q8 += 32;\n            const __m256i q8_2 = _mm256_loadu_si256((const __m256i*)q8); q8 += 32;\n            const __m256i q8_3 = _mm256_loadu_si256((const __m256i*)q8); q8 += 32;\n\n            __m256i q8s_0 = _mm256_maddubs_epi16(m32s, q8_0);\n            __m256i q8s_1 = _mm256_maddubs_epi16(m32s, q8_1);\n            __m256i q8s_2 = _mm256_maddubs_epi16(m32s, q8_2);\n            __m256i q8s_3 = _mm256_maddubs_epi16(m32s, q8_3);\n\n            __m256i p16_0 = _mm256_maddubs_epi16(q4_0, q8_0);\n            __m256i p16_1 = _mm256_maddubs_epi16(q4_1, q8_1);\n            __m256i p16_2 = _mm256_maddubs_epi16(q4_2, q8_2);\n            __m256i p16_3 = _mm256_maddubs_epi16(q4_3, q8_3);\n\n            p16_0 = _mm256_sub_epi16(p16_0, q8s_0);\n            p16_1 = _mm256_sub_epi16(p16_1, q8s_1);\n            p16_2 = _mm256_sub_epi16(p16_2, q8s_2);\n            p16_3 = _mm256_sub_epi16(p16_3, q8s_3);\n\n            p16_0 = _mm256_madd_epi16(_mm256_cvtepi8_epi16(scale_0), p16_0);\n            p16_1 = _mm256_madd_epi16(_mm256_cvtepi8_epi16(scale_1), p16_1);\n            p16_2 = _mm256_madd_epi16(_mm256_cvtepi8_epi16(scale_2), p16_2);\n            p16_3 = _mm256_madd_epi16(_mm256_cvtepi8_epi16(scale_3), p16_3);\n\n            sumi = _mm256_add_epi32(sumi, _mm256_add_epi32(p16_0, p16_1));\n            sumi = _mm256_add_epi32(sumi, _mm256_add_epi32(p16_2, p16_3));\n\n        }\n\n        acc = _mm256_fmadd_ps(_mm256_broadcast_ss(&d), _mm256_cvtepi32_ps(sumi), acc);\n    }\n\n    *s = hsum_float_8(acc);\n\n#elif defined __AVX__\n\n    const __m128i m4 = _mm_set1_epi8(0xF);\n    const __m128i m3 = _mm_set1_epi8(3);\n    const __m128i m32s = _mm_set1_epi8(32);\n    const __m128i m2 = _mm_set1_epi8(2);\n\n    __m256 acc = _mm256_setzero_ps();\n\n    for (int i = 0; i < nb; ++i) {\n\n        const float d = y[i].d * GGML_FP16_TO_FP32(x[i].d);\n\n        const uint8_t * restrict q4 = x[i].ql;\n        const uint8_t * restrict qh = x[i].qh;\n        const int8_t  * restrict q8 = y[i].qs;\n\n        const __m128i scales = _mm_loadu_si128((const __m128i*)x[i].scales);\n\n        __m128i sumi_0 = _mm_setzero_si128();\n        __m128i sumi_1 = _mm_setzero_si128();\n\n        __m128i shuffle = _mm_set_epi64x(0x0101010101010101, 0x0000000000000000);\n        for (int j = 0; j < QK_K/128; ++j) {\n\n            const __m128i q4bitsH_0 = _mm_loadu_si128((const __m128i*)qh); qh += 16;\n            const __m128i q4bitsH_1 = _mm_loadu_si128((const __m128i*)qh); qh += 16;\n\n            const __m128i q4h_0 = _mm_slli_epi16(_mm_and_si128(q4bitsH_0, m3), 4);\n            const __m128i q4h_1 = _mm_slli_epi16(_mm_and_si128(q4bitsH_1, m3), 4);\n            const __m128i q4h_2 = _mm_slli_epi16(_mm_and_si128(_mm_srli_epi16(q4bitsH_0, 2), m3), 4);\n            const __m128i q4h_3 = _mm_slli_epi16(_mm_and_si128(_mm_srli_epi16(q4bitsH_1, 2), m3), 4);\n            const __m128i q4h_4 = _mm_slli_epi16(_mm_and_si128(_mm_srli_epi16(q4bitsH_0, 4), m3), 4);\n            const __m128i q4h_5 = _mm_slli_epi16(_mm_and_si128(_mm_srli_epi16(q4bitsH_1, 4), m3), 4);\n            const __m128i q4h_6 = _mm_slli_epi16(_mm_and_si128(_mm_srli_epi16(q4bitsH_0, 6), m3), 4);\n            const __m128i q4h_7 = _mm_slli_epi16(_mm_and_si128(_mm_srli_epi16(q4bitsH_1, 6), m3), 4);\n\n            const __m128i q4bits1_0 = _mm_loadu_si128((const __m128i*)q4); q4 += 16;\n            const __m128i q4bits1_1 = _mm_loadu_si128((const __m128i*)q4); q4 += 16;\n            const __m128i q4bits2_0 = _mm_loadu_si128((const __m128i*)q4); q4 += 16;\n            const __m128i q4bits2_1 = _mm_loadu_si128((const __m128i*)q4); q4 += 16;\n\n            const __m128i q4_0 = _mm_or_si128(_mm_and_si128(q4bits1_0, m4), q4h_0);\n            const __m128i q4_1 = _mm_or_si128(_mm_and_si128(q4bits1_1, m4), q4h_1);\n            const __m128i q4_2 = _mm_or_si128(_mm_and_si128(q4bits2_0, m4), q4h_2);\n            const __m128i q4_3 = _mm_or_si128(_mm_and_si128(q4bits2_1, m4), q4h_3);\n            const __m128i q4_4 = _mm_or_si128(_mm_and_si128(_mm_srli_epi16(q4bits1_0, 4), m4), q4h_4);\n            const __m128i q4_5 = _mm_or_si128(_mm_and_si128(_mm_srli_epi16(q4bits1_1, 4), m4), q4h_5);\n            const __m128i q4_6 = _mm_or_si128(_mm_and_si128(_mm_srli_epi16(q4bits2_0, 4), m4), q4h_6);\n            const __m128i q4_7 = _mm_or_si128(_mm_and_si128(_mm_srli_epi16(q4bits2_1, 4), m4), q4h_7);\n\n            const __m128i q8_0 = _mm_loadu_si128((const __m128i*)q8); q8 += 16;\n            const __m128i q8_1 = _mm_loadu_si128((const __m128i*)q8); q8 += 16;\n            const __m128i q8_2 = _mm_loadu_si128((const __m128i*)q8); q8 += 16;\n            const __m128i q8_3 = _mm_loadu_si128((const __m128i*)q8); q8 += 16;\n            const __m128i q8_4 = _mm_loadu_si128((const __m128i*)q8); q8 += 16;\n            const __m128i q8_5 = _mm_loadu_si128((const __m128i*)q8); q8 += 16;\n            const __m128i q8_6 = _mm_loadu_si128((const __m128i*)q8); q8 += 16;\n            const __m128i q8_7 = _mm_loadu_si128((const __m128i*)q8); q8 += 16;\n\n            __m128i q8s_0 = _mm_maddubs_epi16(m32s, q8_0);\n            __m128i q8s_1 = _mm_maddubs_epi16(m32s, q8_1);\n            __m128i q8s_2 = _mm_maddubs_epi16(m32s, q8_2);\n            __m128i q8s_3 = _mm_maddubs_epi16(m32s, q8_3);\n            __m128i q8s_4 = _mm_maddubs_epi16(m32s, q8_4);\n            __m128i q8s_5 = _mm_maddubs_epi16(m32s, q8_5);\n            __m128i q8s_6 = _mm_maddubs_epi16(m32s, q8_6);\n            __m128i q8s_7 = _mm_maddubs_epi16(m32s, q8_7);\n\n            __m128i p16_0 = _mm_maddubs_epi16(q4_0, q8_0);\n            __m128i p16_1 = _mm_maddubs_epi16(q4_1, q8_1);\n            __m128i p16_2 = _mm_maddubs_epi16(q4_2, q8_2);\n            __m128i p16_3 = _mm_maddubs_epi16(q4_3, q8_3);\n            __m128i p16_4 = _mm_maddubs_epi16(q4_4, q8_4);\n            __m128i p16_5 = _mm_maddubs_epi16(q4_5, q8_5);\n            __m128i p16_6 = _mm_maddubs_epi16(q4_6, q8_6);\n            __m128i p16_7 = _mm_maddubs_epi16(q4_7, q8_7);\n\n            p16_0 = _mm_sub_epi16(p16_0, q8s_0);\n            p16_1 = _mm_sub_epi16(p16_1, q8s_1);\n            p16_2 = _mm_sub_epi16(p16_2, q8s_2);\n            p16_3 = _mm_sub_epi16(p16_3, q8s_3);\n            p16_4 = _mm_sub_epi16(p16_4, q8s_4);\n            p16_5 = _mm_sub_epi16(p16_5, q8s_5);\n            p16_6 = _mm_sub_epi16(p16_6, q8s_6);\n            p16_7 = _mm_sub_epi16(p16_7, q8s_7);\n\n            const __m128i scale_0 = _mm_shuffle_epi8(scales, shuffle);\n            shuffle = _mm_add_epi8(shuffle, m2);\n            const __m128i scale_1 = _mm_shuffle_epi8(scales, shuffle);\n            shuffle = _mm_add_epi8(shuffle, m2);\n            const __m128i scale_2 = _mm_shuffle_epi8(scales, shuffle);\n            shuffle = _mm_add_epi8(shuffle, m2);\n            const __m128i scale_3 = _mm_shuffle_epi8(scales, shuffle);\n            shuffle = _mm_add_epi8(shuffle, m2);\n\n            p16_0 = _mm_madd_epi16(_mm_cvtepi8_epi16(scale_0), p16_0);\n            p16_1 = _mm_madd_epi16(_mm_cvtepi8_epi16(_mm_unpackhi_epi64(scale_0, scale_0)), p16_1);\n            p16_2 = _mm_madd_epi16(_mm_cvtepi8_epi16(scale_1), p16_2);\n            p16_3 = _mm_madd_epi16(_mm_cvtepi8_epi16(_mm_unpackhi_epi64(scale_1, scale_1)), p16_3);\n            p16_4 = _mm_madd_epi16(_mm_cvtepi8_epi16(scale_2), p16_4);\n            p16_5 = _mm_madd_epi16(_mm_cvtepi8_epi16(_mm_unpackhi_epi64(scale_2, scale_2)), p16_5);\n            p16_6 = _mm_madd_epi16(_mm_cvtepi8_epi16(scale_3), p16_6);\n            p16_7 = _mm_madd_epi16(_mm_cvtepi8_epi16(_mm_unpackhi_epi64(scale_3, scale_3)), p16_7);\n\n            sumi_0 = _mm_add_epi32(sumi_0, _mm_add_epi32(p16_0, p16_2));\n            sumi_1 = _mm_add_epi32(sumi_1, _mm_add_epi32(p16_1, p16_3));\n            sumi_0 = _mm_add_epi32(sumi_0, _mm_add_epi32(p16_4, p16_6));\n            sumi_1 = _mm_add_epi32(sumi_1, _mm_add_epi32(p16_5, p16_7));\n\n        }\n\n        __m256i sumi = MM256_SET_M128I(sumi_1, sumi_0);\n        acc = _mm256_add_ps(_mm256_mul_ps(_mm256_broadcast_ss(&d), _mm256_cvtepi32_ps(sumi)), acc);\n    }\n\n    *s = hsum_float_8(acc);\n\n#elif defined __riscv_v_intrinsic\n\n    float sumf = 0;\n    for (int i = 0; i < nb; ++i) {\n\n        const float d = GGML_FP16_TO_FP32(x[i].d) * y[i].d;\n\n        const uint8_t * restrict q6 = x[i].ql;\n        const uint8_t * restrict qh = x[i].qh;\n        const  int8_t * restrict q8 = y[i].qs;\n\n        const int8_t * restrict scale = x[i].scales;\n\n        size_t vl;\n\n        vint32m1_t vzero = __riscv_vmv_v_x_i32m1(0, 1);\n\n        int sum_t = 0;\n        int is = 0;\n\n        for (int j = 0; j < QK_K/128; ++j) {\n\n            vl = 32;\n\n            // load qh\n            vuint8m1_t qh_x = __riscv_vle8_v_u8m1(qh, vl);\n\n            // load Q6\n            vuint8m1_t q6_0 = __riscv_vle8_v_u8m1(q6, vl);\n            vuint8m1_t q6_1 = __riscv_vle8_v_u8m1(q6+32, vl);\n\n            vuint8m1_t q6a_0 = __riscv_vand_vx_u8m1(q6_0, 0x0F, vl);\n            vuint8m1_t q6a_1 = __riscv_vand_vx_u8m1(q6_1, 0x0F, vl);\n            vuint8m1_t q6s_0 = __riscv_vsrl_vx_u8m1(q6_0, 0x04, vl);\n            vuint8m1_t q6s_1 = __riscv_vsrl_vx_u8m1(q6_1, 0x04, vl);\n\n            vuint8m1_t qh_0 = __riscv_vand_vx_u8m1(qh_x, 0x03, vl);\n            vuint8m1_t qh_1 = __riscv_vand_vx_u8m1(__riscv_vsrl_vx_u8m1(qh_x, 0x2, vl), 0x03 , vl);\n            vuint8m1_t qh_2 = __riscv_vand_vx_u8m1(__riscv_vsrl_vx_u8m1(qh_x, 0x4, vl), 0x03 , vl);\n            vuint8m1_t qh_3 = __riscv_vand_vx_u8m1(__riscv_vsrl_vx_u8m1(qh_x, 0x6, vl), 0x03 , vl);\n\n            vuint8m1_t qhi_0 = __riscv_vor_vv_u8m1(q6a_0, __riscv_vsll_vx_u8m1(qh_0, 0x04, vl), vl);\n            vuint8m1_t qhi_1 = __riscv_vor_vv_u8m1(q6a_1, __riscv_vsll_vx_u8m1(qh_1, 0x04, vl), vl);\n            vuint8m1_t qhi_2 = __riscv_vor_vv_u8m1(q6s_0, __riscv_vsll_vx_u8m1(qh_2, 0x04, vl), vl);\n            vuint8m1_t qhi_3 = __riscv_vor_vv_u8m1(q6s_1, __riscv_vsll_vx_u8m1(qh_3, 0x04, vl), vl);\n\n            vint8m1_t a_0 = __riscv_vsub_vx_i8m1(__riscv_vreinterpret_v_u8m1_i8m1(qhi_0), 32, vl);\n            vint8m1_t a_1 = __riscv_vsub_vx_i8m1(__riscv_vreinterpret_v_u8m1_i8m1(qhi_1), 32, vl);\n            vint8m1_t a_2 = __riscv_vsub_vx_i8m1(__riscv_vreinterpret_v_u8m1_i8m1(qhi_2), 32, vl);\n            vint8m1_t a_3 = __riscv_vsub_vx_i8m1(__riscv_vreinterpret_v_u8m1_i8m1(qhi_3), 32, vl);\n\n            // load Q8 and take product\n            vint16m2_t va_q_0 = __riscv_vwmul_vv_i16m2(a_0, __riscv_vle8_v_i8m1(q8, vl), vl);\n            vint16m2_t va_q_1 = __riscv_vwmul_vv_i16m2(a_1, __riscv_vle8_v_i8m1(q8+32, vl), vl);\n            vint16m2_t va_q_2 = __riscv_vwmul_vv_i16m2(a_2, __riscv_vle8_v_i8m1(q8+64, vl), vl);\n            vint16m2_t va_q_3 = __riscv_vwmul_vv_i16m2(a_3, __riscv_vle8_v_i8m1(q8+96, vl), vl);\n\n            vl = 16;\n\n            vint32m2_t vaux_0 = __riscv_vwmul_vx_i32m2(__riscv_vget_v_i16m2_i16m1(va_q_0, 0), scale[is+0], vl);\n            vint32m2_t vaux_1 = __riscv_vwmul_vx_i32m2(__riscv_vget_v_i16m2_i16m1(va_q_0, 1), scale[is+1], vl);\n            vint32m2_t vaux_2 = __riscv_vwmul_vx_i32m2(__riscv_vget_v_i16m2_i16m1(va_q_1, 0), scale[is+2], vl);\n            vint32m2_t vaux_3 = __riscv_vwmul_vx_i32m2(__riscv_vget_v_i16m2_i16m1(va_q_1, 1), scale[is+3], vl);\n            vint32m2_t vaux_4 = __riscv_vwmul_vx_i32m2(__riscv_vget_v_i16m2_i16m1(va_q_2, 0), scale[is+4], vl);\n            vint32m2_t vaux_5 = __riscv_vwmul_vx_i32m2(__riscv_vget_v_i16m2_i16m1(va_q_2, 1), scale[is+5], vl);\n            vint32m2_t vaux_6 = __riscv_vwmul_vx_i32m2(__riscv_vget_v_i16m2_i16m1(va_q_3, 0), scale[is+6], vl);\n            vint32m2_t vaux_7 = __riscv_vwmul_vx_i32m2(__riscv_vget_v_i16m2_i16m1(va_q_3, 1), scale[is+7], vl);\n\n            vint32m1_t isum0 = __riscv_vredsum_vs_i32m2_i32m1(__riscv_vadd_vv_i32m2(vaux_0, vaux_1, vl), vzero, vl);\n            vint32m1_t isum1 = __riscv_vredsum_vs_i32m2_i32m1(__riscv_vadd_vv_i32m2(vaux_2, vaux_3, vl), isum0, vl);\n            vint32m1_t isum2 = __riscv_vredsum_vs_i32m2_i32m1(__riscv_vadd_vv_i32m2(vaux_4, vaux_5, vl), isum1, vl);\n            vint32m1_t isum3 = __riscv_vredsum_vs_i32m2_i32m1(__riscv_vadd_vv_i32m2(vaux_6, vaux_7, vl), isum2, vl);\n\n            sum_t += __riscv_vmv_x_s_i32m1_i32(isum3);\n\n            q6 += 64;   qh += 32;   q8 += 128;   is=8;\n\n        }\n\n        sumf += d * sum_t;\n\n    }\n\n    *s = sumf;\n\n#elif defined(__POWER9_VECTOR__)\n    const vector signed char lowMask = vec_splats((signed char)0xF);\n    const vector int v0 = vec_splats((int32_t)0);\n    const vector unsigned char v2 = vec_splats((unsigned char)0x2);\n    const vector unsigned char v3 = vec_splats((unsigned char)0x3);\n    const vector unsigned char v4 = vec_splats((unsigned char)0x4);\n    const vector unsigned char v6 = vec_splats((unsigned char)0x6);\n    const vector signed char off = vec_splats((signed char)0x20);\n\n    vector float vsumf0 = vec_splats(0.0f);\n    vector float vsumf1 = vec_splats(0.0f);\n    vector float vsumf2 = vec_splats(0.0f);\n    vector float vsumf3 = vec_splats(0.0f);\n\n    for (int i = 0; i < nb; ++i) {\n        vector float vxd = vec_splats(GGML_FP16_TO_FP32(x[i].d));\n        vector float vyd = vec_splats(y[i].d);\n        vector float vd = vec_mul(vxd, vyd);\n\n        vector signed int vsumi0 = v0;\n        vector signed int vsumi1 = v0;\n        vector signed int vsumi2 = v0;\n        vector signed int vsumi3 = v0;\n        vector signed int vsumi4 = v0;\n        vector signed int vsumi5 = v0;\n        vector signed int vsumi6 = v0;\n        vector signed int vsumi7 = v0;\n\n        const uint8_t * restrict q6 = x[i].ql;\n        const uint8_t * restrict qh = x[i].qh;\n        const int8_t  * restrict qs = x[i].scales;\n        const int8_t  * restrict q8 = y[i].qs;\n\n        for (int j = 0; j < QK_K/128; ++j) {\n            __builtin_prefetch(q6, 0, 0);\n            __builtin_prefetch(qh, 0, 0);\n            __builtin_prefetch(q8, 0, 0);\n\n            vector signed char qxs0 = (vector signed char)vec_xl( 0, q6);\n            vector signed char qxs1 = (vector signed char)vec_xl(16, q6);\n            vector signed char qxs2 = (vector signed char)vec_xl(32, q6);\n            vector signed char qxs3 = (vector signed char)vec_xl(48, q6);\n            q6 += 64;\n\n            vector signed char qxs00 = vec_and(qxs0, lowMask);\n            vector signed char qxs01 = vec_sr(qxs0, v4);\n            vector signed char qxs10 = vec_and(qxs1, lowMask);\n            vector signed char qxs11 = vec_sr(qxs1, v4);\n            vector signed char qxs20 = vec_and(qxs2, lowMask);\n            vector signed char qxs21 = vec_sr(qxs2, v4);\n            vector signed char qxs30 = vec_and(qxs3, lowMask);\n            vector signed char qxs31 = vec_sr(qxs3, v4);\n\n            vector signed char qxhs0 = (vector signed char)vec_xl( 0, qh);\n            vector signed char qxhs1 = (vector signed char)vec_xl(16, qh);\n            qh += 32;\n\n            vector signed char qxh00 = vec_sl(vec_and((vector signed char)v3, qxhs0), v4);\n            vector signed char qxh01 = vec_sl(vec_and((vector signed char)v3, vec_sr(qxhs0, v4)), v4);\n            vector signed char qxh10 = vec_sl(vec_and((vector signed char)v3, qxhs1), v4);\n            vector signed char qxh11 = vec_sl(vec_and((vector signed char)v3, vec_sr(qxhs1, v4)), v4);\n            vector signed char qxh20 = vec_sl(vec_and((vector signed char)v3, vec_sr(qxhs0, v2)), v4);\n            vector signed char qxh21 = vec_sl(vec_and((vector signed char)v3, vec_sr(qxhs0, v6)), v4);\n            vector signed char qxh30 = vec_sl(vec_and((vector signed char)v3, vec_sr(qxhs1, v2)), v4);\n            vector signed char qxh31 = vec_sl(vec_and((vector signed char)v3, vec_sr(qxhs1, v6)), v4);\n\n            vector signed char q6x00 = vec_sub(vec_or(qxh00, qxs00), off);\n            vector signed char q6x01 = vec_sub(vec_or(qxh01, qxs01), off);\n            vector signed char q6x10 = vec_sub(vec_or(qxh10, qxs10), off);\n            vector signed char q6x11 = vec_sub(vec_or(qxh11, qxs11), off);\n            vector signed char q6x20 = vec_sub(vec_or(qxh20, qxs20), off);\n            vector signed char q6x21 = vec_sub(vec_or(qxh21, qxs21), off);\n            vector signed char q6x30 = vec_sub(vec_or(qxh30, qxs30), off);\n            vector signed char q6x31 = vec_sub(vec_or(qxh31, qxs31), off);\n\n            vector signed char q8y00 = vec_xl(  0, q8);\n            vector signed char q8y10 = vec_xl( 16, q8);\n            vector signed char q8y20 = vec_xl( 32, q8);\n            vector signed char q8y30 = vec_xl( 48, q8);\n            vector signed char q8y01 = vec_xl( 64, q8);\n            vector signed char q8y11 = vec_xl( 80, q8);\n            vector signed char q8y21 = vec_xl( 96, q8);\n            vector signed char q8y31 = vec_xl(112, q8);\n            q8 += 128;\n\n            vector signed short qv00 = vec_add(vec_mule(q6x00, q8y00), vec_mulo(q6x00, q8y00));\n            vector signed short qv10 = vec_add(vec_mule(q6x10, q8y10), vec_mulo(q6x10, q8y10));\n            vector signed short qv20 = vec_add(vec_mule(q6x20, q8y20), vec_mulo(q6x20, q8y20));\n            vector signed short qv30 = vec_add(vec_mule(q6x30, q8y30), vec_mulo(q6x30, q8y30));\n            vector signed short qv01 = vec_add(vec_mule(q6x01, q8y01), vec_mulo(q6x01, q8y01));\n            vector signed short qv11 = vec_add(vec_mule(q6x11, q8y11), vec_mulo(q6x11, q8y11));\n            vector signed short qv21 = vec_add(vec_mule(q6x21, q8y21), vec_mulo(q6x21, q8y21));\n            vector signed short qv31 = vec_add(vec_mule(q6x31, q8y31), vec_mulo(q6x31, q8y31));\n\n            vector signed short vscales = vec_unpackh(vec_xl_len(qs, 8));\n            qs += 8;\n\n            vector signed short vs0 = vec_splat(vscales, 0);\n            vector signed short vs1 = vec_splat(vscales, 1);\n            vector signed short vs2 = vec_splat(vscales, 2);\n            vector signed short vs3 = vec_splat(vscales, 3);\n            vector signed short vs4 = vec_splat(vscales, 4);\n            vector signed short vs5 = vec_splat(vscales, 5);\n            vector signed short vs6 = vec_splat(vscales, 6);\n            vector signed short vs7 = vec_splat(vscales, 7);\n\n            vsumi0 = vec_msum(qv00, vs0, vsumi0);\n            vsumi1 = vec_msum(qv01, vs4, vsumi1);\n            vsumi2 = vec_msum(qv10, vs1, vsumi2);\n            vsumi3 = vec_msum(qv11, vs5, vsumi3);\n            vsumi4 = vec_msum(qv20, vs2, vsumi4);\n            vsumi5 = vec_msum(qv21, vs6, vsumi5);\n            vsumi6 = vec_msum(qv30, vs3, vsumi6);\n            vsumi7 = vec_msum(qv31, vs7, vsumi7);\n        }\n\n        vsumi0 = vec_add(vsumi0, vsumi4);\n        vsumi1 = vec_add(vsumi1, vsumi5);\n        vsumi2 = vec_add(vsumi2, vsumi6);\n        vsumi3 = vec_add(vsumi3, vsumi7);\n\n        vsumf0 = vec_madd(vec_ctf(vsumi0, 0), vd, vsumf0);\n        vsumf1 = vec_madd(vec_ctf(vsumi1, 0), vd, vsumf1);\n        vsumf2 = vec_madd(vec_ctf(vsumi2, 0), vd, vsumf2);\n        vsumf3 = vec_madd(vec_ctf(vsumi3, 0), vd, vsumf3);\n    }\n\n    vsumf0 = vec_add(vsumf0, vsumf2);\n    vsumf1 = vec_add(vsumf1, vsumf3);\n\n    vsumf0 = vec_add(vsumf0, vsumf1);\n\n    vsumf0 = vec_add(vsumf0, vec_sld(vsumf0, vsumf0, 4));\n    vsumf0 = vec_add(vsumf0, vec_sld(vsumf0, vsumf0, 8));\n\n    *s = vec_extract(vsumf0, 0);\n\n#elif defined __loongarch_asx\n\n    const __m256i m4 = __lasx_xvreplgr2vr_b(0xF);\n    const __m256i m2 = __lasx_xvreplgr2vr_b(3);\n    const __m256i m32s = __lasx_xvreplgr2vr_b(32);\n\n    __m256 acc = (__m256)__lasx_xvldi(0);\n\n    for (int i = 0; i < nb; ++i) {\n\n        const float d = y[i].d * GGML_FP16_TO_FP32(x[i].d);\n\n        const uint8_t * restrict q4 = x[i].ql;\n        const uint8_t * restrict qh = x[i].qh;\n        const int8_t  * restrict q8 = y[i].qs;\n\n        const __m128i scales = __lsx_vld((const __m128i*)x[i].scales, 0);\n\n        __m256i sumi = __lasx_xvldi(0);\n\n        int is = 0;\n\n        for (int j = 0; j < QK_K/128; ++j) {\n\n            const __m128i scale_0 = lsx_shuffle_b(scales, get_scale_shuffle(is + 0));\n            const __m128i scale_1 = lsx_shuffle_b(scales, get_scale_shuffle(is + 1));\n            const __m128i scale_2 = lsx_shuffle_b(scales, get_scale_shuffle(is + 2));\n            const __m128i scale_3 = lsx_shuffle_b(scales, get_scale_shuffle(is + 3));\n            is += 4;\n\n            const __m256i q4bits1 = __lasx_xvld((const __m256i*)q4, 0); q4 += 32;\n            const __m256i q4bits2 = __lasx_xvld((const __m256i*)q4, 0); q4 += 32;\n            const __m256i q4bitsH = __lasx_xvld((const __m256i*)qh, 0); qh += 32;\n\n            const __m256i q4h_0 = __lasx_xvslli_h(__lasx_xvand_v(q4bitsH, m2), 4);\n            const __m256i q4h_1 = __lasx_xvslli_h(__lasx_xvand_v(__lasx_xvsrli_h(q4bitsH, 2), m2), 4);\n            const __m256i q4h_2 = __lasx_xvslli_h(__lasx_xvand_v(__lasx_xvsrli_h(q4bitsH, 4), m2), 4);\n            const __m256i q4h_3 = __lasx_xvslli_h(__lasx_xvand_v(__lasx_xvsrli_h(q4bitsH, 6), m2), 4);\n\n            const __m256i q4_0 = __lasx_xvor_v(__lasx_xvand_v(q4bits1, m4), q4h_0);\n            const __m256i q4_1 = __lasx_xvor_v(__lasx_xvand_v(q4bits2, m4), q4h_1);\n            const __m256i q4_2 = __lasx_xvor_v(__lasx_xvand_v(__lasx_xvsrli_h(q4bits1, 4), m4), q4h_2);\n            const __m256i q4_3 = __lasx_xvor_v(__lasx_xvand_v(__lasx_xvsrli_h(q4bits2, 4), m4), q4h_3);\n\n            const __m256i q8_0 = __lasx_xvld((const __m256i*)q8, 0); q8 += 32;\n            const __m256i q8_1 = __lasx_xvld((const __m256i*)q8, 0); q8 += 32;\n            const __m256i q8_2 = __lasx_xvld((const __m256i*)q8, 0); q8 += 32;\n            const __m256i q8_3 = __lasx_xvld((const __m256i*)q8, 0); q8 += 32;\n\n            __m256i q8s_0 = lasx_maddubs_h(m32s, q8_0);\n            __m256i q8s_1 = lasx_maddubs_h(m32s, q8_1);\n            __m256i q8s_2 = lasx_maddubs_h(m32s, q8_2);\n            __m256i q8s_3 = lasx_maddubs_h(m32s, q8_3);\n\n            __m256i p16_0 = lasx_maddubs_h(q4_0, q8_0);\n            __m256i p16_1 = lasx_maddubs_h(q4_1, q8_1);\n            __m256i p16_2 = lasx_maddubs_h(q4_2, q8_2);\n            __m256i p16_3 = lasx_maddubs_h(q4_3, q8_3);\n\n            p16_0 = __lasx_xvsub_h(p16_0, q8s_0);\n            p16_1 = __lasx_xvsub_h(p16_1, q8s_1);\n            p16_2 = __lasx_xvsub_h(p16_2, q8s_2);\n            p16_3 = __lasx_xvsub_h(p16_3, q8s_3);\n\n            p16_0 = lasx_madd_h(lasx_ext8_16(scale_0), p16_0);\n            p16_1 = lasx_madd_h(lasx_ext8_16(scale_1), p16_1);\n            p16_2 = lasx_madd_h(lasx_ext8_16(scale_2), p16_2);\n            p16_3 = lasx_madd_h(lasx_ext8_16(scale_3), p16_3);\n\n            sumi = __lasx_xvadd_w(sumi, __lasx_xvadd_w(p16_0, p16_1));\n            sumi = __lasx_xvadd_w(sumi, __lasx_xvadd_w(p16_2, p16_3));\n        }\n\n        acc = __lasx_xvfmadd_s((__m256)__lasx_xvreplfr2vr_s(d), __lasx_xvffint_s_w(sumi), acc);\n    }\n\n    *s = hsum_float_8(acc);\n\n#else\n\n    int8_t  aux8[QK_K];\n    int16_t aux16[8];\n    float   sums [8];\n    int32_t aux32[8];\n    memset(sums, 0, 8*sizeof(float));\n\n    float sumf = 0;\n    for (int i = 0; i < nb; ++i) {\n        const uint8_t * restrict q4 = x[i].ql;\n        const uint8_t * restrict qh = x[i].qh;\n        const  int8_t * restrict q8 = y[i].qs;\n        memset(aux32, 0, 8*sizeof(int32_t));\n        int8_t * restrict a = aux8;\n        for (int j = 0; j < QK_K; j += 128) {\n            for (int l = 0; l < 32; ++l) {\n                a[l +  0] = (int8_t)((q4[l +  0] & 0xF) | (((qh[l] >> 0) & 3) << 4)) - 32;\n                a[l + 32] = (int8_t)((q4[l + 32] & 0xF) | (((qh[l] >> 2) & 3) << 4)) - 32;\n                a[l + 64] = (int8_t)((q4[l +  0] >>  4) | (((qh[l] >> 4) & 3) << 4)) - 32;\n                a[l + 96] = (int8_t)((q4[l + 32] >>  4) | (((qh[l] >> 6) & 3) << 4)) - 32;\n            }\n            a  += 128;\n            q4 += 64;\n            qh += 32;\n        }\n        a = aux8;\n        int is = 0;\n        for (int j = 0; j < QK_K/16; ++j) {\n            int scale = x[i].scales[is++];\n            for (int l = 0; l < 8; ++l) aux16[l] = q8[l] * a[l];\n            for (int l = 0; l < 8; ++l) aux32[l] += scale * aux16[l];\n            q8 += 8; a += 8;\n            for (int l = 0; l < 8; ++l) aux16[l] = q8[l] * a[l];\n            for (int l = 0; l < 8; ++l) aux32[l] += scale * aux16[l];\n            q8 += 8; a += 8;\n        }\n        const float d = GGML_FP16_TO_FP32(x[i].d) * y[i].d;\n        for (int l = 0; l < 8; ++l) sums[l] += d * aux32[l];\n    }\n    for (int l = 0; l < 8; ++l) sumf += sums[l];\n    *s = sumf;\n#endif\n}\n\n#if defined (__AVX__) || defined (__AVX2__) || defined (__ARM_NEON) || defined (__POWER9_VECTOR__) || defined(__loongarch_asx)\nstatic const int8_t keven_signs_q2xs[1024] = {\n     1,  1,  1,  1,  1,  1,  1,  1, -1,  1,  1,  1,  1,  1,  1, -1,  1, -1,  1,  1,  1,  1,  1, -1, -1, -1,  1,  1,  1,  1,  1,  1,\n     1,  1, -1,  1,  1,  1,  1, -1, -1,  1, -1,  1,  1,  1,  1,  1,  1, -1, -1,  1,  1,  1,  1,  1, -1, -1, -1,  1,  1,  1,  1, -1,\n     1,  1,  1, -1,  1,  1,  1, -1, -1,  1,  1, -1,  1,  1,  1,  1,  1, -1,  1, -1,  1,  1,  1,  1, -1, -1,  1, -1,  1,  1,  1, -1,\n     1,  1, -1, -1,  1,  1,  1,  1, -1,  1, -1, -1,  1,  1,  1, -1,  1, -1, -1, -1,  1,  1,  1, -1, -1, -1, -1, -1,  1,  1,  1,  1,\n     1,  1,  1,  1, -1,  1,  1, -1, -1,  1,  1,  1, -1,  1,  1,  1,  1, -1,  1,  1, -1,  1,  1,  1, -1, -1,  1,  1, -1,  1,  1, -1,\n     1,  1, -1,  1, -1,  1,  1,  1, -1,  1, -1,  1, -1,  1,  1, -1,  1, -1, -1,  1, -1,  1,  1, -1, -1, -1, -1,  1, -1,  1,  1,  1,\n     1,  1,  1, -1, -1,  1,  1,  1, -1,  1,  1, -1, -1,  1,  1, -1,  1, -1,  1, -1, -1,  1,  1, -1, -1, -1,  1, -1, -1,  1,  1,  1,\n     1,  1, -1, -1, -1,  1,  1, -1, -1,  1, -1, -1, -1,  1,  1,  1,  1, -1, -1, -1, -1,  1,  1,  1, -1, -1, -1, -1, -1,  1,  1, -1,\n     1,  1,  1,  1,  1, -1,  1, -1, -1,  1,  1,  1,  1, -1,  1,  1,  1, -1,  1,  1,  1, -1,  1,  1, -1, -1,  1,  1,  1, -1,  1, -1,\n     1,  1, -1,  1,  1, -1,  1,  1, -1,  1, -1,  1,  1, -1,  1, -1,  1, -1, -1,  1,  1, -1,  1, -1, -1, -1, -1,  1,  1, -1,  1,  1,\n     1,  1,  1, -1,  1, -1,  1,  1, -1,  1,  1, -1,  1, -1,  1, -1,  1, -1,  1, -1,  1, -1,  1, -1, -1, -1,  1, -1,  1, -1,  1,  1,\n     1,  1, -1, -1,  1, -1,  1, -1, -1,  1, -1, -1,  1, -1,  1,  1,  1, -1, -1, -1,  1, -1,  1,  1, -1, -1, -1, -1,  1, -1,  1, -1,\n     1,  1,  1,  1, -1, -1,  1,  1, -1,  1,  1,  1, -1, -1,  1, -1,  1, -1,  1,  1, -1, -1,  1, -1, -1, -1,  1,  1, -1, -1,  1,  1,\n     1,  1, -1,  1, -1, -1,  1, -1, -1,  1, -1,  1, -1, -1,  1,  1,  1, -1, -1,  1, -1, -1,  1,  1, -1, -1, -1,  1, -1, -1,  1, -1,\n     1,  1,  1, -1, -1, -1,  1, -1, -1,  1,  1, -1, -1, -1,  1,  1,  1, -1,  1, -1, -1, -1,  1,  1, -1, -1,  1, -1, -1, -1,  1, -1,\n     1,  1, -1, -1, -1, -1,  1,  1, -1,  1, -1, -1, -1, -1,  1, -1,  1, -1, -1, -1, -1, -1,  1, -1, -1, -1, -1, -1, -1, -1,  1,  1,\n     1,  1,  1,  1,  1,  1, -1, -1, -1,  1,  1,  1,  1,  1, -1,  1,  1, -1,  1,  1,  1,  1, -1,  1, -1, -1,  1,  1,  1,  1, -1, -1,\n     1,  1, -1,  1,  1,  1, -1,  1, -1,  1, -1,  1,  1,  1, -1, -1,  1, -1, -1,  1,  1,  1, -1, -1, -1, -1, -1,  1,  1,  1, -1,  1,\n     1,  1,  1, -1,  1,  1, -1,  1, -1,  1,  1, -1,  1,  1, -1, -1,  1, -1,  1, -1,  1,  1, -1, -1, -1, -1,  1, -1,  1,  1, -1,  1,\n     1,  1, -1, -1,  1,  1, -1, -1, -1,  1, -1, -1,  1,  1, -1,  1,  1, -1, -1, -1,  1,  1, -1,  1, -1, -1, -1, -1,  1,  1, -1, -1,\n     1,  1,  1,  1, -1,  1, -1,  1, -1,  1,  1,  1, -1,  1, -1, -1,  1, -1,  1,  1, -1,  1, -1, -1, -1, -1,  1,  1, -1,  1, -1,  1,\n     1,  1, -1,  1, -1,  1, -1, -1, -1,  1, -1,  1, -1,  1, -1,  1,  1, -1, -1,  1, -1,  1, -1,  1, -1, -1, -1,  1, -1,  1, -1, -1,\n     1,  1,  1, -1, -1,  1, -1, -1, -1,  1,  1, -1, -1,  1, -1,  1,  1, -1,  1, -1, -1,  1, -1,  1, -1, -1,  1, -1, -1,  1, -1, -1,\n     1,  1, -1, -1, -1,  1, -1,  1, -1,  1, -1, -1, -1,  1, -1, -1,  1, -1, -1, -1, -1,  1, -1, -1, -1, -1, -1, -1, -1,  1, -1,  1,\n     1,  1,  1,  1,  1, -1, -1,  1, -1,  1,  1,  1,  1, -1, -1, -1,  1, -1,  1,  1,  1, -1, -1, -1, -1, -1,  1,  1,  1, -1, -1,  1,\n     1,  1, -1,  1,  1, -1, -1, -1, -1,  1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1, -1, -1, -1,  1,  1, -1, -1, -1,\n     1,  1,  1, -1,  1, -1, -1, -1, -1,  1,  1, -1,  1, -1, -1,  1,  1, -1,  1, -1,  1, -1, -1,  1, -1, -1,  1, -1,  1, -1, -1, -1,\n     1,  1, -1, -1,  1, -1, -1,  1, -1,  1, -1, -1,  1, -1, -1, -1,  1, -1, -1, -1,  1, -1, -1, -1, -1, -1, -1, -1,  1, -1, -1,  1,\n     1,  1,  1,  1, -1, -1, -1, -1, -1,  1,  1,  1, -1, -1, -1,  1,  1, -1,  1,  1, -1, -1, -1,  1, -1, -1,  1,  1, -1, -1, -1, -1,\n     1,  1, -1,  1, -1, -1, -1,  1, -1,  1, -1,  1, -1, -1, -1, -1,  1, -1, -1,  1, -1, -1, -1, -1, -1, -1, -1,  1, -1, -1, -1,  1,\n     1,  1,  1, -1, -1, -1, -1,  1, -1,  1,  1, -1, -1, -1, -1, -1,  1, -1,  1, -1, -1, -1, -1, -1, -1, -1,  1, -1, -1, -1, -1,  1,\n     1,  1, -1, -1, -1, -1, -1, -1, -1,  1, -1, -1, -1, -1, -1,  1,  1, -1, -1, -1, -1, -1, -1,  1, -1, -1, -1, -1, -1, -1, -1, -1,\n};\n#endif\n\nvoid ggml_vec_dot_iq2_xxs_q8_K(int n, float * restrict s, size_t bs, const void * restrict vx, size_t bx, const void * restrict vy, size_t by, int nrc) {\n    assert(n % QK_K == 0);\n    assert(nrc == 1);\n    UNUSED(nrc);\n    UNUSED(bx);\n    UNUSED(by);\n    UNUSED(bs);\n\n    const block_iq2_xxs * restrict x = vx;\n    const block_q8_K    * restrict y = vy;\n\n    const int nb = n / QK_K;\n\n#if defined(__ARM_NEON)\n\n    const uint64_t * signs64 = (const uint64_t *)keven_signs_q2xs;\n\n    uint32_t aux32[4];\n    const uint8_t * aux8 = (const uint8_t *)aux32;\n\n    ggml_int8x16x4_t q2u;\n    ggml_int8x16x4_t q2s;\n    ggml_int8x16x4_t q8b;\n\n    float sumf = 0;\n    for (int i = 0; i < nb; ++i) {\n        const float d = GGML_FP16_TO_FP32(x[i].d) * y[i].d;\n        const uint16_t * restrict q2 = x[i].qs;\n        const int8_t   * restrict q8 = y[i].qs;\n        float sumf1 = 0, sumf2 = 0;\n        for (int ib32 = 0; ib32 < QK_K/32; ib32 += 2) {\n            q8b = ggml_vld1q_s8_x4(q8); q8 += 64;\n            memcpy(aux32, q2, 4*sizeof(uint32_t)); q2 += 8;\n            q2u.val[0] = vcombine_s8(vld1_s8((const void *)(iq2xxs_grid + aux8[ 0])), vld1_s8((const void *)(iq2xxs_grid + aux8[ 1])));\n            q2u.val[1] = vcombine_s8(vld1_s8((const void *)(iq2xxs_grid + aux8[ 2])), vld1_s8((const void *)(iq2xxs_grid + aux8[ 3])));\n            q2u.val[2] = vcombine_s8(vld1_s8((const void *)(iq2xxs_grid + aux8[ 8])), vld1_s8((const void *)(iq2xxs_grid + aux8[ 9])));\n            q2u.val[3] = vcombine_s8(vld1_s8((const void *)(iq2xxs_grid + aux8[10])), vld1_s8((const void *)(iq2xxs_grid + aux8[11])));\n            q2s.val[0] = vcombine_s8(vld1_s8((const void *)(signs64 + ((aux32[1] >>  0) & 127))), vld1_s8((const void *)(signs64 + ((aux32[1] >>  7) & 127))));\n            q2s.val[1] = vcombine_s8(vld1_s8((const void *)(signs64 + ((aux32[1] >> 14) & 127))), vld1_s8((const void *)(signs64 + ((aux32[1] >> 21) & 127))));\n            q2s.val[2] = vcombine_s8(vld1_s8((const void *)(signs64 + ((aux32[3] >>  0) & 127))), vld1_s8((const void *)(signs64 + ((aux32[3] >>  7) & 127))));\n            q2s.val[3] = vcombine_s8(vld1_s8((const void *)(signs64 + ((aux32[3] >> 14) & 127))), vld1_s8((const void *)(signs64 + ((aux32[3] >> 21) & 127))));\n            q2u.val[0] = vmulq_s8(q2u.val[0], q2s.val[0]);\n            q2u.val[1] = vmulq_s8(q2u.val[1], q2s.val[1]);\n            q2u.val[2] = vmulq_s8(q2u.val[2], q2s.val[2]);\n            q2u.val[3] = vmulq_s8(q2u.val[3], q2s.val[3]);\n            const int32x4_t p1 = ggml_vdotq_s32(ggml_vdotq_s32(vdupq_n_s32(0), q2u.val[0], q8b.val[0]), q2u.val[1], q8b.val[1]);\n            const int32x4_t p2 = ggml_vdotq_s32(ggml_vdotq_s32(vdupq_n_s32(0), q2u.val[2], q8b.val[2]), q2u.val[3], q8b.val[3]);\n            sumf1 += vaddvq_s32(p1) * (0.5f + (aux32[1] >> 28));\n            sumf2 += vaddvq_s32(p2) * (0.5f + (aux32[3] >> 28));\n        }\n        sumf += d*(sumf1 + sumf2);\n    }\n    *s = 0.25f * sumf;\n\n#elif defined(__AVX2__)\n\n    const uint64_t * signs64 = (const uint64_t *)keven_signs_q2xs;\n\n    uint32_t aux32[4];\n    const uint8_t * aux8 = (const uint8_t *)aux32;\n\n    __m256 accumf = _mm256_setzero_ps();\n    for (int i = 0; i < nb; ++i) {\n        const float d = GGML_FP16_TO_FP32(x[i].d) * y[i].d;\n        const uint16_t * restrict q2 = x[i].qs;\n        const int8_t   * restrict q8 = y[i].qs;\n        __m256i sumi1 = _mm256_setzero_si256();\n        __m256i sumi2 = _mm256_setzero_si256();\n        for (int ib32 = 0; ib32 < QK_K/32; ib32 += 2) {\n            const __m256i q8_1 = _mm256_loadu_si256((const __m256i *)q8); q8 += 32;\n            const __m256i q8_2 = _mm256_loadu_si256((const __m256i *)q8); q8 += 32;\n            memcpy(aux32, q2, 4*sizeof(uint32_t)); q2 += 8;\n            const __m256i q2_1 = _mm256_set_epi64x(iq2xxs_grid[aux8[ 3]], iq2xxs_grid[aux8[ 2]], iq2xxs_grid[aux8[1]], iq2xxs_grid[aux8[0]]);\n            const __m256i q2_2 = _mm256_set_epi64x(iq2xxs_grid[aux8[11]], iq2xxs_grid[aux8[10]], iq2xxs_grid[aux8[9]], iq2xxs_grid[aux8[8]]);\n            const __m256i s2_1 = _mm256_set_epi64x(signs64[(aux32[1] >> 21) & 127], signs64[(aux32[1] >> 14) & 127],\n                                                   signs64[(aux32[1] >>  7) & 127], signs64[(aux32[1] >>  0) & 127]);\n            const __m256i s2_2 = _mm256_set_epi64x(signs64[(aux32[3] >> 21) & 127], signs64[(aux32[3] >> 14) & 127],\n                                                   signs64[(aux32[3] >>  7) & 127], signs64[(aux32[3] >>  0) & 127]);\n            const __m256i q8s_1 = _mm256_sign_epi8(q8_1, s2_1);\n            const __m256i q8s_2 = _mm256_sign_epi8(q8_2, s2_2);\n            const __m256i dot1  = _mm256_maddubs_epi16(q2_1, q8s_1);\n            const __m256i dot2  = _mm256_maddubs_epi16(q2_2, q8s_2);\n            const uint16_t ls1 = aux32[1] >> 28;\n            const uint16_t ls2 = aux32[3] >> 28;\n            const __m256i p1 = _mm256_madd_epi16(dot1, _mm256_set1_epi16(2*ls1+1));\n            const __m256i p2 = _mm256_madd_epi16(dot2, _mm256_set1_epi16(2*ls2+1));\n            sumi1 = _mm256_add_epi32(sumi1, p1);\n            sumi2 = _mm256_add_epi32(sumi2, p2);\n        }\n\n        accumf = _mm256_fmadd_ps(_mm256_set1_ps(d), _mm256_cvtepi32_ps(_mm256_add_epi32(sumi1, sumi2)), accumf);\n\n    }\n\n    *s = 0.125f * hsum_float_8(accumf);\n\n#elif defined(__AVX__)\n    const uint64_t * signs64 = (const uint64_t *)keven_signs_q2xs;\n\n    uint32_t aux32[4];\n    const uint8_t * aux8 = (const uint8_t *)aux32;\n\n    __m256 accumf = _mm256_setzero_ps();\n    for (int i = 0; i < nb; ++i) {\n        const float d = GGML_FP16_TO_FP32(x[i].d) * y[i].d;\n        const uint16_t * restrict q2 = x[i].qs;\n        const int8_t   * restrict q8 = y[i].qs;\n        __m128i sumi1_0 = _mm_setzero_si128();\n        __m128i sumi1_1 = _mm_setzero_si128();\n        __m128i sumi2_0 = _mm_setzero_si128();\n        __m128i sumi2_1 = _mm_setzero_si128();\n        for (int ib32 = 0; ib32 < QK_K/32; ib32 += 2) {\n            const __m128i q8_1_0 = _mm_loadu_si128((const __m128i *)q8); q8 += 16;\n            const __m128i q8_1_1 = _mm_loadu_si128((const __m128i *)q8); q8 += 16;\n            const __m128i q8_2_0 = _mm_loadu_si128((const __m128i *)q8); q8 += 16;\n            const __m128i q8_2_1 = _mm_loadu_si128((const __m128i *)q8); q8 += 16;\n            memcpy(aux32, q2, 4*sizeof(uint32_t)); q2 += 8;\n            const __m128i q2_1_0 = _mm_set_epi64x(iq2xxs_grid[aux8[1]], iq2xxs_grid[aux8[0]]);\n            const __m128i q2_1_1 = _mm_set_epi64x(iq2xxs_grid[aux8[3]], iq2xxs_grid[aux8[2]]);\n            const __m128i q2_2_0 = _mm_set_epi64x(iq2xxs_grid[aux8[9]], iq2xxs_grid[aux8[8]]);\n            const __m128i q2_2_1 = _mm_set_epi64x(iq2xxs_grid[aux8[11]], iq2xxs_grid[aux8[10]]);\n            const __m128i s2_1_0 = _mm_set_epi64x(signs64[(aux32[1] >>  7) & 127], signs64[(aux32[1] >>  0) & 127]);\n            const __m128i s2_1_1 = _mm_set_epi64x(signs64[(aux32[1] >> 21) & 127], signs64[(aux32[1] >> 14) & 127]);\n            const __m128i s2_2_0 = _mm_set_epi64x(signs64[(aux32[3] >>  7) & 127], signs64[(aux32[3] >>  0) & 127]);\n            const __m128i s2_2_1 = _mm_set_epi64x(signs64[(aux32[3] >> 21) & 127], signs64[(aux32[3] >> 14) & 127]);\n            const __m128i q8s_1_0 = _mm_sign_epi8(q8_1_0, s2_1_0);\n            const __m128i q8s_1_1 = _mm_sign_epi8(q8_1_1, s2_1_1);\n            const __m128i q8s_2_0 = _mm_sign_epi8(q8_2_0, s2_2_0);\n            const __m128i q8s_2_1 = _mm_sign_epi8(q8_2_1, s2_2_1);\n            const __m128i dot1_0  = _mm_maddubs_epi16(q2_1_0, q8s_1_0);\n            const __m128i dot1_1  = _mm_maddubs_epi16(q2_1_1, q8s_1_1);\n            const __m128i dot2_0  = _mm_maddubs_epi16(q2_2_0, q8s_2_0);\n            const __m128i dot2_1  = _mm_maddubs_epi16(q2_2_1, q8s_2_1);\n            const uint16_t ls1 = aux32[1] >> 28;\n            const uint16_t ls2 = aux32[3] >> 28;\n            const __m128i p1_0 = _mm_madd_epi16(dot1_0, _mm_set1_epi16(2*ls1+1));\n            const __m128i p1_1 = _mm_madd_epi16(dot1_1, _mm_set1_epi16(2*ls1+1));\n            const __m128i p2_0 = _mm_madd_epi16(dot2_0, _mm_set1_epi16(2*ls2+1));\n            const __m128i p2_1 = _mm_madd_epi16(dot2_1, _mm_set1_epi16(2*ls2+1));\n            sumi1_0 = _mm_add_epi32(sumi1_0, p1_0);\n            sumi1_1 = _mm_add_epi32(sumi1_1, p1_1);\n            sumi2_0 = _mm_add_epi32(sumi2_0, p2_0);\n            sumi2_1 = _mm_add_epi32(sumi2_1, p2_1);\n        }\n\n        accumf = _mm256_add_ps(_mm256_mul_ps(_mm256_set1_ps(d), _mm256_cvtepi32_ps(MM256_SET_M128I(_mm_add_epi32(sumi1_1, sumi2_1), _mm_add_epi32(sumi1_0, sumi2_0)))), accumf);\n\n    }\n\n    *s = 0.125f * hsum_float_8(accumf);\n\n#elif defined(__POWER9_VECTOR__)\n    const vector int v0 = vec_splats((int32_t)0);\n    vector float vsumf0 = vec_splats(0.0f);\n    vector float vsumf1 = vec_splats(0.0f);\n    vector float vsumf2 = vec_splats(0.0f);\n    vector float vsumf3 = vec_splats(0.0f);\n\n    const uint64_t * signs64 = (const uint64_t *)keven_signs_q2xs;\n\n    for (int i = 0; i < nb; ++i) {\n        vector float vxd = vec_splats(GGML_FP16_TO_FP32(x[i].d));\n        vector float vyd = vec_splats(y[i].d);\n        vector float vd = vec_mul(vxd, vyd);\n\n        vector signed int vsumi0 = v0;\n        vector signed int vsumi1 = v0;\n        vector signed int vsumi2 = v0;\n        vector signed int vsumi3 = v0;\n\n        const uint16_t * restrict q2 = x[i].qs;\n        const int8_t  *  restrict q8 = y[i].qs;\n\n        for (int j = 0; j < QK_K/32; j += 2) {\n            __builtin_prefetch(q2, 0, 1);\n            __builtin_prefetch(q8, 0, 1);\n\n            uint32_t aux32[4];\n            const uint8_t * aux8 = (const uint8_t *)aux32;\n\n            memcpy(aux32, q2, 4*sizeof(uint32_t));\n            q2 += 8;\n\n            vector signed long long aux64x2_0 = {*(const int64_t *)(iq2xxs_grid + aux8[ 0]), *(const int64_t *)(iq2xxs_grid + aux8[ 1])};\n            vector signed long long aux64x2_1 = {*(const int64_t *)(iq2xxs_grid + aux8[ 2]), *(const int64_t *)(iq2xxs_grid + aux8[ 3])};\n            vector signed long long aux64x2_2 = {*(const int64_t *)(iq2xxs_grid + aux8[ 8]), *(const int64_t *)(iq2xxs_grid + aux8[ 9])};\n            vector signed long long aux64x2_3 = {*(const int64_t *)(iq2xxs_grid + aux8[10]), *(const int64_t *)(iq2xxs_grid + aux8[11])};\n\n            vector signed long long vsigns0 = {*(const int64_t *)(signs64 + ((aux32[1] >>  0) & 127)), *(const int64_t *)(signs64 + ((aux32[1] >>  7) & 127))};\n            vector signed long long vsigns1 = {*(const int64_t *)(signs64 + ((aux32[1] >> 14) & 127)), *(const int64_t *)(signs64 + ((aux32[1] >> 21) & 127))};\n            vector signed long long vsigns2 = {*(const int64_t *)(signs64 + ((aux32[3] >>  0) & 127)), *(const int64_t *)(signs64 + ((aux32[3] >>  7) & 127))};\n            vector signed long long vsigns3 = {*(const int64_t *)(signs64 + ((aux32[3] >> 14) & 127)), *(const int64_t *)(signs64 + ((aux32[3] >> 21) & 127))};\n\n            vector signed char q2x0 = (vector signed char)vec_mul((vector signed char)vsigns0, (vector signed char)aux64x2_0);\n            vector signed char q2x1 = (vector signed char)vec_mul((vector signed char)vsigns1, (vector signed char)aux64x2_1);\n            vector signed char q2x2 = (vector signed char)vec_mul((vector signed char)vsigns2, (vector signed char)aux64x2_2);\n            vector signed char q2x3 = (vector signed char)vec_mul((vector signed char)vsigns3, (vector signed char)aux64x2_3);\n\n            vector signed char q8y0 = vec_xl( 0, q8);\n            vector signed char q8y1 = vec_xl(16, q8);\n            vector signed char q8y2 = vec_xl(32, q8);\n            vector signed char q8y3 = vec_xl(48, q8);\n            q8 += 64;\n\n            vector signed short qv0 = vec_add(vec_mule(q2x0, q8y0), vec_mulo(q2x0, q8y0));\n            vector signed short qv1 = vec_add(vec_mule(q2x1, q8y1), vec_mulo(q2x1, q8y1));\n            vector signed short qv2 = vec_add(vec_mule(q2x2, q8y2), vec_mulo(q2x2, q8y2));\n            vector signed short qv3 = vec_add(vec_mule(q2x3, q8y3), vec_mulo(q2x3, q8y3));\n\n            const uint16_t ls0 = aux32[1] >> 28;\n            const uint16_t ls1 = aux32[3] >> 28;\n\n            vector signed short vscales01 = vec_splats((int16_t)(2*ls0+1));\n            vector signed short vscales23 = vec_splats((int16_t)(2*ls1+1));\n\n            vsumi0 = vec_msum(qv0, vscales01, vsumi0);\n            vsumi1 = vec_msum(qv1, vscales01, vsumi1);\n            vsumi2 = vec_msum(qv2, vscales23, vsumi2);\n            vsumi3 = vec_msum(qv3, vscales23, vsumi3);\n        }\n\n        vsumf0 = vec_madd(vec_ctf(vsumi0, 0), vd, vsumf0);\n        vsumf1 = vec_madd(vec_ctf(vsumi1, 0), vd, vsumf1);\n        vsumf2 = vec_madd(vec_ctf(vsumi2, 0), vd, vsumf2);\n        vsumf3 = vec_madd(vec_ctf(vsumi3, 0), vd, vsumf3);\n    }\n\n    vsumf0 = vec_add(vsumf0, vsumf2);\n    vsumf1 = vec_add(vsumf1, vsumf3);\n\n    vsumf0 = vec_add(vsumf0, vsumf1);\n\n    vsumf0 = vec_add(vsumf0, vec_sld(vsumf0, vsumf0, 4));\n    vsumf0 = vec_add(vsumf0, vec_sld(vsumf0, vsumf0, 8));\n\n    *s = 0.125f * vec_extract(vsumf0, 0);\n\n#elif defined(__loongarch_asx)\n\n    const uint64_t * signs64 = (const uint64_t *)keven_signs_q2xs;\n\n    uint32_t aux32[4];\n    const uint8_t * aux8 = (const uint8_t *)aux32;\n\n    __m256 accumf = (__m256)__lasx_xvldi(0);\n    for (int i = 0; i < nb; ++i) {\n        const float d = GGML_FP16_TO_FP32(x[i].d) * y[i].d;\n        const uint16_t * restrict q2 = x[i].qs;\n        const int8_t   * restrict q8 = y[i].qs;\n        __m256i sumi1 = __lasx_xvldi(0);\n        __m256i sumi2 = __lasx_xvldi(0);\n        for (int ib32 = 0; ib32 < QK_K/32; ib32 += 2) {\n            const __m256i q8_1 = __lasx_xvld((const __m256i *)q8, 0); q8 += 32;\n            const __m256i q8_2 = __lasx_xvld((const __m256i *)q8, 0); q8 += 32;\n            memcpy(aux32, q2, 4*sizeof(uint32_t)); q2 += 8;\n\n            const __m256i q2_1 = lasx_set_d(iq2xxs_grid[aux8[ 3]], iq2xxs_grid[aux8[ 2]], iq2xxs_grid[aux8[1]], iq2xxs_grid[aux8[0]]);\n            const __m256i q2_2 = lasx_set_d(iq2xxs_grid[aux8[11]], iq2xxs_grid[aux8[10]], iq2xxs_grid[aux8[9]], iq2xxs_grid[aux8[8]]);\n            const __m256i s2_1 = lasx_set_d(signs64[(aux32[1] >> 21) & 127], signs64[(aux32[1] >> 14) & 127],\n                                                   signs64[(aux32[1] >>  7) & 127], signs64[(aux32[1] >>  0) & 127]);\n            const __m256i s2_2 = lasx_set_d(signs64[(aux32[3] >> 21) & 127], signs64[(aux32[3] >> 14) & 127],\n                                                   signs64[(aux32[3] >>  7) & 127], signs64[(aux32[3] >>  0) & 127]);\n            const __m256i q8s_1 = __lasx_xvsigncov_b(s2_1, q8_1);\n            const __m256i q8s_2 = __lasx_xvsigncov_b(s2_2, q8_2);\n            const __m256i dot1  = lasx_maddubs_h(q2_1, q8s_1);\n            const __m256i dot2  = lasx_maddubs_h(q2_2, q8s_2);\n            const uint16_t ls1 = aux32[1] >> 28;\n            const uint16_t ls2 = aux32[3] >> 28;\n            const __m256i p1 = lasx_madd_h(dot1, __lasx_xvreplgr2vr_h(2*ls1+1));\n            const __m256i p2 = lasx_madd_h(dot2, __lasx_xvreplgr2vr_h(2*ls2+1));\n            sumi1 = __lasx_xvadd_w(sumi1, p1);\n            sumi2 = __lasx_xvadd_w(sumi2, p2);\n        }\n\n        accumf = __lasx_xvfmadd_s(__lasx_xvreplfr2vr_s(d), __lasx_xvffint_s_w(__lasx_xvadd_w(sumi1, sumi2)), accumf);\n    }\n\n    *s = 0.125f * hsum_float_8(accumf);\n\n#else\n\n    uint32_t aux32[2];\n    const uint8_t * aux8 = (const uint8_t *)aux32;\n\n    float sumf = 0.f;\n    for (int i = 0; i < nb; ++i) {\n        const float d = GGML_FP16_TO_FP32(x[i].d) * y[i].d;\n        const uint16_t * restrict q2 = x[i].qs;\n        const int8_t   * restrict q8 = y[i].qs;\n        int32_t bsum = 0;\n        for (int ib32 = 0; ib32 < QK_K/32; ++ib32) {\n            memcpy(aux32, q2, 2*sizeof(uint32_t));\n            q2 += 4;\n            const uint32_t ls = 2*(aux32[1] >> 28) + 1;\n            int32_t sumi = 0;\n            for (int l = 0; l < 4; ++l) {\n                const uint8_t * grid = (const uint8_t *)(iq2xxs_grid + aux8[l]);\n                const uint8_t  signs = ksigns_iq2xs[(aux32[1] >> 7*l) & 127];\n                for (int j = 0; j < 8; ++j) {\n                    sumi += grid[j] * q8[j] * (signs & kmask_iq2xs[j] ? -1 : 1);\n                }\n                q8 += 8;\n            }\n            bsum += sumi * ls;\n        }\n        sumf += d * bsum;\n    }\n    *s = 0.125f * sumf;\n#endif\n}\n\nvoid ggml_vec_dot_iq2_xs_q8_K(int n, float * restrict s, size_t bs, const void * restrict vx, size_t bx, const void * restrict vy, size_t by, int nrc) {\n    assert(n % QK_K == 0);\n    assert(nrc == 1);\n    UNUSED(nrc);\n    UNUSED(bx);\n    UNUSED(by);\n    UNUSED(bs);\n\n    const block_iq2_xs * restrict x = vx;\n    const block_q8_K   * restrict y = vy;\n\n    const int nb = n / QK_K;\n\n#if defined(__ARM_NEON)\n\n    const uint64_t * signs64 = (const uint64_t *)keven_signs_q2xs;\n\n    ggml_int8x16x4_t q2u;\n    ggml_int8x16x4_t q2s;\n    ggml_int8x16x4_t q8b;\n\n    int32x4x4_t scales32;\n\n    float sumf = 0;\n    for (int i = 0; i < nb; ++i) {\n        const float d = GGML_FP16_TO_FP32(x[i].d) * y[i].d;\n        const uint16_t * restrict q2 = x[i].qs;\n        const int8_t   * restrict q8 = y[i].qs;\n        const uint8x8_t scales8 = vld1_u8(x[i].scales);\n        const uint8x8_t scales_l = vand_u8(scales8, vdup_n_u8(0xf));\n        const uint8x8_t scales_h = vshr_n_u8(scales8, 4);\n        uint8x16_t scales = vcombine_u8(vzip1_u8(scales_l, scales_h), vzip2_u8(scales_l, scales_h));\n        scales = vaddq_u8(vshlq_n_u8(scales, 1), vdupq_n_u8(1));\n        const uint16x8_t scales1 = vmovl_u8(vget_low_u8(scales));\n        const uint16x8_t scales2 = vmovl_u8(vget_high_u8(scales));\n        scales32.val[0] = vreinterpretq_s32_u32(vmovl_u16(vget_low_u16(scales1)));\n        scales32.val[1] = vreinterpretq_s32_u32(vmovl_u16(vget_high_u16(scales1)));\n        scales32.val[2] = vreinterpretq_s32_u32(vmovl_u16(vget_low_u16(scales2)));\n        scales32.val[3] = vreinterpretq_s32_u32(vmovl_u16(vget_high_u16(scales2)));\n        int32x4_t sumi = vdupq_n_s32(0);\n        for (int ib64 = 0; ib64 < QK_K/64; ++ib64) {\n            q8b = ggml_vld1q_s8_x4(q8); q8 += 64;\n            q2u.val[0] = vcombine_s8(vld1_s8((const void *)(iq2xs_grid + (q2[0] & 511))), vld1_s8((const void *)(iq2xs_grid + (q2[1] & 511))));\n            q2u.val[1] = vcombine_s8(vld1_s8((const void *)(iq2xs_grid + (q2[2] & 511))), vld1_s8((const void *)(iq2xs_grid + (q2[3] & 511))));\n            q2u.val[2] = vcombine_s8(vld1_s8((const void *)(iq2xs_grid + (q2[4] & 511))), vld1_s8((const void *)(iq2xs_grid + (q2[5] & 511))));\n            q2u.val[3] = vcombine_s8(vld1_s8((const void *)(iq2xs_grid + (q2[6] & 511))), vld1_s8((const void *)(iq2xs_grid + (q2[7] & 511))));\n            q2s.val[0] = vcombine_s8(vld1_s8((const void *)(signs64 + (q2[0] >> 9))), vld1_s8((const void *)(signs64 + (q2[1] >> 9))));\n            q2s.val[1] = vcombine_s8(vld1_s8((const void *)(signs64 + (q2[2] >> 9))), vld1_s8((const void *)(signs64 + (q2[3] >> 9))));\n            q2s.val[2] = vcombine_s8(vld1_s8((const void *)(signs64 + (q2[4] >> 9))), vld1_s8((const void *)(signs64 + (q2[5] >> 9))));\n            q2s.val[3] = vcombine_s8(vld1_s8((const void *)(signs64 + (q2[6] >> 9))), vld1_s8((const void *)(signs64 + (q2[7] >> 9))));\n            q2u.val[0] = vmulq_s8(q2u.val[0], q2s.val[0]);\n            q2u.val[1] = vmulq_s8(q2u.val[1], q2s.val[1]);\n            q2u.val[2] = vmulq_s8(q2u.val[2], q2s.val[2]);\n            q2u.val[3] = vmulq_s8(q2u.val[3], q2s.val[3]);\n            const int32x4_t p1 = ggml_vdotq_s32(vdupq_n_s32(0), q2u.val[0], q8b.val[0]);\n            const int32x4_t p2 = ggml_vdotq_s32(vdupq_n_s32(0), q2u.val[1], q8b.val[1]);\n            const int32x4_t p3 = ggml_vdotq_s32(vdupq_n_s32(0), q2u.val[2], q8b.val[2]);\n            const int32x4_t p4 = ggml_vdotq_s32(vdupq_n_s32(0), q2u.val[3], q8b.val[3]);\n            const int32x4_t p = vpaddq_s32(vpaddq_s32(p1, p2), vpaddq_s32(p3, p4));\n            sumi = vmlaq_s32(sumi, p, scales32.val[ib64]);\n            q2 += 8;\n        }\n        sumf += d*vaddvq_s32(sumi);\n    }\n    *s = 0.125f * sumf;\n\n#elif defined(__AVX2__)\n\n    const __m256i mone = _mm256_set1_epi8(1);\n    static const char block_sign_shuffle_mask_1[32] = {\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,\n        0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06,\n    };\n    static const char block_sign_shuffle_mask_2[32] = {\n        0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,\n        0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e,\n    };\n    static const uint8_t bit_selector_mask_bytes[32] = {\n        0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80,\n        0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80,\n    };\n\n    const __m256i bit_selector_mask = _mm256_loadu_si256((const __m256i*)bit_selector_mask_bytes);\n    const __m256i block_sign_shuffle_1 = _mm256_loadu_si256((const __m256i*)block_sign_shuffle_mask_1);\n    const __m256i block_sign_shuffle_2 = _mm256_loadu_si256((const __m256i*)block_sign_shuffle_mask_2);\n\n    static const uint8_t k_bit_helper[32] = {\n        0x00, 0x80, 0x80, 0x00, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x00, 0x80, 0x80, 0x00,\n        0x00, 0x80, 0x80, 0x00, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x00, 0x80, 0x80, 0x00,\n    };\n    const __m256i bit_helper = _mm256_loadu_si256((const __m256i*)k_bit_helper);\n    const __m256i m511 = _mm256_set1_epi16(511);\n    const __m128i m4 = _mm_set1_epi8(0xf);\n    const __m128i m1 = _mm_set1_epi8(1);\n\n    uint64_t aux64;\n\n    // somewhat hacky, but gives a significant boost in performance\n    __m256i aux_gindex;\n    const uint16_t * gindex = (const uint16_t *)&aux_gindex;\n\n    __m256 accumf = _mm256_setzero_ps();\n    for (int i = 0; i < nb; ++i) {\n        const float d = GGML_FP16_TO_FP32(x[i].d) * y[i].d;\n        const uint16_t * restrict q2 = x[i].qs;\n        const int8_t   * restrict q8 = y[i].qs;\n\n        memcpy(&aux64, x[i].scales, 8);\n        __m128i stmp = _mm_set1_epi64x(aux64);\n        stmp = _mm_unpacklo_epi8(_mm_and_si128(stmp, m4), _mm_and_si128(_mm_srli_epi16(stmp, 4), m4));\n        const __m128i scales = _mm_add_epi8(_mm_slli_epi16(stmp, 1), m1);\n\n        __m256i sumi1 = _mm256_setzero_si256();\n        __m256i sumi2 = _mm256_setzero_si256();\n        for (int ib32 = 0; ib32 < QK_K/32; ib32 += 4) {\n\n            const __m256i q2_data = _mm256_loadu_si256((const __m256i*)q2);  q2 += 16;\n            aux_gindex = _mm256_and_si256(q2_data, m511);\n\n            const __m256i partial_sign_bits = _mm256_srli_epi16(q2_data, 9);\n            const __m256i partial_sign_bits_upper = _mm256_srli_epi16(q2_data, 13);\n            const __m256i partial_sign_bits_for_counting = _mm256_xor_si256(partial_sign_bits, partial_sign_bits_upper);\n\n            const __m256i odd_bits = _mm256_shuffle_epi8(bit_helper, partial_sign_bits_for_counting);\n            const __m256i full_sign_bits = _mm256_or_si256(partial_sign_bits, odd_bits);\n\n            const __m256i q8_1 = _mm256_loadu_si256((const __m256i *)q8); q8 += 32;\n            const __m256i q8_2 = _mm256_loadu_si256((const __m256i *)q8); q8 += 32;\n            const __m256i q8_3 = _mm256_loadu_si256((const __m256i *)q8); q8 += 32;\n            const __m256i q8_4 = _mm256_loadu_si256((const __m256i *)q8); q8 += 32;\n\n            const __m256i q2_1 = _mm256_set_epi64x(iq2xs_grid[gindex[ 3]], iq2xs_grid[gindex[ 2]],\n                                                   iq2xs_grid[gindex[ 1]], iq2xs_grid[gindex[ 0]]);\n            const __m256i q2_2 = _mm256_set_epi64x(iq2xs_grid[gindex[ 7]], iq2xs_grid[gindex[ 6]],\n                                                   iq2xs_grid[gindex[ 5]], iq2xs_grid[gindex[ 4]]);\n            const __m256i q2_3 = _mm256_set_epi64x(iq2xs_grid[gindex[11]], iq2xs_grid[gindex[10]],\n                                                   iq2xs_grid[gindex[ 9]], iq2xs_grid[gindex[ 8]]);\n            const __m256i q2_4 = _mm256_set_epi64x(iq2xs_grid[gindex[15]], iq2xs_grid[gindex[14]],\n                                                   iq2xs_grid[gindex[13]], iq2xs_grid[gindex[12]]);\n\n            const __m128i full_signs_l = _mm256_castsi256_si128(full_sign_bits);\n            const __m128i full_signs_h = _mm256_extractf128_si256(full_sign_bits, 1);\n            const __m256i full_signs_1 = MM256_SET_M128I(full_signs_l, full_signs_l);\n            const __m256i full_signs_2 = MM256_SET_M128I(full_signs_h, full_signs_h);\n\n            __m256i signs;\n            signs = _mm256_shuffle_epi8(full_signs_1, block_sign_shuffle_1);\n            signs = _mm256_cmpeq_epi8(_mm256_and_si256(signs, bit_selector_mask), bit_selector_mask);\n            const __m256i q8s_1 = _mm256_sign_epi8(q8_1, _mm256_or_si256(signs, mone));\n\n            signs = _mm256_shuffle_epi8(full_signs_1, block_sign_shuffle_2);\n            signs = _mm256_cmpeq_epi8(_mm256_and_si256(signs, bit_selector_mask), bit_selector_mask);\n            const __m256i q8s_2 = _mm256_sign_epi8(q8_2, _mm256_or_si256(signs, mone));\n\n            signs = _mm256_shuffle_epi8(full_signs_2, block_sign_shuffle_1);\n            signs = _mm256_cmpeq_epi8(_mm256_and_si256(signs, bit_selector_mask), bit_selector_mask);\n            const __m256i q8s_3 = _mm256_sign_epi8(q8_3, _mm256_or_si256(signs, mone));\n\n            signs = _mm256_shuffle_epi8(full_signs_2, block_sign_shuffle_2);\n            signs = _mm256_cmpeq_epi8(_mm256_and_si256(signs, bit_selector_mask), bit_selector_mask);\n            const __m256i q8s_4 = _mm256_sign_epi8(q8_4, _mm256_or_si256(signs, mone));\n\n            const __m256i dot1  = _mm256_maddubs_epi16(q2_1, q8s_1);\n            const __m256i dot2  = _mm256_maddubs_epi16(q2_2, q8s_2);\n            const __m256i dot3  = _mm256_maddubs_epi16(q2_3, q8s_3);\n            const __m256i dot4  = _mm256_maddubs_epi16(q2_4, q8s_4);\n\n            const __m256i sc1 = _mm256_cvtepi8_epi16(_mm_shuffle_epi8(scales, get_scale_shuffle(ib32+0)));\n            const __m256i sc2 = _mm256_cvtepi8_epi16(_mm_shuffle_epi8(scales, get_scale_shuffle(ib32+1)));\n            const __m256i sc3 = _mm256_cvtepi8_epi16(_mm_shuffle_epi8(scales, get_scale_shuffle(ib32+2)));\n            const __m256i sc4 = _mm256_cvtepi8_epi16(_mm_shuffle_epi8(scales, get_scale_shuffle(ib32+3)));\n\n            sumi1 = _mm256_add_epi32(sumi1, _mm256_madd_epi16(dot1, sc1));\n            sumi2 = _mm256_add_epi32(sumi2, _mm256_madd_epi16(dot2, sc2));\n            sumi1 = _mm256_add_epi32(sumi1, _mm256_madd_epi16(dot3, sc3));\n            sumi2 = _mm256_add_epi32(sumi2, _mm256_madd_epi16(dot4, sc4));\n        }\n\n        accumf = _mm256_fmadd_ps(_mm256_set1_ps(d), _mm256_cvtepi32_ps(_mm256_add_epi32(sumi1, sumi2)), accumf);\n\n    }\n\n    *s = 0.125f * hsum_float_8(accumf);\n\n#elif defined(__AVX__)\n    const __m128i mone = _mm_set1_epi8(1);\n    static const char block_sign_shuffle_mask_1[32] = {\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,\n        0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06,\n    };\n    static const char block_sign_shuffle_mask_2[32] = {\n        0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,\n        0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e,\n    };\n    static const uint8_t bit_selector_mask_bytes[32] = {\n        0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80,\n        0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80,\n    };\n\n    const __m128i bit_selector_mask_0 = _mm_loadu_si128((const __m128i*)bit_selector_mask_bytes);\n    const __m128i bit_selector_mask_1 = _mm_loadu_si128((const __m128i*)bit_selector_mask_bytes + 1);\n    const __m128i block_sign_shuffle_1_0 = _mm_loadu_si128((const __m128i*)block_sign_shuffle_mask_1);\n    const __m128i block_sign_shuffle_1_1 = _mm_loadu_si128((const __m128i*)block_sign_shuffle_mask_1 + 1);\n    const __m128i block_sign_shuffle_2_0 = _mm_loadu_si128((const __m128i*)block_sign_shuffle_mask_2);\n    const __m128i block_sign_shuffle_2_1 = _mm_loadu_si128((const __m128i*)block_sign_shuffle_mask_2 + 1);\n\n    static const uint8_t k_bit_helper[32] = {\n        0x00, 0x80, 0x80, 0x00, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x00, 0x80, 0x80, 0x00,\n        0x00, 0x80, 0x80, 0x00, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x00, 0x80, 0x80, 0x00,\n    };\n    const __m128i bit_helper_0 = _mm_loadu_si128((const __m128i*)k_bit_helper);\n    const __m128i bit_helper_1 = _mm_loadu_si128((const __m128i*)k_bit_helper + 1);\n    const __m128i m511 = _mm_set1_epi16(511);\n    const __m128i m4 = _mm_set1_epi8(0xf);\n    const __m128i m1 = _mm_set1_epi8(1);\n\n    uint64_t aux64;\n\n    // somewhat hacky, but gives a significant boost in performance\n    __m256i aux_gindex;\n    const uint16_t * gindex = (const uint16_t *)&aux_gindex;\n\n    __m256 accumf = _mm256_setzero_ps();\n    for (int i = 0; i < nb; ++i) {\n        const float d = GGML_FP16_TO_FP32(x[i].d) * y[i].d;\n        const uint16_t * restrict q2 = x[i].qs;\n        const int8_t   * restrict q8 = y[i].qs;\n\n        memcpy(&aux64, x[i].scales, 8);\n        __m128i stmp = _mm_set1_epi64x(aux64);\n        stmp = _mm_unpacklo_epi8(_mm_and_si128(stmp, m4), _mm_and_si128(_mm_srli_epi16(stmp, 4), m4));\n        const __m128i scales = _mm_add_epi8(_mm_slli_epi16(stmp, 1), m1);\n\n        __m128i sumi1_0 = _mm_setzero_si128();\n        __m128i sumi1_1 = _mm_setzero_si128();\n        __m128i sumi2_0 = _mm_setzero_si128();\n        __m128i sumi2_1 = _mm_setzero_si128();\n        for (int ib32 = 0; ib32 < QK_K/32; ib32 += 4) {\n\n            const __m128i q2_data_0 = _mm_loadu_si128((const __m128i*)q2);\n            const __m128i q2_data_1 = _mm_loadu_si128((const __m128i*)q2 + 1);  q2 += 16;\n            aux_gindex = MM256_SET_M128I(_mm_and_si128(q2_data_1, m511), _mm_and_si128(q2_data_0, m511));\n\n            const __m128i partial_sign_bits_0 = _mm_srli_epi16(q2_data_0, 9);\n            const __m128i partial_sign_bits_1 = _mm_srli_epi16(q2_data_1, 9);\n            const __m128i partial_sign_bits_upper_0 = _mm_srli_epi16(q2_data_0, 13);\n            const __m128i partial_sign_bits_upper_1 = _mm_srli_epi16(q2_data_1, 13);\n            const __m128i partial_sign_bits_for_counting_0 = _mm_xor_si128(partial_sign_bits_0, partial_sign_bits_upper_0);\n            const __m128i partial_sign_bits_for_counting_1 = _mm_xor_si128(partial_sign_bits_1, partial_sign_bits_upper_1);\n\n            const __m128i odd_bits_0 = _mm_shuffle_epi8(bit_helper_0, partial_sign_bits_for_counting_0);\n            const __m128i odd_bits_1 = _mm_shuffle_epi8(bit_helper_1, partial_sign_bits_for_counting_1);\n            const __m128i full_sign_bits_0 = _mm_or_si128(partial_sign_bits_0, odd_bits_0);\n            const __m128i full_sign_bits_1 = _mm_or_si128(partial_sign_bits_1, odd_bits_1);\n\n            const __m128i q8_1_0 = _mm_loadu_si128((const __m128i *)q8); q8 += 16;\n            const __m128i q8_1_1 = _mm_loadu_si128((const __m128i *)q8); q8 += 16;\n            const __m128i q8_2_0 = _mm_loadu_si128((const __m128i *)q8); q8 += 16;\n            const __m128i q8_2_1 = _mm_loadu_si128((const __m128i *)q8); q8 += 16;\n            const __m128i q8_3_0 = _mm_loadu_si128((const __m128i *)q8); q8 += 16;\n            const __m128i q8_3_1 = _mm_loadu_si128((const __m128i *)q8); q8 += 16;\n            const __m128i q8_4_0 = _mm_loadu_si128((const __m128i *)q8); q8 += 16;\n            const __m128i q8_4_1 = _mm_loadu_si128((const __m128i *)q8); q8 += 16;\n\n            const __m128i q2_1_0 = _mm_set_epi64x(iq2xs_grid[gindex[1]], iq2xs_grid[gindex[0]]);\n            const __m128i q2_1_1 = _mm_set_epi64x(iq2xs_grid[gindex[3]], iq2xs_grid[gindex[2]]);\n            const __m128i q2_2_0 = _mm_set_epi64x(iq2xs_grid[gindex[5]], iq2xs_grid[gindex[4]]);\n            const __m128i q2_2_1 = _mm_set_epi64x(iq2xs_grid[gindex[7]], iq2xs_grid[gindex[6]]);\n            const __m128i q2_3_0 = _mm_set_epi64x(iq2xs_grid[gindex[9]], iq2xs_grid[gindex[8]]);\n            const __m128i q2_3_1 = _mm_set_epi64x(iq2xs_grid[gindex[11]], iq2xs_grid[gindex[10]]);\n            const __m128i q2_4_0 = _mm_set_epi64x(iq2xs_grid[gindex[13]], iq2xs_grid[gindex[12]]);\n            const __m128i q2_4_1 = _mm_set_epi64x(iq2xs_grid[gindex[15]], iq2xs_grid[gindex[14]]);\n\n            // AVX2 full_signs_1 is full_sign_bits_0 here\n            // AVX2 full_signs_2 is full_sign_bits_1 here\n            __m128i signs_0, signs_1;\n            signs_0 = _mm_shuffle_epi8(full_sign_bits_0, block_sign_shuffle_1_0);\n            signs_1 = _mm_shuffle_epi8(full_sign_bits_0, block_sign_shuffle_1_1);\n            signs_0 = _mm_cmpeq_epi8(_mm_and_si128(signs_0, bit_selector_mask_0), bit_selector_mask_0);\n            signs_1 = _mm_cmpeq_epi8(_mm_and_si128(signs_1, bit_selector_mask_1), bit_selector_mask_1);\n            const __m128i q8s_1_0 = _mm_sign_epi8(q8_1_0, _mm_or_si128(signs_0, mone));\n            const __m128i q8s_1_1 = _mm_sign_epi8(q8_1_1, _mm_or_si128(signs_1, mone));\n\n            signs_0 = _mm_shuffle_epi8(full_sign_bits_0, block_sign_shuffle_2_0);\n            signs_1 = _mm_shuffle_epi8(full_sign_bits_0, block_sign_shuffle_2_1);\n            signs_0 = _mm_cmpeq_epi8(_mm_and_si128(signs_0, bit_selector_mask_0), bit_selector_mask_0);\n            signs_1 = _mm_cmpeq_epi8(_mm_and_si128(signs_1, bit_selector_mask_1), bit_selector_mask_1);\n            const __m128i q8s_2_0 = _mm_sign_epi8(q8_2_0, _mm_or_si128(signs_0, mone));\n            const __m128i q8s_2_1 = _mm_sign_epi8(q8_2_1, _mm_or_si128(signs_1, mone));\n\n            signs_0 = _mm_shuffle_epi8(full_sign_bits_1, block_sign_shuffle_1_0);\n            signs_1 = _mm_shuffle_epi8(full_sign_bits_1, block_sign_shuffle_1_1);\n            signs_0 = _mm_cmpeq_epi8(_mm_and_si128(signs_0, bit_selector_mask_0), bit_selector_mask_0);\n            signs_1 = _mm_cmpeq_epi8(_mm_and_si128(signs_1, bit_selector_mask_1), bit_selector_mask_1);\n            const __m128i q8s_3_0 = _mm_sign_epi8(q8_3_0, _mm_or_si128(signs_0, mone));\n            const __m128i q8s_3_1 = _mm_sign_epi8(q8_3_1, _mm_or_si128(signs_1, mone));\n\n            signs_0 = _mm_shuffle_epi8(full_sign_bits_1, block_sign_shuffle_2_0);\n            signs_1 = _mm_shuffle_epi8(full_sign_bits_1, block_sign_shuffle_2_1);\n            signs_0 = _mm_cmpeq_epi8(_mm_and_si128(signs_0, bit_selector_mask_0), bit_selector_mask_0);\n            signs_1 = _mm_cmpeq_epi8(_mm_and_si128(signs_1, bit_selector_mask_1), bit_selector_mask_1);\n            const __m128i q8s_4_0 = _mm_sign_epi8(q8_4_0, _mm_or_si128(signs_0, mone));\n            const __m128i q8s_4_1 = _mm_sign_epi8(q8_4_1, _mm_or_si128(signs_1, mone));\n\n            const __m128i dot1_0  = _mm_maddubs_epi16(q2_1_0, q8s_1_0);\n            const __m128i dot1_1  = _mm_maddubs_epi16(q2_1_1, q8s_1_1);\n            const __m128i dot2_0  = _mm_maddubs_epi16(q2_2_0, q8s_2_0);\n            const __m128i dot2_1  = _mm_maddubs_epi16(q2_2_1, q8s_2_1);\n            const __m128i dot3_0  = _mm_maddubs_epi16(q2_3_0, q8s_3_0);\n            const __m128i dot3_1  = _mm_maddubs_epi16(q2_3_1, q8s_3_1);\n            const __m128i dot4_0  = _mm_maddubs_epi16(q2_4_0, q8s_4_0);\n            const __m128i dot4_1  = _mm_maddubs_epi16(q2_4_1, q8s_4_1);\n\n            __m128i sc_tmp = _mm_shuffle_epi8(scales, get_scale_shuffle(ib32+0));\n            const __m128i sc1_0 = _mm_cvtepi8_epi16(sc_tmp);\n            const __m128i sc1_1 = _mm_cvtepi8_epi16(_mm_srli_si128(sc_tmp, 8));\n            sc_tmp = _mm_shuffle_epi8(scales, get_scale_shuffle(ib32+1));\n            const __m128i sc2_0 = _mm_cvtepi8_epi16(sc_tmp);\n            const __m128i sc2_1 = _mm_cvtepi8_epi16(_mm_srli_si128(sc_tmp, 8));\n            sc_tmp = _mm_shuffle_epi8(scales, get_scale_shuffle(ib32+2));\n            const __m128i sc3_0 = _mm_cvtepi8_epi16(sc_tmp);\n            const __m128i sc3_1 = _mm_cvtepi8_epi16(_mm_srli_si128(sc_tmp, 8));\n            sc_tmp = _mm_shuffle_epi8(scales, get_scale_shuffle(ib32+3));\n            const __m128i sc4_0 = _mm_cvtepi8_epi16(sc_tmp);\n            const __m128i sc4_1 = _mm_cvtepi8_epi16(_mm_srli_si128(sc_tmp, 8));\n\n            sumi1_0 = _mm_add_epi32(sumi1_0, _mm_madd_epi16(dot1_0, sc1_0));\n            sumi1_1 = _mm_add_epi32(sumi1_1, _mm_madd_epi16(dot1_1, sc1_1));\n            sumi2_0 = _mm_add_epi32(sumi2_0, _mm_madd_epi16(dot2_0, sc2_0));\n            sumi2_1 = _mm_add_epi32(sumi2_1, _mm_madd_epi16(dot2_1, sc2_1));\n            sumi1_0 = _mm_add_epi32(sumi1_0, _mm_madd_epi16(dot3_0, sc3_0));\n            sumi1_1 = _mm_add_epi32(sumi1_1, _mm_madd_epi16(dot3_1, sc3_1));\n            sumi2_0 = _mm_add_epi32(sumi2_0, _mm_madd_epi16(dot4_0, sc4_0));\n            sumi2_1 = _mm_add_epi32(sumi2_1, _mm_madd_epi16(dot4_1, sc4_1));\n        }\n\n        accumf = _mm256_add_ps(_mm256_mul_ps(_mm256_set1_ps(d), _mm256_cvtepi32_ps(MM256_SET_M128I(_mm_add_epi32(sumi1_1, sumi2_1), _mm_add_epi32(sumi1_0, sumi2_0)))), accumf);\n\n    }\n\n    *s = 0.125f * hsum_float_8(accumf);\n\n#elif defined(__loongarch_asx)\n\n    const __m256i mone = __lasx_xvreplgr2vr_b(1);\n    static const char block_sign_shuffle_mask_1[32] = {\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,\n        0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06,\n    };\n    static const char block_sign_shuffle_mask_2[32] = {\n        0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,\n        0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e,\n    };\n    static const uint8_t bit_selector_mask_bytes[32] = {\n        0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80,\n        0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80,\n    };\n\n    const __m256i bit_selector_mask = __lasx_xvld((const __m256i*)bit_selector_mask_bytes, 0);\n    const __m256i block_sign_shuffle_1 = __lasx_xvld((const __m256i*)block_sign_shuffle_mask_1, 0);\n    const __m256i block_sign_shuffle_2 = __lasx_xvld((const __m256i*)block_sign_shuffle_mask_2, 0);\n\n    static const uint8_t k_bit_helper[32] = {\n        0x00, 0x80, 0x80, 0x00, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x00, 0x80, 0x80, 0x00,\n        0x00, 0x80, 0x80, 0x00, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x00, 0x80, 0x80, 0x00,\n    };\n    const __m256i bit_helper = __lasx_xvld((const __m256i*)k_bit_helper, 0);\n    const __m256i m511 = __lasx_xvreplgr2vr_h(511);\n    const __m128i m4 = __lsx_vreplgr2vr_b(0xf);\n    const __m128i m1 = __lsx_vreplgr2vr_b(1);\n\n    uint64_t aux64;\n\n    // somewhat hacky, but gives a significant boost in performance\n    __m256i aux_gindex;\n    const uint16_t * gindex = (const uint16_t *)&aux_gindex;\n\n    __m256 accumf = (__m256)__lasx_xvldi(0);\n    for (int i = 0; i < nb; ++i) {\n        const float d = GGML_FP16_TO_FP32(x[i].d) * y[i].d;\n        const uint16_t * restrict q2 = x[i].qs;\n        const int8_t   * restrict q8 = y[i].qs;\n\n        memcpy(&aux64, x[i].scales, 8);\n        __m128i stmp = __lsx_vreplgr2vr_d(aux64);\n        stmp = __lsx_vilvl_b( __lsx_vand_v(__lsx_vsrli_h(stmp, 4), m4), __lsx_vand_v(stmp, m4));\n        const __m128i scales = __lsx_vadd_b(__lsx_vslli_h(stmp, 1), m1);\n\n        __m256i sumi1 = __lasx_xvldi(0);\n        __m256i sumi2 = __lasx_xvldi(0);\n        for (int ib32 = 0; ib32 < QK_K/32; ib32 += 4) {\n\n            const __m256i q2_data = __lasx_xvld((const __m256i*)q2, 0);  q2 += 16;\n            aux_gindex = __lasx_xvand_v(q2_data, m511);\n\n            const __m256i partial_sign_bits = __lasx_xvsrli_h(q2_data, 9);\n            const __m256i partial_sign_bits_upper = __lasx_xvsrli_h(q2_data, 13);\n            const __m256i partial_sign_bits_for_counting = __lasx_xvxor_v(partial_sign_bits, partial_sign_bits_upper);\n\n            const __m256i odd_bits = lasx_shuffle_b(bit_helper, partial_sign_bits_for_counting);\n            const __m256i full_sign_bits = __lasx_xvor_v(partial_sign_bits, odd_bits);\n\n            const __m256i q8_1 = __lasx_xvld((const __m256i *)q8, 0); q8 += 32;\n            const __m256i q8_2 = __lasx_xvld((const __m256i *)q8, 0); q8 += 32;\n            const __m256i q8_3 = __lasx_xvld((const __m256i *)q8, 0); q8 += 32;\n            const __m256i q8_4 = __lasx_xvld((const __m256i *)q8, 0); q8 += 32;\n\n            const __m256i q2_1 = lasx_set_d(iq2xs_grid[gindex[ 3]], iq2xs_grid[gindex[ 2]],\n                                                   iq2xs_grid[gindex[ 1]], iq2xs_grid[gindex[ 0]]);\n            const __m256i q2_2 = lasx_set_d(iq2xs_grid[gindex[ 7]], iq2xs_grid[gindex[ 6]],\n                                                   iq2xs_grid[gindex[ 5]], iq2xs_grid[gindex[ 4]]);\n            const __m256i q2_3 = lasx_set_d(iq2xs_grid[gindex[11]], iq2xs_grid[gindex[10]],\n                                                   iq2xs_grid[gindex[ 9]], iq2xs_grid[gindex[ 8]]);\n            const __m256i q2_4 = lasx_set_d(iq2xs_grid[gindex[15]], iq2xs_grid[gindex[14]],\n                                                   iq2xs_grid[gindex[13]], iq2xs_grid[gindex[12]]);\n\n            const __m128i full_signs_l = lasx_extracti128(full_sign_bits, 0);\n            const __m128i full_signs_h = lasx_extracti128(full_sign_bits, 1);\n            const __m256i full_signs_1 = lasx_insertf128(full_signs_l, full_signs_l);\n            const __m256i full_signs_2 = lasx_insertf128(full_signs_h, full_signs_h);\n\n            __m256i signs;\n            signs = lasx_shuffle_b(full_signs_1, block_sign_shuffle_1);\n            signs = __lasx_xvseq_b(__lasx_xvand_v(signs, bit_selector_mask), bit_selector_mask);\n            const __m256i q8s_1 = __lasx_xvsigncov_b(__lasx_xvor_v(signs, mone), q8_1);\n\n            signs = lasx_shuffle_b(full_signs_1, block_sign_shuffle_2);\n            signs = __lasx_xvseq_b(__lasx_xvand_v(signs, bit_selector_mask), bit_selector_mask);\n            const __m256i q8s_2 = __lasx_xvsigncov_b(__lasx_xvor_v(signs, mone), q8_2);\n\n            signs = lasx_shuffle_b(full_signs_2, block_sign_shuffle_1);\n            signs = __lasx_xvseq_b(__lasx_xvand_v(signs, bit_selector_mask), bit_selector_mask);\n            const __m256i q8s_3 = __lasx_xvsigncov_b(__lasx_xvor_v(signs, mone), q8_3);\n\n            signs = lasx_shuffle_b(full_signs_2, block_sign_shuffle_2);\n            signs = __lasx_xvseq_b(__lasx_xvand_v(signs, bit_selector_mask), bit_selector_mask);\n            const __m256i q8s_4 = __lasx_xvsigncov_b(__lasx_xvor_v(signs, mone), q8_4);\n\n            const __m256i dot1  = lasx_maddubs_h(q2_1, q8s_1);\n            const __m256i dot2  = lasx_maddubs_h(q2_2, q8s_2);\n            const __m256i dot3  = lasx_maddubs_h(q2_3, q8s_3);\n            const __m256i dot4  = lasx_maddubs_h(q2_4, q8s_4);\n\n            const __m256i sc1 = lasx_ext8_16(lsx_shuffle_b(scales, get_scale_shuffle(ib32+0)));\n            const __m256i sc2 = lasx_ext8_16(lsx_shuffle_b(scales, get_scale_shuffle(ib32+1)));\n            const __m256i sc3 = lasx_ext8_16(lsx_shuffle_b(scales, get_scale_shuffle(ib32+2)));\n            const __m256i sc4 = lasx_ext8_16(lsx_shuffle_b(scales, get_scale_shuffle(ib32+3)));\n\n            sumi1 = __lasx_xvadd_w(sumi1, lasx_madd_h(dot1, sc1));\n            sumi2 = __lasx_xvadd_w(sumi2, lasx_madd_h(dot2, sc2));\n            sumi1 = __lasx_xvadd_w(sumi1, lasx_madd_h(dot3, sc3));\n            sumi2 = __lasx_xvadd_w(sumi2, lasx_madd_h(dot4, sc4));\n        }\n\n        accumf = __lasx_xvfmadd_s(__lasx_xvreplfr2vr_s(d), __lasx_xvffint_s_w(__lasx_xvadd_w(sumi1, sumi2)), accumf);\n\n    }\n\n    *s = 0.125f * hsum_float_8(accumf);\n#elif defined(__POWER9_VECTOR__)\n    const vector int v0 = vec_splats((int32_t)0);\n    vector float vsumf0 = vec_splats(0.0f);\n    vector float vsumf1 = vec_splats(0.0f);\n    vector float vsumf2 = vec_splats(0.0f);\n    vector float vsumf3 = vec_splats(0.0f);\n\n    const uint64_t * signs64 = (const uint64_t *)keven_signs_q2xs;\n\n    for (int i = 0; i < nb; ++i) {\n        vector float vxd = vec_splats(GGML_FP16_TO_FP32(x[i].d));\n        vector float vyd = vec_splats(y[i].d);\n        vector float vd = vec_mul(vxd, vyd);\n\n        vector signed int vsumi0 = v0;\n        vector signed int vsumi1 = v0;\n        vector signed int vsumi2 = v0;\n        vector signed int vsumi3 = v0;\n\n        const uint16_t * restrict q2 = x[i].qs;\n        const uint8_t  * restrict sc = x[i].scales;\n        const int8_t  *  restrict q8 = y[i].qs;\n\n        for (int j = 0; j < QK_K/64; ++j) {\n            __builtin_prefetch(q2, 0, 1);\n            __builtin_prefetch(q8, 0, 1);\n\n            vector signed long long aux64x2_0 = {*(const int64_t *)(iq2xs_grid + (q2[0] & 511)), *(const int64_t *)(iq2xs_grid + (q2[1] & 511))};\n            vector signed long long aux64x2_1 = {*(const int64_t *)(iq2xs_grid + (q2[2] & 511)), *(const int64_t *)(iq2xs_grid + (q2[3] & 511))};\n            vector signed long long aux64x2_2 = {*(const int64_t *)(iq2xs_grid + (q2[4] & 511)), *(const int64_t *)(iq2xs_grid + (q2[5] & 511))};\n            vector signed long long aux64x2_3 = {*(const int64_t *)(iq2xs_grid + (q2[6] & 511)), *(const int64_t *)(iq2xs_grid + (q2[7] & 511))};\n\n            vector signed long long vsigns0 = {*(const int64_t *)(signs64 + ((q2[0] >> 9))), *(const int64_t *)(signs64 + ((q2[1] >> 9)))};\n            vector signed long long vsigns1 = {*(const int64_t *)(signs64 + ((q2[2] >> 9))), *(const int64_t *)(signs64 + ((q2[3] >> 9)))};\n            vector signed long long vsigns2 = {*(const int64_t *)(signs64 + ((q2[4] >> 9))), *(const int64_t *)(signs64 + ((q2[5] >> 9)))};\n            vector signed long long vsigns3 = {*(const int64_t *)(signs64 + ((q2[6] >> 9))), *(const int64_t *)(signs64 + ((q2[7] >> 9)))};\n            q2 += 8;\n\n            vector signed char q2x0 = (vector signed char)vec_mul((vector signed char)vsigns0, (vector signed char)aux64x2_0);\n            vector signed char q2x1 = (vector signed char)vec_mul((vector signed char)vsigns1, (vector signed char)aux64x2_1);\n            vector signed char q2x2 = (vector signed char)vec_mul((vector signed char)vsigns2, (vector signed char)aux64x2_2);\n            vector signed char q2x3 = (vector signed char)vec_mul((vector signed char)vsigns3, (vector signed char)aux64x2_3);\n\n            vector signed char q8y0 = vec_xl( 0, q8);\n            vector signed char q8y1 = vec_xl(16, q8);\n            vector signed char q8y2 = vec_xl(32, q8);\n            vector signed char q8y3 = vec_xl(48, q8);\n            q8 += 64;\n\n            vector signed short qv0 = vec_add(vec_mule(q2x0, q8y0), vec_mulo(q2x0, q8y0));\n            vector signed short qv1 = vec_add(vec_mule(q2x1, q8y1), vec_mulo(q2x1, q8y1));\n            vector signed short qv2 = vec_add(vec_mule(q2x2, q8y2), vec_mulo(q2x2, q8y2));\n            vector signed short qv3 = vec_add(vec_mule(q2x3, q8y3), vec_mulo(q2x3, q8y3));\n\n            const uint16_t ls0 = (uint16_t)(sc[0] & 0xf);\n            const uint16_t ls1 = (uint16_t)(sc[0] >>  4);\n            const uint16_t ls2 = (uint16_t)(sc[1] & 0xf);\n            const uint16_t ls3 = (uint16_t)(sc[1] >>  4);\n            sc += 2;\n\n            vector signed short vscales0 = vec_splats((int16_t)(2*ls0+1));\n            vector signed short vscales1 = vec_splats((int16_t)(2*ls1+1));\n            vector signed short vscales2 = vec_splats((int16_t)(2*ls2+1));\n            vector signed short vscales3 = vec_splats((int16_t)(2*ls3+1));\n\n            vsumi0 = vec_msum(qv0, vscales0, vsumi0);\n            vsumi1 = vec_msum(qv1, vscales1, vsumi1);\n            vsumi2 = vec_msum(qv2, vscales2, vsumi2);\n            vsumi3 = vec_msum(qv3, vscales3, vsumi3);\n        }\n\n        vsumf0 = vec_madd(vec_ctf(vsumi0, 0), vd, vsumf0);\n        vsumf1 = vec_madd(vec_ctf(vsumi1, 0), vd, vsumf1);\n        vsumf2 = vec_madd(vec_ctf(vsumi2, 0), vd, vsumf2);\n        vsumf3 = vec_madd(vec_ctf(vsumi3, 0), vd, vsumf3);\n    }\n\n    vsumf0 = vec_add(vsumf0, vsumf2);\n    vsumf1 = vec_add(vsumf1, vsumf3);\n\n    vsumf0 = vec_add(vsumf0, vsumf1);\n\n    vsumf0 = vec_add(vsumf0, vec_sld(vsumf0, vsumf0, 4));\n    vsumf0 = vec_add(vsumf0, vec_sld(vsumf0, vsumf0, 8));\n\n    *s = 0.125f * vec_extract(vsumf0, 0);\n#else\n\n    float sumf = 0.f;\n    for (int i = 0; i < nb; ++i) {\n        const float d = GGML_FP16_TO_FP32(x[i].d) * y[i].d;\n        const uint16_t * restrict q2 = x[i].qs;\n        const uint8_t  * restrict sc = x[i].scales;\n        const int8_t   * restrict q8 = y[i].qs;\n        int32_t bsum = 0;\n        for (int ib32 = 0; ib32 < QK_K/32; ++ib32) {\n            const uint16_t ls1 = 2*(sc[ib32] & 0xf) + 1;\n            const uint16_t ls2 = 2*(sc[ib32] >>  4) + 1;\n            int32_t sumi = 0;\n            for (int l = 0; l < 2; ++l) {\n                const uint8_t * grid = (const uint8_t *)(iq2xs_grid + (q2[l] & 511));\n                const uint8_t  signs = ksigns_iq2xs[q2[l] >> 9];\n                for (int j = 0; j < 8; ++j) {\n                    sumi += grid[j] * q8[j] * (signs & kmask_iq2xs[j] ? -1 : 1);\n                }\n                q8 += 8;\n            }\n            bsum += sumi * ls1;\n            sumi = 0;\n            for (int l = 2; l < 4; ++l) {\n                const uint8_t * grid = (const uint8_t *)(iq2xs_grid + (q2[l] & 511));\n                const uint8_t  signs = ksigns_iq2xs[q2[l] >> 9];\n                for (int j = 0; j < 8; ++j) {\n                    sumi += grid[j] * q8[j] * (signs & kmask_iq2xs[j] ? -1 : 1);\n                }\n                q8 += 8;\n            }\n            bsum += sumi * ls2;\n            q2 += 4;\n        }\n        sumf += d * bsum;\n    }\n    *s = 0.125f * sumf;\n#endif\n}\n\nvoid ggml_vec_dot_iq2_s_q8_K(int n, float * restrict s, size_t bs, const void * restrict vx, size_t bx, const void * restrict vy, size_t by, int nrc) {\n    assert(n % QK_K == 0);\n    assert(nrc == 1);\n    UNUSED(nrc);\n    UNUSED(bx);\n    UNUSED(by);\n    UNUSED(bs);\n\n    const block_iq2_s * restrict x = vx;\n    const block_q8_K  * restrict y = vy;\n\n    const int nb = n / QK_K;\n\n#if defined(__ARM_NEON)\n\n   static const uint8_t k_mask1[32] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,\n                                       0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03\n   };\n\n    static const uint8_t k_mask2[16] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80,};\n\n    const ggml_uint8x16x2_t mask1 = ggml_vld1q_u8_x2(k_mask1);\n    const uint8x16_t        mask2 = vld1q_u8(k_mask2);\n    const uint8x16_t m1 = vdupq_n_u8(1);\n    const int32x4_t vzero = vdupq_n_s32(0);\n\n    uint8x16x2_t vs;\n    ggml_int8x16x4_t q2s;\n    ggml_int8x16x4_t q8b;\n\n    float sumf = 0;\n    for (int i = 0; i < nb; ++i) {\n\n        const float d = GGML_FP16_TO_FP32(x[i].d) * y[i].d;\n\n        const uint8_t * restrict qs = x[i].qs;\n        const uint8_t * restrict qh = x[i].qh;\n        const uint16_t * restrict signs = (const uint16_t *)(x[i].qs + QK_K/8);\n        const int8_t  * restrict q8 = y[i].qs;\n\n        int sumi1 = 0, sumi2 = 0;\n        for (int ib32 = 0; ib32 < QK_K/32; ib32 += 2) {\n            q8b = ggml_vld1q_s8_x4(q8); q8 += 64;\n            q2s.val[0] = vcombine_s8(vld1_s8((const int8_t *)(iq2s_grid + (qs[0] | ((qh[ib32+0] << 8) & 0x300)))),\n                                     vld1_s8((const int8_t *)(iq2s_grid + (qs[1] | ((qh[ib32+0] << 6) & 0x300)))));\n            q2s.val[1] = vcombine_s8(vld1_s8((const int8_t *)(iq2s_grid + (qs[2] | ((qh[ib32+0] << 4) & 0x300)))),\n                                     vld1_s8((const int8_t *)(iq2s_grid + (qs[3] | ((qh[ib32+0] << 2) & 0x300)))));\n            q2s.val[2] = vcombine_s8(vld1_s8((const int8_t *)(iq2s_grid + (qs[4] | ((qh[ib32+1] << 8) & 0x300)))),\n                                     vld1_s8((const int8_t *)(iq2s_grid + (qs[5] | ((qh[ib32+1] << 6) & 0x300)))));\n            q2s.val[3] = vcombine_s8(vld1_s8((const int8_t *)(iq2s_grid + (qs[6] | ((qh[ib32+1] << 4) & 0x300)))),\n                                     vld1_s8((const int8_t *)(iq2s_grid + (qs[7] | ((qh[ib32+1] << 2) & 0x300)))));\n            qs += 8;\n\n            vs.val[0] = vreinterpretq_u8_u32(vdupq_n_u32(signs[0] | ((uint32_t) signs[1] << 16)));\n            vs.val[1] = vandq_u8(ggml_vqtbl1q_u8(vs.val[0], mask1.val[1]), mask2);\n            vs.val[0] = vandq_u8(ggml_vqtbl1q_u8(vs.val[0], mask1.val[0]), mask2);\n            vs.val[0] = vceqq_u8(vs.val[0], mask2);\n            vs.val[1] = vceqq_u8(vs.val[1], mask2);\n\n            q2s.val[0] = vmulq_s8(vreinterpretq_s8_u8(vorrq_u8(vs.val[0], m1)), q2s.val[0]);\n            q2s.val[1] = vmulq_s8(vreinterpretq_s8_u8(vorrq_u8(vs.val[1], m1)), q2s.val[1]);\n\n            vs.val[0] = vreinterpretq_u8_u32(vdupq_n_u32(signs[2] | ((uint32_t) signs[3] << 16)));\n            vs.val[1] = vandq_u8(ggml_vqtbl1q_u8(vs.val[0], mask1.val[1]), mask2);\n            vs.val[0] = vandq_u8(ggml_vqtbl1q_u8(vs.val[0], mask1.val[0]), mask2);\n            vs.val[0] = vceqq_u8(vs.val[0], mask2);\n            vs.val[1] = vceqq_u8(vs.val[1], mask2);\n\n            signs += 4;\n\n            q2s.val[2] = vmulq_s8(vreinterpretq_s8_u8(vorrq_u8(vs.val[0], m1)), q2s.val[2]);\n            q2s.val[3] = vmulq_s8(vreinterpretq_s8_u8(vorrq_u8(vs.val[1], m1)), q2s.val[3]);\n\n            const int32x4_t p1 = ggml_vdotq_s32(vzero, q2s.val[0], q8b.val[0]);\n            const int32x4_t p2 = ggml_vdotq_s32(vzero, q2s.val[1], q8b.val[1]);\n            const int32x4_t p3 = ggml_vdotq_s32(vzero, q2s.val[2], q8b.val[2]);\n            const int32x4_t p4 = ggml_vdotq_s32(vzero, q2s.val[3], q8b.val[3]);\n\n            sumi1 += vaddvq_s32(p1) * (1 + 2*(x[i].scales[ib32+0] & 0xf));\n            sumi2 += vaddvq_s32(p2) * (1 + 2*(x[i].scales[ib32+0] >>  4));\n            sumi1 += vaddvq_s32(p3) * (1 + 2*(x[i].scales[ib32+1] & 0xf));\n            sumi2 += vaddvq_s32(p4) * (1 + 2*(x[i].scales[ib32+1] >>  4));\n        }\n        sumf += d*(sumi1 + sumi2);\n    }\n\n    *s = 0.125f * sumf;\n\n#elif defined(__AVX2__)\n\n   static const uint8_t k_mask1[32] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,\n                                       0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03\n   };\n\n    static const uint8_t k_mask2[32] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80,\n                                        0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80,\n    };\n\n    const __m128i m4 = _mm_set1_epi8(0xf);\n    const __m128i m1 = _mm_set1_epi8(1);\n\n    const __m256i mask1 = _mm256_loadu_si256((const __m256i*)k_mask1);\n    const __m256i mask2 = _mm256_loadu_si256((const __m256i*)k_mask2);\n\n    uint64_t aux64;\n\n    __m256 accumf = _mm256_setzero_ps();\n    for (int i = 0; i < nb; ++i) {\n        const float d = GGML_FP16_TO_FP32(x[i].d) * y[i].d;\n        const uint8_t * restrict qs = x[i].qs;\n        const uint8_t * restrict qh = x[i].qh;\n        const uint16_t * restrict signs = (const uint16_t *)(x[i].qs + QK_K/8);\n        const int8_t  * restrict q8 = y[i].qs;\n\n        memcpy(&aux64, x[i].scales, 8);\n        const __m128i scales8 = _mm_add_epi8(_mm_slli_epi16(_mm_and_si128(_mm_set_epi64x(aux64 >> 4, aux64), m4), 1), m1);\n        const __m256i scales16 = _mm256_cvtepi8_epi16(scales8); // 0 2 4 6 8 10 12 14 1 3 5 7 9 11 13 15\n\n        __m256i sumi1 = _mm256_setzero_si256();\n        __m256i sumi2 = _mm256_setzero_si256();\n        for (int ib32 = 0; ib32 < QK_K/32; ib32 += 2) {\n            const __m256i q8_1 = _mm256_loadu_si256((const __m256i *)q8); q8 += 32;\n            const __m256i q8_2 = _mm256_loadu_si256((const __m256i *)q8); q8 += 32;\n            const __m256i q2_1 = _mm256_set_epi64x(iq2s_grid[qs[3] | ((qh[ib32+0] << 2) & 0x300)],\n                                                   iq2s_grid[qs[2] | ((qh[ib32+0] << 4) & 0x300)],\n                                                   iq2s_grid[qs[1] | ((qh[ib32+0] << 6) & 0x300)],\n                                                   iq2s_grid[qs[0] | ((qh[ib32+0] << 8) & 0x300)]);\n            const __m256i q2_2 = _mm256_set_epi64x(iq2s_grid[qs[7] | ((qh[ib32+1] << 2) & 0x300)],\n                                                   iq2s_grid[qs[6] | ((qh[ib32+1] << 4) & 0x300)],\n                                                   iq2s_grid[qs[5] | ((qh[ib32+1] << 6) & 0x300)],\n                                                   iq2s_grid[qs[4] | ((qh[ib32+1] << 8) & 0x300)]);\n            qs += 8;\n\n            __m256i aux256 = _mm256_set1_epi32(signs[0] | ((uint32_t) signs[1] << 16));\n            aux256 = _mm256_and_si256(_mm256_shuffle_epi8(aux256,mask1), mask2);\n            const __m256i s2_1 = _mm256_cmpeq_epi8(aux256, mask2);\n            const __m256i q8s_1 = _mm256_sub_epi8(_mm256_xor_si256(s2_1, q8_1), s2_1);\n\n            aux256 = _mm256_set1_epi32(signs[2] | ((uint32_t) signs[3] << 16));\n            aux256 = _mm256_and_si256(_mm256_shuffle_epi8(aux256,mask1), mask2);\n            const __m256i s2_2 = _mm256_cmpeq_epi8(aux256, mask2);\n            const __m256i q8s_2 = _mm256_sub_epi8(_mm256_xor_si256(s2_2, q8_2), s2_2);\n\n            signs += 4;\n\n            const __m256i dot1  = _mm256_maddubs_epi16(q2_1, q8s_1); // blocks 2*ib32+0, 2*ib32+1\n            const __m256i dot2  = _mm256_maddubs_epi16(q2_2, q8s_2); // blocks 2*ib32+2, 2*ib32+3\n\n            const __m256i p1 = _mm256_madd_epi16(dot1, _mm256_shuffle_epi8(scales16, get_scale_shuffle_k4(ib32+0)));\n            const __m256i p2 = _mm256_madd_epi16(dot2, _mm256_shuffle_epi8(scales16, get_scale_shuffle_k4(ib32+1)));\n            sumi1 = _mm256_add_epi32(sumi1, p1);\n            sumi2 = _mm256_add_epi32(sumi2, p2);\n        }\n\n        accumf = _mm256_fmadd_ps(_mm256_set1_ps(d), _mm256_cvtepi32_ps(_mm256_add_epi32(sumi1, sumi2)), accumf);\n\n    }\n\n    *s = 0.125f * hsum_float_8(accumf);\n\n#elif defined(__AVX__)\n   static const uint8_t k_mask1[32] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,\n                                       0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03\n   };\n\n    static const uint8_t k_mask2[32] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80,\n                                        0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80,\n    };\n\n    const __m128i m4 = _mm_set1_epi8(0xf);\n    const __m128i m1 = _mm_set1_epi8(1);\n\n    const __m128i mask1_0 = _mm_loadu_si128((const __m128i*)k_mask1);\n    const __m128i mask1_1 = _mm_loadu_si128((const __m128i*)k_mask1 + 1);\n    const __m128i mask2_0 = _mm_loadu_si128((const __m128i*)k_mask2);\n    const __m128i mask2_1 = _mm_loadu_si128((const __m128i*)k_mask2 + 1);\n\n    uint64_t aux64;\n\n    __m256 accumf = _mm256_setzero_ps();\n    for (int i = 0; i < nb; ++i) {\n        const float d = GGML_FP16_TO_FP32(x[i].d) * y[i].d;\n        const uint8_t * restrict qs = x[i].qs;\n        const uint8_t * restrict qh = x[i].qh;\n        const uint16_t * restrict signs = (const uint16_t *)(x[i].qs + QK_K/8);\n        const int8_t  * restrict q8 = y[i].qs;\n\n        memcpy(&aux64, x[i].scales, 8);\n        const __m128i scales8 = _mm_add_epi8(_mm_slli_epi16(_mm_and_si128(_mm_set_epi64x(aux64 >> 4, aux64), m4), 1), m1);\n        const __m128i scales16_0 = _mm_cvtepi8_epi16(scales8);\n        const __m128i scales16_1 = _mm_cvtepi8_epi16(_mm_srli_si128(scales8, 8));\n\n        __m128i sumi1_0 = _mm_setzero_si128();\n        __m128i sumi1_1 = _mm_setzero_si128();\n        __m128i sumi2_0 = _mm_setzero_si128();\n        __m128i sumi2_1 = _mm_setzero_si128();\n        for (int ib32 = 0; ib32 < QK_K/32; ib32 += 2) {\n            const __m128i q8_1_0 = _mm_loadu_si128((const __m128i *)q8); q8 += 16;\n            const __m128i q8_1_1 = _mm_loadu_si128((const __m128i *)q8); q8 += 16;\n            const __m128i q8_2_0 = _mm_loadu_si128((const __m128i *)q8); q8 += 16;\n            const __m128i q8_2_1 = _mm_loadu_si128((const __m128i *)q8); q8 += 16;\n            const __m128i q2_1_0 = _mm_set_epi64x(iq2s_grid[qs[1] | ((qh[ib32+0] << 6) & 0x300)],\n                                                  iq2s_grid[qs[0] | ((qh[ib32+0] << 8) & 0x300)]);\n            const __m128i q2_1_1 = _mm_set_epi64x(iq2s_grid[qs[3] | ((qh[ib32+0] << 2) & 0x300)],\n                                                  iq2s_grid[qs[2] | ((qh[ib32+0] << 4) & 0x300)]);\n            const __m128i q2_2_0 = _mm_set_epi64x(iq2s_grid[qs[5] | ((qh[ib32+1] << 6) & 0x300)],\n                                                  iq2s_grid[qs[4] | ((qh[ib32+1] << 8) & 0x300)]);\n            const __m128i q2_2_1 = _mm_set_epi64x(iq2s_grid[qs[7] | ((qh[ib32+1] << 2) & 0x300)],\n                                                  iq2s_grid[qs[6] | ((qh[ib32+1] << 4) & 0x300)]);\n            qs += 8;\n\n            __m128i aux128_0 = _mm_set1_epi32(signs[0] | ((uint32_t) signs[1] << 16));\n            __m128i aux128_1 = aux128_0;\n            aux128_0 = _mm_and_si128(_mm_shuffle_epi8(aux128_0,mask1_0), mask2_0);\n            aux128_1 = _mm_and_si128(_mm_shuffle_epi8(aux128_1,mask1_1), mask2_1);\n            const __m128i s2_1_0 = _mm_cmpeq_epi8(aux128_0, mask2_0);\n            const __m128i s2_1_1 = _mm_cmpeq_epi8(aux128_1, mask2_1);\n            const __m128i q8s_1_0 = _mm_sub_epi8(_mm_xor_si128(s2_1_0, q8_1_0), s2_1_0);\n            const __m128i q8s_1_1 = _mm_sub_epi8(_mm_xor_si128(s2_1_1, q8_1_1), s2_1_1);\n\n            aux128_0 = _mm_set1_epi32(signs[2] | ((uint32_t) signs[3] << 16));\n            aux128_1 = aux128_0;\n            aux128_0 = _mm_and_si128(_mm_shuffle_epi8(aux128_0,mask1_0), mask2_0);\n            aux128_1 = _mm_and_si128(_mm_shuffle_epi8(aux128_1,mask1_1), mask2_1);\n            const __m128i s2_2_0 = _mm_cmpeq_epi8(aux128_0, mask2_0);\n            const __m128i s2_2_1 = _mm_cmpeq_epi8(aux128_1, mask2_1);\n            const __m128i q8s_2_0 = _mm_sub_epi8(_mm_xor_si128(s2_2_0, q8_2_0), s2_2_0);\n            const __m128i q8s_2_1 = _mm_sub_epi8(_mm_xor_si128(s2_2_1, q8_2_1), s2_2_1);\n\n            signs += 4;\n\n            const __m128i dot1_0  = _mm_maddubs_epi16(q2_1_0, q8s_1_0);\n            const __m128i dot1_1  = _mm_maddubs_epi16(q2_1_1, q8s_1_1);\n            const __m128i dot2_0  = _mm_maddubs_epi16(q2_2_0, q8s_2_0);\n            const __m128i dot2_1  = _mm_maddubs_epi16(q2_2_1, q8s_2_1);\n\n            const __m128i p1_0 = _mm_madd_epi16(dot1_0, _mm_shuffle_epi8(scales16_0, _mm256_extractf128_si256(get_scale_shuffle_k4(ib32+0), 0)));\n            const __m128i p1_1 = _mm_madd_epi16(dot1_1, _mm_shuffle_epi8(scales16_1, _mm256_extractf128_si256(get_scale_shuffle_k4(ib32+0), 1)));\n            const __m128i p2_0 = _mm_madd_epi16(dot2_0, _mm_shuffle_epi8(scales16_0, _mm256_extractf128_si256(get_scale_shuffle_k4(ib32+1), 0)));\n            const __m128i p2_1 = _mm_madd_epi16(dot2_1, _mm_shuffle_epi8(scales16_1, _mm256_extractf128_si256(get_scale_shuffle_k4(ib32+1), 1)));\n            sumi1_0 = _mm_add_epi32(sumi1_0, p1_0);\n            sumi1_1 = _mm_add_epi32(sumi1_1, p1_1);\n            sumi2_0 = _mm_add_epi32(sumi2_0, p2_0);\n            sumi2_1 = _mm_add_epi32(sumi2_1, p2_1);\n        }\n\n        accumf = _mm256_add_ps(_mm256_mul_ps(_mm256_set1_ps(d), _mm256_cvtepi32_ps(MM256_SET_M128I(_mm_add_epi32(sumi1_1, sumi2_1), _mm_add_epi32(sumi1_0, sumi2_0)))), accumf);\n\n    }\n\n    *s = 0.125f * hsum_float_8(accumf);\n\n#elif defined(__POWER9_VECTOR__)\n    static const uint8_t k_mask1[32] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,\n                                        0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03\n    };\n\n    static const uint8_t k_mask2[16] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80,};\n\n    const vector int v0 = vec_splats((int32_t)0);\n\n    vector float vsumf0 = vec_splats(0.0f);\n    vector float vsumf1 = vec_splats(0.0f);\n    vector float vsumf2 = vec_splats(0.0f);\n    vector float vsumf3 = vec_splats(0.0f);\n\n    const vector unsigned char mask0 = vec_xl( 0, k_mask1);\n    const vector unsigned char mask1 = vec_xl(16, k_mask1);\n    const vector signed char mask2 = (vector signed char)vec_xl( 0, k_mask2);\n\n    for (int i = 0; i < nb; ++i) {\n        vector float vxd = vec_splats(GGML_FP16_TO_FP32(x[i].d));\n        vector float vyd = vec_splats(y[i].d);\n        vector float vd = vec_mul(vxd, vyd);\n\n        vector signed int vsumi0 = v0;\n        vector signed int vsumi1 = v0;\n        vector signed int vsumi2 = v0;\n        vector signed int vsumi3 = v0;\n\n        const uint8_t *  restrict q2 = x[i].qs;\n        const uint8_t *  restrict qh = x[i].qh;\n        const uint16_t * restrict signs = (const uint16_t *)(x[i].qs + QK_K/8);\n        const uint8_t *  restrict sc = x[i].scales;\n        const int8_t  *  restrict q8 = y[i].qs;\n\n        for (int j = 0; j < QK_K/32; j += 2) {\n            __builtin_prefetch(q2, 0, 1);\n            __builtin_prefetch(q8, 0, 1);\n\n            vector signed long long aux64x2_0 = {*(const int64_t *)(iq2s_grid + (q2[0] | ((qh[0] << 8) & 0x300))), *(const int64_t *)(iq2s_grid + (q2[1] | ((qh[0] << 6) & 0x300)))};\n            vector signed long long aux64x2_1 = {*(const int64_t *)(iq2s_grid + (q2[2] | ((qh[0] << 4) & 0x300))), *(const int64_t *)(iq2s_grid + (q2[3] | ((qh[0] << 2) & 0x300)))};\n            vector signed long long aux64x2_2 = {*(const int64_t *)(iq2s_grid + (q2[4] | ((qh[1] << 8) & 0x300))), *(const int64_t *)(iq2s_grid + (q2[5] | ((qh[1] << 6) & 0x300)))};\n            vector signed long long aux64x2_3 = {*(const int64_t *)(iq2s_grid + (q2[6] | ((qh[1] << 4) & 0x300))), *(const int64_t *)(iq2s_grid + (q2[7] | ((qh[1] << 2) & 0x300)))};\n            q2 += 8;\n            qh += 2;\n\n            vector signed char vsigns01 = (vector signed char)vec_splats(*(const uint32_t *)&signs[0]);\n            vector signed char vsigns23 = (vector signed char)vec_splats(*(const uint32_t *)&signs[2]);\n            signs += 4;\n\n            vector signed char vsigns0 = vec_perm(vsigns01, vsigns01, mask0);\n            vector signed char vsigns1 = vec_perm(vsigns01, vsigns01, mask1);\n            vector signed char vsigns2 = vec_perm(vsigns23, vsigns23, mask0);\n            vector signed char vsigns3 = vec_perm(vsigns23, vsigns23, mask1);\n\n            vsigns0 = (vector signed char)vec_cmpeq(vec_and(vsigns0, mask2), mask2);\n            vsigns1 = (vector signed char)vec_cmpeq(vec_and(vsigns1, mask2), mask2);\n            vsigns2 = (vector signed char)vec_cmpeq(vec_and(vsigns2, mask2), mask2);\n            vsigns3 = (vector signed char)vec_cmpeq(vec_and(vsigns3, mask2), mask2);\n\n            vector signed char q2x0 = vec_sub(vec_xor(vsigns0, (vector signed char)aux64x2_0), vsigns0);\n            vector signed char q2x1 = vec_sub(vec_xor(vsigns1, (vector signed char)aux64x2_1), vsigns1);\n            vector signed char q2x2 = vec_sub(vec_xor(vsigns2, (vector signed char)aux64x2_2), vsigns2);\n            vector signed char q2x3 = vec_sub(vec_xor(vsigns3, (vector signed char)aux64x2_3), vsigns3);\n\n            vector signed char q8y0 = vec_xl( 0, q8);\n            vector signed char q8y1 = vec_xl(16, q8);\n            vector signed char q8y2 = vec_xl(32, q8);\n            vector signed char q8y3 = vec_xl(48, q8);\n            q8 += 64;\n\n            vector signed short qv0 = vec_add(vec_mule(q2x0, q8y0), vec_mulo(q2x0, q8y0));\n            vector signed short qv1 = vec_add(vec_mule(q2x1, q8y1), vec_mulo(q2x1, q8y1));\n            vector signed short qv2 = vec_add(vec_mule(q2x2, q8y2), vec_mulo(q2x2, q8y2));\n            vector signed short qv3 = vec_add(vec_mule(q2x3, q8y3), vec_mulo(q2x3, q8y3));\n\n            const uint16_t ls0 = (uint16_t)(sc[0] & 0xf);\n            const uint16_t ls1 = (uint16_t)(sc[0] >>  4);\n            const uint16_t ls2 = (uint16_t)(sc[1] & 0xf);\n            const uint16_t ls3 = (uint16_t)(sc[1] >>  4);\n            sc += 2;\n\n            vector signed short vscales0 = vec_splats((int16_t)(2*ls0+1));\n            vector signed short vscales1 = vec_splats((int16_t)(2*ls1+1));\n            vector signed short vscales2 = vec_splats((int16_t)(2*ls2+1));\n            vector signed short vscales3 = vec_splats((int16_t)(2*ls3+1));\n\n            vsumi0 = vec_msum(qv0, vscales0, vsumi0);\n            vsumi1 = vec_msum(qv1, vscales1, vsumi1);\n            vsumi2 = vec_msum(qv2, vscales2, vsumi2);\n            vsumi3 = vec_msum(qv3, vscales3, vsumi3);\n        }\n\n        vsumf0 = vec_madd(vec_ctf(vsumi0, 0), vd, vsumf0);\n        vsumf1 = vec_madd(vec_ctf(vsumi1, 0), vd, vsumf1);\n        vsumf2 = vec_madd(vec_ctf(vsumi2, 0), vd, vsumf2);\n        vsumf3 = vec_madd(vec_ctf(vsumi3, 0), vd, vsumf3);\n    }\n\n    vsumf0 = vec_add(vsumf0, vsumf2);\n    vsumf1 = vec_add(vsumf1, vsumf3);\n\n    vsumf0 = vec_add(vsumf0, vsumf1);\n\n    vsumf0 = vec_add(vsumf0, vec_sld(vsumf0, vsumf0, 4));\n    vsumf0 = vec_add(vsumf0, vec_sld(vsumf0, vsumf0, 8));\n\n    *s = 0.125f * vec_extract(vsumf0, 0);\n\n#elif defined(__loongarch_asx)\n\n   static const uint8_t k_mask1[32] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,\n                                       0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03\n   };\n\n    static const uint8_t k_mask2[32] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80,\n                                        0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80,\n    };\n\n\n    const __m128i m4 = __lsx_vreplgr2vr_b(0xf);\n    const __m128i m1 = __lsx_vreplgr2vr_b(1);\n\n    const __m256i mask1 = __lasx_xvld((const __m256i*)k_mask1, 0);\n    const __m256i mask2 = __lasx_xvld((const __m256i*)k_mask2, 0);\n    uint64_t aux64;\n\n    __m256 accumf = (__m256)__lasx_xvldi(0);\n    for (int i = 0; i < nb; ++i) {\n        const float d = GGML_FP16_TO_FP32(x[i].d) * y[i].d;\n        const uint8_t * restrict qs = x[i].qs;\n        const uint8_t * restrict qh = x[i].qh;\n        const uint16_t * restrict signs = (const uint16_t *)(x[i].qs + QK_K/8);\n        const int8_t  * restrict q8 = y[i].qs;\n\n        __m128i tmp1;\n        memcpy(&aux64, x[i].scales, 8);\n        tmp1 = __lsx_vinsgr2vr_d(tmp1, aux64, 0);\n        tmp1 = __lsx_vinsgr2vr_d(tmp1, aux64 >> 4, 1);\n        const __m128i scales8 = __lsx_vadd_b(__lsx_vslli_h(__lsx_vand_v(tmp1, m4), 1), m1);\n        const __m256i scales16 = lasx_ext8_16(scales8); // 0 2 4 6 8 10 12 14 1 3 5 7 9 11 13 15\n\n        __m256i sumi1 = __lasx_xvldi(0);\n        __m256i sumi2 = __lasx_xvldi(0);\n        for (int ib32 = 0; ib32 < QK_K/32; ib32 += 2) {\n            const __m256i q8_1 = __lasx_xvld((const __m256i *)q8, 0); q8 += 32;\n            const __m256i q8_2 = __lasx_xvld((const __m256i *)q8, 0); q8 += 32;\n            const __m256i q2_1 = lasx_set_d(iq2s_grid[qs[3] | ((qh[ib32+0] << 2) & 0x300)],\n                                                   iq2s_grid[qs[2] | ((qh[ib32+0] << 4) & 0x300)],\n                                                   iq2s_grid[qs[1] | ((qh[ib32+0] << 6) & 0x300)],\n                                                   iq2s_grid[qs[0] | ((qh[ib32+0] << 8) & 0x300)]);\n            const __m256i q2_2 = lasx_set_d(iq2s_grid[qs[7] | ((qh[ib32+1] << 2) & 0x300)],\n                                                   iq2s_grid[qs[6] | ((qh[ib32+1] << 4) & 0x300)],\n                                                   iq2s_grid[qs[5] | ((qh[ib32+1] << 6) & 0x300)],\n                                                   iq2s_grid[qs[4] | ((qh[ib32+1] << 8) & 0x300)]);\n            qs += 8;\n\n            __m256i aux256 = __lasx_xvreplgr2vr_w(signs[0] | ((uint32_t) signs[1] << 16));\n            aux256 = __lasx_xvand_v(lasx_shuffle_b(aux256,mask1), mask2);\n            const __m256i s2_1 = __lasx_xvseq_b(aux256, mask2);\n            const __m256i q8s_1 = __lasx_xvsub_b(__lasx_xvxor_v(s2_1, q8_1), s2_1);\n\n            aux256 = __lasx_xvreplgr2vr_w(signs[2] | ((uint32_t) signs[3] << 16));\n            aux256 = __lasx_xvand_v(lasx_shuffle_b(aux256,mask1), mask2);\n            const __m256i s2_2 = __lasx_xvseq_b(aux256, mask2);\n            const __m256i q8s_2 = __lasx_xvsub_b(__lasx_xvxor_v(s2_2, q8_2), s2_2);\n\n            signs += 4;\n\n            const __m256i dot1  = lasx_maddubs_h(q2_1, q8s_1); // blocks 2*ib32+0, 2*ib32+1\n            const __m256i dot2  = lasx_maddubs_h(q2_2, q8s_2); // blocks 2*ib32+2, 2*ib32+3\n\n            const __m256i p1 = lasx_madd_h(dot1, lasx_shuffle_b(scales16, get_scale_shuffle_k4(ib32+0)));\n            const __m256i p2 = lasx_madd_h(dot2, lasx_shuffle_b(scales16, get_scale_shuffle_k4(ib32+1)));\n            sumi1 = __lasx_xvadd_w(sumi1, p1);\n            sumi2 = __lasx_xvadd_w(sumi2, p2);\n        }\n\n        accumf = __lasx_xvfmadd_s(__lasx_xvreplfr2vr_s(d), __lasx_xvffint_s_w(__lasx_xvadd_w(sumi1, sumi2)), accumf);\n    }\n\n    *s = 0.125f * hsum_float_8(accumf);\n\n#else\n\n    float sumf = 0;\n    for (int i = 0; i < nb; i++) {\n\n        const float d = GGML_FP16_TO_FP32(x[i].d) * y[i].d;\n        const int8_t  * q8 = y[i].qs;\n        const uint8_t * qs = x[i].qs;\n        const uint8_t * qh = x[i].qh;\n        const uint8_t * signs = qs + QK_K/8;\n\n        int bsum = 0;\n        for (int ib32 = 0; ib32 < QK_K/32; ++ib32) {\n            int ls1 = 1 + 2*(x[i].scales[ib32] & 0xf);\n            int ls2 = 1 + 2*(x[i].scales[ib32] >>  4);\n            int sumi1 = 0, sumi2 = 0;\n            for (int l = 0; l < 2; ++l) {\n                const uint8_t * grid = (const uint8_t *)(iq2s_grid + (qs[l] | (qh[ib32] << (8-2*l) & 0x300)));\n                for (int j = 0; j < 8; ++j) {\n                    sumi1 += q8[j] * grid[j] * (signs[l] & kmask_iq2xs[j] ? -1 : 1);\n                }\n                q8 += 8;\n            }\n            for (int l = 2; l < 4; ++l) {\n                const uint8_t * grid = (const uint8_t *)(iq2s_grid + (qs[l] | (qh[ib32] << (8-2*l) & 0x300)));\n                for (int j = 0; j < 8; ++j) {\n                    sumi2 += q8[j] * grid[j] * (signs[l] & kmask_iq2xs[j] ? -1 : 1);\n                }\n                q8 += 8;\n            }\n            bsum += ls1 * sumi1 + ls2 * sumi2;\n            qs += 4;\n            signs += 4;\n        }\n\n        sumf += d * bsum;\n    }\n\n    *s = 0.125f * sumf;\n\n#endif\n\n}\n\nvoid ggml_vec_dot_iq3_xxs_q8_K(int n, float * restrict s, size_t bs, const void * restrict vx, size_t bx, const void * restrict vy, size_t by, int nrc) {\n    assert(n % QK_K == 0);\n    assert(nrc == 1);\n    UNUSED(nrc);\n    UNUSED(bx);\n    UNUSED(by);\n    UNUSED(bs);\n\n    const block_iq3_xxs * restrict x = vx;\n    const block_q8_K    * restrict y = vy;\n\n    const int nb = n / QK_K;\n\n#if defined(__ARM_NEON)\n\n    const uint64_t * signs64 = (const uint64_t *)keven_signs_q2xs;\n\n    uint32_t aux32[2];\n\n    ggml_int8x16x4_t q3s;\n    ggml_int8x16x4_t q8b;\n\n    float sumf = 0;\n    for (int i = 0; i < nb; ++i) {\n        const float d = GGML_FP16_TO_FP32(x[i].d) * y[i].d;\n        const uint8_t * restrict q3 = x[i].qs;\n        const uint8_t * restrict gas = x[i].qs + QK_K/4;\n        const int8_t   * restrict q8 = y[i].qs;\n        float sumf1 = 0, sumf2 = 0;\n        for (int ib32 = 0; ib32 < QK_K/32; ib32 += 2) {\n            q8b = ggml_vld1q_s8_x4(q8); q8 += 64;\n            memcpy(aux32, gas, 2*sizeof(uint32_t)); gas += 2*sizeof(uint32_t);\n            const uint32x4_t aux32x4_0 = ggml_vld1q_u32(iq3xxs_grid[q3[ 0]], iq3xxs_grid[q3[ 1]], iq3xxs_grid[q3[ 2]], iq3xxs_grid[q3[ 3]]);\n            const uint32x4_t aux32x4_1 = ggml_vld1q_u32(iq3xxs_grid[q3[ 4]], iq3xxs_grid[q3[ 5]], iq3xxs_grid[q3[ 6]], iq3xxs_grid[q3[ 7]]);\n            const uint32x4_t aux32x4_2 = ggml_vld1q_u32(iq3xxs_grid[q3[ 8]], iq3xxs_grid[q3[ 9]], iq3xxs_grid[q3[10]], iq3xxs_grid[q3[11]]);\n            const uint32x4_t aux32x4_3 = ggml_vld1q_u32(iq3xxs_grid[q3[12]], iq3xxs_grid[q3[13]], iq3xxs_grid[q3[14]], iq3xxs_grid[q3[15]]);\n            q3 += 16;\n            q3s.val[0] = vcombine_s8(vld1_s8((const void *)(signs64 + ((aux32[0] >>  0) & 127))), vld1_s8((const void *)(signs64 + ((aux32[0] >>  7) & 127))));\n            q3s.val[1] = vcombine_s8(vld1_s8((const void *)(signs64 + ((aux32[0] >> 14) & 127))), vld1_s8((const void *)(signs64 + ((aux32[0] >> 21) & 127))));\n            q3s.val[2] = vcombine_s8(vld1_s8((const void *)(signs64 + ((aux32[1] >>  0) & 127))), vld1_s8((const void *)(signs64 + ((aux32[1] >>  7) & 127))));\n            q3s.val[3] = vcombine_s8(vld1_s8((const void *)(signs64 + ((aux32[1] >> 14) & 127))), vld1_s8((const void *)(signs64 + ((aux32[1] >> 21) & 127))));\n            q3s.val[0] = vmulq_s8(q3s.val[0], vreinterpretq_s8_u32(aux32x4_0));\n            q3s.val[1] = vmulq_s8(q3s.val[1], vreinterpretq_s8_u32(aux32x4_1));\n            q3s.val[2] = vmulq_s8(q3s.val[2], vreinterpretq_s8_u32(aux32x4_2));\n            q3s.val[3] = vmulq_s8(q3s.val[3], vreinterpretq_s8_u32(aux32x4_3));\n            const int32x4_t p1 = ggml_vdotq_s32(ggml_vdotq_s32(vdupq_n_s32(0), q3s.val[0], q8b.val[0]), q3s.val[1], q8b.val[1]);\n            const int32x4_t p2 = ggml_vdotq_s32(ggml_vdotq_s32(vdupq_n_s32(0), q3s.val[2], q8b.val[2]), q3s.val[3], q8b.val[3]);\n            sumf1 += vaddvq_s32(p1) * (0.5f + (aux32[0] >> 28));\n            sumf2 += vaddvq_s32(p2) * (0.5f + (aux32[1] >> 28));\n        }\n        sumf += d*(sumf1 + sumf2);\n    }\n    *s = 0.5f * sumf;\n\n#elif defined(__AVX2__)\n\n    const uint64_t * signs64 = (const uint64_t *)keven_signs_q2xs;\n\n    uint32_t aux32[2];\n\n    __m256 accumf = _mm256_setzero_ps();\n    for (int i = 0; i < nb; ++i) {\n        const float d = GGML_FP16_TO_FP32(x[i].d) * y[i].d;\n        const uint8_t * restrict q3 = x[i].qs;\n        const uint8_t * restrict gas = x[i].qs + QK_K/4;\n        const int8_t  * restrict q8 = y[i].qs;\n        __m256i sumi1 = _mm256_setzero_si256();\n        __m256i sumi2 = _mm256_setzero_si256();\n        for (int ib32 = 0; ib32 < QK_K/32; ib32 += 2) {\n            const __m256i q8_1 = _mm256_loadu_si256((const __m256i *)q8); q8 += 32;\n            const __m256i q8_2 = _mm256_loadu_si256((const __m256i *)q8); q8 += 32;\n            const __m256i q2_1 = _mm256_set_epi32(iq3xxs_grid[q3[7]], iq3xxs_grid[q3[6]], iq3xxs_grid[q3[5]], iq3xxs_grid[q3[4]],\n                                                  iq3xxs_grid[q3[3]], iq3xxs_grid[q3[2]], iq3xxs_grid[q3[1]], iq3xxs_grid[q3[0]]);\n            q3 += 8;\n            const __m256i q2_2 = _mm256_set_epi32(iq3xxs_grid[q3[7]], iq3xxs_grid[q3[6]], iq3xxs_grid[q3[5]], iq3xxs_grid[q3[4]],\n                                                  iq3xxs_grid[q3[3]], iq3xxs_grid[q3[2]], iq3xxs_grid[q3[1]], iq3xxs_grid[q3[0]]);\n            q3 += 8;\n            memcpy(aux32, gas, 8); gas += 8;\n            const __m256i s2_1 = _mm256_set_epi64x(signs64[(aux32[0] >> 21) & 127], signs64[(aux32[0] >> 14) & 127],\n                                                   signs64[(aux32[0] >>  7) & 127], signs64[(aux32[0] >>  0) & 127]);\n            const __m256i s2_2 = _mm256_set_epi64x(signs64[(aux32[1] >> 21) & 127], signs64[(aux32[1] >> 14) & 127],\n                                                   signs64[(aux32[1] >>  7) & 127], signs64[(aux32[1] >>  0) & 127]);\n            const __m256i q8s_1 = _mm256_sign_epi8(q8_1, s2_1);\n            const __m256i q8s_2 = _mm256_sign_epi8(q8_2, s2_2);\n            const __m256i dot1  = _mm256_maddubs_epi16(q2_1, q8s_1);\n            const __m256i dot2  = _mm256_maddubs_epi16(q2_2, q8s_2);\n            const uint16_t ls1 = aux32[0] >> 28;\n            const uint16_t ls2 = aux32[1] >> 28;\n            const __m256i p1 = _mm256_madd_epi16(dot1, _mm256_set1_epi16(2*ls1+1));\n            const __m256i p2 = _mm256_madd_epi16(dot2, _mm256_set1_epi16(2*ls2+1));\n            sumi1 = _mm256_add_epi32(sumi1, p1);\n            sumi2 = _mm256_add_epi32(sumi2, p2);\n        }\n\n        accumf = _mm256_fmadd_ps(_mm256_set1_ps(d), _mm256_cvtepi32_ps(_mm256_add_epi32(sumi1, sumi2)), accumf);\n\n    }\n\n    *s = 0.25f * hsum_float_8(accumf);\n\n#elif defined(__AVX__)\n    const uint64_t * signs64 = (const uint64_t *)keven_signs_q2xs;\n\n    uint32_t aux32[2];\n\n    __m256 accumf = _mm256_setzero_ps();\n    for (int i = 0; i < nb; ++i) {\n        const float d = GGML_FP16_TO_FP32(x[i].d) * y[i].d;\n        const uint8_t * restrict q3 = x[i].qs;\n        const uint8_t * restrict gas = x[i].qs + QK_K/4;\n        const int8_t  * restrict q8 = y[i].qs;\n        __m128i sumi1_0 = _mm_setzero_si128();\n        __m128i sumi1_1 = _mm_setzero_si128();\n        __m128i sumi2_0 = _mm_setzero_si128();\n        __m128i sumi2_1 = _mm_setzero_si128();\n        for (int ib32 = 0; ib32 < QK_K/32; ib32 += 2) {\n            const __m128i q8_1_0 = _mm_loadu_si128((const __m128i *)q8); q8 += 16;\n            const __m128i q8_1_1 = _mm_loadu_si128((const __m128i *)q8); q8 += 16;\n            const __m128i q8_2_0 = _mm_loadu_si128((const __m128i *)q8); q8 += 16;\n            const __m128i q8_2_1 = _mm_loadu_si128((const __m128i *)q8); q8 += 16;\n            const __m128i q2_1_0 = _mm_set_epi32(iq3xxs_grid[q3[3]], iq3xxs_grid[q3[2]], iq3xxs_grid[q3[1]], iq3xxs_grid[q3[0]]);\n            const __m128i q2_1_1 = _mm_set_epi32(iq3xxs_grid[q3[7]], iq3xxs_grid[q3[6]], iq3xxs_grid[q3[5]], iq3xxs_grid[q3[4]]);\n            q3 += 8;\n            const __m128i q2_2_0 = _mm_set_epi32(iq3xxs_grid[q3[3]], iq3xxs_grid[q3[2]], iq3xxs_grid[q3[1]], iq3xxs_grid[q3[0]]);\n            const __m128i q2_2_1 = _mm_set_epi32(iq3xxs_grid[q3[7]], iq3xxs_grid[q3[6]], iq3xxs_grid[q3[5]], iq3xxs_grid[q3[4]]);\n            q3 += 8;\n            memcpy(aux32, gas, 8); gas += 8;\n            const __m128i s2_1_0 = _mm_set_epi64x(signs64[(aux32[0] >>  7) & 127], signs64[(aux32[0] >>  0) & 127]);\n            const __m128i s2_1_1 = _mm_set_epi64x(signs64[(aux32[0] >> 21) & 127], signs64[(aux32[0] >> 14) & 127]);\n            const __m128i s2_2_0 = _mm_set_epi64x(signs64[(aux32[1] >>  7) & 127], signs64[(aux32[1] >>  0) & 127]);\n            const __m128i s2_2_1 = _mm_set_epi64x(signs64[(aux32[1] >> 21) & 127], signs64[(aux32[1] >> 14) & 127]);\n            const __m128i q8s_1_0 = _mm_sign_epi8(q8_1_0, s2_1_0);\n            const __m128i q8s_1_1 = _mm_sign_epi8(q8_1_1, s2_1_1);\n            const __m128i q8s_2_0 = _mm_sign_epi8(q8_2_0, s2_2_0);\n            const __m128i q8s_2_1 = _mm_sign_epi8(q8_2_1, s2_2_1);\n            const __m128i dot1_0  = _mm_maddubs_epi16(q2_1_0, q8s_1_0);\n            const __m128i dot1_1  = _mm_maddubs_epi16(q2_1_1, q8s_1_1);\n            const __m128i dot2_0  = _mm_maddubs_epi16(q2_2_0, q8s_2_0);\n            const __m128i dot2_1  = _mm_maddubs_epi16(q2_2_1, q8s_2_1);\n            const uint16_t ls1 = aux32[0] >> 28;\n            const uint16_t ls2 = aux32[1] >> 28;\n            const __m128i p1_0 = _mm_madd_epi16(dot1_0, _mm_set1_epi16(2*ls1+1));\n            const __m128i p1_1 = _mm_madd_epi16(dot1_1, _mm_set1_epi16(2*ls1+1));\n            const __m128i p2_0 = _mm_madd_epi16(dot2_0, _mm_set1_epi16(2*ls2+1));\n            const __m128i p2_1 = _mm_madd_epi16(dot2_1, _mm_set1_epi16(2*ls2+1));\n            sumi1_0 = _mm_add_epi32(sumi1_0, p1_0);\n            sumi1_1 = _mm_add_epi32(sumi1_1, p1_1);\n            sumi2_0 = _mm_add_epi32(sumi2_0, p2_0);\n            sumi2_1 = _mm_add_epi32(sumi2_1, p2_1);\n        }\n\n        accumf = _mm256_add_ps(_mm256_mul_ps(_mm256_set1_ps(d), _mm256_cvtepi32_ps(MM256_SET_M128I(_mm_add_epi32(sumi1_1, sumi2_1), _mm_add_epi32(sumi1_0, sumi2_0)))), accumf);\n\n    }\n\n    *s = 0.25f * hsum_float_8(accumf);\n\n#elif defined(__POWER9_VECTOR__)\n    const uint64_t * signs64 = (const uint64_t *)keven_signs_q2xs;\n\n    const vector int v0 = vec_splats((int32_t)0);\n\n    vector float vsumf0 = vec_splats(0.0f);\n    vector float vsumf1 = vec_splats(0.0f);\n    vector float vsumf2 = vec_splats(0.0f);\n    vector float vsumf3 = vec_splats(0.0f);\n\n    for (int i = 0; i < nb; ++i) {\n        vector float vxd = vec_splats(GGML_FP16_TO_FP32(x[i].d));\n        vector float vyd = vec_splats(y[i].d);\n        vector float vd = vec_mul(vxd, vyd);\n\n        vector signed int vsumi0 = v0;\n        vector signed int vsumi1 = v0;\n        vector signed int vsumi2 = v0;\n        vector signed int vsumi3 = v0;\n\n        const uint8_t * restrict q3 = x[i].qs;\n        const uint32_t * restrict signs = (const uint32_t *)(x[i].qs + QK_K/4);\n        const int8_t  * restrict q8 = y[i].qs;\n\n#pragma GCC unroll 1\n        for (int j = 0; j < QK_K/32; j += 2) {\n            __builtin_prefetch(q3, 0, 1);\n            __builtin_prefetch(q8, 0, 1);\n\n            vector unsigned int aux32x4_0 = {iq3xxs_grid[q3[ 0]], iq3xxs_grid[q3[ 1]], iq3xxs_grid[q3[ 2]], iq3xxs_grid[q3[ 3]]};\n            vector unsigned int aux32x4_1 = {iq3xxs_grid[q3[ 4]], iq3xxs_grid[q3[ 5]], iq3xxs_grid[q3[ 6]], iq3xxs_grid[q3[ 7]]};\n            vector unsigned int aux32x4_2 = {iq3xxs_grid[q3[ 8]], iq3xxs_grid[q3[ 9]], iq3xxs_grid[q3[10]], iq3xxs_grid[q3[11]]};\n            vector unsigned int aux32x4_3 = {iq3xxs_grid[q3[12]], iq3xxs_grid[q3[13]], iq3xxs_grid[q3[14]], iq3xxs_grid[q3[15]]};\n            q3 += 16;\n\n            vector unsigned long long aux64x2_0 = {(uint64_t)(signs64[(signs[0] >>  0) & 127]), (uint64_t)(signs64[(signs[0] >>  7) & 127])};\n            vector unsigned long long aux64x2_1 = {(uint64_t)(signs64[(signs[0] >> 14) & 127]), (uint64_t)(signs64[(signs[0] >> 21) & 127])};\n            vector unsigned long long aux64x2_2 = {(uint64_t)(signs64[(signs[1] >>  0) & 127]), (uint64_t)(signs64[(signs[1] >>  7) & 127])};\n            vector unsigned long long aux64x2_3 = {(uint64_t)(signs64[(signs[1] >> 14) & 127]), (uint64_t)(signs64[(signs[1] >> 21) & 127])};\n\n            vector signed char q3x0 = vec_mul((vector signed char)aux64x2_0, (vector signed char)aux32x4_0);\n            vector signed char q3x1 = vec_mul((vector signed char)aux64x2_1, (vector signed char)aux32x4_1);\n            vector signed char q3x2 = vec_mul((vector signed char)aux64x2_2, (vector signed char)aux32x4_2);\n            vector signed char q3x3 = vec_mul((vector signed char)aux64x2_3, (vector signed char)aux32x4_3);\n\n            vector signed char q8y0 = vec_xl( 0, q8);\n            vector signed char q8y1 = vec_xl(16, q8);\n            vector signed char q8y2 = vec_xl(32, q8);\n            vector signed char q8y3 = vec_xl(48, q8);\n            q8 += 64;\n\n            vector signed short qv0 = vec_add(vec_mule(q3x0, q8y0), vec_mulo(q3x0, q8y0));\n            vector signed short qv1 = vec_add(vec_mule(q3x1, q8y1), vec_mulo(q3x1, q8y1));\n            vector signed short qv2 = vec_add(vec_mule(q3x2, q8y2), vec_mulo(q3x2, q8y2));\n            vector signed short qv3 = vec_add(vec_mule(q3x3, q8y3), vec_mulo(q3x3, q8y3));\n\n            const uint16_t ls0 = (uint16_t)(signs[0] >> 28);\n            const uint16_t ls1 = (uint16_t)(signs[1] >> 28);\n            signs += 2;\n\n            vector signed short vscales01 = (vector signed short)vec_splats((uint16_t)(2*ls0+1));\n            vector signed short vscales23 = (vector signed short)vec_splats((uint16_t)(2*ls1+1));\n\n            vsumi0 = vec_msum(qv0, vscales01, vsumi0);\n            vsumi1 = vec_msum(qv1, vscales01, vsumi1);\n            vsumi2 = vec_msum(qv2, vscales23, vsumi2);\n            vsumi3 = vec_msum(qv3, vscales23, vsumi3);\n        }\n\n        vsumf0 = vec_madd(vec_ctf(vsumi0, 0), vd, vsumf0);\n        vsumf1 = vec_madd(vec_ctf(vsumi1, 0), vd, vsumf1);\n        vsumf2 = vec_madd(vec_ctf(vsumi2, 0), vd, vsumf2);\n        vsumf3 = vec_madd(vec_ctf(vsumi3, 0), vd, vsumf3);\n    }\n\n    vsumf0 = vec_add(vsumf0, vsumf2);\n    vsumf1 = vec_add(vsumf1, vsumf3);\n\n    vsumf0 = vec_add(vsumf0, vsumf1);\n\n    vsumf0 = vec_add(vsumf0, vec_sld(vsumf0, vsumf0, 4));\n    vsumf0 = vec_add(vsumf0, vec_sld(vsumf0, vsumf0, 8));\n\n    *s = 0.25f * vec_extract(vsumf0, 0);\n\n#elif defined(__loongarch_asx)\n\n    const uint64_t * signs64 = (const uint64_t *)keven_signs_q2xs;\n\n    uint32_t aux32[2];\n\n    __m256 accumf = (__m256)__lasx_xvldi(0);\n    for (int i = 0; i < nb; ++i) {\n        const float d = GGML_FP16_TO_FP32(x[i].d) * y[i].d;\n        const uint8_t * restrict q3 = x[i].qs;\n        const uint8_t * restrict gas = x[i].qs + QK_K/4;\n        const int8_t  * restrict q8 = y[i].qs;\n        __m256i sumi1 = __lasx_xvldi(0);\n        __m256i sumi2 = __lasx_xvldi(0);\n        for (int ib32 = 0; ib32 < QK_K/32; ib32 += 2) {\n            const __m256i q8_1 = __lasx_xvld((const __m256i *)q8, 0); q8 += 32;\n            const __m256i q8_2 = __lasx_xvld((const __m256i *)q8, 0); q8 += 32;\n            const __m256i q2_1 = lasx_set_w(iq3xxs_grid[q3[7]], iq3xxs_grid[q3[6]], iq3xxs_grid[q3[5]], iq3xxs_grid[q3[4]],\n                                                iq3xxs_grid[q3[3]], iq3xxs_grid[q3[2]], iq3xxs_grid[q3[1]], iq3xxs_grid[q3[0]]);\n            q3 += 8;\n            const __m256i q2_2 = lasx_set_w(iq3xxs_grid[q3[7]], iq3xxs_grid[q3[6]], iq3xxs_grid[q3[5]], iq3xxs_grid[q3[4]],\n                                                iq3xxs_grid[q3[3]], iq3xxs_grid[q3[2]], iq3xxs_grid[q3[1]], iq3xxs_grid[q3[0]]);\n            q3 += 8;\n            memcpy(aux32, gas, 8); gas += 8;\n\n            const __m256i s2_1 = lasx_set_d(signs64[(aux32[0] >> 21) & 127], signs64[(aux32[0] >> 14) & 127],\n                                                   signs64[(aux32[0] >>  7) & 127], signs64[(aux32[0] >>  0) & 127]);\n            const __m256i s2_2 = lasx_set_d(signs64[(aux32[1] >> 21) & 127], signs64[(aux32[1] >> 14) & 127],\n                                                   signs64[(aux32[1] >>  7) & 127], signs64[(aux32[1] >>  0) & 127]);\n            const __m256i q8s_1 = __lasx_xvsigncov_b(s2_1, q8_1);\n            const __m256i q8s_2 = __lasx_xvsigncov_b(s2_2, q8_2);\n            const __m256i dot1  = lasx_maddubs_h(q2_1, q8s_1);\n            const __m256i dot2  = lasx_maddubs_h(q2_2, q8s_2);\n            const uint16_t ls1 = aux32[0] >> 28;\n            const uint16_t ls2 = aux32[1] >> 28;\n\n            const __m256i p1 = lasx_madd_h(dot1, __lasx_xvreplgr2vr_h(2*ls1+1));\n            const __m256i p2 = lasx_madd_h(dot2, __lasx_xvreplgr2vr_h(2*ls2+1));\n            sumi1 = __lasx_xvadd_w(sumi1, p1);\n            sumi2 = __lasx_xvadd_w(sumi2, p2);\n        }\n\n        accumf = __lasx_xvfmadd_s(__lasx_xvreplfr2vr_s(d), __lasx_xvffint_s_w(__lasx_xvadd_w(sumi1, sumi2)), accumf);\n    }\n\n    *s = 0.25f * hsum_float_8(accumf);\n\n#else\n\n    uint32_t aux32;\n\n    float sumf = 0.f;\n    for (int i = 0; i < nb; ++i) {\n        const float d = GGML_FP16_TO_FP32(x[i].d) * y[i].d;\n        const uint8_t * restrict q3 = x[i].qs;\n        const uint8_t * restrict gas = x[i].qs + QK_K/4;\n        const int8_t  * restrict q8 = y[i].qs;\n        int32_t bsum = 0;\n        for (int ib32 = 0; ib32 < QK_K/32; ++ib32) {\n            memcpy(&aux32, gas, sizeof(uint32_t)); gas += sizeof(uint32_t);\n            const uint32_t ls = 2*(aux32 >> 28) + 1;\n            int32_t sumi = 0;\n            for (int l = 0; l < 4; ++l) {\n                const uint8_t * grid1 = (const uint8_t *)(iq3xxs_grid + q3[2*l+0]);\n                const uint8_t * grid2 = (const uint8_t *)(iq3xxs_grid + q3[2*l+1]);\n                const uint8_t  signs = ksigns_iq2xs[(aux32 >> 7*l) & 127];\n                for (int j = 0; j < 4; ++j) {\n                    sumi += grid1[j] * q8[j+0] * (signs & kmask_iq2xs[j+0] ? -1 : 1);\n                    sumi += grid2[j] * q8[j+4] * (signs & kmask_iq2xs[j+4] ? -1 : 1);\n                }\n                q8 += 8;\n            }\n            q3 += 8;\n            bsum += sumi * ls;\n        }\n        sumf += d * bsum;\n    }\n    *s = 0.25f * sumf;\n#endif\n}\n\nvoid ggml_vec_dot_iq3_s_q8_K (int n, float * restrict s, size_t bs, const void * restrict vx, size_t bx, const void * restrict vy, size_t by, int nrc) {\n    assert(n % QK_K == 0);\n    assert(nrc == 1);\n    UNUSED(nrc);\n    UNUSED(bx);\n    UNUSED(by);\n    UNUSED(bs);\n\n    const block_iq3_s * restrict x = vx;\n    const block_q8_K  * restrict y = vy;\n\n    const int nb = n / QK_K;\n\n#if defined(__ARM_NEON)\n\n    typedef union {\n        uint16x8_t vec_index;\n        uint16_t   index[8];\n    } vec_index_t;\n\n   static const uint8_t k_mask1[32] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,\n                                       0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03\n   };\n\n    static const uint8_t k_mask2[16] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80,};\n\n    static const int16_t k_shift[8] = {8, 7, 6, 5, 4, 3, 2, 1};\n\n    const ggml_uint8x16x2_t mask1 = ggml_vld1q_u8_x2(k_mask1);\n    const uint8x16_t        mask2 = vld1q_u8(k_mask2);\n\n    const int16x8_t  hshift = vld1q_s16(k_shift);\n    const uint16x8_t m256   = vdupq_n_u16(256);\n    const uint8x16_t m1     = vdupq_n_u8(1);\n\n    uint8x16x2_t vs;\n    ggml_int8x16x4_t q3s;\n    ggml_int8x16x4_t q8b;\n    vec_index_t idx;\n\n    uint32_t scales32[2];\n    const uint8_t * scales8 = (const uint8_t *)scales32;\n\n    float sumf = 0;\n    for (int i = 0; i < nb; ++i) {\n        const float d = GGML_FP16_TO_FP32(x[i].d) * y[i].d;\n        const uint8_t * restrict qs = x[i].qs;\n        const uint8_t * restrict qh = x[i].qh;\n        const uint16_t * restrict signs = (const uint16_t *)x[i].signs;\n        const int8_t   * restrict q8 = y[i].qs;\n\n        memcpy(scales32, x[i].scales, 4);\n        scales32[1] = (((scales32[0] >> 4) & 0x0f0f0f0f) << 1) | 0x01010101;\n        scales32[0] = ((scales32[0] & 0x0f0f0f0f) << 1) | 0x01010101;\n\n        int sumi1 = 0, sumi2 = 0;\n        for (int ib32 = 0; ib32 < QK_K/32; ib32 += 2) {\n            q8b = ggml_vld1q_s8_x4(q8); q8 += 64;\n\n            const uint8x16_t idx_l = vld1q_u8(qs); qs += 16;\n            idx.vec_index = vorrq_u16(vmovl_u8(vget_low_u8 (idx_l)), vandq_u16(vshlq_u16(vdupq_n_u16(qh[ib32+0]), hshift), m256));\n            const uint32x4_t aux32x4_0 = ggml_vld1q_u32(iq3s_grid[idx.index[0]], iq3s_grid[idx.index[1]],\n                                                        iq3s_grid[idx.index[2]], iq3s_grid[idx.index[3]]);\n            const uint32x4_t aux32x4_1 = ggml_vld1q_u32(iq3s_grid[idx.index[4]], iq3s_grid[idx.index[5]],\n                                                        iq3s_grid[idx.index[6]], iq3s_grid[idx.index[7]]);\n            idx.vec_index = vorrq_u16(vmovl_u8(vget_high_u8(idx_l)), vandq_u16(vshlq_u16(vdupq_n_u16(qh[ib32+1]), hshift), m256));\n            const uint32x4_t aux32x4_2 = ggml_vld1q_u32(iq3s_grid[idx.index[0]], iq3s_grid[idx.index[1]],\n                                                        iq3s_grid[idx.index[2]], iq3s_grid[idx.index[3]]);\n            const uint32x4_t aux32x4_3 = ggml_vld1q_u32(iq3s_grid[idx.index[4]], iq3s_grid[idx.index[5]],\n                                                        iq3s_grid[idx.index[6]], iq3s_grid[idx.index[7]]);\n\n\n            vs.val[0] = vreinterpretq_u8_u32(vdupq_n_u32(signs[0] | ((uint32_t) signs[1] << 16)));\n            vs.val[1] = vandq_u8(ggml_vqtbl1q_u8(vs.val[0], mask1.val[1]), mask2);\n            vs.val[0] = vandq_u8(ggml_vqtbl1q_u8(vs.val[0], mask1.val[0]), mask2);\n            vs.val[0] = vorrq_u8(vceqq_u8(vs.val[0], mask2), m1);\n            vs.val[1] = vorrq_u8(vceqq_u8(vs.val[1], mask2), m1);\n\n            q3s.val[0] = vmulq_s8(vreinterpretq_s8_u8(vs.val[0]), vreinterpretq_s8_u32(aux32x4_0));\n            q3s.val[1] = vmulq_s8(vreinterpretq_s8_u8(vs.val[1]), vreinterpretq_s8_u32(aux32x4_1));\n\n            vs.val[0] = vreinterpretq_u8_u32(vdupq_n_u32(signs[2] | ((uint32_t) signs[3] << 16)));\n            vs.val[1] = vandq_u8(ggml_vqtbl1q_u8(vs.val[0], mask1.val[1]), mask2);\n            vs.val[0] = vandq_u8(ggml_vqtbl1q_u8(vs.val[0], mask1.val[0]), mask2);\n            vs.val[0] = vorrq_u8(vceqq_u8(vs.val[0], mask2), m1);\n            vs.val[1] = vorrq_u8(vceqq_u8(vs.val[1], mask2), m1);\n\n            signs += 4;\n\n            q3s.val[2] = vmulq_s8(vreinterpretq_s8_u8(vs.val[0]), vreinterpretq_s8_u32(aux32x4_2));\n            q3s.val[3] = vmulq_s8(vreinterpretq_s8_u8(vs.val[1]), vreinterpretq_s8_u32(aux32x4_3));\n\n            const int32x4_t p1 = ggml_vdotq_s32(ggml_vdotq_s32(vdupq_n_s32(0), q3s.val[0], q8b.val[0]), q3s.val[1], q8b.val[1]);\n            const int32x4_t p2 = ggml_vdotq_s32(ggml_vdotq_s32(vdupq_n_s32(0), q3s.val[2], q8b.val[2]), q3s.val[3], q8b.val[3]);\n\n            sumi1 += vaddvq_s32(p1) * scales8[ib32/2+0];\n            sumi2 += vaddvq_s32(p2) * scales8[ib32/2+4];\n        }\n        sumf += d*(sumi1 + sumi2);\n    }\n    *s = sumf;\n\n#elif defined(__AVX2__)\n\n   static const uint8_t k_mask1[32] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,\n                                       0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03\n   };\n\n    static const uint8_t k_mask2[32] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80,\n                                        0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80,\n    };\n\n    const __m256i mask1 = _mm256_loadu_si256((const __m256i*)k_mask1);\n    const __m256i mask2 = _mm256_loadu_si256((const __m256i*)k_mask2);\n\n    const __m256i idx_shift = _mm256_set_epi32(1, 2, 3, 4, 5, 6, 7, 8);\n    const __m256i idx_mask  = _mm256_set1_epi32(256);\n\n    typedef union {\n        __m256i  vec[2];\n        uint32_t index[16];\n    } index_t;\n\n    index_t idx;\n\n    __m256 accumf = _mm256_setzero_ps();\n    for (int i = 0; i < nb; ++i) {\n        const float d = GGML_FP16_TO_FP32(x[i].d) * y[i].d;\n        const uint8_t * restrict qs = x[i].qs;\n        const uint8_t * restrict qh = x[i].qh;\n        const uint16_t * restrict signs = (const uint16_t *)x[i].signs;\n        const int8_t  * restrict q8 = y[i].qs;\n        __m256i sumi1 = _mm256_setzero_si256();\n        __m256i sumi2 = _mm256_setzero_si256();\n        for (int ib32 = 0; ib32 < QK_K/32; ib32 += 2) {\n            const __m256i q8_1 = _mm256_loadu_si256((const __m256i *)q8); q8 += 32;\n            const __m256i q8_2 = _mm256_loadu_si256((const __m256i *)q8); q8 += 32;\n            const __m256i idx_l = _mm256_cvtepu8_epi16(_mm_loadu_si128((const __m128i *)qs)); qs += 16;\n            idx.vec[0] = _mm256_set1_epi32(qh[ib32+0]);\n            idx.vec[1] = _mm256_set1_epi32(qh[ib32+1]);\n            idx.vec[0] = _mm256_and_si256(_mm256_sllv_epi32(idx.vec[0], idx_shift), idx_mask);\n            idx.vec[1] = _mm256_and_si256(_mm256_sllv_epi32(idx.vec[1], idx_shift), idx_mask);\n            idx.vec[0] = _mm256_or_si256(idx.vec[0], _mm256_cvtepi16_epi32(_mm256_castsi256_si128(idx_l)));\n            idx.vec[1] = _mm256_or_si256(idx.vec[1], _mm256_cvtepi16_epi32(_mm256_extractf128_si256(idx_l, 1)));\n\n            // At leat on my CPU (Ryzen 7950X), using _mm256_i32gather_epi32 is slower than _mm256_set_epi32. Strange.\n            //const __m256i q2_1 = _mm256_i32gather_epi32((const int *)iq3s_grid, idx.vec[0], 4);\n            //const __m256i q2_2 = _mm256_i32gather_epi32((const int *)iq3s_grid, idx.vec[1], 4);\n            const __m256i q2_1 = _mm256_set_epi32(\n                    iq3s_grid[idx.index[7]], iq3s_grid[idx.index[6]], iq3s_grid[idx.index[5]], iq3s_grid[idx.index[4]],\n                    iq3s_grid[idx.index[3]], iq3s_grid[idx.index[2]], iq3s_grid[idx.index[1]], iq3s_grid[idx.index[0]]\n            );\n            const __m256i q2_2 = _mm256_set_epi32(\n                    iq3s_grid[idx.index[15]], iq3s_grid[idx.index[14]], iq3s_grid[idx.index[13]], iq3s_grid[idx.index[12]],\n                    iq3s_grid[idx.index[11]], iq3s_grid[idx.index[10]], iq3s_grid[idx.index[ 9]], iq3s_grid[idx.index[ 8]]\n            );\n\n            __m256i aux256 = _mm256_set1_epi32(signs[0] | (signs[1] << 16));\n            aux256 = _mm256_and_si256(_mm256_shuffle_epi8(aux256,mask1), mask2);\n            const __m256i s2_1 = _mm256_cmpeq_epi8(aux256, mask2);\n            const __m256i q8s_1 = _mm256_sub_epi8(_mm256_xor_si256(s2_1, q8_1), s2_1);\n\n            aux256 = _mm256_set1_epi32(signs[2] | (signs[3] << 16));\n            aux256 = _mm256_and_si256(_mm256_shuffle_epi8(aux256,mask1), mask2);\n            const __m256i s2_2 = _mm256_cmpeq_epi8(aux256, mask2);\n            const __m256i q8s_2 = _mm256_sub_epi8(_mm256_xor_si256(s2_2, q8_2), s2_2);\n\n            signs += 4;\n\n            const __m256i dot1  = _mm256_maddubs_epi16(q2_1, q8s_1);\n            const __m256i dot2  = _mm256_maddubs_epi16(q2_2, q8s_2);\n            const uint16_t ls1 = x[i].scales[ib32/2] & 0xf;\n            const uint16_t ls2 = x[i].scales[ib32/2] >>  4;\n            const __m256i p1 = _mm256_madd_epi16(dot1, _mm256_set1_epi16(2*ls1+1));\n            const __m256i p2 = _mm256_madd_epi16(dot2, _mm256_set1_epi16(2*ls2+1));\n            sumi1 = _mm256_add_epi32(sumi1, p1);\n            sumi2 = _mm256_add_epi32(sumi2, p2);\n        }\n\n        accumf = _mm256_fmadd_ps(_mm256_set1_ps(d), _mm256_cvtepi32_ps(_mm256_add_epi32(sumi1, sumi2)), accumf);\n\n    }\n\n    *s = hsum_float_8(accumf);\n\n#elif defined(__AVX__)\n   static const uint8_t k_mask1[32] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,\n                                       0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03\n   };\n\n    static const uint8_t k_mask2[32] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80,\n                                        0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80,\n    };\n\n    const __m128i mask1_0 = _mm_loadu_si128((const __m128i*)k_mask1);\n    const __m128i mask1_1 = _mm_loadu_si128((const __m128i*)k_mask1 + 1);\n    const __m128i mask2_0 = _mm_loadu_si128((const __m128i*)k_mask2);\n    const __m128i mask2_1 = _mm_loadu_si128((const __m128i*)k_mask2 + 1);\n\n    const __m128i idx_mul_0 = _mm_set_epi32(32, 64, 128, 256);\n    const __m128i idx_mul_1 = _mm_set_epi32(2, 4, 8, 16);\n    const __m128i idx_mask  = _mm_set1_epi32(256);\n\n    typedef union {\n        __m128i  vec[4];\n        uint32_t index[16];\n    } index_t;\n\n    index_t idx;\n\n    __m256 accumf = _mm256_setzero_ps();\n    for (int i = 0; i < nb; ++i) {\n        const float d = GGML_FP16_TO_FP32(x[i].d) * y[i].d;\n        const uint8_t * restrict qs = x[i].qs;\n        const uint8_t * restrict qh = x[i].qh;\n        const uint16_t * restrict signs = (const uint16_t *)x[i].signs;\n        const int8_t  * restrict q8 = y[i].qs;\n        __m128i sumi1_0 = _mm_setzero_si128();\n        __m128i sumi1_1 = _mm_setzero_si128();\n        __m128i sumi2_0 = _mm_setzero_si128();\n        __m128i sumi2_1 = _mm_setzero_si128();\n        for (int ib32 = 0; ib32 < QK_K/32; ib32 += 2) {\n            const __m128i q8_1_0 = _mm_loadu_si128((const __m128i *)q8); q8 += 16;\n            const __m128i q8_1_1 = _mm_loadu_si128((const __m128i *)q8); q8 += 16;\n            const __m128i q8_2_0 = _mm_loadu_si128((const __m128i *)q8); q8 += 16;\n            const __m128i q8_2_1 = _mm_loadu_si128((const __m128i *)q8); q8 += 16;\n            const __m128i qs_tmp = _mm_loadu_si128((const __m128i *)qs);\n            const __m128i idx_l_0 = _mm_cvtepu8_epi16(qs_tmp);\n            const __m128i idx_l_1 = _mm_cvtepu8_epi16(_mm_srli_si128(qs_tmp, 8)); qs += 16;\n            idx.vec[0] = _mm_set1_epi32(qh[ib32+0]);\n            idx.vec[1] = idx.vec[0];\n            idx.vec[2] = _mm_set1_epi32(qh[ib32+1]);\n            idx.vec[3] = idx.vec[2];\n\n            idx.vec[0] = _mm_and_si128(_mm_mullo_epi32(idx.vec[0], idx_mul_0), idx_mask);\n            idx.vec[1] = _mm_and_si128(_mm_mullo_epi32(idx.vec[1], idx_mul_1), idx_mask);\n            idx.vec[2] = _mm_and_si128(_mm_mullo_epi32(idx.vec[2], idx_mul_0), idx_mask);\n            idx.vec[3] = _mm_and_si128(_mm_mullo_epi32(idx.vec[3], idx_mul_1), idx_mask);\n\n            idx.vec[0] = _mm_or_si128(idx.vec[0], _mm_cvtepi16_epi32(idx_l_0));\n            idx.vec[1] = _mm_or_si128(idx.vec[1], _mm_cvtepi16_epi32(_mm_srli_si128(idx_l_0, 8)));\n            idx.vec[2] = _mm_or_si128(idx.vec[2], _mm_cvtepi16_epi32(idx_l_1));\n            idx.vec[3] = _mm_or_si128(idx.vec[3], _mm_cvtepi16_epi32(_mm_srli_si128(idx_l_1, 8)));\n\n            const __m128i q2_1_0 = _mm_set_epi32(iq3s_grid[idx.index[3]], iq3s_grid[idx.index[2]], iq3s_grid[idx.index[1]], iq3s_grid[idx.index[0]]);\n            const __m128i q2_1_1 = _mm_set_epi32(iq3s_grid[idx.index[7]], iq3s_grid[idx.index[6]], iq3s_grid[idx.index[5]], iq3s_grid[idx.index[4]]);\n            const __m128i q2_2_0 = _mm_set_epi32(iq3s_grid[idx.index[11]], iq3s_grid[idx.index[10]], iq3s_grid[idx.index[9]], iq3s_grid[idx.index[8]]);\n            const __m128i q2_2_1 = _mm_set_epi32(iq3s_grid[idx.index[15]], iq3s_grid[idx.index[14]], iq3s_grid[idx.index[13]], iq3s_grid[idx.index[12]]);\n\n            __m128i aux128_0 = _mm_set1_epi32(signs[0] | (signs[1] << 16));\n            __m128i aux128_1 = aux128_0;\n            aux128_0 = _mm_and_si128(_mm_shuffle_epi8(aux128_0,mask1_0), mask2_0);\n            aux128_1 = _mm_and_si128(_mm_shuffle_epi8(aux128_1,mask1_1), mask2_1);\n            const __m128i s2_1_0 = _mm_cmpeq_epi8(aux128_0, mask2_0);\n            const __m128i s2_1_1 = _mm_cmpeq_epi8(aux128_1, mask2_1);\n            const __m128i q8s_1_0 = _mm_sub_epi8(_mm_xor_si128(s2_1_0, q8_1_0), s2_1_0);\n            const __m128i q8s_1_1 = _mm_sub_epi8(_mm_xor_si128(s2_1_1, q8_1_1), s2_1_1);\n\n            aux128_0 = _mm_set1_epi32(signs[2] | (signs[3] << 16));\n            aux128_1 = aux128_0;\n            aux128_0 = _mm_and_si128(_mm_shuffle_epi8(aux128_0,mask1_0), mask2_0);\n            aux128_1 = _mm_and_si128(_mm_shuffle_epi8(aux128_1,mask1_1), mask2_1);\n            const __m128i s2_2_0 = _mm_cmpeq_epi8(aux128_0, mask2_0);\n            const __m128i s2_2_1 = _mm_cmpeq_epi8(aux128_1, mask2_1);\n            const __m128i q8s_2_0 = _mm_sub_epi8(_mm_xor_si128(s2_2_0, q8_2_0), s2_2_0);\n            const __m128i q8s_2_1 = _mm_sub_epi8(_mm_xor_si128(s2_2_1, q8_2_1), s2_2_1);\n\n            signs += 4;\n\n            const __m128i dot1_0  = _mm_maddubs_epi16(q2_1_0, q8s_1_0);\n            const __m128i dot1_1  = _mm_maddubs_epi16(q2_1_1, q8s_1_1);\n            const __m128i dot2_0  = _mm_maddubs_epi16(q2_2_0, q8s_2_0);\n            const __m128i dot2_1  = _mm_maddubs_epi16(q2_2_1, q8s_2_1);\n            const uint16_t ls1 = x[i].scales[ib32/2] & 0xf;\n            const uint16_t ls2 = x[i].scales[ib32/2] >>  4;\n            const __m128i p1_0 = _mm_madd_epi16(dot1_0, _mm_set1_epi16(2*ls1+1));\n            const __m128i p1_1 = _mm_madd_epi16(dot1_1, _mm_set1_epi16(2*ls1+1));\n            const __m128i p2_0 = _mm_madd_epi16(dot2_0, _mm_set1_epi16(2*ls2+1));\n            const __m128i p2_1 = _mm_madd_epi16(dot2_1, _mm_set1_epi16(2*ls2+1));\n            sumi1_0 = _mm_add_epi32(sumi1_0, p1_0);\n            sumi1_1 = _mm_add_epi32(sumi1_1, p1_1);\n            sumi2_0 = _mm_add_epi32(sumi2_0, p2_0);\n            sumi2_1 = _mm_add_epi32(sumi2_1, p2_1);\n        }\n\n        accumf = _mm256_add_ps(_mm256_mul_ps(_mm256_set1_ps(d), _mm256_cvtepi32_ps(MM256_SET_M128I(_mm_add_epi32(sumi1_1, sumi2_1), _mm_add_epi32(sumi1_0, sumi2_0)))), accumf);\n\n    }\n\n    *s = hsum_float_8(accumf);\n\n#elif defined(__POWER9_VECTOR__)\n    static const uint8_t k_mask1[32] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,\n                                        0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03\n    };\n\n    static const uint8_t k_mask2[16] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80,};\n\n    const vector int v0 = vec_splats((int32_t)0);\n\n    vector float vsumf0 = vec_splats(0.0f);\n    vector float vsumf1 = vec_splats(0.0f);\n    vector float vsumf2 = vec_splats(0.0f);\n    vector float vsumf3 = vec_splats(0.0f);\n\n    const vector unsigned char mask0 = vec_xl( 0, k_mask1);\n    const vector unsigned char mask1 = vec_xl(16, k_mask1);\n    const vector signed char mask2 = (vector signed char)vec_xl( 0, k_mask2);\n\n    for (int i = 0; i < nb; ++i) {\n        vector float vxd = vec_splats(GGML_FP16_TO_FP32(x[i].d));\n        vector float vyd = vec_splats(y[i].d);\n        vector float vd = vec_mul(vxd, vyd);\n\n        const uint8_t *  restrict q3 = x[i].qs;\n        const uint8_t *  restrict qh = x[i].qh;\n        const uint16_t * restrict signs = (const uint16_t *)(x[i].signs);\n        const uint8_t *  restrict sc = x[i].scales;\n        const int8_t  *  restrict q8 = y[i].qs;\n\n        vector signed int vsumi0 = v0;\n        vector signed int vsumi1 = v0;\n        vector signed int vsumi2 = v0;\n        vector signed int vsumi3 = v0;\n\n        for (int j = 0; j < QK_K/32; j += 2) {\n            __builtin_prefetch(q3, 0, 1);\n            __builtin_prefetch(q8, 0, 1);\n\n            vector unsigned int aux32x4_0 = {iq3s_grid[q3[ 0] | ((qh[0] << 8) & 256)], iq3s_grid[q3[ 1] | ((qh[0] << 7) & 256)],\n                                             iq3s_grid[q3[ 2] | ((qh[0] << 6) & 256)], iq3s_grid[q3[ 3] | ((qh[0] << 5) & 256)]};\n            vector unsigned int aux32x4_1 = {iq3s_grid[q3[ 4] | ((qh[0] << 4) & 256)], iq3s_grid[q3[ 5] | ((qh[0] << 3) & 256)],\n                                             iq3s_grid[q3[ 6] | ((qh[0] << 2) & 256)], iq3s_grid[q3[ 7] | ((qh[0] << 1) & 256)]};\n            vector unsigned int aux32x4_2 = {iq3s_grid[q3[ 8] | ((qh[1] << 8) & 256)], iq3s_grid[q3[ 9] | ((qh[1] << 7) & 256)],\n                                             iq3s_grid[q3[10] | ((qh[1] << 6) & 256)], iq3s_grid[q3[11] | ((qh[1] << 5) & 256)]};\n            vector unsigned int aux32x4_3 = {iq3s_grid[q3[12] | ((qh[1] << 4) & 256)], iq3s_grid[q3[13] | ((qh[1] << 3) & 256)],\n                                             iq3s_grid[q3[14] | ((qh[1] << 2) & 256)], iq3s_grid[q3[15] | ((qh[1] << 1) & 256)]};\n            q3 += 16;\n            qh += 2;\n\n            vector signed char vsigns01 = (vector signed char)vec_splats(*(const uint32_t *)&signs[0]);\n            vector signed char vsigns02 = (vector signed char)vec_splats(*(const uint32_t *)&signs[2]);\n            signs += 4;\n\n            vector signed char vsigns0 = vec_perm(vsigns01, vsigns01, mask0);\n            vector signed char vsigns1 = vec_perm(vsigns01, vsigns01, mask1);\n            vector signed char vsigns2 = vec_perm(vsigns02, vsigns02, mask0);\n            vector signed char vsigns3 = vec_perm(vsigns02, vsigns02, mask1);\n\n            vsigns0 = (vector signed char)vec_cmpeq(vec_and(vsigns0, mask2), mask2);\n            vsigns1 = (vector signed char)vec_cmpeq(vec_and(vsigns1, mask2), mask2);\n            vsigns2 = (vector signed char)vec_cmpeq(vec_and(vsigns2, mask2), mask2);\n            vsigns3 = (vector signed char)vec_cmpeq(vec_and(vsigns3, mask2), mask2);\n\n            vector signed char q3x0 = vec_sub(vec_xor(vsigns0, (vector signed char)aux32x4_0), vsigns0);\n            vector signed char q3x1 = vec_sub(vec_xor(vsigns1, (vector signed char)aux32x4_1), vsigns1);\n            vector signed char q3x2 = vec_sub(vec_xor(vsigns2, (vector signed char)aux32x4_2), vsigns2);\n            vector signed char q3x3 = vec_sub(vec_xor(vsigns3, (vector signed char)aux32x4_3), vsigns3);\n\n            vector signed char q8y0 = vec_xl( 0, q8);\n            vector signed char q8y1 = vec_xl(16, q8);\n            vector signed char q8y2 = vec_xl(32, q8);\n            vector signed char q8y3 = vec_xl(48, q8);\n            q8 += 64;\n\n            vector signed short qv0 = vec_add(vec_mule(q3x0, q8y0), vec_mulo(q3x0, q8y0));\n            vector signed short qv1 = vec_add(vec_mule(q3x1, q8y1), vec_mulo(q3x1, q8y1));\n            vector signed short qv2 = vec_add(vec_mule(q3x2, q8y2), vec_mulo(q3x2, q8y2));\n            vector signed short qv3 = vec_add(vec_mule(q3x3, q8y3), vec_mulo(q3x3, q8y3));\n\n            const uint16_t ls0 = (uint16_t)(sc[0] & 0xf);\n            const uint16_t ls1 = (uint16_t)(sc[0] >>  4);\n            sc ++;\n\n            vector signed short vscales01 = (vector signed short)vec_splats((uint16_t)(2*ls0+1));\n            vector signed short vscales23 = (vector signed short)vec_splats((uint16_t)(2*ls1+1));\n\n            vsumi0 = vec_msum(qv0, vscales01, vsumi0);\n            vsumi1 = vec_msum(qv1, vscales01, vsumi1);\n            vsumi2 = vec_msum(qv2, vscales23, vsumi2);\n            vsumi3 = vec_msum(qv3, vscales23, vsumi3);\n        }\n\n        vsumf0 = vec_madd(vec_ctf(vsumi0, 0), vd, vsumf0);\n        vsumf1 = vec_madd(vec_ctf(vsumi1, 0), vd, vsumf1);\n        vsumf2 = vec_madd(vec_ctf(vsumi2, 0), vd, vsumf2);\n        vsumf3 = vec_madd(vec_ctf(vsumi3, 0), vd, vsumf3);\n    }\n\n    vsumf0 = vec_add(vsumf0, vsumf2);\n    vsumf1 = vec_add(vsumf1, vsumf3);\n\n    vsumf0 = vec_add(vsumf0, vsumf1);\n\n    vsumf0 = vec_add(vsumf0, vec_sld(vsumf0, vsumf0, 4));\n    vsumf0 = vec_add(vsumf0, vec_sld(vsumf0, vsumf0, 8));\n\n    *s = vec_extract(vsumf0, 0);\n\n#elif defined(__loongarch_asx)\n\n   static const uint8_t k_mask1[32] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,\n                                       0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03\n   };\n\n    static const uint8_t k_mask2[32] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80,\n                                        0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80,\n    };\n\n    const __m256i mask1 = __lasx_xvld((const __m256i*)k_mask1, 0);\n    const __m256i mask2 = __lasx_xvld((const __m256i*)k_mask2, 0);\n\n    __m256i idx_shift = lasx_set_w(1, 2, 3, 4, 5, 6, 7, 8);\n    const __m256i idx_mask  = __lasx_xvreplgr2vr_w(256);\n\n    typedef union {\n        __m256i  vec[2];\n        uint32_t index[16];\n    } index_t;\n\n    index_t idx;\n\n    __m256 accumf = (__m256)__lasx_xvldi(0);\n    for (int i = 0; i < nb; ++i) {\n        const float d = GGML_FP16_TO_FP32(x[i].d) * y[i].d;\n        const uint8_t * restrict qs = x[i].qs;\n        const uint8_t * restrict qh = x[i].qh;\n        const uint16_t * restrict signs = (const uint16_t *)x[i].signs;\n        const int8_t  * restrict q8 = y[i].qs;\n        __m256i sumi1 = __lasx_xvldi(0);\n        __m256i sumi2 = __lasx_xvldi(0);\n        for (int ib32 = 0; ib32 < QK_K/32; ib32 += 2) {\n            const __m256i q8_1 = __lasx_xvld((const __m256i *)q8, 0); q8 += 32;\n            const __m256i q8_2 = __lasx_xvld((const __m256i *)q8, 0); q8 += 32;\n            const __m256i idx_l = lasx_extu8_16(__lsx_vld(qs, 0)); qs += 16;\n            idx.vec[0] = __lasx_xvreplgr2vr_w(qh[ib32+0]);\n            idx.vec[1] = __lasx_xvreplgr2vr_w(qh[ib32+1]);\n            idx.vec[0] = __lasx_xvand_v(__lasx_xvsll_w(idx.vec[0], idx_shift), idx_mask);\n            idx.vec[1] = __lasx_xvand_v(__lasx_xvsll_w(idx.vec[1], idx_shift), idx_mask);\n            idx.vec[0] = __lasx_xvor_v(idx.vec[0], lasx_ext16_32(lasx_extracti128(idx_l, 0)));\n            idx.vec[1] = __lasx_xvor_v(idx.vec[1], lasx_ext16_32(lasx_extracti128(idx_l, 1)));\n\n            // At leat on my CPU (Ryzen 7950X), using _mm256_i32gather_epi32 is slower than _mm256_set_epi32. Strange.\n            //const __m256i q2_1 = _mm256_i32gather_epi32((const int *)iq3s_grid, idx.vec[0], 4);\n            //const __m256i q2_2 = _mm256_i32gather_epi32((const int *)iq3s_grid, idx.vec[1], 4);\n            const __m256i q2_1 = lasx_set_w(\n                    iq3s_grid[idx.index[7]], iq3s_grid[idx.index[6]], iq3s_grid[idx.index[5]], iq3s_grid[idx.index[4]],\n                    iq3s_grid[idx.index[3]], iq3s_grid[idx.index[2]], iq3s_grid[idx.index[1]], iq3s_grid[idx.index[0]]\n            );\n            const __m256i q2_2 = lasx_set_w(\n                    iq3s_grid[idx.index[15]], iq3s_grid[idx.index[14]], iq3s_grid[idx.index[13]], iq3s_grid[idx.index[12]],\n                    iq3s_grid[idx.index[11]], iq3s_grid[idx.index[10]], iq3s_grid[idx.index[ 9]], iq3s_grid[idx.index[ 8]]\n            );\n\n            __m256i aux256 = __lasx_xvreplgr2vr_w(signs[0] | (signs[1] << 16));\n            aux256 = __lasx_xvand_v(lasx_shuffle_b(aux256,mask1), mask2);\n            const __m256i s2_1 = __lasx_xvseq_b(aux256, mask2);\n            const __m256i q8s_1 = __lasx_xvsub_b(__lasx_xvxor_v(s2_1, q8_1), s2_1);\n\n            aux256 = __lasx_xvreplgr2vr_w(signs[2] | (signs[3] << 16));\n            aux256 = __lasx_xvand_v(lasx_shuffle_b(aux256,mask1), mask2);\n            const __m256i s2_2 = __lasx_xvseq_b(aux256, mask2);\n            const __m256i q8s_2 = __lasx_xvsub_b(__lasx_xvxor_v(s2_2, q8_2), s2_2);\n\n            signs += 4;\n\n            const __m256i dot1 = lasx_maddubs_h(q2_1, q8s_1);\n            const __m256i dot2  = lasx_maddubs_h(q2_2, q8s_2);\n            const uint16_t ls1 = x[i].scales[ib32/2] & 0xf;\n            const uint16_t ls2 = x[i].scales[ib32/2] >>  4;\n            const __m256i p1 = lasx_madd_h(dot1, __lasx_xvreplgr2vr_h(2*ls1+1));\n            const __m256i p2 = lasx_madd_h(dot2, __lasx_xvreplgr2vr_h(2*ls2+1));\n            sumi1 = __lasx_xvadd_w(sumi1, p1);\n            sumi2 = __lasx_xvadd_w(sumi2, p2);\n        }\n\n        accumf = __lasx_xvfmadd_s(__lasx_xvreplfr2vr_s(d), __lasx_xvffint_s_w(__lasx_xvadd_w(sumi1, sumi2)), accumf);\n    }\n\n    *s = hsum_float_8(accumf);\n\n#else\n\n    float sumf = 0.f;\n    for (int i = 0; i < nb; ++i) {\n        const float d = GGML_FP16_TO_FP32(x[i].d) * y[i].d;\n        const uint8_t * restrict qs = x[i].qs;\n        const uint8_t * restrict qh = x[i].qh;\n        const uint8_t * restrict signs = x[i].signs;\n        const int8_t  * restrict q8 = y[i].qs;\n        int32_t bsum = 0;\n        for (int ib32 = 0; ib32 < QK_K/32; ib32 += 2) {\n            const uint32_t ls1 = 2*(x[i].scales[ib32/2] & 0xf) + 1;\n            const uint32_t ls2 = 2*(x[i].scales[ib32/2] >>  4) + 1;\n            int32_t sumi = 0;\n            for (int l = 0; l < 4; ++l) {\n                const uint8_t * grid1 = (const uint8_t *)(iq3s_grid + (qs[2*l+0] | ((qh[ib32+0] << (8-2*l)) & 256)));\n                const uint8_t * grid2 = (const uint8_t *)(iq3s_grid + (qs[2*l+1] | ((qh[ib32+0] << (7-2*l)) & 256)));\n                for (int j = 0; j < 4; ++j) {\n                    sumi += grid1[j] * q8[j+0] * (signs[l] & kmask_iq2xs[j+0] ? -1 : 1);\n                    sumi += grid2[j] * q8[j+4] * (signs[l] & kmask_iq2xs[j+4] ? -1 : 1);\n                }\n                q8 += 8;\n            }\n            qs += 8;\n            signs += 4;\n            bsum += sumi * ls1;\n            sumi = 0;\n            for (int l = 0; l < 4; ++l) {\n                const uint8_t * grid1 = (const uint8_t *)(iq3s_grid + (qs[2*l+0] | ((qh[ib32+1] << (8-2*l)) & 256)));\n                const uint8_t * grid2 = (const uint8_t *)(iq3s_grid + (qs[2*l+1] | ((qh[ib32+1] << (7-2*l)) & 256)));\n                for (int j = 0; j < 4; ++j) {\n                    sumi += grid1[j] * q8[j+0] * (signs[l] & kmask_iq2xs[j+0] ? -1 : 1);\n                    sumi += grid2[j] * q8[j+4] * (signs[l] & kmask_iq2xs[j+4] ? -1 : 1);\n                }\n                q8 += 8;\n            }\n            qs += 8;\n            signs += 4;\n            bsum += sumi * ls2;\n        }\n        sumf += d * bsum;\n    }\n    *s = sumf;\n#endif\n}\n\n#if defined(__AVX2__)\nstatic inline __m256i mul_add_epi8(const __m256i x, const __m256i y) {\n    const __m256i ax = _mm256_sign_epi8(x, x);\n    const __m256i sy = _mm256_sign_epi8(y, x);\n    return _mm256_maddubs_epi16(ax, sy);\n}\n#elif defined(__loongarch_asx)\nstatic inline __m256i mul_add_epi8(const __m256i x, const __m256i y) {\n    const __m256i ax = __lasx_xvsigncov_b(x, x);\n    const __m256i sy = __lasx_xvsigncov_b(x, y);\n    __m256i tmp1, tmp2, tmp3;\n    tmp1 = __lasx_xvmulwev_h_bu_b(ax, sy);\n    tmp2 = __lasx_xvmulwod_h_bu_b(ax, sy);\n    tmp3 = __lasx_xvadd_h(tmp1, tmp2);\n    return __lasx_xvsat_h(tmp3, 15);\n}\n#endif\n\nvoid ggml_vec_dot_iq1_s_q8_K  (int n, float * restrict s, size_t bs, const void * restrict vx, size_t bx, const void * restrict vy, size_t by, int nrc) {\n    assert(n % QK_K == 0);\n    assert(nrc == 1);\n    UNUSED(nrc);\n    UNUSED(bx);\n    UNUSED(by);\n    UNUSED(bs);\n\n    const block_iq1_s * restrict x = vx;\n    const block_q8_K  * restrict y = vy;\n\n    const int nb = n / QK_K;\n\n#if defined __ARM_NEON\n\n    ggml_int8x16x4_t q1b;\n    ggml_int8x16x4_t q8b;\n\n    float sumf = 0;\n    for (int i = 0; i < nb; ++i) {\n\n        const int8_t   * q8 = y[i].qs;\n        const uint8_t  * qs = x[i].qs;\n        const uint16_t * qh = x[i].qh;\n\n        int sumi1 = 0, sumi2 = 0, sumi3 = 0;\n\n        for (int ib = 0; ib < QK_K/32; ib += 2) {\n\n            q1b.val[0] = vcombine_s8(vld1_s8((const int8_t *)(iq1s_grid + (qs[0] | ((qh[ib+0] << 8) & 0x700)))),\n                                     vld1_s8((const int8_t *)(iq1s_grid + (qs[1] | ((qh[ib+0] << 5) & 0x700)))));\n            q1b.val[1] = vcombine_s8(vld1_s8((const int8_t *)(iq1s_grid + (qs[2] | ((qh[ib+0] << 2) & 0x700)))),\n                                     vld1_s8((const int8_t *)(iq1s_grid + (qs[3] | ((qh[ib+0] >> 1) & 0x700)))));\n            q1b.val[2] = vcombine_s8(vld1_s8((const int8_t *)(iq1s_grid + (qs[4] | ((qh[ib+1] << 8) & 0x700)))),\n                                     vld1_s8((const int8_t *)(iq1s_grid + (qs[5] | ((qh[ib+1] << 5) & 0x700)))));\n            q1b.val[3] = vcombine_s8(vld1_s8((const int8_t *)(iq1s_grid + (qs[6] | ((qh[ib+1] << 2) & 0x700)))),\n                                     vld1_s8((const int8_t *)(iq1s_grid + (qs[7] | ((qh[ib+1] >> 1) & 0x700)))));\n            qs += 8;\n\n            q8b = ggml_vld1q_s8_x4(q8); q8 += 64;\n\n            const int32x4_t p1 = ggml_vdotq_s32(ggml_vdotq_s32(vdupq_n_s32(0), q1b.val[0], q8b.val[0]), q1b.val[1], q8b.val[1]);\n            const int32x4_t p2 = ggml_vdotq_s32(ggml_vdotq_s32(vdupq_n_s32(0), q1b.val[2], q8b.val[2]), q1b.val[3], q8b.val[3]);\n\n            const int ls1 = 2*((qh[ib+0] >> 12) & 7) + 1;\n            const int ls2 = 2*((qh[ib+1] >> 12) & 7) + 1;\n            sumi1 += vaddvq_s32(p1) * ls1;\n            sumi2 += vaddvq_s32(p2) * ls2;\n            sumi3 += (y[i].bsums[2*ib+0] + y[i].bsums[2*ib+1]) * ls1 * (qh[ib+0] & 0x8000 ? -1 : 1)\n                   + (y[i].bsums[2*ib+2] + y[i].bsums[2*ib+3]) * ls2 * (qh[ib+1] & 0x8000 ? -1 : 1);\n\n        }\n\n        sumf += y[i].d * GGML_FP16_TO_FP32(x[i].d) * (sumi1 + sumi2 + IQ1S_DELTA * sumi3);\n    }\n\n    *s = sumf;\n\n#elif defined __AVX2__\n\n    __m256 accum = _mm256_setzero_ps();\n    float accum1 = 0;\n    for (int i = 0; i < nb; ++i) {\n\n        const int8_t   * q8 = y[i].qs;\n        const uint8_t  * qs = x[i].qs;\n        const uint16_t * qh = x[i].qh;\n\n        __m256i sumi = _mm256_setzero_si256();\n        int sumi1 = 0;\n        for (int ib = 0; ib < QK_K/32; ib += 2) {\n            const __m256i q1b_1 = _mm256_set_epi64x(iq1s_grid[qs[3] | ((qh[ib+0] >> 1) & 0x700)], iq1s_grid[qs[2] | ((qh[ib+0] << 2) & 0x700)],\n                                                    iq1s_grid[qs[1] | ((qh[ib+0] << 5) & 0x700)], iq1s_grid[qs[0] | ((qh[ib+0] << 8) & 0x700)]);\n            const __m256i q1b_2 = _mm256_set_epi64x(iq1s_grid[qs[7] | ((qh[ib+1] >> 1) & 0x700)], iq1s_grid[qs[6] | ((qh[ib+1] << 2) & 0x700)],\n                                                    iq1s_grid[qs[5] | ((qh[ib+1] << 5) & 0x700)], iq1s_grid[qs[4] | ((qh[ib+1] << 8) & 0x700)]);\n            qs += 8;\n            const __m256i q8b_1 = _mm256_loadu_si256((const __m256i*)q8); q8 += 32;\n            const __m256i q8b_2 = _mm256_loadu_si256((const __m256i*)q8); q8 += 32;\n\n            const __m256i dot1 = mul_add_epi8(q1b_1, q8b_1);\n            const __m256i dot2 = mul_add_epi8(q1b_2, q8b_2);\n            const int16_t ls1 = 2*((qh[ib+0] >> 12) & 7) + 1;\n            const int16_t ls2 = 2*((qh[ib+1] >> 12) & 7) + 1;\n            const __m256i p1 = _mm256_madd_epi16(dot1, _mm256_set1_epi16(ls1));\n            const __m256i p2 = _mm256_madd_epi16(dot2, _mm256_set1_epi16(ls2));\n\n            sumi = _mm256_add_epi32(sumi, _mm256_add_epi32(p1, p2));\n            sumi1 += (y[i].bsums[2*ib+0] + y[i].bsums[2*ib+1]) * (qh[ib+0] & 0x8000 ? -1 : 1) * ls1\n                   + (y[i].bsums[2*ib+2] + y[i].bsums[2*ib+3]) * (qh[ib+1] & 0x8000 ? -1 : 1) * ls2;\n        }\n\n        const float d = y[i].d * GGML_FP16_TO_FP32(x[i].d);\n        accum = _mm256_fmadd_ps(_mm256_set1_ps(d), _mm256_cvtepi32_ps(sumi), accum);\n        accum1 += d * sumi1;\n\n    }\n\n    *s = hsum_float_8(accum) + IQ1S_DELTA * accum1;\n\n#elif defined __AVX__\n    __m256 accum = _mm256_setzero_ps();\n    float accum1 = 0;\n    for (int i = 0; i < nb; ++i) {\n\n        const int8_t   * q8 = y[i].qs;\n        const uint8_t  * qs = x[i].qs;\n        const uint16_t * qh = x[i].qh;\n\n        __m128i sumi1_0 = _mm_setzero_si128();\n        __m128i sumi1_1 = _mm_setzero_si128();\n        int sumi1 = 0;\n        for (int ib = 0; ib < QK_K/32; ib += 2) {\n            const __m128i q1b_1_0 = _mm_set_epi64x(iq1s_grid[qs[1] | ((qh[ib+0] << 5) & 0x700)], iq1s_grid[qs[0] | ((qh[ib+0] << 8) & 0x700)]);\n            const __m128i q1b_1_1 = _mm_set_epi64x(iq1s_grid[qs[3] | ((qh[ib+0] >> 1) & 0x700)], iq1s_grid[qs[2] | ((qh[ib+0] << 2) & 0x700)]);\n            const __m128i q1b_2_0 = _mm_set_epi64x(iq1s_grid[qs[5] | ((qh[ib+1] << 5) & 0x700)], iq1s_grid[qs[4] | ((qh[ib+1] << 8) & 0x700)]);\n            const __m128i q1b_2_1 = _mm_set_epi64x(iq1s_grid[qs[7] | ((qh[ib+1] >> 1) & 0x700)], iq1s_grid[qs[6] | ((qh[ib+1] << 2) & 0x700)]);\n            qs += 8;\n            const __m128i q8b_1_0 = _mm_loadu_si128((const __m128i *)q8); q8 += 16;\n            const __m128i q8b_1_1 = _mm_loadu_si128((const __m128i *)q8); q8 += 16;\n            const __m128i q8b_2_0 = _mm_loadu_si128((const __m128i *)q8); q8 += 16;\n            const __m128i q8b_2_1 = _mm_loadu_si128((const __m128i *)q8); q8 += 16;\n\n            const __m128i dot1_0 = mul_add_epi8_sse(q1b_1_0, q8b_1_0);\n            const __m128i dot1_1 = mul_add_epi8_sse(q1b_1_1, q8b_1_1);\n            const __m128i dot2_0 = mul_add_epi8_sse(q1b_2_0, q8b_2_0);\n            const __m128i dot2_1 = mul_add_epi8_sse(q1b_2_1, q8b_2_1);\n            const int16_t ls1 = 2*((qh[ib+0] >> 12) & 7) + 1;\n            const int16_t ls2 = 2*((qh[ib+1] >> 12) & 7) + 1;\n            const __m128i p1_0 = _mm_madd_epi16(dot1_0, _mm_set1_epi16(ls1));\n            const __m128i p1_1 = _mm_madd_epi16(dot1_1, _mm_set1_epi16(ls1));\n            const __m128i p2_0 = _mm_madd_epi16(dot2_0, _mm_set1_epi16(ls2));\n            const __m128i p2_1 = _mm_madd_epi16(dot2_1, _mm_set1_epi16(ls2));\n\n            sumi1_0 = _mm_add_epi32(sumi1_0, _mm_add_epi32(p1_0, p2_0));\n            sumi1_1 = _mm_add_epi32(sumi1_1, _mm_add_epi32(p1_1, p2_1));\n            sumi1 += (y[i].bsums[2*ib+0] + y[i].bsums[2*ib+1]) * (qh[ib+0] & 0x8000 ? -1 : 1) * ls1\n                   + (y[i].bsums[2*ib+2] + y[i].bsums[2*ib+3]) * (qh[ib+1] & 0x8000 ? -1 : 1) * ls2;\n        }\n\n        const float d = y[i].d * GGML_FP16_TO_FP32(x[i].d);\n        accum = _mm256_add_ps(_mm256_mul_ps(_mm256_set1_ps(d), _mm256_cvtepi32_ps(MM256_SET_M128I(sumi1_1, sumi1_0))), accum);\n        accum1 += d * sumi1;\n\n    }\n\n    *s = hsum_float_8(accum) + IQ1S_DELTA * accum1;\n\n#elif defined(__POWER9_VECTOR__)\n    const vector unsigned char v0 = vec_splats((unsigned char)0x0);\n    const vector unsigned short vsign = vec_splats((unsigned short)0x8000);\n\n    vector float vsumf0 = vec_splats(0.0f);\n    vector float vsumf1 = vec_splats(0.0f);\n    vector float vsumf2 = vec_splats(0.0f);\n    vector float vsumf3 = vec_splats(0.0f);\n\n    for (int i = 0; i < nb; ++i) {\n        vector float vxd = vec_splats(GGML_FP16_TO_FP32(x[i].d));\n        vector float vyd = vec_splats(y[i].d);\n        vector float vd = vec_mul(vxd, vyd);\n\n        vector signed int vsumi0 = vec_splats((int32_t)0);\n        vector signed int vsumi1 = vec_splats((int32_t)0);\n        vector signed int vsumi2 = vec_splats((int32_t)0);\n        vector signed int vsumi3 = vec_splats((int32_t)0);\n        vector signed int vsumi8 = vec_splats((int32_t)0);\n\n        const uint8_t  * restrict q1 = x[i].qs;\n        const uint16_t * restrict qh = x[i].qh;\n        const int8_t   * restrict q8 = y[i].qs;\n        const int16_t  * restrict qs = y[i].bsums;\n\n        for (int j = 0; j < QK_K/32; j += 2) {\n            __builtin_prefetch(q1, 0, 1);\n            __builtin_prefetch(qh, 0, 1);\n            __builtin_prefetch(q8, 0, 1);\n\n            vector signed long long aux64x2_0 = {*(const int64_t *)(iq1s_grid + (q1[0] | ((qh[0] << 8) & 0x700))), *(const int64_t *)(iq1s_grid + (q1[1] | ((qh[0] << 5) & 0x700)))};\n            vector signed long long aux64x2_1 = {*(const int64_t *)(iq1s_grid + (q1[2] | ((qh[0] << 2) & 0x700))), *(const int64_t *)(iq1s_grid + (q1[3] | ((qh[0] >> 1) & 0x700)))};\n            vector signed long long aux64x2_2 = {*(const int64_t *)(iq1s_grid + (q1[4] | ((qh[1] << 8) & 0x700))), *(const int64_t *)(iq1s_grid + (q1[5] | ((qh[1] << 5) & 0x700)))};\n            vector signed long long aux64x2_3 = {*(const int64_t *)(iq1s_grid + (q1[6] | ((qh[1] << 2) & 0x700))), *(const int64_t *)(iq1s_grid + (q1[7] | ((qh[1] >> 1) & 0x700)))};\n            q1 += 8;\n\n            vector signed char q1x0 = (vector signed char)aux64x2_0;\n            vector signed char q1x1 = (vector signed char)aux64x2_1;\n            vector signed char q1x2 = (vector signed char)aux64x2_2;\n            vector signed char q1x3 = (vector signed char)aux64x2_3;\n\n            vector signed char q8y0 = vec_xl( 0, q8);\n            vector signed char q8y1 = vec_xl(16, q8);\n            vector signed char q8y2 = vec_xl(32, q8);\n            vector signed char q8y3 = vec_xl(48, q8);\n            q8 += 64;\n\n            vector signed short qv0 = vec_add(vec_mule(q1x0, q8y0), vec_mulo(q1x0, q8y0));\n            vector signed short qv1 = vec_add(vec_mule(q1x1, q8y1), vec_mulo(q1x1, q8y1));\n            vector signed short qv2 = vec_add(vec_mule(q1x2, q8y2), vec_mulo(q1x2, q8y2));\n            vector signed short qv3 = vec_add(vec_mule(q1x3, q8y3), vec_mulo(q1x3, q8y3));\n\n            const uint16_t ls0 = (uint16_t)((qh[0] >> 12) & 7);\n            const uint16_t ls1 = (uint16_t)((qh[1] >> 12) & 7);\n\n            vector signed short vscales01 = (vector signed short)vec_splats((uint16_t)(2*ls0+1));\n            vector signed short vscales23 = (vector signed short)vec_splats((uint16_t)(2*ls1+1));\n            vector signed short vscales = vec_sld(vscales23, vscales01, 8);\n\n            vsumi0 = vec_msum(qv0, vscales01, vsumi0);\n            vsumi1 = vec_msum(qv1, vscales01, vsumi1);\n            vsumi2 = vec_msum(qv2, vscales23, vsumi2);\n            vsumi3 = vec_msum(qv3, vscales23, vsumi3);\n\n            vector signed short q8ysums = vec_xl_len(qs, 8);\n            qs += 4;\n            q8ysums = vec_mergeh(q8ysums, (vector signed short)v0);\n\n            vector signed short qxh = (vector signed short)vec_sld(vec_splats(qh[1]), vec_splats(qh[0]), 8);\n            qh += 2;\n            vector __bool short vsel = vec_cmpge(qxh, (vector signed short)v0);\n\n            vector signed short q8ysum = vec_sel((vector signed short)vec_xor((vector unsigned short)q8ysums, vsign), q8ysums, vsel);\n\n            vsumi8 = vec_add(vec_mule(q8ysum, vscales), vsumi8);\n        }\n\n        vsumf0 = vec_madd(vec_ctf(vsumi0, 0), vd, vsumf0);\n        vsumf1 = vec_madd(vec_ctf(vsumi1, 0), vd, vsumf1);\n        vsumf2 = vec_madd(vec_ctf(vsumi2, 0), vd, vsumf2);\n        vsumf3 = vec_madd(vec_ctf(vsumi3, 0), vd, vsumf3);\n\n        vsumf0 = vec_madd(vec_ctf(vsumi8, 0), vec_mul(vd, vec_splats(IQ1S_DELTA)), vsumf0);\n    }\n\n    vsumf0 = vec_add(vsumf0, vsumf2);\n    vsumf1 = vec_add(vsumf1, vsumf3);\n\n    vsumf0 = vec_add(vsumf0, vsumf1);\n\n    vsumf0 = vec_add(vsumf0, vec_sld(vsumf0, vsumf0, 4));\n    vsumf0 = vec_add(vsumf0, vec_sld(vsumf0, vsumf0, 8));\n\n    *s = vec_extract(vsumf0, 0);\n\n#elif defined(__loongarch_asx)\n\n    __m256 accum = (__m256)__lasx_xvldi(0);\n    float accum1 = 0;\n    for (int i = 0; i < nb; ++i) {\n\n        const int8_t   * q8 = y[i].qs;\n        const uint8_t  * qs = x[i].qs;\n        const uint16_t * qh = x[i].qh;\n\n        __m256i sumi = __lasx_xvldi(0);\n        int sumi1 = 0;\n        for (int ib = 0; ib < QK_K/32; ib += 2) {\n            __m256i q1b_1 = __lasx_xvinsgr2vr_d(q1b_1, iq1s_grid[qs[0] | ((qh[ib+0] << 8) & 0x700)], 0);\n            q1b_1 = __lasx_xvinsgr2vr_d(q1b_1, iq1s_grid[qs[1] | ((qh[ib+0] << 5) & 0x700)], 1);\n            q1b_1 = __lasx_xvinsgr2vr_d(q1b_1, iq1s_grid[qs[2] | ((qh[ib+0] << 2) & 0x700)], 2);\n            q1b_1 = __lasx_xvinsgr2vr_d(q1b_1, iq1s_grid[qs[3] | ((qh[ib+0] >> 1) & 0x700)], 3);\n\n            __m256i q1b_2 = __lasx_xvinsgr2vr_d(q1b_2, iq1s_grid[qs[4] | ((qh[ib+1] << 8) & 0x700)], 0);\n            q1b_2 = __lasx_xvinsgr2vr_d(q1b_2, iq1s_grid[qs[5] | ((qh[ib+1] << 5) & 0x700)], 1);\n            q1b_2 = __lasx_xvinsgr2vr_d(q1b_2, iq1s_grid[qs[6] | ((qh[ib+1] << 2) & 0x700)], 2);\n            q1b_2 = __lasx_xvinsgr2vr_d(q1b_2, iq1s_grid[qs[7] | ((qh[ib+1] >> 1) & 0x700)], 3);\n\n            qs += 8;\n            const __m256i q8b_1 = __lasx_xvld((const __m256i*)q8, 0); q8 += 32;\n            const __m256i q8b_2 = __lasx_xvld((const __m256i*)q8, 0); q8 += 32;\n\n            const __m256i dot1 = mul_add_epi8(q1b_1, q8b_1);\n            const __m256i dot2 = mul_add_epi8(q1b_2, q8b_2);\n            const int16_t ls1 = 2*((qh[ib+0] >> 12) & 7) + 1;\n            const int16_t ls2 = 2*((qh[ib+1] >> 12) & 7) + 1;\n\n            __m256i tmp1, tmp5, tmp6;\n            tmp1 = __lasx_xvreplgr2vr_h(ls1);\n            tmp5 = __lasx_xvmulwev_w_h(dot1, tmp1);\n            tmp6 = __lasx_xvmulwod_w_h(dot1, tmp1);\n            const __m256i p1 = __lasx_xvadd_w(tmp5, tmp6);\n\n            tmp1 = __lasx_xvreplgr2vr_h(ls2);\n            tmp5 = __lasx_xvmulwev_w_h(dot2, tmp1);\n            tmp6 = __lasx_xvmulwod_w_h(dot2, tmp1);\n            const __m256i p2 = __lasx_xvadd_w(tmp5, tmp6);\n\n            sumi = __lasx_xvadd_w(sumi, __lasx_xvadd_w(p1, p2));\n            sumi1 += (y[i].bsums[2*ib+0] + y[i].bsums[2*ib+1]) * (qh[ib+0] & 0x8000 ? -1 : 1) * ls1\n                   + (y[i].bsums[2*ib+2] + y[i].bsums[2*ib+3]) * (qh[ib+1] & 0x8000 ? -1 : 1) * ls2;\n        }\n\n        const float d = y[i].d * GGML_FP16_TO_FP32(x[i].d);\n        accum = __lasx_xvfmadd_s(__lasx_xvreplfr2vr_s(d), __lasx_xvffint_s_w(sumi), accum);\n        accum1 += d * sumi1;\n    }\n\n    *s = hsum_float_8(accum) + IQ1S_DELTA * accum1;\n\n#else\n\n    float sumf = 0;\n    for (int i = 0; i < nb; i++) {\n\n        const int8_t   * q8 = y[i].qs;\n        const uint8_t  * qs = x[i].qs;\n        const uint16_t * qh = x[i].qh;\n\n        int sumi = 0, sumi1 = 0;\n        for (int ib = 0; ib < QK_K/32; ++ib) {\n            const int ls = 2*((qh[ib] >> 12) & 7) + 1;\n            const int delta = qh[ib] & 0x8000 ? -1 : 1;\n            int lsum = 0;\n            for (int l = 0; l < 4; ++l) {\n                const int8_t * grid = (const int8_t *)(iq1s_grid + (qs[l] | (((qh[ib] >> 3*l) & 7) << 8)));\n                for (int j = 0; j < 8; ++j) {\n                    lsum += q8[j] * grid[j];\n                }\n                q8 += 8;\n            }\n            sumi  += ls * lsum;\n            sumi1 += ls * delta * (y[i].bsums[2*ib+0] + y[i].bsums[2*ib+1]);\n            qs += 4;\n        }\n\n        sumf += GGML_FP16_TO_FP32(x[i].d) * y[i].d * (sumi + IQ1S_DELTA * sumi1);\n    }\n\n    *s = sumf;\n\n#endif\n}\n\nvoid ggml_vec_dot_iq1_m_q8_K  (int n, float * restrict s, size_t bs, const void * restrict vx, size_t bx, const void * restrict vy, size_t by, int nrc) {\n    assert(n % QK_K == 0);\n    assert(nrc == 1);\n    UNUSED(nrc);\n    UNUSED(bx);\n    UNUSED(by);\n    UNUSED(bs);\n\n    const block_iq1_m * restrict x = vx;\n    const block_q8_K  * restrict y = vy;\n\n    const int nb = n / QK_K;\n\n    iq1m_scale_t scale;\n\n#if defined __ARM_NEON\n    const int32x4_t mask  = vdupq_n_s32(0x7);\n    const int32x4_t mone  = vdupq_n_s32(1);\n    const int32x4_t mzero = vdupq_n_s32(0);\n\n    ggml_int8x16x4_t deltas;\n    deltas.val[0] = vcombine_s8(vdup_n_s8(+1), vdup_n_s8(+1));\n    deltas.val[1] = vcombine_s8(vdup_n_s8(-1), vdup_n_s8(+1));\n    deltas.val[2] = vcombine_s8(vdup_n_s8(+1), vdup_n_s8(-1));\n    deltas.val[3] = vcombine_s8(vdup_n_s8(-1), vdup_n_s8(-1));\n\n    ggml_int8x16x4_t q1b;\n    ggml_int8x16x4_t q8b;\n\n    uint32_t aux32;\n    const uint8_t * aux8 = (const uint8_t *)&aux32;\n\n    float sumf = 0;\n    for (int i = 0; i < nb; ++i) {\n\n        const int8_t   * q8 = y[i].qs;\n        const uint8_t  * qs = x[i].qs;\n        const uint8_t  * qh = x[i].qh;\n        const uint16_t * sc = (const uint16_t *)x[i].scales;\n\n        scale.u16 = (sc[0] >> 12) | ((sc[1] >> 8) & 0x00f0) | ((sc[2] >> 4) & 0x0f00) | (sc[3] & 0xf000);\n\n        int32x4_t sumi1 = mzero;\n        int32x4_t sumi2 = mzero;\n\n        for (int ib = 0; ib < QK_K/32; ib += 2) {\n\n            q1b.val[0] = vcombine_s8(vld1_s8((const int8_t *)(iq1s_grid + (qs[0] | ((qh[0] << 8) & 0x700)))),\n                                     vld1_s8((const int8_t *)(iq1s_grid + (qs[1] | ((qh[0] << 4) & 0x700)))));\n            q1b.val[1] = vcombine_s8(vld1_s8((const int8_t *)(iq1s_grid + (qs[2] | ((qh[1] << 8) & 0x700)))),\n                                     vld1_s8((const int8_t *)(iq1s_grid + (qs[3] | ((qh[1] << 4) & 0x700)))));\n            q1b.val[2] = vcombine_s8(vld1_s8((const int8_t *)(iq1s_grid + (qs[4] | ((qh[2] << 8) & 0x700)))),\n                                     vld1_s8((const int8_t *)(iq1s_grid + (qs[5] | ((qh[2] << 4) & 0x700)))));\n            q1b.val[3] = vcombine_s8(vld1_s8((const int8_t *)(iq1s_grid + (qs[6] | ((qh[3] << 8) & 0x700)))),\n                                     vld1_s8((const int8_t *)(iq1s_grid + (qs[7] | ((qh[3] << 4) & 0x700)))));\n\n            q8b = ggml_vld1q_s8_x4(q8); q8 += 64;\n\n            const int32x4_t p1 = vpaddq_s32(ggml_vdotq_s32(mzero, q1b.val[0], q8b.val[0]), ggml_vdotq_s32(mzero, q1b.val[1], q8b.val[1]));\n            const int32x4_t p2 = vpaddq_s32(ggml_vdotq_s32(mzero, q1b.val[2], q8b.val[2]), ggml_vdotq_s32(mzero, q1b.val[3], q8b.val[3]));\n            const int32x4_t p12 = vpaddq_s32(p1, p2);\n\n            const uint32_t * qh32 = (const uint32_t *)qh; // we are 4-byte aligned, so we can do that\n            aux32 = ((qh32[0] >> 3) & 0x01010101) | ((qh32[0] >> 6) & 0x02020202);\n\n            const int32x4_t p3 = vpaddq_s32(ggml_vdotq_s32(mzero, deltas.val[aux8[0]], q8b.val[0]), ggml_vdotq_s32(mzero, deltas.val[aux8[1]], q8b.val[1]));\n            const int32x4_t p4 = vpaddq_s32(ggml_vdotq_s32(mzero, deltas.val[aux8[2]], q8b.val[2]), ggml_vdotq_s32(mzero, deltas.val[aux8[3]], q8b.val[3]));\n            const int32x4_t p34 = vpaddq_s32(p3, p4);\n\n            int32x4_t scales_4 = ggml_vld1q_u32(sc[ib/2] >> 0, sc[ib/2] >> 3, sc[ib/2] >> 6, sc[ib/2] >> 9);\n\n            scales_4 = vaddq_s32(vshlq_n_s32(vandq_s32(scales_4, mask), 1), mone);\n\n            sumi1 = vmlaq_s32(sumi1, scales_4, p12);\n            sumi2 = vmlaq_s32(sumi2, scales_4, p34);\n\n            qs += 8; qh += 4;\n\n        }\n\n        sumf += y[i].d * GGML_FP16_TO_FP32(scale.f16) * (vaddvq_s32(sumi1) + IQ1M_DELTA * vaddvq_s32(sumi2));\n    }\n\n    *s = sumf;\n\n#elif defined __AVX2__\n\n    const __m256i mask = _mm256_set1_epi16(0x7);\n    const __m256i mone = _mm256_set1_epi16(1);\n\n    __m256 accum1 = _mm256_setzero_ps();\n    __m256 accum2 = _mm256_setzero_ps();\n    for (int i = 0; i < nb; ++i) {\n\n        const int8_t   * q8 = y[i].qs;\n        const uint8_t  * qs = x[i].qs;\n        const uint8_t  * qh = x[i].qh;\n        const uint16_t * sc = (const uint16_t *)x[i].scales;\n\n        scale.u16 = (sc[0] >> 12) | ((sc[1] >> 8) & 0x00f0) | ((sc[2] >> 4) & 0x0f00) | (sc[3] & 0xf000);\n\n        __m256i sumi1 = _mm256_setzero_si256();\n        __m256i sumi2 = _mm256_setzero_si256();\n        for (int ib = 0; ib < QK_K/32; ib += 2) {\n            const __m256i q1b_1 = _mm256_set_epi64x(\n                    iq1s_grid[qs[3] | (((uint16_t)qh[1] << 4) & 0x700)], iq1s_grid[qs[2] | (((uint16_t)qh[1] << 8) & 0x700)],\n                    iq1s_grid[qs[1] | (((uint16_t)qh[0] << 4) & 0x700)], iq1s_grid[qs[0] | (((uint16_t)qh[0] << 8) & 0x700)]\n            );\n            const __m256i q1b_2 = _mm256_set_epi64x(\n                    iq1s_grid[qs[7] | (((uint16_t)qh[3] << 4) & 0x700)], iq1s_grid[qs[6] | (((uint16_t)qh[3] << 8) & 0x700)],\n                    iq1s_grid[qs[5] | (((uint16_t)qh[2] << 4) & 0x700)], iq1s_grid[qs[4] | (((uint16_t)qh[2] << 8) & 0x700)]\n            );\n            const __m256i q8b_1 = _mm256_loadu_si256((const __m256i*)q8); q8 += 32;\n            const __m256i q8b_2 = _mm256_loadu_si256((const __m256i*)q8); q8 += 32;\n\n            const __m256i dot1 = mul_add_epi8(q1b_1, q8b_1);\n            const __m256i dot2 = mul_add_epi8(q1b_2, q8b_2);\n\n            const __m256i delta1 = _mm256_set_epi64x(qh[1] & 0x80 ? 0xffffffffffffffff : 0x0101010101010101,\n                                                     qh[1] & 0x08 ? 0xffffffffffffffff : 0x0101010101010101,\n                                                     qh[0] & 0x80 ? 0xffffffffffffffff : 0x0101010101010101,\n                                                     qh[0] & 0x08 ? 0xffffffffffffffff : 0x0101010101010101);\n            const __m256i delta2 = _mm256_set_epi64x(qh[3] & 0x80 ? 0xffffffffffffffff : 0x0101010101010101,\n                                                     qh[3] & 0x08 ? 0xffffffffffffffff : 0x0101010101010101,\n                                                     qh[2] & 0x80 ? 0xffffffffffffffff : 0x0101010101010101,\n                                                     qh[2] & 0x08 ? 0xffffffffffffffff : 0x0101010101010101);\n\n            const __m256i dot3 = mul_add_epi8(delta1, q8b_1);\n            const __m256i dot4 = mul_add_epi8(delta2, q8b_2);\n\n            __m256i scale1 = MM256_SET_M128I(_mm_set1_epi16(sc[ib/2] >> 3), _mm_set1_epi16(sc[ib/2] >> 0));\n            __m256i scale2 = MM256_SET_M128I(_mm_set1_epi16(sc[ib/2] >> 9), _mm_set1_epi16(sc[ib/2] >> 6));\n\n            scale1 = _mm256_add_epi16(_mm256_slli_epi16(_mm256_and_si256(scale1, mask), 1), mone);\n            scale2 = _mm256_add_epi16(_mm256_slli_epi16(_mm256_and_si256(scale2, mask), 1), mone);\n            const __m256i p1 = _mm256_madd_epi16(dot1, scale1);\n            const __m256i p2 = _mm256_madd_epi16(dot2, scale2);\n            const __m256i p3 = _mm256_madd_epi16(dot3, scale1);\n            const __m256i p4 = _mm256_madd_epi16(dot4, scale2);\n\n            sumi1 = _mm256_add_epi32(sumi1, _mm256_add_epi32(p1, p2));\n            sumi2 = _mm256_add_epi32(sumi2, _mm256_add_epi32(p3, p4));\n\n            qs += 8; qh += 4;\n        }\n\n        const __m256 d = _mm256_set1_ps(y[i].d * GGML_FP16_TO_FP32(scale.f16));\n\n        accum1 = _mm256_fmadd_ps(d, _mm256_cvtepi32_ps(sumi1), accum1);\n        accum2 = _mm256_fmadd_ps(d, _mm256_cvtepi32_ps(sumi2), accum2);\n    }\n\n    *s = hsum_float_8(accum1) + IQ1M_DELTA * hsum_float_8(accum2);\n\n#elif defined __AVX__\n    const __m128i mask = _mm_set1_epi16(0x7);\n    const __m128i mone = _mm_set1_epi16(1);\n\n    __m256 accum1 = _mm256_setzero_ps();\n    __m256 accum2 = _mm256_setzero_ps();\n    for (int i = 0; i < nb; ++i) {\n\n        const int8_t   * q8 = y[i].qs;\n        const uint8_t  * qs = x[i].qs;\n        const uint8_t  * qh = x[i].qh;\n        const uint16_t * sc = (const uint16_t *)x[i].scales;\n\n        scale.u16 = (sc[0] >> 12) | ((sc[1] >> 8) & 0x00f0) | ((sc[2] >> 4) & 0x0f00) | (sc[3] & 0xf000);\n\n        __m128i sumi1_0 = _mm_setzero_si128();\n        __m128i sumi1_1 = _mm_setzero_si128();\n        __m128i sumi2_0 = _mm_setzero_si128();\n        __m128i sumi2_1 = _mm_setzero_si128();\n        for (int ib = 0; ib < QK_K/32; ib += 2) {\n            const __m128i q1b_1_0 = _mm_set_epi64x(\n                    iq1s_grid[qs[1] | (((uint16_t)qh[0] << 4) & 0x700)], iq1s_grid[qs[0] | (((uint16_t)qh[0] << 8) & 0x700)]);\n            const __m128i q1b_1_1 = _mm_set_epi64x(\n                    iq1s_grid[qs[3] | (((uint16_t)qh[1] << 4) & 0x700)], iq1s_grid[qs[2] | (((uint16_t)qh[1] << 8) & 0x700)]);\n            const __m128i q1b_2_0 = _mm_set_epi64x(\n                    iq1s_grid[qs[5] | (((uint16_t)qh[2] << 4) & 0x700)], iq1s_grid[qs[4] | (((uint16_t)qh[2] << 8) & 0x700)]);\n            const __m128i q1b_2_1 = _mm_set_epi64x(\n                    iq1s_grid[qs[7] | (((uint16_t)qh[3] << 4) & 0x700)], iq1s_grid[qs[6] | (((uint16_t)qh[3] << 8) & 0x700)]);\n            const __m128i q8b_1_0 = _mm_loadu_si128((const __m128i *)q8); q8 += 16;\n            const __m128i q8b_1_1 = _mm_loadu_si128((const __m128i *)q8); q8 += 16;\n            const __m128i q8b_2_0 = _mm_loadu_si128((const __m128i *)q8); q8 += 16;\n            const __m128i q8b_2_1 = _mm_loadu_si128((const __m128i *)q8); q8 += 16;\n\n            const __m128i dot1_0 = mul_add_epi8_sse(q1b_1_0, q8b_1_0);\n            const __m128i dot1_1 = mul_add_epi8_sse(q1b_1_1, q8b_1_1);\n            const __m128i dot2_0 = mul_add_epi8_sse(q1b_2_0, q8b_2_0);\n            const __m128i dot2_1 = mul_add_epi8_sse(q1b_2_1, q8b_2_1);\n\n            const __m128i delta1_0 = _mm_set_epi64x(qh[0] & 0x80 ? 0xffffffffffffffff : 0x0101010101010101,\n                                                     qh[0] & 0x08 ? 0xffffffffffffffff : 0x0101010101010101);\n            const __m128i delta1_1 = _mm_set_epi64x(qh[1] & 0x80 ? 0xffffffffffffffff : 0x0101010101010101,\n                                                     qh[1] & 0x08 ? 0xffffffffffffffff : 0x0101010101010101);\n            const __m128i delta2_0 = _mm_set_epi64x(qh[2] & 0x80 ? 0xffffffffffffffff : 0x0101010101010101,\n                                                     qh[2] & 0x08 ? 0xffffffffffffffff : 0x0101010101010101);\n            const __m128i delta2_1 = _mm_set_epi64x(qh[3] & 0x80 ? 0xffffffffffffffff : 0x0101010101010101,\n                                                     qh[3] & 0x08 ? 0xffffffffffffffff : 0x0101010101010101);\n\n            const __m128i dot3_0 = mul_add_epi8_sse(delta1_0, q8b_1_0);\n            const __m128i dot3_1 = mul_add_epi8_sse(delta1_1, q8b_1_1);\n            const __m128i dot4_0 = mul_add_epi8_sse(delta2_0, q8b_2_0);\n            const __m128i dot4_1 = mul_add_epi8_sse(delta2_1, q8b_2_1);\n\n            __m128i scale1_0 = _mm_set1_epi16(sc[ib/2] >> 0);\n            __m128i scale1_1 = _mm_set1_epi16(sc[ib/2] >> 3);\n            __m128i scale2_0 = _mm_set1_epi16(sc[ib/2] >> 6);\n            __m128i scale2_1 = _mm_set1_epi16(sc[ib/2] >> 9);\n\n            scale1_0 = _mm_add_epi16(_mm_slli_epi16(_mm_and_si128(scale1_0, mask), 1), mone);\n            scale1_1 = _mm_add_epi16(_mm_slli_epi16(_mm_and_si128(scale1_1, mask), 1), mone);\n            scale2_0 = _mm_add_epi16(_mm_slli_epi16(_mm_and_si128(scale2_0, mask), 1), mone);\n            scale2_1 = _mm_add_epi16(_mm_slli_epi16(_mm_and_si128(scale2_1, mask), 1), mone);\n            const __m128i p1_0 = _mm_madd_epi16(dot1_0, scale1_0);\n            const __m128i p1_1 = _mm_madd_epi16(dot1_1, scale1_1);\n            const __m128i p2_0 = _mm_madd_epi16(dot2_0, scale2_0);\n            const __m128i p2_1 = _mm_madd_epi16(dot2_1, scale2_1);\n            const __m128i p3_0 = _mm_madd_epi16(dot3_0, scale1_0);\n            const __m128i p3_1 = _mm_madd_epi16(dot3_1, scale1_1);\n            const __m128i p4_0 = _mm_madd_epi16(dot4_0, scale2_0);\n            const __m128i p4_1 = _mm_madd_epi16(dot4_1, scale2_1);\n\n            sumi1_0 = _mm_add_epi32(sumi1_0, _mm_add_epi32(p1_0, p2_0));\n            sumi1_1 = _mm_add_epi32(sumi1_1, _mm_add_epi32(p1_1, p2_1));\n            sumi2_0 = _mm_add_epi32(sumi2_0, _mm_add_epi32(p3_0, p4_0));\n            sumi2_1 = _mm_add_epi32(sumi2_1, _mm_add_epi32(p3_1, p4_1));\n\n            qs += 8; qh += 4;\n        }\n\n        const __m256 d = _mm256_set1_ps(y[i].d * GGML_FP16_TO_FP32(scale.f16));\n\n        accum1 = _mm256_add_ps(_mm256_mul_ps(d, _mm256_cvtepi32_ps(MM256_SET_M128I(sumi1_1, sumi1_0))), accum1);\n        accum2 = _mm256_add_ps(_mm256_mul_ps(d, _mm256_cvtepi32_ps(MM256_SET_M128I(sumi2_1, sumi2_0))), accum2);\n    }\n\n    *s = hsum_float_8(accum1) + IQ1M_DELTA * hsum_float_8(accum2);\n\n#else\n\n    int sum1[2], sum2[2], delta[4];\n\n    float sumf = 0;\n    for (int i = 0; i < nb; i++) {\n\n        const int8_t   * q8 = y[i].qs;\n        const uint8_t  * qs = x[i].qs;\n        const uint8_t  * qh = x[i].qh;\n        const uint16_t * sc = (const uint16_t *)x[i].scales;\n\n        scale.u16 = (sc[0] >> 12) | ((sc[1] >> 8) & 0x00f0) | ((sc[2] >> 4) & 0x0f00) | (sc[3] & 0xf000);\n\n        int sumi1 = 0, sumi2 = 0;\n        for (int ib = 0; ib < QK_K/32; ++ib) {\n            delta[0] = qh[0] & 0x08 ? -1 : 1;\n            delta[1] = qh[0] & 0x80 ? -1 : 1;\n            delta[2] = qh[1] & 0x08 ? -1 : 1;\n            delta[3] = qh[1] & 0x80 ? -1 : 1;\n            sum1[0] = sum1[1] = sum2[0] = sum2[1] = 0;\n            for (int l = 0; l < 4; ++l) {\n                const int8_t * grid = (const int8_t *)(iq1s_grid + (qs[l] | (((uint16_t)qh[l/2] << (8 - 4*(l%2))) & 0x700)));\n                int lsum1 = 0, lsum2 = 0;\n                for (int j = 0; j < 8; ++j) {\n                    lsum1 += q8[j] * grid[j];\n                    lsum2 += q8[j];\n                }\n                q8 += 8;\n                sum1[l/2] += lsum1;\n                sum2[l/2] += lsum2*delta[l];\n            }\n\n            const int ls1 = 2*((sc[ib/2] >> (6*(ib%2)+0)) & 0x7) + 1;\n            const int ls2 = 2*((sc[ib/2] >> (6*(ib%2)+3)) & 0x7) + 1;\n\n            sumi1 += sum1[0] * ls1 + sum1[1] * ls2;\n            sumi2 += sum2[0] * ls1 + sum2[1] * ls2;\n            qs += 4;\n            qh += 2;\n        }\n\n        sumf += GGML_FP16_TO_FP32(scale.f16) * y[i].d * (sumi1 + IQ1M_DELTA * sumi2);\n    }\n\n    *s = sumf;\n\n#endif\n}\n\nvoid ggml_vec_dot_iq4_nl_q8_0(int n, float * restrict s, size_t bs, const void * restrict vx, size_t bx, const void * restrict vy, size_t by, int nrc) {\n    assert(nrc == 1);\n    UNUSED(nrc);\n    UNUSED(bx);\n    UNUSED(by);\n    UNUSED(bs);\n    assert(n % QK4_NL == 0);\n    static_assert(QK4_NL == QK8_0, \"QK4_NL and QK8_0 must be the same\");\n\n    const block_iq4_nl * restrict x = vx;\n    const block_q8_0   * restrict y = vy;\n\n    const int nb = n / QK4_NL;\n\n    int ib = 0;\n    float sumf = 0;\n\n#if defined __ARM_NEON\n    const int8x16_t values = vld1q_s8(kvalues_iq4nl);\n    const uint8x16_t m4b = vdupq_n_u8(0x0f);\n    uint8x16x2_t q4bits;\n    int8x16x4_t q4b;\n    int8x16x4_t q8b;\n    int32x4_t prod_1, prod_2;\n\n    for (; ib + 1 < nb; ib += 2) {\n\n        q4bits.val[0] = vld1q_u8(x[ib + 0].qs);\n        q4bits.val[1] = vld1q_u8(x[ib + 1].qs);\n        q8b.val[0]    = vld1q_s8(y[ib + 0].qs);\n        q8b.val[1]    = vld1q_s8(y[ib + 0].qs + 16);\n        q8b.val[2]    = vld1q_s8(y[ib + 1].qs);\n        q8b.val[3]    = vld1q_s8(y[ib + 1].qs + 16);\n\n        q4b.val[0] = ggml_vqtbl1q_s8(values, vandq_u8  (q4bits.val[0], m4b));\n        q4b.val[1] = ggml_vqtbl1q_s8(values, vshrq_n_u8(q4bits.val[0], 4));\n        q4b.val[2] = ggml_vqtbl1q_s8(values, vandq_u8  (q4bits.val[1], m4b));\n        q4b.val[3] = ggml_vqtbl1q_s8(values, vshrq_n_u8(q4bits.val[1], 4));\n\n        prod_1 = ggml_vdotq_s32(ggml_vdotq_s32(vdupq_n_s32(0), q4b.val[0], q8b.val[0]), q4b.val[1], q8b.val[1]);\n        prod_2 = ggml_vdotq_s32(ggml_vdotq_s32(vdupq_n_s32(0), q4b.val[2], q8b.val[2]), q4b.val[3], q8b.val[3]);\n\n        sumf +=\n            GGML_FP16_TO_FP32(x[ib+0].d) * GGML_FP16_TO_FP32(y[ib + 0].d) * vaddvq_s32(prod_1) +\n            GGML_FP16_TO_FP32(x[ib+1].d) * GGML_FP16_TO_FP32(y[ib + 1].d) * vaddvq_s32(prod_2);\n    }\n\n#elif defined __AVX2__\n\n    const __m128i values128 = _mm_loadu_si128((const __m128i*)kvalues_iq4nl);\n    const __m128i m4b  = _mm_set1_epi8(0x0f);\n    const __m256i mone = _mm256_set1_epi16(1);\n\n    __m256 accum1 = _mm256_setzero_ps();\n    __m256 accum2 = _mm256_setzero_ps();\n    for (; ib + 1 < nb; ib += 2) {\n        const __m128i q4bits_1 = _mm_loadu_si128((const __m128i*)x[ib + 0].qs);\n        const __m128i q4bits_2 = _mm_loadu_si128((const __m128i*)x[ib + 1].qs);\n        const __m256i q8b_1 = _mm256_loadu_si256((const __m256i *)y[ib + 0].qs);\n        const __m256i q8b_2 = _mm256_loadu_si256((const __m256i *)y[ib + 1].qs);\n        const __m256i q4b_1 = MM256_SET_M128I(_mm_shuffle_epi8(values128, _mm_and_si128(_mm_srli_epi16(q4bits_1, 4), m4b)),\n                                              _mm_shuffle_epi8(values128, _mm_and_si128(q4bits_1, m4b)));\n        const __m256i q4b_2 = MM256_SET_M128I(_mm_shuffle_epi8(values128, _mm_and_si128(_mm_srli_epi16(q4bits_2, 4), m4b)),\n                                              _mm_shuffle_epi8(values128, _mm_and_si128(q4bits_2, m4b)));\n        const __m256i p16_1 = mul_add_epi8(q4b_1, q8b_1);\n        const __m256i p16_2 = mul_add_epi8(q4b_2, q8b_2);\n        const __m256i p_1 = _mm256_madd_epi16(p16_1, mone);\n        const __m256i p_2 = _mm256_madd_epi16(p16_2, mone);\n        accum1 = _mm256_fmadd_ps(_mm256_set1_ps(GGML_FP16_TO_FP32(y[ib + 0].d)*GGML_FP16_TO_FP32(x[ib + 0].d)),\n                _mm256_cvtepi32_ps(p_1), accum1);\n        accum2 = _mm256_fmadd_ps(_mm256_set1_ps(GGML_FP16_TO_FP32(y[ib + 1].d)*GGML_FP16_TO_FP32(x[ib + 1].d)),\n                _mm256_cvtepi32_ps(p_2), accum2);\n    }\n\n    sumf = hsum_float_8(_mm256_add_ps(accum1, accum2));\n\n#elif defined __AVX__\n    const __m128i values128 = _mm_loadu_si128((const __m128i*)kvalues_iq4nl);\n    const __m128i m4b  = _mm_set1_epi8(0x0f);\n    const __m128i mone = _mm_set1_epi16(1);\n\n    __m256 accum1 = _mm256_setzero_ps();\n    __m256 accum2 = _mm256_setzero_ps();\n    for (; ib + 1 < nb; ib += 2) {\n        const __m128i q4bits_1 = _mm_loadu_si128((const __m128i *)x[ib + 0].qs);\n        const __m128i q4bits_2 = _mm_loadu_si128((const __m128i *)x[ib + 1].qs);\n        const __m128i q8b_1_0 = _mm_loadu_si128((const __m128i *)y[ib + 0].qs);\n        const __m128i q8b_1_1 = _mm_loadu_si128((const __m128i *)y[ib + 0].qs + 1);\n        const __m128i q8b_2_0 = _mm_loadu_si128((const __m128i *)y[ib + 1].qs);\n        const __m128i q8b_2_1 = _mm_loadu_si128((const __m128i *)y[ib + 1].qs + 1);\n\n        const __m128i q4b_1_0 = _mm_shuffle_epi8(values128, _mm_and_si128(q4bits_1, m4b));\n        const __m128i q4b_1_1 = _mm_shuffle_epi8(values128, _mm_and_si128(_mm_srli_epi16(q4bits_1, 4), m4b));\n        const __m128i q4b_2_0 = _mm_shuffle_epi8(values128, _mm_and_si128(q4bits_2, m4b));\n        const __m128i q4b_2_1 = _mm_shuffle_epi8(values128, _mm_and_si128(_mm_srli_epi16(q4bits_2, 4), m4b));\n        const __m128i p16_1_0 = mul_add_epi8_sse(q4b_1_0, q8b_1_0);\n        const __m128i p16_1_1 = mul_add_epi8_sse(q4b_1_1, q8b_1_1);\n        const __m128i p16_2_0 = mul_add_epi8_sse(q4b_2_0, q8b_2_0);\n        const __m128i p16_2_1 = mul_add_epi8_sse(q4b_2_1, q8b_2_1);\n        const __m128i p_1_0 = _mm_madd_epi16(p16_1_0, mone);\n        const __m128i p_1_1 = _mm_madd_epi16(p16_1_1, mone);\n        const __m128i p_2_0 = _mm_madd_epi16(p16_2_0, mone);\n        const __m128i p_2_1 = _mm_madd_epi16(p16_2_1, mone);\n        accum1 = _mm256_add_ps(_mm256_mul_ps(_mm256_set1_ps(GGML_FP16_TO_FP32(y[ib + 0].d)*GGML_FP16_TO_FP32(x[ib + 0].d)),\n                _mm256_cvtepi32_ps(MM256_SET_M128I(p_1_1, p_1_0))), accum1);\n        accum2 = _mm256_add_ps(_mm256_mul_ps(_mm256_set1_ps(GGML_FP16_TO_FP32(y[ib + 1].d)*GGML_FP16_TO_FP32(x[ib + 1].d)),\n                _mm256_cvtepi32_ps(MM256_SET_M128I(p_2_1, p_2_0))), accum2);\n    }\n\n    sumf = hsum_float_8(_mm256_add_ps(accum1, accum2));\n\n#elif defined(__POWER9_VECTOR__)\n    const vector signed char lowMask = vec_splats((signed char)0xF);\n    const vector signed int v0 = vec_splats((int32_t)0);\n    const vector unsigned char v4 = vec_splats((unsigned char)0x4);\n\n    vector float vsumf0 = vec_splats(0.0f);\n    vector float vsumf1 = vec_splats(0.0f);\n\n    const vector signed char values = vec_xl( 0, kvalues_iq4nl);\n\n#pragma GCC unroll 4\n    for (; ib < nb; ++ib) {\n        __builtin_prefetch(x[ib].qs, 0, 1);\n        __builtin_prefetch(y[ib].qs, 0, 1);\n\n\n        vector float vxd = vec_splats(GGML_FP16_TO_FP32(x[ib].d));\n        vector float vyd = vec_splats(GGML_FP16_TO_FP32(y[ib].d));\n        vector float vd = vec_mul(vxd, vyd);\n\n        vector signed char qxs = (vector signed char)vec_xl( 0, x[ib].qs);\n        vector signed char q4x0 = vec_and(qxs, lowMask);\n        vector signed char q4x1 = vec_sr(qxs, v4);\n\n        q4x0 = vec_perm(values, values, (vector unsigned char)q4x0);\n        q4x1 = vec_perm(values, values, (vector unsigned char)q4x1);\n\n        vector signed char q8y0 = vec_xl( 0, y[ib].qs);\n        vector signed char q8y1 = vec_xl(16, y[ib].qs);\n\n        vector signed short qv0 = vec_add(vec_mule(q4x0, q8y0), vec_mulo(q4x0, q8y0));\n        vector signed short qv1 = vec_add(vec_mule(q4x1, q8y1), vec_mulo(q4x1, q8y1));\n\n        vector signed int vsumi0 = v0;\n        vector signed int vsumi1 = v0;\n\n        vsumi0 = vec_sum4s(qv0, vsumi0);\n        vsumi1 = vec_sum4s(qv1, vsumi1);\n\n        vsumf0 = vec_madd(vec_ctf(vsumi0, 0), vd, vsumf0);\n        vsumf1 = vec_madd(vec_ctf(vsumi1, 0), vd, vsumf1);\n    }\n\n    vsumf0 = vec_add(vsumf0, vsumf1);\n\n    vsumf0 = vec_add(vsumf0, vec_sld(vsumf0, vsumf0, 4));\n    vsumf0 = vec_add(vsumf0, vec_sld(vsumf0, vsumf0, 8));\n\n    sumf = vec_extract(vsumf0, 0);\n\n#elif defined (__loongarch_asx)\n\n    const __m128i values128 = __lsx_vld((const __m128i*)kvalues_iq4nl, 0);\n    const __m128i m4b  = __lsx_vreplgr2vr_b(0x0f);\n    const __m256i mone = __lasx_xvreplgr2vr_h(1);\n\n    __m256 accum1 = (__m256)__lasx_xvldi(0);\n    __m256 accum2 = (__m256)__lasx_xvldi(0);\n    for (; ib + 1 < nb; ib += 2) {\n        const __m128i q4bits_1 = __lsx_vld((const __m128i*)x[ib + 0].qs, 0);\n        const __m128i q4bits_2 = __lsx_vld((const __m128i*)x[ib + 1].qs, 0);\n        const __m256i q8b_1 = __lasx_xvld((const __m256i *)y[ib + 0].qs, 0);\n        const __m256i q8b_2 = __lasx_xvld((const __m256i *)y[ib + 1].qs, 0);\n        const __m256i q4b_1 = lasx_insertf128(lsx_shuffle_b(values128, __lsx_vand_v(__lsx_vsrli_h(q4bits_1, 4), m4b)),\n                                              lsx_shuffle_b(values128, __lsx_vand_v(q4bits_1, m4b)));\n        const __m256i q4b_2 = lasx_insertf128(lsx_shuffle_b(values128, __lsx_vand_v(__lsx_vsrli_h(q4bits_2, 4), m4b)),\n                                              lsx_shuffle_b(values128, __lsx_vand_v(q4bits_2, m4b)));\n        const __m256i p16_1 = mul_add_epi8(q4b_1, q8b_1);\n        const __m256i p16_2 = mul_add_epi8(q4b_2, q8b_2);\n        const __m256i p_1 = lasx_madd_h(p16_1, mone);\n        const __m256i p_2 = lasx_madd_h(p16_2, mone);\n        accum1 = __lasx_xvfmadd_s(__lasx_xvreplfr2vr_s(GGML_FP16_TO_FP32(y[ib + 0].d)*GGML_FP16_TO_FP32(x[ib + 0].d)),\n                __lasx_xvffint_s_w(p_1), accum1);\n        accum2 = __lasx_xvfmadd_s(__lasx_xvreplfr2vr_s(GGML_FP16_TO_FP32(y[ib + 1].d)*GGML_FP16_TO_FP32(x[ib + 1].d)),\n                __lasx_xvffint_s_w(p_2), accum2);\n    }\n\n    sumf = hsum_float_8(__lasx_xvfadd_s(accum1, accum2));\n\n#endif\n    for (; ib < nb; ++ib) {\n        const float d = GGML_FP16_TO_FP32(y[ib].d)*GGML_FP16_TO_FP32(x[ib].d);\n        int sumi1 = 0, sumi2 = 0;\n        for (int j = 0; j < QK4_NL/2; ++j) {\n            sumi1 += y[ib].qs[j+       0] * kvalues_iq4nl[x[ib].qs[j] & 0xf];\n            sumi2 += y[ib].qs[j+QK4_NL/2] * kvalues_iq4nl[x[ib].qs[j] >>  4];\n        }\n        sumf += d * (sumi1 + sumi2);\n    }\n    *s = sumf;\n}\n\nvoid ggml_vec_dot_iq4_xs_q8_K(int n, float * restrict s, size_t bs, const void * restrict vx, size_t bx, const void * restrict vy, size_t by, int nrc) {\n    assert(nrc == 1);\n    UNUSED(nrc);\n    UNUSED(bx);\n    UNUSED(by);\n    UNUSED(bs);\n    assert(n % QK_K == 0);\n\n    const block_iq4_xs * restrict x = vx;\n    const block_q8_K   * restrict y = vy;\n\n    const int nb = n / QK_K;\n\n#if defined __ARM_NEON\n    const int8x16_t values = vld1q_s8(kvalues_iq4nl);\n    const uint8x16_t m4b = vdupq_n_u8(0x0f);\n    ggml_uint8x16x2_t q4bits;\n    ggml_int8x16x4_t q4b;\n    ggml_int8x16x4_t q8b;\n    int32x4_t prod_1, prod_2;\n\n    float sumf = 0;\n\n    for (int ibl = 0; ibl < nb; ++ibl) {\n\n        const int8_t  * q8 = y[ibl].qs;\n        const uint8_t * q4 = x[ibl].qs;\n        uint16_t h = x[ibl].scales_h;\n\n        int sumi1 = 0, sumi2 = 0;\n        for (int ib = 0; ib < QK_K/64; ++ib) {\n\n            q4bits = ggml_vld1q_u8_x2(q4); q4 += 32;\n            q8b    = ggml_vld1q_s8_x4(q8); q8 += 64;\n\n            q4b.val[0] = ggml_vqtbl1q_s8(values, vandq_u8  (q4bits.val[0], m4b));\n            q4b.val[1] = ggml_vqtbl1q_s8(values, vshrq_n_u8(q4bits.val[0], 4));\n            q4b.val[2] = ggml_vqtbl1q_s8(values, vandq_u8  (q4bits.val[1], m4b));\n            q4b.val[3] = ggml_vqtbl1q_s8(values, vshrq_n_u8(q4bits.val[1], 4));\n\n            prod_1 = ggml_vdotq_s32(ggml_vdotq_s32(vdupq_n_s32(0), q4b.val[0], q8b.val[0]), q4b.val[1], q8b.val[1]);\n            prod_2 = ggml_vdotq_s32(ggml_vdotq_s32(vdupq_n_s32(0), q4b.val[2], q8b.val[2]), q4b.val[3], q8b.val[3]);\n\n            int ls1 = ((x[ibl].scales_l[ib] & 0xf) | ((h << 4) & 0x30)) - 32;\n            int ls2 = ((x[ibl].scales_l[ib] >>  4) | ((h << 2) & 0x30)) - 32;\n            h >>= 4;\n            sumi1 += vaddvq_s32(prod_1) * ls1;\n            sumi2 += vaddvq_s32(prod_2) * ls2;\n\n        }\n\n        sumf += GGML_FP16_TO_FP32(x[ibl].d) * y[ibl].d * (sumi1 + sumi2);\n    }\n\n    *s = sumf;\n\n#elif defined __AVX2__\n\n    const __m128i values128 = _mm_loadu_si128((const __m128i*)kvalues_iq4nl);\n    const __m128i m4b  = _mm_set1_epi8(0x0f);\n\n    __m256 accum = _mm256_setzero_ps();\n    for (int ibl = 0; ibl < nb; ++ibl) {\n        const uint8_t * qs = x[ibl].qs;\n        const int8_t  * q8 = y[ibl].qs;\n        uint16_t sh = x[ibl].scales_h;\n        __m256i sumi1 = _mm256_setzero_si256();\n        __m256i sumi2 = _mm256_setzero_si256();\n        for (int ib = 0; ib < QK_K/32; ib += 2) {\n            const __m128i q4bits_1 = _mm_loadu_si128((const __m128i*)qs);  qs += 16;\n            const __m128i q4bits_2 = _mm_loadu_si128((const __m128i*)qs);  qs += 16;\n            const __m256i q8b_1 = _mm256_loadu_si256((const __m256i *)q8); q8 += 32;\n            const __m256i q8b_2 = _mm256_loadu_si256((const __m256i *)q8); q8 += 32;\n            const __m256i q4b_1 = MM256_SET_M128I(_mm_shuffle_epi8(values128, _mm_and_si128(_mm_srli_epi16(q4bits_1, 4), m4b)),\n                                                  _mm_shuffle_epi8(values128, _mm_and_si128(q4bits_1, m4b)));\n            const __m256i q4b_2 = MM256_SET_M128I(_mm_shuffle_epi8(values128, _mm_and_si128(_mm_srli_epi16(q4bits_2, 4), m4b)),\n                                                  _mm_shuffle_epi8(values128, _mm_and_si128(q4bits_2, m4b)));\n            const __m256i p16_1 = mul_add_epi8(q4b_1, q8b_1);\n            const __m256i p16_2 = mul_add_epi8(q4b_2, q8b_2);\n            const int16_t ls1 = ((x[ibl].scales_l[ib/2] & 0xf) | ((sh << 4) & 0x30)) - 32;\n            const int16_t ls2 = ((x[ibl].scales_l[ib/2] >>  4) | ((sh << 2) & 0x30)) - 32;\n            sh >>= 4;\n            const __m256i p_1 = _mm256_madd_epi16(p16_1, _mm256_set1_epi16(ls1));\n            const __m256i p_2 = _mm256_madd_epi16(p16_2, _mm256_set1_epi16(ls2));\n            sumi1 = _mm256_add_epi32(p_1, sumi1);\n            sumi2 = _mm256_add_epi32(p_2, sumi2);\n        }\n        accum = _mm256_fmadd_ps(_mm256_set1_ps(GGML_FP16_TO_FP32(x[ibl].d)*y[ibl].d),\n                _mm256_cvtepi32_ps(_mm256_add_epi32(sumi1, sumi2)), accum);\n    }\n\n    *s = hsum_float_8(accum);\n\n#elif defined __AVX__\n    const __m128i values128 = _mm_loadu_si128((const __m128i*)kvalues_iq4nl);\n    const __m128i m4b  = _mm_set1_epi8(0x0f);\n\n    __m256 accum = _mm256_setzero_ps();\n    for (int ibl = 0; ibl < nb; ++ibl) {\n        const uint8_t * qs = x[ibl].qs;\n        const int8_t  * q8 = y[ibl].qs;\n        uint16_t sh = x[ibl].scales_h;\n        __m128i sumi1_0 = _mm_setzero_si128();\n        __m128i sumi1_1 = _mm_setzero_si128();\n        __m128i sumi2_0 = _mm_setzero_si128();\n        __m128i sumi2_1 = _mm_setzero_si128();\n        for (int ib = 0; ib < QK_K/32; ib += 2) {\n            const __m128i q4bits_1 = _mm_loadu_si128((const __m128i *)qs); qs += 16;\n            const __m128i q4bits_2 = _mm_loadu_si128((const __m128i *)qs); qs += 16;\n            const __m128i q8b_1_0 = _mm_loadu_si128((const __m128i *)q8); q8 += 16;\n            const __m128i q8b_1_1 = _mm_loadu_si128((const __m128i *)q8); q8 += 16;\n            const __m128i q8b_2_0 = _mm_loadu_si128((const __m128i *)q8); q8 += 16;\n            const __m128i q8b_2_1 = _mm_loadu_si128((const __m128i *)q8); q8 += 16;\n            const __m128i q4b_1_0 = _mm_shuffle_epi8(values128, _mm_and_si128(q4bits_1, m4b));\n            const __m128i q4b_1_1 = _mm_shuffle_epi8(values128, _mm_and_si128(_mm_srli_epi16(q4bits_1, 4), m4b));\n            const __m128i q4b_2_0 = _mm_shuffle_epi8(values128, _mm_and_si128(q4bits_2, m4b));\n            const __m128i q4b_2_1 = _mm_shuffle_epi8(values128, _mm_and_si128(_mm_srli_epi16(q4bits_2, 4), m4b));\n            const __m128i p16_1_0 = mul_add_epi8_sse(q4b_1_0, q8b_1_0);\n            const __m128i p16_1_1 = mul_add_epi8_sse(q4b_1_1, q8b_1_1);\n            const __m128i p16_2_0 = mul_add_epi8_sse(q4b_2_0, q8b_2_0);\n            const __m128i p16_2_1 = mul_add_epi8_sse(q4b_2_1, q8b_2_1);\n            const int16_t ls1 = ((x[ibl].scales_l[ib/2] & 0xf) | ((sh << 4) & 0x30)) - 32;\n            const int16_t ls2 = ((x[ibl].scales_l[ib/2] >>  4) | ((sh << 2) & 0x30)) - 32;\n            sh >>= 4;\n            const __m128i p_1_0 = _mm_madd_epi16(p16_1_0, _mm_set1_epi16(ls1));\n            const __m128i p_1_1 = _mm_madd_epi16(p16_1_1, _mm_set1_epi16(ls1));\n            const __m128i p_2_0 = _mm_madd_epi16(p16_2_0, _mm_set1_epi16(ls2));\n            const __m128i p_2_1 = _mm_madd_epi16(p16_2_1, _mm_set1_epi16(ls2));\n            sumi1_0 = _mm_add_epi32(p_1_0, sumi1_0);\n            sumi1_1 = _mm_add_epi32(p_1_1, sumi1_1);\n            sumi2_0 = _mm_add_epi32(p_2_0, sumi2_0);\n            sumi2_1 = _mm_add_epi32(p_2_1, sumi2_1);\n        }\n        __m128i sumi12_0 = _mm_add_epi32(sumi1_0, sumi2_0);\n        __m128i sumi12_1 = _mm_add_epi32(sumi1_1, sumi2_1);\n        accum = _mm256_add_ps(_mm256_mul_ps(_mm256_set1_ps(GGML_FP16_TO_FP32(x[ibl].d)*y[ibl].d),\n                _mm256_cvtepi32_ps(MM256_SET_M128I(sumi12_1, sumi12_0))), accum);\n    }\n\n    *s = hsum_float_8(accum);\n\n#elif defined(__POWER9_VECTOR__)\n    const vector signed char lowMask = vec_splats((signed char)0xF);\n    const vector int v0 = vec_splats((int32_t)0);\n    const vector unsigned char v4 = vec_splats((unsigned char)0x4);\n\n    vector float vsumf0 = vec_splats(0.0f);\n    vector float vsumf1 = vec_splats(0.0f);\n    vector float vsumf2 = vec_splats(0.0f);\n    vector float vsumf3 = vec_splats(0.0f);\n\n    const vector signed char values = vec_xl( 0, kvalues_iq4nl);\n\n    for (int ibl = 0; ibl < nb; ++ibl) {\n\n        vector float vxd = vec_splats(GGML_FP16_TO_FP32(x[ibl].d));\n        vector float vyd = vec_splats(y[ibl].d);\n        vector float vd = vec_mul(vxd, vyd);\n\n        vector signed int vsumi0 = v0;\n        vector signed int vsumi1 = v0;\n        vector signed int vsumi2 = v0;\n        vector signed int vsumi3 = v0;\n\n        uint16_t h = x[ibl].scales_h;\n\n        const uint8_t * restrict q4 = x[ibl].qs;\n        const uint8_t * restrict sc = x[ibl].scales_l;\n        const int8_t  * restrict q8 = y[ibl].qs;\n\n        for (int ib = 0; ib < QK_K/64; ib ++ ) {\n            __builtin_prefetch(q4, 0, 1);\n            __builtin_prefetch(q8, 0, 1);\n\n            vector signed char qxs0 = (vector signed char)vec_xl( 0, q4);\n            vector signed char qxs1 = (vector signed char)vec_xl(16, q4);\n            q4 += 32;\n\n            vector signed char q4x00 = (vector signed char)vec_and(qxs0, lowMask);\n            vector signed char q4x01 = (vector signed char)vec_sr(qxs0, v4);\n            vector signed char q4x10 = (vector signed char)vec_and(qxs1, lowMask);\n            vector signed char q4x11 = (vector signed char)vec_sr(qxs1, v4);\n\n            q4x00 = vec_perm(values, values, (vector unsigned char)q4x00);\n            q4x01 = vec_perm(values, values, (vector unsigned char)q4x01);\n            q4x10 = vec_perm(values, values, (vector unsigned char)q4x10);\n            q4x11 = vec_perm(values, values, (vector unsigned char)q4x11);\n\n            vector signed char q8y0 = vec_xl( 0, q8);\n            vector signed char q8y1 = vec_xl(16, q8);\n            vector signed char q8y2 = vec_xl(32, q8);\n            vector signed char q8y3 = vec_xl(48, q8);\n            q8 += 64;\n\n            vector signed short qv0 = vec_add(vec_mule(q4x00, q8y0), vec_mulo(q4x00, q8y0));\n            vector signed short qv1 = vec_add(vec_mule(q4x01, q8y1), vec_mulo(q4x01, q8y1));\n            vector signed short qv2 = vec_add(vec_mule(q4x10, q8y2), vec_mulo(q4x10, q8y2));\n            vector signed short qv3 = vec_add(vec_mule(q4x11, q8y3), vec_mulo(q4x11, q8y3));\n\n            const uint16_t ls0 = (uint16_t)(((sc[0] & 0xf) | ((h << 4) & 0x30)) - 32);\n            const uint16_t ls1 = (uint16_t)(((sc[0] >>  4) | ((h << 2) & 0x30)) - 32);\n            h >>= 4;\n            sc ++;\n\n            vector signed short vscales01 = vec_splats((int16_t)ls0);\n            vector signed short vscales23 = vec_splats((int16_t)ls1);\n\n            vsumi0 = vec_msum(qv0, vscales01, vsumi0);\n            vsumi1 = vec_msum(qv1, vscales01, vsumi1);\n            vsumi2 = vec_msum(qv2, vscales23, vsumi2);\n            vsumi3 = vec_msum(qv3, vscales23, vsumi3);\n        }\n\n        vsumf0 = vec_madd(vec_ctf(vsumi0, 0), vd, vsumf0);\n        vsumf1 = vec_madd(vec_ctf(vsumi1, 0), vd, vsumf1);\n        vsumf2 = vec_madd(vec_ctf(vsumi2, 0), vd, vsumf2);\n        vsumf3 = vec_madd(vec_ctf(vsumi3, 0), vd, vsumf3);\n    }\n\n    vsumf0 = vec_add(vsumf0, vsumf2);\n    vsumf1 = vec_add(vsumf1, vsumf3);\n\n    vsumf0 = vec_add(vsumf0, vsumf1);\n\n    vsumf0 = vec_add(vsumf0, vec_sld(vsumf0, vsumf0, 4));\n    vsumf0 = vec_add(vsumf0, vec_sld(vsumf0, vsumf0, 8));\n\n    *s = vec_extract(vsumf0, 0);\n\n#elif defined(__loongarch_asx)\n\n    const __m128i values128 = __lsx_vld((const __m128i*)kvalues_iq4nl, 0);\n    const __m128i m4b  = __lsx_vreplgr2vr_b(0x0f);\n\n    __m256 accum = (__m256)__lasx_xvldi(0);\n    __m256i tmp1;\n    __m128i tmp0, tmp2, tmp3, tmp4, mask_8f, mask;\n\n    mask_8f = __lsx_vreplgr2vr_b(0x8f);\n    for (int ibl = 0; ibl < nb; ++ibl) {\n        const uint8_t * qs = x[ibl].qs;\n        const int8_t  * q8 = y[ibl].qs;\n        uint16_t sh = x[ibl].scales_h;\n        __m256i sumi1 = __lasx_xvldi(0);\n        __m256i sumi2 = __lasx_xvldi(0);\n        __m128i zero = __lsx_vldi(0);\n        for (int ib = 0; ib < QK_K/32; ib += 2) {\n            const __m128i q4bits_1 = __lsx_vld((const __m128i*)qs, 0);  qs += 16;\n            const __m128i q4bits_2 = __lsx_vld((const __m128i*)qs, 0);  qs += 16;\n            const __m256i q8b_1 = __lasx_xvld((const __m256i *)q8, 0); q8 += 32;\n            const __m256i q8b_2 = __lasx_xvld((const __m256i *)q8, 0); q8 += 32;\n            tmp2 = __lsx_vand_v(__lsx_vand_v(__lsx_vsrli_h(q4bits_1, 4), m4b), mask_8f);\n            tmp0 = __lsx_vori_b(tmp2, 0x10);\n            mask = __lsx_vsle_b(zero, tmp2);\n            tmp3 = __lsx_vand_v(tmp0, mask);\n            tmp3 = __lsx_vshuf_b(values128, zero, tmp3);\n\n            tmp2 = __lsx_vand_v(__lsx_vand_v(q4bits_1, m4b), mask_8f);\n            tmp0 = __lsx_vori_b(tmp2, 0x10);\n            mask = __lsx_vsle_b(zero, tmp2);\n            tmp4 = __lsx_vand_v(tmp0, mask);\n            tmp4 = __lsx_vshuf_b(values128, zero, tmp4);\n\n            const __m256i q4b_1 = lasx_insertf128(tmp3, tmp4);\n\n            tmp2 = __lsx_vand_v(__lsx_vand_v(__lsx_vsrli_h(q4bits_2, 4), m4b), mask_8f);\n            tmp0 = __lsx_vori_b(tmp2, 0x10);\n            mask = __lsx_vsle_b(zero, tmp2);\n            tmp3 = __lsx_vand_v(tmp0, mask);\n            tmp3 = __lsx_vshuf_b(values128, zero, tmp3);\n\n            tmp2 = __lsx_vand_v(__lsx_vand_v(q4bits_2, m4b), mask_8f);\n            tmp0 = __lsx_vori_b(tmp2, 0x10);\n            mask = __lsx_vsle_b(zero, tmp2);\n            tmp4 = __lsx_vand_v(tmp0, mask);\n            tmp4 = __lsx_vshuf_b(values128, zero, tmp4);\n\n            const __m256i q4b_2 = lasx_insertf128(tmp3, tmp4);\n\n            const __m256i p16_1 = mul_add_epi8(q4b_1, q8b_1);\n            const __m256i p16_2 = mul_add_epi8(q4b_2, q8b_2);\n            const int16_t ls1 = ((x[ibl].scales_l[ib/2] & 0xf) | ((sh << 4) & 0x30)) - 32;\n            const int16_t ls2 = ((x[ibl].scales_l[ib/2] >>  4) | ((sh << 2) & 0x30)) - 32;\n            sh >>= 4;\n            __m256i tmp5, tmp6;\n            tmp1 = __lasx_xvreplgr2vr_h(ls1);\n            tmp5 = __lasx_xvmulwev_w_h(p16_1, tmp1);\n            tmp6 = __lasx_xvmulwod_w_h(p16_1, tmp1);\n            const __m256i p_1 = __lasx_xvadd_w(tmp5, tmp6);\n            tmp1 = __lasx_xvreplgr2vr_h(ls2);\n            tmp5 = __lasx_xvmulwev_w_h(p16_2, tmp1);\n            tmp6 = __lasx_xvmulwod_w_h(p16_2, tmp1);\n            const __m256i p_2 = __lasx_xvadd_w(tmp5, tmp6);\n            sumi1 = __lasx_xvadd_w(p_1, sumi1);\n            sumi2 = __lasx_xvadd_w(p_2, sumi2);\n        }\n        accum = __lasx_xvfmadd_s(__lasx_xvreplfr2vr_s(GGML_FP16_TO_FP32(x[ibl].d)*y[ibl].d),\n                __lasx_xvffint_s_w(__lasx_xvadd_w(sumi1, sumi2)), accum);\n    }\n\n    *s = hsum_float_8(accum);\n\n#else\n    float sumf = 0;\n    for (int ibl = 0; ibl < nb; ++ibl) {\n        const float d4d8 = GGML_FP16_TO_FP32(x[ibl].d) * y[ibl].d;\n        uint16_t h = x[ibl].scales_h;\n        const uint8_t * qs = x[ibl].qs;\n        const int8_t  * q8 = y[ibl].qs;\n        for (int ib = 0; ib < QK_K/32; ib += 2) {\n            const uint8_t ls1 = (x[ibl].scales_l[ib/2] & 0xf) | ((h << 4) & 0x30);\n            const uint8_t ls2 = (x[ibl].scales_l[ib/2] >>  4) | ((h << 2) & 0x30);\n            h >>= 4;\n            const float d1 = d4d8*(ls1 - 32);\n            const float d2 = d4d8*(ls2 - 32);\n            int sumi1 = 0, sumi2 = 0;\n            for (int j = 0; j < 16; ++j) {\n                sumi1 += q8[j+ 0] * kvalues_iq4nl[qs[j] & 0xf];\n                sumi2 += q8[j+16] * kvalues_iq4nl[qs[j] >>  4];\n            }\n            sumf += d1 * (sumi1 + sumi2);\n            qs += 16;\n            q8 += 32;\n            sumi1 = sumi2 = 0;\n            for (int j = 0; j < 16; ++j) {\n                sumi1 += q8[j+ 0] * kvalues_iq4nl[qs[j] & 0xf];\n                sumi2 += q8[j+16] * kvalues_iq4nl[qs[j] >>  4];\n            }\n            sumf += d2 * (sumi1 + sumi2);\n            qs += 16;\n            q8 += 32;\n        }\n    }\n    *s = sumf;\n#endif\n}\n\n// ================================ IQ2 quantization =============================================\n\ntypedef struct {\n    uint64_t * grid;\n    int      * map;\n    uint16_t * neighbours;\n} iq2_entry_t;\n\nstatic iq2_entry_t iq2_data[4] = {\n    {NULL, NULL, NULL},\n    {NULL, NULL, NULL},\n    {NULL, NULL, NULL},\n    {NULL, NULL, NULL},\n};\n\nstatic inline int iq2_data_index(enum ggml_type type) {\n    GGML_ASSERT(type == GGML_TYPE_IQ2_XXS || type == GGML_TYPE_IQ2_XS || type == GGML_TYPE_IQ1_S || type == GGML_TYPE_IQ1_M || type == GGML_TYPE_IQ2_S);\n    return type == GGML_TYPE_IQ2_XXS ? 0 :\n           type == GGML_TYPE_IQ2_XS  ? 1 :\n           type == GGML_TYPE_IQ1_S || type == GGML_TYPE_IQ1_M ? 2 : 3;\n}\n\nstatic inline int iq2_grid_size(enum ggml_type type) {\n    GGML_ASSERT(type == GGML_TYPE_IQ2_XXS || type == GGML_TYPE_IQ2_XS || type == GGML_TYPE_IQ1_S || type == GGML_TYPE_IQ1_M || type == GGML_TYPE_IQ2_S);\n    return type == GGML_TYPE_IQ2_XXS ? 256 :\n           type == GGML_TYPE_IQ2_XS  ? 512 :\n           type == GGML_TYPE_IQ1_S || type == GGML_TYPE_IQ1_M ? NGRID_IQ1S : 1024;\n}\n\nstatic int iq2_compare_func(const void * left, const void * right) {\n    const int * l = (const int *)left;\n    const int * r = (const int *)right;\n    return l[0] < r[0] ? -1 : l[0] > r[0] ? 1 : l[1] < r[1] ? -1 : l[1] > r[1] ? 1 : 0;\n}\n\nvoid iq2xs_init_impl(enum ggml_type type) {\n    const int gindex = iq2_data_index(type);\n    const int grid_size = iq2_grid_size(type);\n    if (iq2_data[gindex].grid) {\n        return;\n    }\n    static const uint16_t kgrid_2bit_256[256] = {\n            0,     2,     5,     8,    10,    17,    20,    32,    34,    40,    42,    65,    68,    80,    88,    97,\n          100,   128,   130,   138,   162,   257,   260,   272,   277,   320,   388,   408,   512,   514,   546,   642,\n         1025,  1028,  1040,  1057,  1060,  1088,  1090,  1096,  1120,  1153,  1156,  1168,  1188,  1280,  1282,  1288,\n         1312,  1350,  1385,  1408,  1425,  1545,  1552,  1600,  1668,  1700,  2048,  2053,  2056,  2068,  2088,  2113,\n         2116,  2128,  2130,  2184,  2308,  2368,  2562,  2580,  4097,  4100,  4112,  4129,  4160,  4192,  4228,  4240,\n         4245,  4352,  4360,  4384,  4432,  4442,  4480,  4644,  4677,  5120,  5128,  5152,  5157,  5193,  5248,  5400,\n         5474,  5632,  5654,  6145,  6148,  6160,  6208,  6273,  6400,  6405,  6560,  6737,  8192,  8194,  8202,  8260,\n         8289,  8320,  8322,  8489,  8520,  8704,  8706,  9217,  9220,  9232,  9280,  9302,  9472,  9537,  9572,  9872,\n        10248, 10272, 10388, 10820, 16385, 16388, 16400, 16408, 16417, 16420, 16448, 16456, 16470, 16480, 16513, 16516,\n        16528, 16640, 16672, 16737, 16768, 16773, 16897, 16912, 16968, 16982, 17000, 17408, 17416, 17440, 17536, 17561,\n        17682, 17700, 17920, 18433, 18436, 18448, 18496, 18501, 18688, 18776, 18785, 18818, 19013, 19088, 20480, 20488,\n        20497, 20505, 20512, 20608, 20616, 20740, 20802, 20900, 21137, 21648, 21650, 21770, 22017, 22100, 22528, 22545,\n        22553, 22628, 22848, 23048, 24580, 24592, 24640, 24680, 24832, 24917, 25112, 25184, 25600, 25605, 25872, 25874,\n        25988, 26690, 32768, 32770, 32778, 32833, 32898, 33028, 33048, 33088, 33297, 33793, 33796, 33808, 33813, 33856,\n        33888, 34048, 34118, 34196, 34313, 34368, 34400, 34818, 35076, 35345, 36868, 36880, 36900, 36928, 37025, 37142,\n        37248, 37445, 37888, 37922, 37956, 38225, 39041, 39200, 40962, 41040, 41093, 41225, 41472, 42008, 43088, 43268,\n    };\n    static const uint16_t kgrid_2bit_512[512] = {\n            0,     2,     5,     8,    10,    17,    20,    22,    25,    32,    34,    37,    40,    65,    68,    70,\n           73,    80,    82,    85,    88,    97,   100,   128,   130,   133,   136,   145,   148,   153,   160,   257,\n          260,   262,   265,   272,   274,   277,   280,   282,   289,   292,   320,   322,   325,   328,   337,   340,\n          352,   360,   385,   388,   400,   512,   514,   517,   520,   529,   532,   544,   577,   580,   592,   597,\n          640,   650,  1025,  1028,  1030,  1033,  1040,  1042,  1045,  1048,  1057,  1060,  1088,  1090,  1093,  1096,\n         1105,  1108,  1110,  1120,  1153,  1156,  1168,  1280,  1282,  1285,  1288,  1297,  1300,  1312,  1345,  1348,\n         1360,  1377,  1408,  1537,  1540,  1552,  1574,  1600,  1602,  1668,  2048,  2050,  2053,  2056,  2058,  2065,\n         2068,  2080,  2085,  2113,  2116,  2128,  2136,  2176,  2208,  2218,  2305,  2308,  2320,  2368,  2433,  2441,\n         2560,  2592,  2600,  2710,  2720,  4097,  4100,  4102,  4105,  4112,  4114,  4117,  4120,  4129,  4132,  4160,\n         4162,  4165,  4168,  4177,  4180,  4192,  4202,  4225,  4228,  4240,  4352,  4354,  4357,  4360,  4369,  4372,\n         4384,  4417,  4420,  4432,  4480,  4500,  4502,  4609,  4612,  4614,  4624,  4672,  4704,  5120,  5122,  5125,\n         5128,  5137,  5140,  5152,  5185,  5188,  5193,  5200,  5220,  5248,  5377,  5380,  5392,  5440,  5632,  5652,\n         5705,  6145,  6148,  6160,  6162,  6208,  6228,  6278,  6400,  6405,  6502,  6737,  6825,  8192,  8194,  8197,\n         8200,  8202,  8209,  8212,  8224,  8257,  8260,  8272,  8320,  8352,  8449,  8452,  8464,  8512,  8520,  8549,\n         8704,  8738,  8832,  8872,  9217,  9220,  9232,  9257,  9280,  9472,  9537,  9554,  9625,  9729,  9754,  9894,\n        10240, 10248, 10250, 10272, 10325, 10376, 10402, 10600, 10640, 10760, 10784, 10882, 10888, 10890, 16385, 16388,\n        16390, 16393, 16400, 16402, 16405, 16408, 16417, 16420, 16448, 16450, 16453, 16456, 16458, 16465, 16468, 16480,\n        16485, 16513, 16516, 16528, 16640, 16642, 16645, 16648, 16657, 16660, 16672, 16705, 16708, 16720, 16768, 16773,\n        16802, 16897, 16900, 16912, 16914, 16937, 16960, 17408, 17410, 17413, 17416, 17425, 17428, 17433, 17440, 17473,\n        17476, 17488, 17536, 17556, 17665, 17668, 17680, 17700, 17728, 17818, 17920, 17930, 17988, 18000, 18433, 18436,\n        18448, 18496, 18501, 18516, 18530, 18688, 18705, 18756, 18768, 18793, 18948, 20480, 20482, 20485, 20488, 20497,\n        20500, 20512, 20520, 20545, 20548, 20560, 20608, 20737, 20740, 20752, 20757, 20800, 20802, 20992, 21060, 21162,\n        21505, 21508, 21520, 21537, 21568, 21600, 21633, 21665, 21760, 21768, 21888, 21896, 22049, 22120, 22177, 22528,\n        22548, 22593, 22608, 22681, 22810, 22848, 22850, 23173, 24577, 24580, 24592, 24640, 24660, 24674, 24710, 24745,\n        24832, 25124, 25162, 25234, 25600, 25622, 25872, 25920, 25925, 26020, 26625, 26730, 26917, 27142, 27220, 27234,\n        32768, 32770, 32773, 32776, 32785, 32788, 32800, 32810, 32833, 32836, 32848, 32896, 32898, 32936, 32938, 33025,\n        33028, 33030, 33040, 33088, 33105, 33113, 33280, 33312, 33408, 33410, 33440, 33448, 33793, 33796, 33808, 33810,\n        33813, 33856, 33888, 33929, 34048, 34116, 34213, 34328, 34410, 34816, 34824, 34853, 34906, 34944, 34946, 34984,\n        35078, 35362, 35456, 35464, 35478, 35496, 36865, 36868, 36880, 36928, 36950, 36996, 37120, 37154, 37220, 37462,\n        37513, 37888, 37893, 37956, 37968, 37976, 38185, 38288, 38290, 38465, 38993, 39078, 39241, 39445, 39520, 40960,\n        40962, 40968, 40970, 40992, 41002, 41120, 41297, 41305, 41382, 41472, 41474, 41480, 41514, 41600, 41632, 42048,\n        42133, 42597, 42648, 43018, 43040, 43042, 43048, 43168, 43176, 43268, 43396, 43398, 43560, 43562, 43665, 43690,\n    };\n    static const uint16_t kgrid_1bit_2048[NGRID_IQ1S] = {\n            0,     2,     5,     8,    10,    17,    21,    32,    34,    40,    42,    69,    81,    84,    86,   101,\n          128,   130,   136,   138,   149,   160,   162,   168,   170,   260,   261,   273,   276,   278,   281,   282,\n          293,   321,   326,   329,   338,   341,   346,   353,   356,   358,   360,   389,   401,   404,   406,   421,\n          512,   514,   520,   522,   533,   544,   546,   552,   554,   581,   593,   601,   612,   617,   640,   642,\n          648,   650,   657,   661,   665,   672,   674,   680,   682,  1041,  1044,  1046,  1061,  1089,  1097,  1109,\n         1114,  1124,  1125,  1169,  1177,  1189,  1281,  1284,  1285,  1286,  1301,  1304,  1306,  1321,  1344,  1349,\n         1354,  1360,  1361,  1364,  1365,  1366,  1369,  1376,  1378,  1381,  1384,  1386,  1409,  1425,  1429,  1432,\n         1434,  1441,  1444,  1445,  1446,  1449,  1556,  1561,  1601,  1604,  1616,  1618,  1621,  1624,  1632,  1633,\n         1638,  1641,  1669,  1681,  1684,  1689,  2048,  2050,  2056,  2058,  2069,  2080,  2082,  2088,  2090,  2117,\n         2129,  2134,  2149,  2176,  2178,  2184,  2186,  2197,  2208,  2210,  2216,  2218,  2309,  2321,  2324,  2329,\n         2340,  2341,  2369,  2384,  2385,  2389,  2401,  2404,  2409,  2449,  2452,  2454,  2457,  2469,  2560,  2562,\n         2568,  2570,  2581,  2592,  2594,  2600,  2602,  2629,  2641,  2649,  2657,  2661,  2688,  2690,  2693,  2696,\n         2698,  2709,  2720,  2722,  2728,  2730,  4112,  4113,  4116,  4121,  4132,  4133,  4161,  4164,  4176,  4181,\n         4184,  4193,  4196,  4197,  4201,  4241,  4244,  4246,  4257,  4261,  4353,  4356,  4358,  4361,  4368,  4370,\n         4373,  4376,  4385,  4388,  4393,  4421,  4426,  4432,  4433,  4434,  4436,  4437,  4438,  4441,  4448,  4453,\n         4484,  4498,  4501,  4513,  4516,  4625,  4628,  4630,  4645,  4672,  4678,  4681,  4690,  4693,  4696,  4698,\n         4708,  4710,  4741,  4753,  4756,  4758,  4773,  5121,  5126,  5129,  5140,  5141,  5144,  5145,  5153,  5158,\n         5185,  5189,  5190,  5192,  5194,  5201,  5204,  5205,  5206,  5209,  5218,  5221,  5224,  5252,  5257,  5264,\n         5268,  5269,  5272,  5273,  5274,  5281,  5284,  5285,  5289,  5378,  5381,  5386,  5393,  5396,  5397,  5398,\n         5401,  5408,  5410,  5413,  5416,  5418,  5441,  5444,  5445,  5446,  5457,  5458,  5460,  5461,  5462,  5465,\n         5466,  5473,  5476,  5477,  5478,  5481,  5504,  5506,  5508,  5509,  5512,  5514,  5520,  5521,  5524,  5525,\n         5526,  5529,  5530,  5536,  5538,  5541,  5633,  5636,  5637,  5638,  5653,  5654,  5656,  5658,  5665,  5670,\n         5696,  5698,  5700,  5701,  5704,  5706,  5713,  5717,  5718,  5720,  5721,  5729,  5732,  5733,  5736,  5737,\n         5738,  5766,  5770,  5778,  5781,  5796,  5801,  6161,  6166,  6181,  6209,  6212,  6214,  6217,  6224,  6229,\n         6232,  6234,  6240,  6241,  6244,  6246,  6249,  6277,  6289,  6292,  6309,  6416,  6418,  6421,  6426,  6433,\n         6437,  6466,  6468,  6469,  6472,  6481,  6484,  6485,  6486,  6489,  6490,  6496,  6501,  6506,  6537,  6545,\n         6546,  6549,  6552,  6561,  6566,  6569,  6665,  6678,  6692,  6694,  6724,  6726,  6729,  6736,  6738,  6741,\n         6744,  6753,  6758,  6761,  6789,  6801,  6806,  6810,  8192,  8194,  8200,  8202,  8213,  8224,  8226,  8229,\n         8232,  8234,  8261,  8273,  8281,  8289,  8293,  8320,  8322,  8328,  8330,  8341,  8352,  8354,  8357,  8360,\n         8362,  8453,  8465,  8468,  8473,  8485,  8514,  8516,  8521,  8533,  8536,  8538,  8545,  8548,  8549,  8550,\n         8581,  8592,  8598,  8601,  8613,  8705,  8712,  8714,  8721,  8725,  8736,  8738,  8744,  8746,  8773,  8785,\n         8790,  8793,  8805,  8833,  8840,  8842,  8849,  8853,  8864,  8866,  8872,  8874,  9221,  9236,  9238,  9241,\n         9253,  9284,  9285,  9286,  9289,  9298,  9301,  9304,  9306,  9318,  9349,  9361,  9364,  9369,  9377,  9381,\n         9481,  9493,  9505,  9513,  9536,  9541,  9544,  9553,  9556,  9557,  9561,  9570,  9573,  9576,  9609,  9616,\n         9620,  9621,  9624,  9626,  9633,  9636,  9638,  9641,  9733,  9744,  9746,  9753,  9765,  9793,  9801,  9813,\n         9824,  9825,  9833,  9860,  9862,  9872,  9882, 10240, 10242, 10248, 10250, 10261, 10272, 10274, 10280, 10282,\n        10309, 10321, 10324, 10341, 10368, 10370, 10376, 10378, 10400, 10402, 10408, 10410, 10505, 10513, 10516, 10521,\n        10533, 10566, 10569, 10578, 10581, 10593, 10596, 10598, 10601, 10629, 10640, 10646, 10649, 10660, 10661, 10752,\n        10754, 10760, 10762, 10784, 10786, 10792, 10794, 10821, 10833, 10838, 10841, 10853, 10880, 10882, 10888, 10890,\n        10901, 10912, 10914, 10920, 10922, 16389, 16401, 16406, 16421, 16457, 16466, 16469, 16472, 16474, 16481, 16484,\n        16486, 16532, 16537, 16545, 16550, 16640, 16641, 16644, 16646, 16649, 16658, 16661, 16662, 16664, 16666, 16673,\n        16678, 16681, 16709, 16712, 16714, 16721, 16724, 16725, 16726, 16729, 16730, 16741, 16744, 16746, 16769, 16772,\n        16774, 16784, 16786, 16789, 16800, 16801, 16802, 16901, 16913, 16916, 16918, 16933, 16961, 16978, 16981, 16986,\n        16996, 17001, 17033, 17044, 17061, 17409, 17429, 17433, 17449, 17477, 17480, 17482, 17489, 17492, 17493, 17494,\n        17505, 17506, 17509, 17512, 17514, 17537, 17542, 17545, 17552, 17554, 17557, 17568, 17569, 17577, 17665, 17666,\n        17669, 17674, 17681, 17684, 17685, 17686, 17689, 17696, 17701, 17706, 17729, 17732, 17733, 17734, 17737, 17744,\n        17745, 17748, 17749, 17750, 17752, 17753, 17761, 17764, 17765, 17766, 17769, 17794, 17796, 17797, 17800, 17809,\n        17812, 17813, 17814, 17817, 17818, 17829, 17832, 17834, 17921, 17925, 17929, 17940, 17941, 17944, 17946, 17953,\n        17956, 17961, 17984, 17986, 17989, 17992, 18000, 18001, 18002, 18005, 18006, 18009, 18018, 18021, 18024, 18049,\n        18053, 18058, 18068, 18069, 18081, 18084, 18086, 18437, 18449, 18453, 18458, 18469, 18498, 18505, 18512, 18517,\n        18520, 18529, 18532, 18534, 18537, 18565, 18577, 18580, 18582, 18585, 18597, 18689, 18693, 18694, 18698, 18704,\n        18708, 18709, 18712, 18721, 18724, 18726, 18752, 18757, 18762, 18769, 18770, 18772, 18773, 18774, 18777, 18784,\n        18786, 18789, 18790, 18794, 18822, 18825, 18834, 18837, 18838, 18840, 18849, 18852, 18854, 18857, 18966, 19012,\n        19014, 19017, 19029, 19032, 19034, 19044, 19049, 19092, 19109, 20481, 20484, 20485, 20486, 20489, 20498, 20501,\n        20506, 20513, 20516, 20521, 20544, 20549, 20552, 20561, 20564, 20565, 20566, 20569, 20581, 20584, 20614, 20617,\n        20629, 20632, 20640, 20641, 20646, 20649, 20741, 20744, 20745, 20746, 20753, 20756, 20757, 20758, 20760, 20761,\n        20768, 20773, 20774, 20776, 20778, 20801, 20804, 20805, 20806, 20809, 20816, 20817, 20818, 20820, 20821, 20822,\n        20824, 20825, 20826, 20833, 20836, 20837, 20838, 20841, 20866, 20869, 20881, 20884, 20885, 20886, 20889, 20896,\n        20901, 20906, 20993, 20998, 21010, 21013, 21018, 21025, 21028, 21058, 21061, 21066, 21073, 21076, 21077, 21078,\n        21081, 21090, 21093, 21125, 21136, 21138, 21141, 21145, 21146, 21156, 21508, 21509, 21521, 21524, 21525, 21526,\n        21528, 21529, 21537, 21541, 21544, 21546, 21569, 21572, 21573, 21574, 21577, 21578, 21584, 21585, 21588, 21589,\n        21590, 21592, 21593, 21594, 21601, 21602, 21604, 21605, 21606, 21609, 21632, 21640, 21642, 21649, 21652, 21653,\n        21654, 21657, 21665, 21668, 21669, 21674, 21761, 21762, 21764, 21765, 21766, 21769, 21776, 21777, 21778, 21780,\n        21781, 21782, 21785, 21786, 21793, 21796, 21797, 21798, 21801, 21824, 21825, 21826, 21828, 21829, 21830, 21832,\n        21833, 21840, 21841, 21842, 21844, 21845, 21846, 21848, 21849, 21850, 21856, 21857, 21860, 21861, 21862, 21864,\n        21865, 21866, 21889, 21892, 21893, 21897, 21898, 21904, 21905, 21908, 21909, 21910, 21912, 21913, 21921, 21924,\n        21925, 21926, 21929, 22016, 22017, 22018, 22020, 22022, 22024, 22025, 22033, 22036, 22037, 22040, 22041, 22048,\n        22049, 22050, 22052, 22053, 22054, 22056, 22057, 22081, 22085, 22086, 22088, 22089, 22090, 22096, 22097, 22098,\n        22100, 22101, 22102, 22104, 22105, 22106, 22113, 22116, 22117, 22121, 22146, 22149, 22150, 22152, 22153, 22154,\n        22161, 22165, 22170, 22178, 22181, 22182, 22184, 22185, 22532, 22533, 22534, 22537, 22544, 22549, 22552, 22561,\n        22570, 22597, 22600, 22602, 22609, 22612, 22613, 22614, 22616, 22617, 22624, 22626, 22628, 22629, 22658, 22665,\n        22672, 22674, 22677, 22680, 22689, 22697, 22785, 22786, 22789, 22794, 22801, 22804, 22805, 22806, 22809, 22821,\n        22849, 22852, 22853, 22854, 22857, 22864, 22865, 22866, 22868, 22869, 22870, 22872, 22873, 22874, 22881, 22884,\n        22885, 22886, 22889, 22913, 22917, 22921, 22929, 22932, 22933, 22934, 22936, 22937, 22949, 23044, 23048, 23061,\n        23066, 23072, 23077, 23078, 23081, 23109, 23112, 23113, 23121, 23125, 23126, 23128, 23129, 23138, 23141, 23144,\n        23146, 23169, 23178, 23186, 23189, 23190, 23192, 23194, 23201, 24581, 24596, 24598, 24601, 24613, 24644, 24656,\n        24661, 24662, 24664, 24666, 24673, 24676, 24678, 24681, 24705, 24726, 24741, 24833, 24836, 24838, 24841, 24850,\n        24853, 24865, 24866, 24870, 24873, 24901, 24905, 24913, 24917, 24918, 24921, 24933, 24934, 24938, 24964, 24970,\n        24978, 24981, 24993, 24998, 25001, 25105, 25110, 25113, 25152, 25153, 25158, 25173, 25174, 25176, 25184, 25221,\n        25233, 25238, 25253, 25617, 25618, 25621, 25622, 25626, 25633, 25638, 25641, 25664, 25666, 25669, 25672, 25674,\n        25681, 25684, 25685, 25686, 25689, 25690, 25696, 25698, 25701, 25732, 25733, 25737, 25744, 25746, 25748, 25749,\n        25750, 25752, 25754, 25761, 25764, 25769, 25861, 25864, 25866, 25873, 25877, 25878, 25881, 25924, 25925, 25926,\n        25929, 25936, 25937, 25940, 25941, 25942, 25945, 25953, 25956, 25957, 25958, 25961, 25990, 25993, 25994, 26001,\n        26005, 26006, 26009, 26010, 26018, 26021, 26022, 26024, 26114, 26121, 26133, 26144, 26150, 26152, 26153, 26176,\n        26181, 26184, 26186, 26193, 26196, 26197, 26198, 26200, 26202, 26208, 26213, 26216, 26240, 26242, 26245, 26250,\n        26260, 26262, 26264, 26265, 26272, 26276, 26278, 26282, 26646, 26649, 26661, 26689, 26706, 26709, 26714, 26721,\n        26729, 26757, 26769, 26776, 26790, 26881, 26884, 26896, 26901, 26913, 26916, 26918, 26921, 26944, 26945, 26949,\n        26950, 26952, 26961, 26964, 26965, 26966, 26969, 26976, 26981, 26986, 27010, 27012, 27018, 27029, 27041, 27044,\n        27045, 27049, 27153, 27158, 27160, 27201, 27204, 27209, 27216, 27221, 27224, 27226, 27236, 27237, 27241, 27270,\n        27284, 27288, 27290, 27302, 32768, 32770, 32776, 32778, 32800, 32802, 32808, 32810, 32837, 32848, 32849, 32852,\n        32854, 32857, 32869, 32896, 32898, 32904, 32906, 32917, 32928, 32930, 32936, 32938, 33029, 33041, 33044, 33046,\n        33049, 33061, 33089, 33092, 33097, 33104, 33106, 33109, 33110, 33112, 33113, 33124, 33126, 33129, 33157, 33161,\n        33172, 33174, 33177, 33189, 33280, 33282, 33288, 33290, 33301, 33312, 33314, 33320, 33322, 33361, 33364, 33369,\n        33381, 33408, 33410, 33416, 33418, 33429, 33440, 33442, 33448, 33450, 33812, 33817, 33857, 33860, 33873, 33877,\n        33882, 33889, 33892, 33897, 33940, 33945, 34049, 34057, 34066, 34069, 34074, 34086, 34089, 34112, 34113, 34117,\n        34120, 34129, 34132, 34133, 34134, 34137, 34138, 34149, 34150, 34152, 34154, 34177, 34180, 34182, 34185, 34192,\n        34194, 34197, 34200, 34214, 34321, 34326, 34329, 34341, 34369, 34372, 34377, 34378, 34384, 34389, 34393, 34394,\n        34401, 34406, 34410, 34437, 34449, 34458, 34468, 34816, 34818, 34824, 34826, 34837, 34848, 34850, 34856, 34858,\n        34881, 34885, 34897, 34900, 34905, 34917, 34921, 34944, 34946, 34952, 34954, 34965, 34976, 34978, 34984, 34986,\n        35077, 35078, 35089, 35092, 35094, 35109, 35137, 35140, 35142, 35145, 35152, 35154, 35157, 35162, 35169, 35172,\n        35205, 35222, 35225, 35237, 35328, 35330, 35336, 35338, 35349, 35360, 35362, 35368, 35370, 35397, 35409, 35412,\n        35414, 35456, 35458, 35464, 35466, 35477, 35488, 35490, 35496, 35498, 36869, 36881, 36886, 36888, 36889, 36901,\n        36929, 36934, 36937, 36949, 36952, 36954, 36969, 36970, 36997, 37009, 37012, 37014, 37017, 37029, 37121, 37124,\n        37126, 37129, 37136, 37141, 37144, 37146, 37153, 37156, 37158, 37161, 37184, 37189, 37200, 37201, 37204, 37205,\n        37206, 37209, 37218, 37221, 37252, 37254, 37266, 37269, 37272, 37281, 37284, 37286, 37289, 37381, 37393, 37396,\n        37401, 37413, 37444, 37446, 37449, 37456, 37458, 37461, 37464, 37478, 37481, 37509, 37524, 37526, 37545, 37889,\n        37892, 37894, 37904, 37909, 37912, 37926, 37952, 37962, 37969, 37972, 37973, 37974, 37976, 37977, 37984, 37985,\n        37986, 37989, 38020, 38022, 38034, 38036, 38037, 38040, 38049, 38057, 38144, 38149, 38152, 38154, 38160, 38161,\n        38164, 38165, 38166, 38169, 38177, 38181, 38185, 38186, 38209, 38212, 38213, 38214, 38217, 38224, 38225, 38226,\n        38228, 38229, 38230, 38232, 38233, 38234, 38241, 38244, 38245, 38246, 38249, 38273, 38277, 38280, 38289, 38290,\n        38292, 38293, 38294, 38297, 38298, 38304, 38306, 38309, 38312, 38314, 38401, 38404, 38416, 38421, 38425, 38432,\n        38438, 38441, 38469, 38472, 38473, 38481, 38482, 38485, 38486, 38489, 38501, 38504, 38530, 38532, 38537, 38538,\n        38546, 38548, 38549, 38564, 38566, 38569, 38917, 38934, 38937, 38949, 38977, 38982, 38992, 38994, 38997, 38998,\n        39002, 39012, 39013, 39045, 39057, 39062, 39065, 39077, 39172, 39174, 39177, 39184, 39186, 39189, 39192, 39194,\n        39200, 39201, 39204, 39206, 39232, 39234, 39237, 39240, 39242, 39249, 39252, 39253, 39254, 39257, 39266, 39269,\n        39270, 39274, 39297, 39300, 39312, 39314, 39317, 39322, 39329, 39334, 39429, 39445, 39461, 39492, 39494, 39497,\n        39504, 39509, 39512, 39521, 39557, 39569, 39572, 39573, 39574, 40960, 40962, 40968, 40970, 40981, 40992, 40994,\n        41000, 41002, 41029, 41041, 41044, 41046, 41049, 41088, 41090, 41096, 41098, 41109, 41120, 41122, 41128, 41130,\n        41221, 41225, 41233, 41236, 41238, 41241, 41242, 41286, 41289, 41297, 41301, 41304, 41306, 41313, 41316, 41349,\n        41360, 41362, 41366, 41369, 41474, 41480, 41482, 41488, 41497, 41506, 41512, 41514, 41541, 41553, 41558, 41561,\n        41573, 41600, 41602, 41608, 41610, 41621, 41632, 41634, 41640, 41642, 42009, 42021, 42049, 42052, 42064, 42068,\n        42069, 42072, 42074, 42081, 42085, 42086, 42088, 42089, 42117, 42246, 42249, 42256, 42258, 42261, 42264, 42278,\n        42281, 42306, 42309, 42321, 42324, 42325, 42326, 42329, 42341, 42346, 42369, 42372, 42373, 42374, 42377, 42386,\n        42389, 42392, 42501, 42513, 42518, 42522, 42529, 42533, 42564, 42566, 42570, 42578, 42581, 42582, 42584, 42592,\n        42594, 42630, 42640, 42645, 42646, 42649, 42657, 42660, 42662, 43008, 43010, 43016, 43018, 43040, 43042, 43048,\n        43050, 43089, 43092, 43094, 43097, 43136, 43138, 43144, 43146, 43157, 43168, 43170, 43176, 43178, 43269, 43284,\n        43289, 43297, 43301, 43329, 43344, 43349, 43354, 43361, 43366, 43369, 43408, 43414, 43520, 43522, 43528, 43530,\n        43552, 43554, 43560, 43562, 43601, 43604, 43606, 43648, 43650, 43656, 43658, 43669, 43680, 43682, 43688, 43690,\n    };\n    static const uint16_t kgrid_2bit_1024[1024] = {\n            0,     2,     5,     8,    10,    17,    20,    22,    25,    32,    34,    37,    40,    65,    68,    70,\n           73,    80,    82,    85,    88,    97,   100,   102,   105,   128,   130,   133,   136,   145,   148,   160,\n          165,   170,   257,   260,   262,   265,   272,   274,   277,   280,   289,   292,   320,   322,   325,   328,\n          337,   340,   342,   345,   352,   357,   360,   385,   388,   400,   402,   405,   417,   420,   512,   514,\n          517,   520,   529,   532,   544,   554,   577,   580,   582,   585,   592,   597,   640,   645,   650,   660,\n          674,  1025,  1028,  1030,  1033,  1040,  1042,  1045,  1048,  1057,  1060,  1062,  1065,  1088,  1090,  1093,\n         1096,  1098,  1105,  1108,  1110,  1113,  1120,  1122,  1125,  1153,  1156,  1158,  1161,  1168,  1173,  1176,\n         1185,  1188,  1280,  1282,  1285,  1288,  1290,  1297,  1300,  1302,  1305,  1312,  1317,  1320,  1345,  1348,\n         1350,  1353,  1360,  1362,  1365,  1368,  1377,  1380,  1408,  1410,  1413,  1416,  1425,  1428,  1440,  1537,\n         1540,  1542,  1545,  1552,  1557,  1600,  1605,  1608,  1617,  1620,  1632,  1665,  1668,  1680,  2048,  2050,\n         2053,  2056,  2065,  2068,  2070,  2073,  2080,  2085,  2090,  2113,  2116,  2118,  2121,  2128,  2130,  2133,\n         2136,  2145,  2148,  2176,  2181,  2196,  2218,  2305,  2308,  2320,  2322,  2325,  2328,  2337,  2368,  2373,\n         2376,  2385,  2388,  2400,  2433,  2448,  2560,  2577,  2580,  2594,  2600,  2602,  2640,  2713,  4097,  4100,\n         4102,  4105,  4112,  4114,  4117,  4120,  4129,  4132,  4134,  4160,  4162,  4165,  4168,  4177,  4180,  4182,\n         4185,  4192,  4194,  4197,  4200,  4225,  4228,  4230,  4240,  4245,  4248,  4257,  4260,  4352,  4354,  4357,\n         4360,  4362,  4369,  4372,  4374,  4377,  4384,  4386,  4389,  4392,  4417,  4420,  4422,  4425,  4432,  4434,\n         4437,  4440,  4449,  4452,  4480,  4482,  4485,  4488,  4497,  4500,  4609,  4612,  4617,  4624,  4629,  4641,\n         4644,  4672,  4677,  4689,  4692,  4737,  4740,  4752,  5120,  5122,  5125,  5128,  5137,  5140,  5142,  5145,\n         5152,  5157,  5160,  5185,  5188,  5190,  5193,  5200,  5202,  5205,  5208,  5217,  5220,  5248,  5250,  5253,\n         5256,  5265,  5268,  5280,  5377,  5380,  5382,  5385,  5392,  5394,  5397,  5400,  5409,  5412,  5440,  5442,\n         5445,  5448,  5457,  5460,  5472,  5505,  5508,  5520,  5632,  5637,  5640,  5649,  5652,  5664,  5697,  5700,\n         5712,  5760,  5802,  6145,  6148,  6150,  6153,  6160,  6165,  6168,  6177,  6208,  6210,  6213,  6216,  6225,\n         6228,  6240,  6273,  6276,  6400,  6402,  6405,  6408,  6417,  6420,  6432,  6465,  6468,  6480,  6505,  6562,\n         6660,  6672,  6720,  6742,  8192,  8194,  8197,  8200,  8209,  8212,  8214,  8217,  8224,  8229,  8234,  8257,\n         8260,  8272,  8274,  8277,  8292,  8320,  8330,  8340,  8362,  8449,  8452,  8464,  8466,  8469,  8481,  8512,\n         8514,  8517,  8529,  8532,  8544,  8577,  8580,  8592,  8704,  8714,  8738,  8744,  8746,  8772,  8784,  8840,\n         8842,  8872,  9217,  9220,  9222,  9225,  9232,  9237,  9240,  9249,  9252,  9280,  9282,  9285,  9288,  9297,\n         9300,  9312,  9345,  9348,  9360,  9472,  9477,  9480,  9489,  9492,  9504,  9537,  9540,  9552,  9574,  9600,\n         9729,  9732,  9744,  9792,  9817, 10240, 10245, 10257, 10260, 10305, 10308, 10320, 10378, 10410, 10497, 10500,\n        10512, 10645, 10762, 10786, 10852, 10888, 10890, 16385, 16388, 16390, 16393, 16400, 16402, 16405, 16408, 16410,\n        16417, 16420, 16422, 16448, 16450, 16453, 16456, 16458, 16465, 16468, 16470, 16473, 16480, 16482, 16485, 16513,\n        16516, 16528, 16533, 16536, 16545, 16548, 16640, 16642, 16645, 16648, 16657, 16660, 16662, 16665, 16672, 16674,\n        16677, 16705, 16708, 16710, 16713, 16720, 16722, 16725, 16728, 16737, 16740, 16768, 16770, 16773, 16776, 16785,\n        16788, 16800, 16897, 16900, 16912, 16914, 16917, 16920, 16932, 16960, 16965, 16968, 16977, 16980, 16992, 17025,\n        17028, 17408, 17410, 17413, 17416, 17418, 17425, 17428, 17430, 17433, 17440, 17442, 17445, 17448, 17473, 17476,\n        17478, 17481, 17488, 17490, 17493, 17496, 17505, 17508, 17536, 17538, 17541, 17544, 17553, 17556, 17568, 17665,\n        17668, 17670, 17673, 17680, 17682, 17685, 17688, 17697, 17700, 17728, 17730, 17733, 17736, 17745, 17748, 17760,\n        17770, 17793, 17796, 17808, 17920, 17922, 17925, 17928, 17937, 17940, 17952, 17985, 17988, 18000, 18048, 18085,\n        18433, 18436, 18441, 18448, 18450, 18453, 18456, 18465, 18468, 18496, 18498, 18501, 18504, 18513, 18516, 18528,\n        18564, 18576, 18688, 18690, 18693, 18696, 18705, 18708, 18720, 18753, 18756, 18768, 18816, 18838, 18945, 18948,\n        18960, 19008, 20480, 20482, 20485, 20488, 20497, 20500, 20502, 20505, 20512, 20514, 20517, 20520, 20545, 20548,\n        20550, 20553, 20560, 20562, 20565, 20568, 20577, 20580, 20608, 20610, 20613, 20616, 20625, 20628, 20737, 20740,\n        20742, 20745, 20752, 20754, 20757, 20760, 20769, 20772, 20800, 20802, 20805, 20808, 20817, 20820, 20832, 20865,\n        20868, 20880, 20992, 20997, 21000, 21009, 21012, 21024, 21057, 21060, 21072, 21097, 21120, 21505, 21508, 21510,\n        21513, 21520, 21522, 21525, 21528, 21537, 21540, 21568, 21570, 21573, 21576, 21585, 21588, 21600, 21633, 21636,\n        21648, 21760, 21762, 21765, 21768, 21777, 21780, 21792, 21825, 21828, 21840, 21888, 22017, 22020, 22032, 22054,\n        22080, 22528, 22530, 22533, 22536, 22545, 22548, 22560, 22593, 22596, 22608, 22618, 22656, 22785, 22788, 22800,\n        22848, 23040, 23065, 23173, 23208, 24577, 24580, 24582, 24592, 24594, 24597, 24600, 24609, 24612, 24640, 24645,\n        24648, 24657, 24660, 24672, 24708, 24720, 24832, 24834, 24837, 24840, 24849, 24852, 24864, 24897, 24900, 24912,\n        24960, 24985, 25092, 25104, 25152, 25174, 25249, 25600, 25605, 25608, 25617, 25620, 25632, 25665, 25668, 25680,\n        25728, 25857, 25860, 25872, 25920, 25930, 25960, 26002, 26112, 26260, 26625, 26628, 26640, 26725, 26776, 26880,\n        26922, 27202, 27297, 32768, 32770, 32773, 32776, 32785, 32788, 32793, 32800, 32805, 32833, 32836, 32848, 32850,\n        32853, 32856, 32865, 32896, 32901, 32913, 32916, 33025, 33028, 33033, 33040, 33042, 33045, 33048, 33057, 33060,\n        33088, 33090, 33093, 33096, 33105, 33108, 33153, 33156, 33168, 33193, 33280, 33285, 33290, 33297, 33300, 33345,\n        33348, 33360, 33793, 33796, 33798, 33801, 33808, 33810, 33813, 33816, 33825, 33856, 33858, 33861, 33864, 33873,\n        33876, 33888, 33921, 33924, 33936, 34048, 34050, 34053, 34056, 34065, 34068, 34080, 34113, 34116, 34128, 34176,\n        34186, 34305, 34308, 34320, 34345, 34368, 34816, 34821, 34833, 34836, 34881, 34884, 34896, 34978, 35073, 35076,\n        35136, 35173, 35362, 35416, 35418, 35458, 35490, 36865, 36868, 36873, 36880, 36882, 36885, 36888, 36900, 36928,\n        36930, 36933, 36936, 36945, 36948, 36960, 36993, 36996, 37008, 37120, 37125, 37137, 37140, 37185, 37188, 37200,\n        37210, 37377, 37380, 37392, 37440, 37542, 37888, 37890, 37893, 37896, 37905, 37908, 37920, 37953, 37956, 37968,\n        38016, 38038, 38145, 38148, 38160, 38208, 38296, 38305, 38400, 38470, 38500, 38913, 38916, 38928, 38950, 38976,\n        39081, 39168, 39241, 39250, 39568, 40960, 40965, 40970, 40980, 40994, 41002, 41025, 41028, 41040, 41122, 41130,\n        41280, 41317, 41474, 41482, 41506, 41512, 41514, 41602, 41608, 41610, 41640, 41985, 41988, 42000, 42048, 42121,\n        42148, 42240, 42265, 42577, 43018, 43048, 43170, 43348, 43398, 43528, 43530, 43552, 43554, 43560, 43656, 43690,\n    };\n\n    const int kmap_size = 43692;\n    //const int nwant = type == GGML_TYPE_IQ1_S ? 3 : 2;\n    const int nwant = type == GGML_TYPE_IQ1_S || type == GGML_TYPE_IQ1_M ? 3 : type == GGML_TYPE_IQ2_S ? 1 : 2;\n    const uint16_t * kgrid = type == GGML_TYPE_IQ2_XXS ? kgrid_2bit_256 :\n                             type == GGML_TYPE_IQ2_XS  ? kgrid_2bit_512 :\n                             type == GGML_TYPE_IQ1_S || type == GGML_TYPE_IQ1_M ? kgrid_1bit_2048 : kgrid_2bit_1024;\n    uint64_t * kgrid_q2xs;\n    int      * kmap_q2xs;\n    uint16_t * kneighbors_q2xs;\n\n    //printf(\"================================================================= %s(grid_size = %d)\\n\", __func__, grid_size);\n    uint64_t * the_grid = (uint64_t *)malloc(grid_size*sizeof(uint64_t));\n    for (int k = 0; k < grid_size; ++k) {\n        int8_t * pos = (int8_t *)(the_grid + k);\n        for (int i = 0; i < 8; ++i) {\n            int l = (kgrid[k] >> 2*i) & 0x3;\n            pos[i] = 2*l + 1;\n        }\n    }\n    kgrid_q2xs = the_grid;\n    iq2_data[gindex].grid = the_grid;\n    kmap_q2xs = (int *)malloc(kmap_size*sizeof(int));\n    iq2_data[gindex].map = kmap_q2xs;\n    for (int i = 0; i < kmap_size; ++i) kmap_q2xs[i] = -1;\n    uint64_t aux64;\n    uint8_t * aux8 = (uint8_t *)&aux64;\n    for (int i = 0; i < grid_size; ++i) {\n        aux64 = kgrid_q2xs[i];\n        uint16_t index = 0;\n        for (int k=0; k<8; ++k) {\n            uint16_t q = (aux8[k] - 1)/2;\n            index |= (q << 2*k);\n        }\n        kmap_q2xs[index] = i;\n    }\n    int8_t pos[8];\n    int * dist2 = (int *)malloc(2*grid_size*sizeof(int));\n    int num_neighbors = 0, num_not_in_map = 0;\n    for (int i = 0; i < kmap_size; ++i) {\n        if (kmap_q2xs[i] >= 0) continue;\n        ++num_not_in_map;\n        for (int k = 0; k < 8; ++k) {\n            int l = (i >> 2*k) & 0x3;\n            pos[k] = 2*l + 1;\n        }\n        for (int j = 0; j < grid_size; ++j) {\n            const int8_t * pg = (const int8_t *)(kgrid_q2xs + j);\n            int d2 = 0;\n            for (int k = 0; k < 8; ++k) d2 += (pg[k] - pos[k])*(pg[k] - pos[k]);\n            dist2[2*j+0] = d2;\n            dist2[2*j+1] = j;\n        }\n        qsort(dist2, grid_size, 2*sizeof(int), iq2_compare_func);\n        int n = 0; int d2 = dist2[0];\n        int nhave = 1;\n        for (int j = 0; j < grid_size; ++j) {\n            if (dist2[2*j] > d2) {\n                if (nhave == nwant) break;\n                d2 = dist2[2*j];\n                ++nhave;\n            }\n            ++n;\n        }\n        num_neighbors += n;\n    }\n    //printf(\"%s: %d neighbours in total\\n\", __func__, num_neighbors);\n    kneighbors_q2xs = (uint16_t *)malloc((num_neighbors + num_not_in_map)*sizeof(uint16_t));\n    iq2_data[gindex].neighbours = kneighbors_q2xs;\n    int counter = 0;\n    for (int i = 0; i < kmap_size; ++i) {\n        if (kmap_q2xs[i] >= 0) continue;\n        for (int k = 0; k < 8; ++k) {\n            int l = (i >> 2*k) & 0x3;\n            pos[k] = 2*l + 1;\n        }\n        for (int j = 0; j < grid_size; ++j) {\n            const int8_t * pg = (const int8_t *)(kgrid_q2xs + j);\n            int d2 = 0;\n            for (int k = 0; k < 8; ++k) d2 += (pg[k] - pos[k])*(pg[k] - pos[k]);\n            dist2[2*j+0] = d2;\n            dist2[2*j+1] = j;\n        }\n        qsort(dist2, grid_size, 2*sizeof(int), iq2_compare_func);\n        kmap_q2xs[i] = -(counter + 1);\n        int d2 = dist2[0];\n        uint16_t * start = &kneighbors_q2xs[counter++];\n        int n = 0, nhave = 1;\n        for (int j = 0; j < grid_size; ++j) {\n            if (dist2[2*j] > d2) {\n                if (nhave == nwant) break;\n                d2 = dist2[2*j];\n                ++nhave;\n            }\n            kneighbors_q2xs[counter++] = dist2[2*j+1];\n            ++n;\n        }\n        *start = n;\n    }\n    free(dist2);\n}\n\nvoid iq2xs_free_impl(enum ggml_type type) {\n    GGML_ASSERT(type == GGML_TYPE_IQ2_XXS || type == GGML_TYPE_IQ2_XS || type == GGML_TYPE_IQ1_S || type == GGML_TYPE_IQ1_M || type == GGML_TYPE_IQ2_S);\n    const int gindex = iq2_data_index(type);\n    if (iq2_data[gindex].grid) {\n        free(iq2_data[gindex].grid);       iq2_data[gindex].grid = NULL;\n        free(iq2_data[gindex].map);        iq2_data[gindex].map  = NULL;\n        free(iq2_data[gindex].neighbours); iq2_data[gindex].neighbours = NULL;\n    }\n}\n\nstatic int iq2_find_best_neighbour(const uint16_t * restrict neighbours, const uint64_t * restrict grid,\n        const float * restrict xval, const float * restrict weight, float scale, int8_t * restrict L) {\n    int num_neighbors = neighbours[0];\n    GGML_ASSERT(num_neighbors > 0);\n    float best_d2 = FLT_MAX;\n    int grid_index = -1;\n    for (int j = 1; j <= num_neighbors; ++j) {\n        const int8_t * pg = (const int8_t *)(grid + neighbours[j]);\n        float d2 = 0;\n        for (int i = 0; i < 8; ++i) {\n            float q = pg[i];\n            float diff = scale*q - xval[i];\n            d2 += weight[i]*diff*diff;\n        }\n        if (d2 < best_d2) {\n            best_d2 = d2; grid_index = neighbours[j];\n        }\n    }\n    GGML_ASSERT(grid_index >= 0);\n    const int8_t * pg = (const int8_t *)(grid + grid_index);\n    for (int i = 0; i < 8; ++i) L[i] = (pg[i] - 1)/2;\n    return grid_index;\n}\n\nstatic void quantize_row_iq2_xxs_impl(const float * restrict x, void * restrict vy, int64_t n, const float * restrict quant_weights) {\n\n    const int gindex = iq2_data_index(GGML_TYPE_IQ2_XXS);\n\n    const uint64_t * kgrid_q2xs      = iq2_data[gindex].grid;\n    const int      * kmap_q2xs       = iq2_data[gindex].map;\n    const uint16_t * kneighbors_q2xs = iq2_data[gindex].neighbours;\n\n    GGML_ASSERT(quant_weights   && \"missing quantization weights\");\n    GGML_ASSERT(kgrid_q2xs      && \"forgot to call ggml_quantize_init()?\");\n    GGML_ASSERT(kmap_q2xs       && \"forgot to call ggml_quantize_init()?\");\n    GGML_ASSERT(kneighbors_q2xs && \"forgot to call ggml_quantize_init()?\");\n    GGML_ASSERT(n%QK_K == 0);\n\n    const int kMaxQ = 3;\n\n    const int64_t nbl = n/QK_K;\n\n    block_iq2_xxs * y = vy;\n\n    float scales[QK_K/32];\n    float weight[32];\n    float xval[32];\n    int8_t L[32];\n    int8_t Laux[32];\n    float  waux[32];\n    uint8_t block_signs[4];\n    uint32_t q2[2*(QK_K/32)];\n\n    for (int ibl = 0; ibl < nbl; ++ibl) {\n\n        y[ibl].d = GGML_FP32_TO_FP16(0.f);\n        memset(q2, 0, QK_K/4);\n\n        float max_scale = 0;\n\n        const float * xbl = x + QK_K*ibl;\n        float sumx2 = 0;\n        for (int i = 0; i < QK_K; ++i) sumx2 += xbl[i]*xbl[i];\n        float sigma2 = sumx2/QK_K;\n\n        for (int ib = 0; ib < QK_K/32; ++ib) {\n            const float * xb = xbl + 32*ib;\n            const float * qw = quant_weights + QK_K*ibl + 32*ib;\n            for (int i = 0; i < 32; ++i) weight[i] = qw[i] * sqrtf(sigma2 + xb[i]*xb[i]);\n            for (int i = 0; i < 32; ++i) waux[i] = sqrtf(weight[i]);\n            for (int k = 0; k < 4; ++k) {\n                int nflip = 0;\n                uint8_t s = 0;\n                for (int i = 0; i < 8; ++i) {\n                    if (xb[8*k + i] >= 0) xval[8*k + i] = xb[8*k + i];\n                    else {\n                        xval[8*k + i] = -xb[8*k + i]; ++nflip; s |= (1 << i);\n                    }\n                }\n                if (nflip%2) {\n                    int imin = 0; float min = weight[8*k+imin]*xb[8*k+imin]*xb[8*k+imin];\n                    for (int i = 1; i < 8; ++i) {\n                        float ax = weight[8*k+i]*xb[8*k+i]*xb[8*k+i];\n                        if (ax < min) {\n                            min = ax; imin = i;\n                        }\n                    }\n                    xval[8*k+imin] = -xval[8*k+imin];\n                    s ^= (1 << imin);\n                }\n                block_signs[k] = s & 127;\n            }\n            float max = xval[0];\n            for (int i = 1; i < 32; ++i) max = MAX(max, xval[i]);\n            if (max < GROUP_MAX_EPS) {\n                scales[ib] = 0;\n                memset(L, 0, 32);\n                continue;\n            }\n            float scale = make_qp_quants(32, kMaxQ+1, xval, (uint8_t*)L, weight);\n            float eff_max = scale*kMaxQ;\n            float best = 0;\n            for (int is = -6; is <= 6; ++is) {\n                float id = (2*kMaxQ-1+is*0.1f)/eff_max;\n                float this_scale = 1/id;\n                for (int k = 0; k < 4; ++k) {\n                    for (int i = 0; i < 8; ++i) {\n                        int l = nearest_int(0.5f*(id*xval[8*k+i]-1));\n                        Laux[8*k+i] = MAX(0, MIN(kMaxQ-1, l));\n                    }\n                    uint16_t u = 0;\n                    for (int i = 0; i < 8; ++i) u |= (Laux[8*k+i] << 2*i);\n                    int grid_index = kmap_q2xs[u];\n                    if (grid_index < 0) {\n                        const uint16_t * neighbours = kneighbors_q2xs - kmap_q2xs[u] - 1;\n                        grid_index = iq2_find_best_neighbour(neighbours, kgrid_q2xs, xval + 8*k, waux + 8*k, this_scale, Laux + 8*k);\n                    }\n                }\n                float sumqx = 0, sumq2 = 0;\n                for (int i = 0; i < 32; ++i) {\n                    float w = weight[i];\n                    float q = 2*Laux[i] + 1;\n                    sumqx += w*xval[i]*q;\n                    sumq2 += w*q*q;\n                }\n                if (sumq2 > 0 && sumqx*sumqx > best*sumq2) {\n                    scale = sumqx/sumq2; best = scale*sumqx;\n                    memcpy(L, Laux, 32);\n                }\n            }\n            if (scale > 0) {\n                float id = 1/scale;\n                for (int k = 0; k < 4; ++k) {\n                    uint16_t u = 0;\n                    for (int i = 0; i < 8; ++i) {\n                        int l = nearest_int(0.5f*(id*xval[8*k+i]-1));\n                        l = MAX(0, MIN(kMaxQ-1, l));\n                        u |= (l << 2*i);\n                    }\n                    int grid_index = kmap_q2xs[u];\n                    if (grid_index < 0) {\n                        const uint16_t * neighbours = kneighbors_q2xs - kmap_q2xs[u] - 1;\n                        grid_index = iq2_find_best_neighbour(neighbours, kgrid_q2xs, xval + 8*k, waux + 8*k, scale, L + 8*k);\n                    }\n                    const int8_t * pg = (const int8_t *)(kgrid_q2xs + grid_index);\n                    for (int i = 0; i < 8; ++i) L[8*k+i] = (pg[i] - 1)/2;\n                }\n                float sumqx = 0, sumq2 = 0;\n                for (int i = 0; i < 32; ++i) {\n                    float w = weight[i];\n                    float q = 2*L[i] + 1;\n                    sumqx += w*xval[i]*q;\n                    sumq2 += w*q*q;\n                }\n                if (sumq2 > 0) scale = sumqx/sumq2;\n            }\n            if (scale < 0) {\n                // This should never happen, but just in case, flip scale so that it is positive (we use uint's to encode the scale)\n                // and correspondingly flip quant signs.\n                scale = -scale;\n                for (int k = 0; k < 4; ++k) block_signs[k] = (~block_signs[k]) & 127;\n            }\n            for (int k = 0; k < 4; ++k) {\n                uint16_t u = 0;\n                for (int i = 0; i < 8; ++i) u |= (L[8*k+i] << 2*i);\n                int grid_index = kmap_q2xs[u];\n                if (grid_index < 0) {\n                    printf(\"Oops: found point %u not on grid:\", u);\n                    for (int i = 0; i < 8; ++i) printf(\" %d\", L[8*k+i]);\n                    printf(\"\\n\");\n                    GGML_ABORT(\"fatal error\");\n                }\n                q2[2*ib+0] |= ((uint32_t) grid_index << 8*k);\n                q2[2*ib+1] |= (block_signs[k] << 7*k);\n            }\n            GGML_ASSERT(scale >= 0);\n            scales[ib] = scale;\n            max_scale = MAX(max_scale, scale);\n        }\n\n        if (!max_scale) {\n            memset(y[ibl].qs, 0, QK_K/4);\n            continue;\n        }\n\n        float d = max_scale/31;\n        y[ibl].d = GGML_FP32_TO_FP16(d);\n        float id = 1/d;\n        for (int ib = 0; ib < QK_K/32; ++ib) {\n            int l = nearest_int(0.5f*(id*scales[ib]-1));\n            l = MAX(0, MIN(15, l));\n            q2[2*ib+1] |= ((uint32_t)l << 28);\n        }\n        memcpy(y[ibl].qs, q2, QK_K/4);\n    }\n}\n\nstatic void quantize_row_iq2_xs_impl(const float * restrict x, void * restrict vy, int64_t n, const float * restrict quant_weights) {\n\n    const int gindex = iq2_data_index(GGML_TYPE_IQ2_XS);\n\n    const uint64_t * kgrid_q2xs      = iq2_data[gindex].grid;\n    const int      * kmap_q2xs       = iq2_data[gindex].map;\n    const uint16_t * kneighbors_q2xs = iq2_data[gindex].neighbours;\n\n    GGML_ASSERT(quant_weights   && \"missing quantization weights\");\n    GGML_ASSERT(kmap_q2xs       && \"forgot to call ggml_quantize_init()?\");\n    GGML_ASSERT(kgrid_q2xs      && \"forgot to call ggml_quantize_init()?\");\n    GGML_ASSERT(kneighbors_q2xs && \"forgot to call ggml_quantize_init()?\");\n    GGML_ASSERT(n%QK_K == 0);\n\n    const int kMaxQ = 3;\n\n    const int64_t nbl = n/QK_K;\n\n    block_iq2_xs * y = vy;\n\n    float scales[QK_K/16];\n    float weight[16];\n    float xval[16];\n    int8_t L[16];\n    int8_t Laux[16];\n    float  waux[16];\n    bool   is_on_grid[2];\n    bool   is_on_grid_aux[2];\n    uint8_t block_signs[2];\n    uint16_t q2[2*(QK_K/16)];\n\n    for (int ibl = 0; ibl < nbl; ++ibl) {\n\n        y[ibl].d = GGML_FP32_TO_FP16(0.f);\n        memset(q2, 0, QK_K/4);\n        memset(y[ibl].scales, 0, QK_K/32);\n\n        float max_scale = 0;\n\n        const float * xbl = x + QK_K*ibl;\n        float sumx2 = 0;\n        for (int i = 0; i < QK_K; ++i) sumx2 += xbl[i]*xbl[i];\n        float sigma2 = sumx2/QK_K;\n\n        for (int ib = 0; ib < QK_K/16; ++ib) {\n            const float * xb = xbl + 16*ib;\n            const float * qw = quant_weights + QK_K*ibl + 16*ib;\n            for (int i = 0; i < 16; ++i) weight[i] = qw[i] * sqrtf(sigma2 + xb[i]*xb[i]);\n            for (int i = 0; i < 16; ++i) waux[i] = sqrtf(weight[i]);\n            for (int k = 0; k < 2; ++k) {\n                int nflip = 0;\n                uint8_t s = 0;\n                for (int i = 0; i < 8; ++i) {\n                    if (xb[8*k + i] >= 0) xval[8*k + i] = xb[8*k + i];\n                    else {\n                        xval[8*k + i] = -xb[8*k + i]; ++nflip; s |= (1 << i);\n                    }\n                }\n                if (nflip%2) {\n                    int imin = 0; float min = weight[8*k+imin]*xb[8*k+imin]*xb[8*k+imin];\n                    for (int i = 1; i < 8; ++i) {\n                        float ax = weight[8*k+i]*xb[8*k+i]*xb[8*k+i];\n                        if (ax < min) {\n                            min = ax; imin = i;\n                        }\n                    }\n                    xval[8*k+imin] = -xval[8*k+imin];\n                    s ^= (1 << imin);\n                }\n                block_signs[k] = s & 127;\n            }\n            float max = xval[0];\n            for (int i = 1; i < 16; ++i) max = MAX(max, xval[i]);\n            if (max < GROUP_MAX_EPS) {\n                scales[ib] = 0;\n                memset(L, 0, 16);\n                continue;\n            }\n            float best = 0;\n            float scale = max/(2*kMaxQ-1);\n            is_on_grid[0] = is_on_grid[1] = true;\n            for (int is = -9; is <= 9; ++is) {\n                float id = (2*kMaxQ-1+is*0.1f)/max;\n                float this_scale = 1/id;\n                for (int k = 0; k < 2; ++k) {\n                    for (int i = 0; i < 8; ++i) {\n                        int l = nearest_int(0.5f*(id*xval[8*k+i]-1));\n                        Laux[8*k+i] = MAX(0, MIN(kMaxQ-1, l));\n                    }\n                    uint16_t u = 0;\n                    for (int i = 0; i < 8; ++i) u |= (Laux[8*k+i] << 2*i);\n                    int grid_index = kmap_q2xs[u];\n                    is_on_grid_aux[k] = true;\n                    if (grid_index < 0) {\n                        is_on_grid_aux[k] = false;\n                        const uint16_t * neighbours = kneighbors_q2xs - kmap_q2xs[u] - 1;\n                        grid_index = iq2_find_best_neighbour(neighbours, kgrid_q2xs, xval + 8*k, waux + 8*k, this_scale, Laux + 8*k);\n                    }\n                }\n                float sumqx = 0, sumq2 = 0;\n                for (int i = 0; i < 16; ++i) {\n                    float w = weight[i];\n                    float q = 2*Laux[i] + 1;\n                    sumqx += w*xval[i]*q;\n                    sumq2 += w*q*q;\n                }\n                if (sumq2 > 0 && sumqx*sumqx > best*sumq2) {\n                    scale = sumqx/sumq2; best = scale*sumqx;\n                    for (int i = 0; i < 16; ++i) L[i] = Laux[i];\n                    for (int k = 0; k <  2; ++k) is_on_grid[k] = is_on_grid_aux[k];\n                }\n            }\n            int n_not_ongrid = 0;\n            for (int k = 0; k < 2; ++k) if (!is_on_grid[k]) ++n_not_ongrid;\n            if (n_not_ongrid > 0 && scale > 0) {\n                float id = 1/scale;\n                for (int k = 0; k < 2; ++k) {\n                    if (is_on_grid[k]) continue;\n                    uint16_t u = 0;\n                    for (int i = 0; i < 8; ++i) {\n                        int l = nearest_int(0.5f*(id*xval[8*k+i]-1));\n                        l = MAX(0, MIN(kMaxQ-1, l));\n                        u |= (l << 2*i);\n                        L[8*k + i] = l;\n                    }\n                    int grid_index = kmap_q2xs[u];\n                    if (grid_index < 0) {\n                        const uint16_t * neighbours = kneighbors_q2xs - kmap_q2xs[u] - 1;\n                        grid_index = iq2_find_best_neighbour(neighbours, kgrid_q2xs, xval + 8*k, waux + 8*k, scale, L + 8*k);\n                    }\n                }\n                float sumqx = 0, sumq2 = 0;\n                for (int i = 0; i < 16; ++i) {\n                    float w = weight[i];\n                    float q = 2*L[i] + 1;\n                    sumqx += w*xval[i]*q;\n                    sumq2 += w*q*q;\n                }\n                if (sumq2 > 0) scale = sumqx/sumq2;\n            }\n            if (scale < 0) {\n                scale = -scale;\n                for (int k = 0; k < 2; ++k) block_signs[k] = (~block_signs[k]) & 127;\n            }\n            for (int k = 0; k < 2; ++k) {\n                uint16_t u = 0;\n                for (int i = 0; i < 8; ++i) u |= (L[8*k+i] << 2*i);\n                int grid_index = kmap_q2xs[u];\n                if (grid_index < 0) {\n                    printf(\"Oops: found point %u not on grid:\", u);\n                    for (int i = 0; i < 8; ++i) printf(\" %d\", L[8*k+i]);\n                    printf(\"\\n\");\n                    GGML_ABORT(\"fatal error\");\n                }\n                q2[2*ib+k] = grid_index | (block_signs[k] << 9);\n            }\n            GGML_ASSERT(scale >= 0);\n            scales[ib] = scale;\n            max_scale = MAX(max_scale, scale);\n        }\n\n        if (!max_scale) {\n            memset(y[ibl].qs, 0, QK_K/4);\n            continue;\n        }\n\n        float d = max_scale/31;\n        y[ibl].d = GGML_FP32_TO_FP16(d);\n        float id = 1/d;\n        for (int ib = 0; ib < QK_K/16; ++ib) {\n            int l = nearest_int(0.5f*(id*scales[ib]-1));\n            l = MAX(0, MIN(15, l));\n            if (ib%2 == 0) y[ibl].scales[ib/2] = l;\n            else y[ibl].scales[ib/2] |= (l << 4);\n        }\n        memcpy(y[ibl].qs, q2, QK_K/4);\n\n    }\n}\n\nsize_t quantize_iq2_xxs(const float * restrict src, void * restrict dst, int64_t nrow, int64_t n_per_row, const float * quant_weights) {\n    GGML_ASSERT(n_per_row%QK_K == 0);\n    int64_t nblock = n_per_row/QK_K;\n    char * qrow = (char *)dst;\n    for (int64_t row = 0; row < nrow; ++row) {\n        quantize_row_iq2_xxs_impl(src, qrow, n_per_row, quant_weights);\n        src += n_per_row;\n        qrow += nblock*sizeof(block_iq2_xxs);\n    }\n    return nrow * nblock * sizeof(block_iq2_xxs);\n}\n\nsize_t quantize_iq2_xs(const float * restrict src, void * restrict dst, int64_t nrow, int64_t n_per_row, const float * quant_weights) {\n    GGML_ASSERT(n_per_row%QK_K == 0);\n    int64_t nblock = n_per_row/QK_K;\n    char * qrow = (char *)dst;\n    for (int64_t row = 0; row < nrow; ++row) {\n        quantize_row_iq2_xs_impl(src, qrow, n_per_row, quant_weights);\n        src += n_per_row;\n        qrow += nblock*sizeof(block_iq2_xs);\n    }\n    return nrow * nblock * sizeof(block_iq2_xs);\n}\n\n//\n// ============================================= 3-bit using D4 lattice\n//\n\ntypedef struct {\n    uint32_t * grid;\n    int      * map;\n    uint16_t * neighbours;\n} iq3_entry_t;\n\nstatic iq3_entry_t iq3_data[2] = {\n    {NULL, NULL, NULL},\n    {NULL, NULL, NULL},\n};\n\nstatic inline int iq3_data_index(int grid_size) {\n    (void)grid_size;\n    GGML_ASSERT(grid_size == 256 || grid_size == 512);\n    return grid_size == 256 ? 0 : 1;\n}\n\nstatic int iq3_compare_func(const void * left, const void * right) {\n    const int * l = (const int *)left;\n    const int * r = (const int *)right;\n    return l[0] < r[0] ? -1 : l[0] > r[0] ? 1 : l[1] < r[1] ? -1 : l[1] > r[1] ? 1 : 0;\n}\n\nvoid iq3xs_init_impl(int grid_size) {\n    const int gindex = iq3_data_index(grid_size);\n    if (iq3_data[gindex].grid) {\n        return;\n    }\n    static const uint16_t kgrid_256[256] = {\n            0,     2,     4,     9,    11,    15,    16,    18,    25,    34,    59,    61,    65,    67,    72,    74,\n           81,    85,    88,    90,    97,   108,   120,   128,   130,   132,   137,   144,   146,   153,   155,   159,\n          169,   175,   189,   193,   199,   200,   202,   213,   248,   267,   287,   292,   303,   315,   317,   321,\n          327,   346,   362,   413,   436,   456,   460,   462,   483,   497,   513,   515,   520,   522,   529,   531,\n          536,   538,   540,   551,   552,   576,   578,   585,   592,   594,   641,   643,   648,   650,   657,   664,\n          698,   704,   706,   720,   729,   742,   758,   769,   773,   808,   848,   852,   870,   889,   901,   978,\n          992,  1024,  1026,  1033,  1035,  1040,  1042,  1046,  1049,  1058,  1089,  1091,  1093,  1096,  1098,  1105,\n         1112,  1139,  1143,  1144,  1152,  1154,  1161,  1167,  1168,  1170,  1183,  1184,  1197,  1217,  1224,  1228,\n         1272,  1276,  1309,  1323,  1347,  1367,  1377,  1404,  1473,  1475,  1486,  1509,  1537,  1544,  1546,  1553,\n         1555,  1576,  1589,  1594,  1600,  1602,  1616,  1625,  1636,  1638,  1665,  1667,  1672,  1685,  1706,  1722,\n         1737,  1755,  1816,  1831,  1850,  1856,  1862,  1874,  1901,  1932,  1950,  1971,  2011,  2032,  2052,  2063,\n         2077,  2079,  2091,  2095,  2172,  2192,  2207,  2208,  2224,  2230,  2247,  2277,  2308,  2345,  2356,  2389,\n         2403,  2424,  2501,  2504,  2506,  2520,  2570,  2593,  2616,  2624,  2630,  2646,  2669,  2700,  2714,  2746,\n         2754,  2795,  2824,  2835,  2839,  2874,  2882,  2905,  2984,  3028,  3042,  3092,  3108,  3110,  3124,  3153,\n         3185,  3215,  3252,  3288,  3294,  3364,  3397,  3434,  3483,  3523,  3537,  3587,  3589,  3591,  3592,  3610,\n         3626,  3670,  3680,  3722,  3749,  3754,  3776,  3789,  3803,  3824,  3857,  3873,  3904,  3906,  3924,  3992,\n    };\n    static const uint16_t kgrid_512[512] = {\n            0,     1,     2,     5,     7,     8,     9,    10,    12,    14,    16,    17,    21,    27,    32,    34,\n           37,    39,    41,    43,    48,    50,    57,    60,    63,    64,    65,    66,    68,    72,    73,    77,\n           80,    83,    87,    89,    93,   100,   113,   117,   122,   128,   129,   133,   135,   136,   139,   142,\n          145,   149,   152,   156,   162,   165,   167,   169,   171,   184,   187,   195,   201,   205,   208,   210,\n          217,   219,   222,   228,   232,   234,   247,   249,   253,   256,   267,   271,   273,   276,   282,   288,\n          291,   297,   312,   322,   324,   336,   338,   342,   347,   353,   357,   359,   374,   379,   390,   393,\n          395,   409,   426,   441,   448,   450,   452,   464,   466,   470,   475,   488,   492,   512,   513,   514,\n          516,   520,   521,   523,   525,   527,   528,   530,   537,   540,   542,   556,   558,   561,   570,   576,\n          577,   579,   582,   584,   588,   593,   600,   603,   609,   616,   618,   632,   638,   640,   650,   653,\n          655,   656,   660,   666,   672,   675,   685,   688,   698,   705,   708,   711,   712,   715,   721,   727,\n          728,   732,   737,   754,   760,   771,   773,   778,   780,   793,   795,   802,   806,   808,   812,   833,\n          840,   843,   849,   856,   858,   873,   912,   916,   919,   932,   934,   961,   963,   968,   970,   977,\n          989,   993,  1010,  1016,  1024,  1025,  1027,  1029,  1031,  1032,  1034,  1036,  1038,  1041,  1043,  1047,\n         1048,  1050,  1057,  1059,  1061,  1064,  1066,  1079,  1080,  1083,  1085,  1088,  1090,  1096,  1099,  1103,\n         1106,  1109,  1113,  1116,  1122,  1129,  1153,  1156,  1159,  1169,  1171,  1176,  1183,  1185,  1195,  1199,\n         1209,  1212,  1216,  1218,  1221,  1225,  1234,  1236,  1241,  1243,  1250,  1256,  1270,  1281,  1287,  1296,\n         1299,  1306,  1309,  1313,  1338,  1341,  1348,  1353,  1362,  1375,  1376,  1387,  1400,  1408,  1410,  1415,\n         1425,  1453,  1457,  1477,  1481,  1494,  1496,  1507,  1512,  1538,  1545,  1547,  1549,  1551,  1554,  1561,\n         1563,  1565,  1570,  1572,  1575,  1577,  1587,  1593,  1601,  1603,  1605,  1612,  1617,  1619,  1632,  1648,\n         1658,  1662,  1664,  1674,  1680,  1690,  1692,  1704,  1729,  1736,  1740,  1745,  1747,  1751,  1752,  1761,\n         1763,  1767,  1773,  1787,  1795,  1801,  1806,  1810,  1817,  1834,  1840,  1844,  1857,  1864,  1866,  1877,\n         1882,  1892,  1902,  1915,  1934,  1953,  1985,  1987,  2000,  2002,  2013,  2048,  2052,  2058,  2064,  2068,\n         2071,  2074,  2081,  2088,  2104,  2114,  2119,  2121,  2123,  2130,  2136,  2141,  2147,  2153,  2157,  2177,\n         2179,  2184,  2189,  2193,  2203,  2208,  2223,  2226,  2232,  2244,  2249,  2251,  2256,  2258,  2265,  2269,\n         2304,  2306,  2324,  2335,  2336,  2361,  2373,  2375,  2385,  2418,  2443,  2460,  2480,  2504,  2509,  2520,\n         2531,  2537,  2562,  2568,  2572,  2578,  2592,  2596,  2599,  2602,  2614,  2620,  2625,  2627,  2629,  2634,\n         2641,  2650,  2682,  2688,  2697,  2707,  2712,  2718,  2731,  2754,  2759,  2760,  2775,  2788,  2793,  2805,\n         2811,  2817,  2820,  2832,  2842,  2854,  2890,  2902,  2921,  2923,  2978,  3010,  3012,  3026,  3081,  3083,\n         3085,  3097,  3099,  3120,  3136,  3152,  3159,  3188,  3210,  3228,  3234,  3245,  3250,  3256,  3264,  3276,\n         3281,  3296,  3349,  3363,  3378,  3392,  3395,  3420,  3440,  3461,  3488,  3529,  3531,  3584,  3588,  3591,\n         3600,  3602,  3614,  3616,  3628,  3634,  3650,  3657,  3668,  3683,  3685,  3713,  3716,  3720,  3726,  3729,\n         3736,  3753,  3778,  3802,  3805,  3819,  3841,  3845,  3851,  3856,  3880,  3922,  3938,  3970,  3993,  4032,\n    };\n\n    const int kmap_size = 4096;\n    const int nwant = grid_size == 256 ? 2 : 3;\n    const uint16_t * kgrid = grid_size == 256 ? kgrid_256 : kgrid_512;\n    uint32_t * kgrid_q3xs;\n    int      * kmap_q3xs;\n    uint16_t * kneighbors_q3xs;\n\n    //printf(\"================================================================= %s(grid_size = %d)\\n\", __func__, grid_size);\n    uint32_t * the_grid = (uint32_t *)malloc(grid_size*sizeof(uint32_t));\n    for (int k = 0; k < grid_size; ++k) {\n        int8_t * pos = (int8_t *)(the_grid + k);\n        for (int i = 0; i < 4; ++i) {\n            int l = (kgrid[k] >> 3*i) & 0x7;\n            pos[i] = 2*l + 1;\n        }\n    }\n    kgrid_q3xs = the_grid;\n    iq3_data[gindex].grid = the_grid;\n    kmap_q3xs = (int *)malloc(kmap_size*sizeof(int));\n    iq3_data[gindex].map = kmap_q3xs;\n    for (int i = 0; i < kmap_size; ++i) kmap_q3xs[i] = -1;\n    uint32_t aux32;\n    uint8_t * aux8 = (uint8_t *)&aux32;\n    for (int i = 0; i < grid_size; ++i) {\n        aux32 = kgrid_q3xs[i];\n        uint16_t index = 0;\n        for (int k=0; k<4; ++k) {\n            uint16_t q = (aux8[k] - 1)/2;\n            index |= (q << 3*k);\n        }\n        kmap_q3xs[index] = i;\n    }\n    int8_t pos[4];\n    int * dist2 = (int *)malloc(2*grid_size*sizeof(int));\n    int num_neighbors = 0, num_not_in_map = 0;\n    for (int i = 0; i < kmap_size; ++i) {\n        if (kmap_q3xs[i] >= 0) continue;\n        ++num_not_in_map;\n        for (int k = 0; k < 4; ++k) {\n            int l = (i >> 3*k) & 0x7;\n            pos[k] = 2*l + 1;\n        }\n        for (int j = 0; j < grid_size; ++j) {\n            const int8_t * pg = (const int8_t *)(kgrid_q3xs + j);\n            int d2 = 0;\n            for (int k = 0; k < 4; ++k) d2 += (pg[k] - pos[k])*(pg[k] - pos[k]);\n            dist2[2*j+0] = d2;\n            dist2[2*j+1] = j;\n        }\n        qsort(dist2, grid_size, 2*sizeof(int), iq3_compare_func);\n        int n = 0; int d2 = dist2[0];\n        int nhave = 1;\n        for (int j = 0; j < grid_size; ++j) {\n            if (dist2[2*j] > d2) {\n                if (nhave == nwant) break;\n                d2 = dist2[2*j];\n                ++nhave;\n            }\n            ++n;\n        }\n        num_neighbors += n;\n    }\n    //printf(\"%s: %d neighbours in total\\n\", __func__, num_neighbors);\n    kneighbors_q3xs = (uint16_t *)malloc((num_neighbors + num_not_in_map)*sizeof(uint16_t));\n    iq3_data[gindex].neighbours = kneighbors_q3xs;\n    int counter = 0;\n    for (int i = 0; i < kmap_size; ++i) {\n        if (kmap_q3xs[i] >= 0) continue;\n        for (int k = 0; k < 4; ++k) {\n            int l = (i >> 3*k) & 0x7;\n            pos[k] = 2*l + 1;\n        }\n        for (int j = 0; j < grid_size; ++j) {\n            const int8_t * pg = (const int8_t *)(kgrid_q3xs + j);\n            int d2 = 0;\n            for (int k = 0; k < 4; ++k) d2 += (pg[k] - pos[k])*(pg[k] - pos[k]);\n            dist2[2*j+0] = d2;\n            dist2[2*j+1] = j;\n        }\n        qsort(dist2, grid_size, 2*sizeof(int), iq3_compare_func);\n        kmap_q3xs[i] = -(counter + 1);\n        int d2 = dist2[0];\n        uint16_t * start = &kneighbors_q3xs[counter++];\n        int n = 0, nhave = 1;\n        for (int j = 0; j < grid_size; ++j) {\n            if (dist2[2*j] > d2) {\n                if (nhave == nwant) break;\n                d2 = dist2[2*j];\n                ++nhave;\n            }\n            kneighbors_q3xs[counter++] = dist2[2*j+1];\n            ++n;\n        }\n        *start = n;\n    }\n    free(dist2);\n}\n\nvoid iq3xs_free_impl(int grid_size) {\n    GGML_ASSERT(grid_size == 256 || grid_size == 512);\n    const int gindex = iq3_data_index(grid_size);\n    if (iq3_data[gindex].grid) {\n        free(iq3_data[gindex].grid);       iq3_data[gindex].grid = NULL;\n        free(iq3_data[gindex].map);        iq3_data[gindex].map  = NULL;\n        free(iq3_data[gindex].neighbours); iq3_data[gindex].neighbours = NULL;\n    }\n}\n\nstatic int iq3_find_best_neighbour(const uint16_t * restrict neighbours, const uint32_t * restrict grid,\n        const float * restrict xval, const float * restrict weight, float scale, int8_t * restrict L) {\n    int num_neighbors = neighbours[0];\n    GGML_ASSERT(num_neighbors > 0);\n    float best_d2 = FLT_MAX;\n    int grid_index = -1;\n    for (int j = 1; j <= num_neighbors; ++j) {\n        const int8_t * pg = (const int8_t *)(grid + neighbours[j]);\n        float d2 = 0;\n        for (int i = 0; i < 4; ++i) {\n            float q = pg[i];\n            float diff = scale*q - xval[i];\n            d2 += weight[i]*diff*diff;\n        }\n        if (d2 < best_d2) {\n            best_d2 = d2; grid_index = neighbours[j];\n        }\n    }\n    GGML_ASSERT(grid_index >= 0);\n    const int8_t * pg = (const int8_t *)(grid + grid_index);\n    for (int i = 0; i < 4; ++i) L[i] = (pg[i] - 1)/2;\n    return grid_index;\n}\n\nstatic void quantize_row_iq3_xxs_impl(int grid_size, const float * restrict x, void * restrict vy, int64_t n,\n        const float * restrict quant_weights) {\n\n    const int gindex = iq3_data_index(grid_size);\n\n    const uint32_t * kgrid_q3xs      = iq3_data[gindex].grid;\n    const int      * kmap_q3xs       = iq3_data[gindex].map;\n    const uint16_t * kneighbors_q3xs = iq3_data[gindex].neighbours;\n\n    //GGML_ASSERT(quant_weights   && \"missing quantization weights\");\n    GGML_ASSERT(kgrid_q3xs      && \"forgot to call ggml_quantize_init()?\");\n    GGML_ASSERT(kmap_q3xs       && \"forgot to call ggml_quantize_init()?\");\n    GGML_ASSERT(kneighbors_q3xs && \"forgot to call ggml_quantize_init()?\");\n    GGML_ASSERT(n%QK_K == 0);\n\n    const int kMaxQ = 8;\n\n    const int64_t nbl = n/QK_K;\n\n    ggml_fp16_t * dh;\n    uint8_t * qs;\n    int block_size;\n    if (grid_size == 256) {\n        block_iq3_xxs * y = vy;\n        dh = &y->d;\n        qs = y->qs;\n        block_size = sizeof(block_iq3_xxs);\n    } else {\n        block_iq3_s * y = vy;\n        dh = &y->d;\n        qs = y->qs;\n        block_size = sizeof(block_iq3_s);\n    }\n    int quant_size = block_size - sizeof(ggml_fp16_t);\n\n    float scales[QK_K/32];\n    float weight[32];\n    float xval[32];\n    int8_t L[32];\n    int8_t Laux[32];\n    float  waux[32];\n    bool   is_on_grid[8];\n    bool   is_on_grid_aux[8];\n    uint8_t block_signs[8];\n    uint8_t q3[3*(QK_K/8)+QK_K/32];\n    uint32_t * scales_and_signs = (uint32_t *)(q3 + QK_K/4);\n    uint8_t  * qh = q3 + 3*(QK_K/8);\n\n    for (int ibl = 0; ibl < nbl; ++ibl) {\n\n        dh[0] = GGML_FP32_TO_FP16(0.f);\n        memset(q3, 0, 3*QK_K/8+QK_K/32);\n\n        float max_scale = 0;\n\n        const float * xbl = x + QK_K*ibl;\n        float sumx2 = 0;\n        for (int i = 0; i < QK_K; ++i) sumx2 += xbl[i]*xbl[i];\n        float sigma2 = 2*sumx2/QK_K;\n\n        for (int ib = 0; ib < QK_K/32; ++ib) {\n            const float * xb = xbl + 32*ib;\n            if (quant_weights) {\n                const float * qw = quant_weights + QK_K*ibl + 32*ib;\n                for (int i = 0; i < 32; ++i) weight[i] = qw[i] * sqrtf(sigma2 + xb[i]*xb[i]);\n            } else {\n                for (int i = 0; i < 32; ++i) weight[i] = xb[i]*xb[i];\n            }\n            for (int i = 0; i < 32; ++i) waux[i] = sqrtf(weight[i]);\n            for (int k = 0; k < 4; ++k) {\n                int nflip = 0;\n                uint8_t s = 0;\n                for (int i = 0; i < 8; ++i) {\n                    if (xb[8*k + i] >= 0) xval[8*k + i] = xb[8*k + i];\n                    else {\n                        xval[8*k + i] = -xb[8*k + i]; ++nflip; s |= (1 << i);\n                    }\n                }\n                if (nflip%2) {\n                    int imin = 0; float min = weight[8*k+imin]*xb[8*k+imin]*xb[8*k+imin];\n                    for (int i = 1; i < 8; ++i) {\n                        float ax = weight[8*k+i]*xb[8*k+i]*xb[8*k+i];\n                        if (ax < min) {\n                            min = ax; imin = i;\n                        }\n                    }\n                    xval[8*k+imin] = -xval[8*k+imin];\n                    s ^= (1 << imin);\n                }\n                block_signs[k] = s & 127;\n            }\n            float max = xval[0];\n            for (int i = 1; i < 32; ++i) max = MAX(max, xval[i]);\n            if (max < GROUP_MAX_EPS_IQ3_XXS) {\n                scales[ib] = 0;\n                memset(L, 0, 32);\n                continue;\n            }\n            float best = 0;\n            float scale = max/(2*kMaxQ-1);\n            for (int is = -15; is <= 15; ++is) {\n                float id = (2*kMaxQ-1+is*0.2f)/max;\n                float this_scale = 1/id;\n                for (int k = 0; k < 8; ++k) {\n                    for (int i = 0; i < 4; ++i) {\n                        int l = nearest_int(0.5f*(id*xval[4*k+i]-1));\n                        Laux[4*k+i] = MAX(0, MIN(kMaxQ-1, l));\n                    }\n                    uint16_t u = 0;\n                    for (int i = 0; i < 4; ++i) u |= (Laux[4*k+i] << 3*i);\n                    int grid_index = kmap_q3xs[u];\n                    is_on_grid_aux[k] = true;\n                    if (grid_index < 0) {\n                        is_on_grid_aux[k] = false;\n                        const uint16_t * neighbours = kneighbors_q3xs - kmap_q3xs[u] - 1;\n                        grid_index = iq3_find_best_neighbour(neighbours, kgrid_q3xs, xval + 4*k, waux + 4*k, this_scale, Laux + 4*k);\n                    }\n                }\n                float sumqx = 0, sumq2 = 0;\n                for (int i = 0; i < 32; ++i) {\n                    float w = weight[i];\n                    float q = 2*Laux[i] + 1;\n                    sumqx += w*xval[i]*q;\n                    sumq2 += w*q*q;\n                }\n                if (sumq2 > 0 && sumqx*sumqx > best*sumq2) {\n                    scale = sumqx/sumq2; best = scale*sumqx;\n                    for (int i = 0; i < 32; ++i) L[i] = Laux[i];\n                    for (int k = 0; k <  8; ++k) is_on_grid[k] = is_on_grid_aux[k];\n                }\n            }\n            int n_not_ongrid = 0;\n            for (int k = 0; k < 8; ++k) if (!is_on_grid[k]) ++n_not_ongrid;\n            if (n_not_ongrid > 0 && scale > 0) {\n                float id = 1/scale;\n                for (int k = 0; k < 8; ++k) {\n                    if (is_on_grid[k]) continue;\n                    uint16_t u = 0;\n                    for (int i = 0; i < 4; ++i) {\n                        int l = nearest_int(0.5f*(id*xval[4*k+i]-1));\n                        l = MAX(0, MIN(kMaxQ-1, l));\n                        u |= (l << 3*i);\n                    }\n                    int grid_index = kmap_q3xs[u];\n                    if (grid_index < 0) {\n                        const uint16_t * neighbours = kneighbors_q3xs - kmap_q3xs[u] - 1;\n                        grid_index = iq3_find_best_neighbour(neighbours, kgrid_q3xs, xval + 4*k, waux + 4*k, scale, L + 4*k);\n                    }\n                    const int8_t * pg = (const int8_t *)(kgrid_q3xs + grid_index);\n                    for (int i = 0; i < 4; ++i) L[4*k+i] = (pg[i] - 1)/2;\n                }\n                float sumqx = 0, sumq2 = 0;\n                for (int i = 0; i < 32; ++i) {\n                    float w = weight[i];\n                    float q = 2*L[i] + 1;\n                    sumqx += w*xval[i]*q;\n                    sumq2 += w*q*q;\n                }\n                if (sumq2 > 0) scale = sumqx/sumq2;\n            }\n            if (scale < 0) {\n                // This should never happen, but just in case, flip scale so that it is positive (we use uint's to encode the scale)\n                // and correspondingly flip quant signs.\n                scale = -scale;\n                for (int k = 0; k < 4; ++k) block_signs[k] = (~block_signs[k]) & 127;\n            }\n            for (int k = 0; k < 8; ++k) {\n                uint16_t u = 0;\n                for (int i = 0; i < 4; ++i) u |= (L[4*k+i] << 3*i);\n                int grid_index = kmap_q3xs[u];\n                if (grid_index < 0) {\n                    printf(\"Oops: found point %u not on grid:\", u);\n                    for (int i = 0; i < 4; ++i) printf(\" %d\", L[4*k+i]);\n                    printf(\"\\n\");\n                    GGML_ABORT(\"fatal error\");\n                }\n                if (grid_size == 256) {\n                    q3[8*ib+k] = grid_index;\n                } else {\n                    q3[8*ib+k] = grid_index & 255;\n                    qh[ib] |= ((grid_index >> 8) << k);\n                }\n\n            }\n            scales_and_signs[ib] = block_signs[0] | (block_signs[1] << 7) | (block_signs[2] << 14) | (block_signs[3] << 21);\n            GGML_ASSERT(scale >= 0);\n            scales[ib] = scale;\n            max_scale = MAX(max_scale, scale);\n        }\n\n        if (!max_scale) {\n            memset(qs, 0, quant_size);\n            dh += block_size/sizeof(ggml_fp16_t);\n            qs += block_size;\n            continue;\n        }\n\n        float d = max_scale/31;\n        dh[0] = GGML_FP32_TO_FP16(d * 1.0125f);  // small improvement via this fudge factor\n        float id = 1/d;\n        for (int ib = 0; ib < QK_K/32; ++ib) {\n            int l = nearest_int(0.5f*(id*scales[ib]-1));\n            l = MAX(0, MIN(15, l));\n            scales_and_signs[ib] |= ((uint32_t)l << 28);\n        }\n        memcpy(qs, q3, quant_size);\n\n        dh += block_size/sizeof(ggml_fp16_t);\n        qs += block_size;\n\n    }\n}\n\nsize_t quantize_iq3_xxs(const float * restrict src, void * restrict dst, int64_t nrow, int64_t n_per_row, const float * quant_weights) {\n    GGML_ASSERT(n_per_row%QK_K == 0);\n    int64_t nblock = n_per_row/QK_K;\n    char * qrow = (char *)dst;\n    for (int64_t row = 0; row < nrow; ++row) {\n        quantize_row_iq3_xxs_impl(256, src, qrow, n_per_row, quant_weights);\n        src += n_per_row;\n        qrow += nblock*sizeof(block_iq3_xxs);\n    }\n    return nrow * nblock * sizeof(block_iq3_xxs);\n}\n\nvoid quantize_row_iq3_xxs(const float * restrict x, void * restrict vy, int64_t k) {\n    assert(k % QK_K == 0);\n    block_iq3_xxs * restrict y = vy;\n    quantize_row_iq3_xxs_ref(x, y, k);\n}\n\nvoid quantize_row_iq3_xxs_ref(const float * restrict x, block_iq3_xxs * restrict y, int64_t k) {\n    assert(k % QK_K == 0);\n    quantize_row_iq3_xxs_impl(256, x, y, k, NULL);\n}\n\nstatic void quantize_row_iq3_s_impl(int block_size, const float * restrict x, void * restrict vy, int n,\n        const float * restrict quant_weights,\n        float   * scales,\n        float   * weight,\n        float   * xval,\n        int8_t  * L,\n        int8_t  * Laux,\n        float   * waux,\n        bool    * is_on_grid,\n        bool    * is_on_grid_aux,\n        uint8_t * block_signs) {\n\n    const int gindex = iq3_data_index(512);\n\n    const uint32_t * kgrid_q3xs      = iq3_data[gindex].grid;\n    const int      * kmap_q3xs       = iq3_data[gindex].map;\n    const uint16_t * kneighbors_q3xs = iq3_data[gindex].neighbours;\n\n    //GGML_ASSERT(quant_weights   && \"missing quantization weights\");\n    GGML_ASSERT(kgrid_q3xs      && \"forgot to call ggml_quantize_init()?\");\n    GGML_ASSERT(kmap_q3xs       && \"forgot to call ggml_quantize_init()?\");\n    GGML_ASSERT(kneighbors_q3xs && \"forgot to call ggml_quantize_init()?\");\n    GGML_ASSERT(n%QK_K == 0);\n\n    const int kMaxQ = 8;\n\n    const int64_t nbl = n/QK_K;\n\n    block_iq3_s * y = vy;\n\n    const int bs4 = block_size/4;\n    const int bs8 = block_size/8;\n\n    for (int ibl = 0; ibl < nbl; ++ibl) {\n\n        memset(&y[ibl], 0, sizeof(block_iq3_s));\n        y[ibl].d = GGML_FP32_TO_FP16(0.f);\n\n        uint8_t * qs = y[ibl].qs;\n        uint8_t * qh = y[ibl].qh;\n        uint8_t * signs = y[ibl].signs;\n\n        float max_scale = 0;\n\n        const float * xbl = x + QK_K*ibl;\n        float sumx2 = 0;\n        for (int i = 0; i < QK_K; ++i) sumx2 += xbl[i]*xbl[i];\n        float sigma2 = 2*sumx2/QK_K;\n\n        for (int ib = 0; ib < QK_K/block_size; ++ib) {\n            const float * xb = xbl + block_size*ib;\n            if (quant_weights) {\n                const float * qw = quant_weights + QK_K*ibl + block_size*ib;\n                for (int i = 0; i < block_size; ++i) weight[i] = qw[i] * sqrtf(sigma2 + xb[i]*xb[i]);\n            } else {\n                for (int i = 0; i < block_size; ++i) weight[i] = xb[i]*xb[i];\n            }\n            for (int i = 0; i < block_size; ++i) waux[i] = sqrtf(weight[i]);\n            for (int k = 0; k < bs8; ++k) {\n                uint8_t s = 0;\n                for (int i = 0; i < 8; ++i) {\n                    if (xb[8*k + i] >= 0) xval[8*k + i] = xb[8*k + i];\n                    else {\n                        xval[8*k + i] = -xb[8*k + i]; s |= (1 << i);\n                    }\n                }\n                block_signs[k] = s;\n            }\n            float max = xval[0];\n            for (int i = 1; i < block_size; ++i) max = MAX(max, xval[i]);\n            if (!max) {\n                scales[ib] = 0;\n                continue;\n            }\n            float best = 0;\n            float scale = max/(2*kMaxQ-1);\n            for (int k = 0; k < bs4; ++k) is_on_grid[k] = false;\n            for (int is = -9; is <= 9; ++is) {\n                float id = (2*kMaxQ-1+is*0.2f)/max;\n                float this_scale = 1/id;\n                for (int k = 0; k < bs4; ++k) {\n                    for (int i = 0; i < 4; ++i) {\n                        int l = nearest_int(0.5f*(id*xval[4*k+i]-1));\n                        Laux[4*k+i] = MAX(0, MIN(kMaxQ-1, l));\n                    }\n                    uint16_t u = 0;\n                    for (int i = 0; i < 4; ++i) u |= (Laux[4*k+i] << 3*i);\n                    int grid_index = kmap_q3xs[u];\n                    is_on_grid_aux[k] = true;\n                    if (grid_index < 0) {\n                        is_on_grid_aux[k] = false;\n                        const uint16_t * neighbours = kneighbors_q3xs - kmap_q3xs[u] - 1;\n                        grid_index = iq3_find_best_neighbour(neighbours, kgrid_q3xs, xval + 4*k, waux + 4*k, this_scale, Laux + 4*k);\n                    }\n                }\n                float sumqx = 0, sumq2 = 0;\n                for (int i = 0; i < block_size; ++i) {\n                    float w = weight[i];\n                    float q = 2*Laux[i] + 1;\n                    sumqx += w*xval[i]*q;\n                    sumq2 += w*q*q;\n                }\n                if (sumq2 > 0 && sumqx*sumqx > best*sumq2) {\n                    scale = sumqx/sumq2; best = scale*sumqx;\n                    for (int i = 0; i < block_size; ++i) L[i] = Laux[i];\n                    for (int k = 0; k < bs4; ++k) is_on_grid[k] = is_on_grid_aux[k];\n                }\n            }\n            int n_not_ongrid = 0;\n            for (int k = 0; k < bs4; ++k) if (!is_on_grid[k]) ++n_not_ongrid;\n            if (n_not_ongrid > 0 && scale > 0) {\n                float id = 1/scale;\n                for (int k = 0; k < bs4; ++k) {\n                    //if (is_on_grid[k]) continue;\n                    uint16_t u = 0;\n                    for (int i = 0; i < 4; ++i) {\n                        int l = nearest_int(0.5f*(id*xval[4*k+i]-1));\n                        l = MAX(0, MIN(kMaxQ-1, l));\n                        u |= (l << 3*i);\n                    }\n                    int grid_index = kmap_q3xs[u];\n                    if (grid_index < 0) {\n                        const uint16_t * neighbours = kneighbors_q3xs - kmap_q3xs[u] - 1;\n                        grid_index = iq3_find_best_neighbour(neighbours, kgrid_q3xs, xval + 4*k, waux + 4*k, scale, L + 4*k);\n                    }\n                    const int8_t * pg = (const int8_t *)(kgrid_q3xs + grid_index);\n                    for (int i = 0; i < 4; ++i) L[4*k+i] = (pg[i] - 1)/2;\n                }\n                float sumqx = 0, sumq2 = 0;\n                for (int i = 0; i < block_size; ++i) {\n                    float w = weight[i];\n                    float q = 2*L[i] + 1;\n                    sumqx += w*xval[i]*q;\n                    sumq2 += w*q*q;\n                }\n                if (sumq2 > 0) scale = sumqx/sumq2;\n            }\n            if (scale < 0) {\n                // This should never happen, but just in case, flip scale so that it is positive (we use uint's to encode the scale)\n                // and correspondingly flip quant signs.\n                scale = -scale;\n                for (int k = 0; k < bs8; ++k) block_signs[k] = ~block_signs[k];\n            }\n            for (int k = 0; k < bs4; ++k) {\n                uint16_t u = 0;\n                for (int i = 0; i < 4; ++i) u |= (L[4*k+i] << 3*i);\n                int grid_index = kmap_q3xs[u];\n                if (grid_index < 0) {\n                    printf(\"Oops: found point %u not on grid:\", u);\n                    for (int i = 0; i < 4; ++i) printf(\" %d\", L[4*k+i]);\n                    printf(\"\\n\");\n                    GGML_ABORT(\"fatal error\");\n                }\n                qs[k] = grid_index & 255;\n                qh[(ib*bs4+k)/8] |= ((grid_index >> 8) << ((ib*bs4+k)%8));\n            }\n            qs += bs4;\n            for (int k = 0; k < bs8; ++k) signs[k] = block_signs[k];\n            signs += bs8;\n            GGML_ASSERT(scale >= 0);\n            scales[ib] = scale;\n            max_scale = MAX(max_scale, scale);\n        }\n\n        if (!max_scale) {\n            continue;\n        }\n\n        float d = max_scale/31;\n        y[ibl].d = GGML_FP32_TO_FP16(d * 1.033f);\n        float id = 1/d;\n        for (int ib = 0; ib < QK_K/block_size; ib += 2) {\n            int l1 = nearest_int(0.5f*(id*scales[ib+0]-1));\n            l1 = MAX(0, MIN(15, l1));\n            int l2 = nearest_int(0.5f*(id*scales[ib+1]-1));\n            l2 = MAX(0, MIN(15, l2));\n            y[ibl].scales[ib/2] = l1 | (l2 << 4);\n        }\n\n    }\n}\n\n#define IQ3S_BLOCK_SIZE 32\nsize_t quantize_iq3_s(const float * restrict src, void * restrict dst, int64_t nrow, int64_t n_per_row, const float * quant_weights) {\n    GGML_ASSERT(n_per_row%QK_K == 0);\n    int64_t nblock = n_per_row/QK_K;\n    float scales[QK_K/IQ3S_BLOCK_SIZE];\n    float weight[IQ3S_BLOCK_SIZE];\n    float xval[IQ3S_BLOCK_SIZE];\n    int8_t L[IQ3S_BLOCK_SIZE];\n    int8_t Laux[IQ3S_BLOCK_SIZE];\n    float  waux[IQ3S_BLOCK_SIZE];\n    bool   is_on_grid[IQ3S_BLOCK_SIZE/4];\n    bool   is_on_grid_aux[IQ3S_BLOCK_SIZE/4];\n    uint8_t block_signs[IQ3S_BLOCK_SIZE/8];\n    char * qrow = (char *)dst;\n    for (int64_t row = 0; row < nrow; ++row) {\n        quantize_row_iq3_s_impl(IQ3S_BLOCK_SIZE, src, qrow, n_per_row, quant_weights,\n                scales, weight, xval, L, Laux, waux, is_on_grid, is_on_grid_aux, block_signs);\n        src += n_per_row;\n        qrow += nblock*sizeof(block_iq3_s);\n    }\n    return nrow * nblock * sizeof(block_iq3_s);\n}\n\nvoid quantize_row_iq3_s(const float * restrict x, void * restrict vy, int64_t k) {\n    assert(k % QK_K == 0);\n    block_iq3_s * restrict y = vy;\n    quantize_row_iq3_s_ref(x, y, k);\n}\n\nvoid quantize_row_iq3_s_ref(const float * restrict x, block_iq3_s * restrict y, int64_t k) {\n    assert(k % QK_K == 0);\n    quantize_iq3_s(x, y, 1, k, NULL);\n}\n\n\n// =================================== 1.5 bpw ===================================================\n\nstatic int iq1_find_best_neighbour(const uint16_t * restrict neighbours, const uint64_t * restrict grid,\n        const float * restrict xval, const float * restrict weight, float * scale, int8_t * restrict L, int ngrid) {\n    int num_neighbors = neighbours[0];\n    GGML_ASSERT(num_neighbors > 0);\n    float best_score = -FLT_MAX;\n    int grid_index = -1;\n    for (int j = 1; j <= num_neighbors; ++j) {\n        const int8_t * pg = (const int8_t *)(grid + neighbours[j]);\n        float sumqx = 0, sumq2 = 0;\n        for (int i = 0; i < 8; ++i) {\n            float q = (pg[i] - 3)/2;\n            float w = weight[i];\n            sumqx += w*q*xval[i];\n            sumq2 += w*q*q;\n        }\n        if (sumqx > 0 && sumq2 > 0 && sumqx*sumqx > best_score*sumq2) {\n            *scale = sumqx/sumq2; best_score = *scale * sumqx;\n            grid_index = neighbours[j];\n        }\n    }\n    if (grid_index < 0) {\n        for (int i = 0; i < ngrid; ++i) {\n            const int8_t * grid_i = (const int8_t *)(grid + i);\n            float sumqx = 0, sumq2 = 0;\n            for (int j = 0; j < 8; ++j) {\n                float w = weight[j];\n                float q = (grid_i[j] - 3)/2;\n                sumqx += w*q*xval[j];\n                sumq2 += w*q*q;\n            }\n            if (sumqx > 0 && sumq2 > 0 && sumqx*sumqx > best_score*sumq2) {\n                *scale = sumqx/sumq2; best_score = *scale*sumqx;\n                grid_index = i;\n            }\n        }\n    }\n    if (grid_index < 0) {\n        printf(\"Oops, did not find grid point\\n\");\n        printf(\"Have %d neighbours\\n\", num_neighbors);\n        for (int j = 1; j <= num_neighbors; ++j) {\n            const int8_t * pg = (const int8_t *)(grid + neighbours[j]);\n            float sumqx = 0, sumq2 = 0;\n            for (int i = 0; i < 8; ++i) {\n                float q = (pg[i] - 3)/2;\n                float w = weight[i];\n                sumqx += w*q*xval[i];\n                sumq2 += w*q*q;\n            }\n            printf(\"    neighbour %d: sumqx = %g sumq2 = %g\\n\", j, (double)sumqx, (double)sumq2);\n        }\n    }\n    GGML_ASSERT(grid_index >= 0);\n    //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n    *scale *= 1.05f;  // This is a fudge factor. Don't ask me why it improves the result.\n    //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n    const int8_t * pg = (const int8_t *)(grid + grid_index);\n    for (int i = 0; i < 8; ++i) L[i] = (pg[i] - 1)/2;\n    return grid_index;\n}\n\nstatic int iq1_find_best_neighbour2(const uint16_t * restrict neighbours, const uint64_t * restrict grid,\n        const float * restrict xval, const float * restrict weight, float scale, const float * restrict xg, int8_t * restrict L, int ngrid) {\n    int num_neighbors = neighbours[0];\n    GGML_ASSERT(num_neighbors > 0);\n    float best_score = FLT_MAX;\n    int grid_index = -1;\n    for (int j = 1; j <= num_neighbors; ++j) {\n        const int8_t * pg = (const int8_t *)(grid + neighbours[j]);\n        float d2 = 0;\n        for (int i = 0; i < 8; ++i) {\n            float q = xg[(pg[i] - 1)/2];\n            float w = weight[i];\n            float diff = scale*q - xval[i];\n            d2 += w*diff*diff;\n        }\n        if (d2 < best_score) {\n            best_score = d2;\n            grid_index = neighbours[j];\n        }\n    }\n    if (grid_index < 0) {\n        for (int i = 0; i < ngrid; ++i) {\n            const int8_t * grid_i = (const int8_t *)(grid + i);\n            float d2 = 0;\n            for (int j = 0; j < 8; ++j) {\n                float w = weight[j];\n                float q = xg[(grid_i[j] - 1)/2];\n                float diff = scale*q - xval[i];\n                d2 += w*diff*diff;\n            }\n            if (d2 < best_score) {\n                best_score = d2;\n                grid_index = i;\n            }\n        }\n    }\n    if (grid_index < 0) {\n        printf(\"Oops, did not find grid point\\n\");\n        printf(\"Have %d neighbours\\n\", num_neighbors);\n        for (int j = 1; j <= num_neighbors; ++j) {\n            const int8_t * pg = (const int8_t *)(grid + neighbours[j]);\n            float sumqx = 0, sumq2 = 0;\n            for (int i = 0; i < 8; ++i) {\n                float q = xg[(pg[i] - 1)/2];\n                float w = weight[i];\n                sumqx += w*q*xval[i];\n                sumq2 += w*q*q;\n            }\n            printf(\"    neighbour %d: sumqx = %g sumq2 = %g\\n\", j, (double)sumqx, (double)sumq2);\n        }\n    }\n    GGML_ASSERT(grid_index >= 0);\n    const int8_t * pg = (const int8_t *)(grid + grid_index);\n    for (int i = 0; i < 8; ++i) L[i] = (pg[i] - 1)/2;\n    return grid_index;\n}\n\nstatic int iq1_sort_helper(const void * left, const void * right) {\n    const float * l = left;\n    const float * r = right;\n    return *l < *r ? -1 : *l > *r ? 1 : 0;\n}\n\n#define IQ1S_BLOCK_SIZE 32\n#define IQ1M_BLOCK_SIZE 16\nstatic void quantize_row_iq1_s_impl(const float * restrict x, void * restrict vy, int64_t n, const float * restrict quant_weights,\n        float    * scales,\n        float    * weight,\n        float    * sumx,\n        float    * sumw,\n        float    * pairs,\n        int8_t   * L,\n        uint16_t * index,\n        int8_t   * shifts) {\n\n    const int gindex = iq2_data_index(GGML_TYPE_IQ1_S);\n\n    const uint64_t * kgrid_q2xs      = iq2_data[gindex].grid;\n    const int      * kmap_q2xs       = iq2_data[gindex].map;\n    const uint16_t * kneighbors_q2xs = iq2_data[gindex].neighbours;\n\n    GGML_ASSERT(quant_weights   && \"missing quantization weights\");\n    GGML_ASSERT(kgrid_q2xs      && \"forgot to call ggml_quantize_init()?\");\n    GGML_ASSERT(kmap_q2xs       && \"forgot to call ggml_quantize_init()?\");\n    GGML_ASSERT(kneighbors_q2xs && \"forgot to call ggml_quantize_init()?\");\n    GGML_ASSERT(n%QK_K == 0);\n\n    block_iq1_s * y = vy;\n\n    const int64_t nbl = n/QK_K;\n\n    const int block_size = IQ1S_BLOCK_SIZE;\n\n    const float x_p[3] = {-1 + IQ1S_DELTA,  IQ1S_DELTA, 1 + IQ1S_DELTA};\n    const float x_m[3] = {-1 - IQ1S_DELTA, -IQ1S_DELTA, 1 - IQ1S_DELTA};\n\n\n    int * idx = (int *)(pairs + 1);\n\n    for (int ibl = 0; ibl < nbl; ++ibl) {\n\n        y[ibl].d = GGML_FP32_TO_FP16(0.f);\n        memset(y[ibl].qs, 0, QK_K/8);\n        memset(y[ibl].qh, 0, QK_K/16);\n\n        float max_scale = 0;\n\n        const float * xbl = x + QK_K*ibl;\n        float sumx2 = 0;\n        for (int i = 0; i < QK_K; ++i) sumx2 += xbl[i]*xbl[i];\n        float sigma2 = 2*sumx2/QK_K;\n\n        for (int ib = 0; ib < QK_K/block_size; ++ib) {\n            const float * xb = xbl + block_size*ib;\n            const float * qw = quant_weights + QK_K*ibl + block_size*ib;\n            for (int i = 0; i < block_size; ++i) weight[i] = qw[i] * sqrtf(sigma2 + xb[i]*xb[i]);\n            float max = fabsf(xb[0]);\n            for (int i = 1; i < block_size; ++i) max = MAX(max, fabsf(xb[i]));\n            if (max < GROUP_MAX_EPS_IQ1_S) {\n                scales[ib] = 0;\n                memset(L, 1, block_size);\n                continue;\n            }\n            // Here we solve exactly the sum of squared difference (SSD) weighted minimization problem.\n            // With just 3 allowed quant values (-1, 0, 1), we can search exhaustively for the two\n            // boundaries that split the weights xb[i] into 3 groups. To do so, we sort the weights\n            // in ascending order, compute Si = sum[weight[j] xb[j], j = 0...i] and\n            // Wi = sum[weight[j], j = 0...i], and use these to quckly get get the optimum scale\n            // for each possible and score for each split.\n            for (int j = 0; j < block_size; ++j) {\n                pairs[2*j] = xb[j];\n                idx[2*j] = j;\n            }\n            qsort(pairs, block_size, 2*sizeof(float), iq1_sort_helper);\n            {\n                sumx[0] = sumw[0] = 0;\n                for (int j = 0; j < block_size; ++j) {\n                    int i = idx[2*j];\n                    sumx[j+1] = sumx[j] + weight[i]*xb[i];\n                    sumw[j+1] = sumw[j] + weight[i];\n                }\n            }\n            float best_score = -FLT_MIN, scale = max;\n            int besti1 = -1, besti2 = -1, best_shift = 0;\n            for (int i1 = 0; i1 <= block_size; ++i1) {\n                for (int i2 = i1; i2 <= block_size; ++i2) {\n                    float sumqx = (sumx[i1] - sumx[0])*x_p[0] + (sumx[i2] - sumx[i1])*x_p[1] + (sumx[block_size] - sumx[i2])*x_p[2];\n                    float sumq2 = (sumw[i1] - sumw[0])*x_p[0]*x_p[0] + (sumw[i2] - sumw[i1])*x_p[1]*x_p[1] + (sumw[block_size] - sumw[i2])*x_p[2]*x_p[2];\n                    if (sumq2 > 0 && sumqx*sumqx > best_score*sumq2) {\n                        scale = sumqx/sumq2; best_score = scale*sumqx;\n                        besti1 = i1; besti2 = i2; best_shift = 1;\n                    }\n                    sumqx = (sumx[i1] - sumx[0])*x_m[0] + (sumx[i2] - sumx[i1])*x_m[1] + (sumx[block_size] - sumx[i2])*x_m[2];\n                    sumq2 = (sumw[i1] - sumw[0])*x_m[0]*x_m[0] + (sumw[i2] - sumw[i1])*x_m[1]*x_m[1] + (sumw[block_size] - sumw[i2])*x_m[2]*x_m[2];\n                    if (sumq2 > 0 && sumqx*sumqx > best_score*sumq2) {\n                        scale = sumqx/sumq2; best_score = scale*sumqx;\n                        besti1 = i1; besti2 = i2; best_shift = -1;\n                    }\n                }\n            }\n            GGML_ASSERT(besti1 >= 0 && besti2 >= 0 && best_shift != 0);\n            for (int j =      0; j < besti1; ++j) L[idx[2*j]] = 0;\n            for (int j = besti1; j < besti2; ++j) L[idx[2*j]] = 1;\n            for (int j = besti2; j < block_size; ++j) L[idx[2*j]] = 2;\n            if (scale < 0) {\n                for (int j = 0; j < block_size; ++j) L[j] = 2 - L[j];\n                scale = -scale; best_shift = -best_shift;\n            }\n            bool all_on_grid = true;\n            const float * xx = best_shift == 1 ? x_p : x_m;\n            for (int k = 0; k < block_size/8; ++k) {\n                uint16_t u = 0;\n                for (int j = 0; j < 8; ++j) u |= (L[8*k+j] << 2*j);\n                int grid_index = kmap_q2xs[u];\n                if (grid_index < 0) {\n                    all_on_grid = false;\n                    const uint16_t * neighbours = kneighbors_q2xs - kmap_q2xs[u] - 1;\n                    grid_index = iq1_find_best_neighbour2(neighbours, kgrid_q2xs, xb + 8*k, weight + 8*k, scale, xx, L + 8*k, NGRID_IQ1S);\n                    GGML_ASSERT(grid_index >= 0);\n                }\n                index[k] = grid_index;\n            }\n            if (!all_on_grid) {\n                float sumqx = 0, sumq2 = 0;\n                for (int k = 0; k < block_size/8; ++k) {\n                    const int8_t * pg = (const int8_t *)(kgrid_q2xs + index[k]);\n                    for (int j = 0; j < 8; ++j) {\n                        float w = weight[8*k + j];\n                        float q = xx[(pg[j] - 1)/2];\n                        sumqx += w*q*xb[8*k+j];\n                        sumq2 += w*q*q;\n                    }\n                }\n                if (sumqx > 0 && sumq2 > 0) scale = sumqx/sumq2;\n            }\n            uint16_t h = 0;\n            for (int k = 0; k < block_size/8; ++k) {\n                y[ibl].qs[(block_size/8)*ib + k] = index[k] & 255;\n                h |= (index[k] >> 8) << 3*k;\n            }\n            y[ibl].qh[ib] = h;\n            GGML_ASSERT(scale >= 0);\n            scales[ib] = scale;\n            shifts[ib] = best_shift;\n            max_scale = MAX(max_scale, scale);\n        }\n\n        if (!max_scale) {\n            continue;\n        }\n\n        float d = max_scale/15;\n        y[ibl].d = GGML_FP32_TO_FP16(d*1.125f); // 1.125f is another fudge factor. Don't ask me why it is needed.\n        float id = 1/d;\n        for (int ib = 0; ib < QK_K/block_size; ++ib) {\n            int l = nearest_int(0.5f*(id*scales[ib]-1));\n            l = MAX(0, MIN(7, l));\n            if (shifts[ib] == -1) l |= 8;\n            y[ibl].qh[ib] |= (l << 12);\n        }\n    }\n}\n\nsize_t quantize_iq1_s(const float * restrict src, void * restrict dst, int64_t nrow, int64_t n_per_row, const float * quant_weights) {\n    GGML_ASSERT(n_per_row%QK_K == 0);\n    float  scales[QK_K/IQ1S_BLOCK_SIZE];\n    float  weight[IQ1S_BLOCK_SIZE];\n    int8_t L[IQ1S_BLOCK_SIZE];\n    float  sumx[IQ1S_BLOCK_SIZE+1];\n    float  sumw[IQ1S_BLOCK_SIZE+1];\n    float  pairs[2*IQ1S_BLOCK_SIZE];\n    uint16_t index[IQ1S_BLOCK_SIZE/8];\n    int8_t shifts[QK_K/IQ1S_BLOCK_SIZE];\n    int64_t nblock = n_per_row/QK_K;\n    char * qrow = (char *)dst;\n    for (int64_t row = 0; row < nrow; ++row) {\n        quantize_row_iq1_s_impl(src, qrow, n_per_row, quant_weights, scales, weight, sumx, sumw, pairs, L, index, shifts);\n        src += n_per_row;\n        qrow += nblock*sizeof(block_iq1_s);\n    }\n    return nrow * nblock * sizeof(block_iq1_s);\n}\n\nstatic void quantize_row_iq1_m_impl(const float * restrict x, void * restrict vy, int64_t n, const float * restrict quant_weights,\n        float    * scales,\n        float    * weight,\n        float    * pairs,\n        int8_t   * L,\n        uint16_t * index,\n        int8_t   * shifts) {\n\n    const int gindex = iq2_data_index(GGML_TYPE_IQ1_M);\n\n    const uint64_t * kgrid_q2xs      = iq2_data[gindex].grid;\n    const int      * kmap_q2xs       = iq2_data[gindex].map;\n    const uint16_t * kneighbors_q2xs = iq2_data[gindex].neighbours;\n\n    //GGML_ASSERT(quant_weights   && \"missing quantization weights\");\n    GGML_ASSERT(kgrid_q2xs      && \"forgot to call ggml_quantize_init()?\");\n    GGML_ASSERT(kmap_q2xs       && \"forgot to call ggml_quantize_init()?\");\n    GGML_ASSERT(kneighbors_q2xs && \"forgot to call ggml_quantize_init()?\");\n    GGML_ASSERT(n%QK_K == 0);\n\n    block_iq1_m * y = vy;\n\n    const int64_t nbl = n/QK_K;\n\n    const int block_size = IQ1M_BLOCK_SIZE;\n\n    const float x_p[3] = {-1 + IQ1M_DELTA,  IQ1M_DELTA, 1 + IQ1M_DELTA};\n    const float x_m[3] = {-1 - IQ1M_DELTA, -IQ1M_DELTA, 1 - IQ1M_DELTA};\n    const uint8_t masks[4] = {0x00, 0x80, 0x08, 0x88};\n\n    int * idx = (int *)(pairs + 1);\n\n    float sumqx[4], sumq2[4];\n\n    iq1m_scale_t s;\n    const float * xx;\n\n    for (int ibl = 0; ibl < nbl; ++ibl) {\n        memset(y[ibl].qs, 0, QK_K/8);\n        memset(y[ibl].qh, 0, QK_K/16);\n        memset(y[ibl].scales, 0, QK_K/32);\n\n        float max_scale = 0;\n\n        const float * xbl = x + QK_K*ibl;\n        float sumx2 = 0;\n        for (int i = 0; i < QK_K; ++i) sumx2 += xbl[i]*xbl[i];\n        float sigma2 = 2*sumx2/QK_K;\n\n        for (int ib = 0; ib < QK_K/block_size; ++ib) {\n            const float * xb = xbl + block_size*ib;\n            if (quant_weights) {\n                const float * qw = quant_weights + QK_K*ibl + block_size*ib;\n                for (int i = 0; i < block_size; ++i) weight[i] = qw[i] * sqrtf(sigma2 + xb[i]*xb[i]);\n            } else {\n                for (int i = 0; i < block_size; ++i) weight[i] = xb[i]*xb[i];\n            }\n            float max = fabsf(xb[0]);\n            for (int i = 1; i < block_size; ++i) max = MAX(max, fabsf(xb[i]));\n            if (max < GROUP_MAX_EPS_IQ1_M) {\n                scales[ib] = 0;\n                memset(L, 1, block_size);\n                continue;\n            }\n            // Here we solve exactly the sum of squared difference (SSD) weighted minimization problem.\n            // With just 3 allowed quant values (-1, 0, 1), we can search exhaustively for the two\n            // boundaries that split the weights xb[i] into 3 groups. To do so, we sort the weights\n            // in ascending order, compute Si = sum[weight[j] xb[j], j = 0...i] and\n            // Wi = sum[weight[j], j = 0...i], and use these to quckly get get the optimum scale\n            // for each possible and score for each split.\n            for (int j = 0; j < block_size; ++j) {\n                pairs[2*j] = xb[j];\n                idx[2*j] = j;\n            }\n            qsort(pairs, block_size, 2*sizeof(float), iq1_sort_helper);\n            float best_score = -FLT_MIN, scale = max;\n            int besti1 = -1, besti2 = -1, best_k = -1;\n            // 0: +, +\n            // 1: +, -\n            // 2: -, +\n            // 3: -, -\n            for (int i1 = 0; i1 <= block_size; ++i1) {\n                for (int i2 = i1; i2 <= block_size; ++i2) {\n                    memset(sumqx, 0, 4*sizeof(float));\n                    memset(sumq2, 0, 4*sizeof(float));\n                    for (int j = 0; j < i1; ++j) {\n                        int i = idx[2*j];\n                        if (i < block_size/2) {\n                            sumqx[0] += weight[i]*x_p[0]*xb[i];\n                            sumqx[1] += weight[i]*x_p[0]*xb[i];\n                            sumqx[2] += weight[i]*x_m[0]*xb[i];\n                            sumqx[3] += weight[i]*x_m[0]*xb[i];\n                            sumq2[0] += weight[i]*x_p[0]*x_p[0];\n                            sumq2[1] += weight[i]*x_p[0]*x_p[0];\n                            sumq2[2] += weight[i]*x_m[0]*x_m[0];\n                            sumq2[3] += weight[i]*x_m[0]*x_m[0];\n                        } else {\n                            sumqx[0] += weight[i]*x_p[0]*xb[i];\n                            sumqx[2] += weight[i]*x_p[0]*xb[i];\n                            sumqx[1] += weight[i]*x_m[0]*xb[i];\n                            sumqx[3] += weight[i]*x_m[0]*xb[i];\n                            sumq2[0] += weight[i]*x_p[0]*x_p[0];\n                            sumq2[2] += weight[i]*x_p[0]*x_p[0];\n                            sumq2[1] += weight[i]*x_m[0]*x_m[0];\n                            sumq2[3] += weight[i]*x_m[0]*x_m[0];\n                        }\n                    }\n                    for (int j = i1; j < i2; ++j) {\n                        int i = idx[2*j];\n                        if (i < block_size/2) {\n                            sumqx[0] += weight[i]*x_p[1]*xb[i];\n                            sumqx[1] += weight[i]*x_p[1]*xb[i];\n                            sumqx[2] += weight[i]*x_m[1]*xb[i];\n                            sumqx[3] += weight[i]*x_m[1]*xb[i];\n                            sumq2[0] += weight[i]*x_p[1]*x_p[1];\n                            sumq2[1] += weight[i]*x_p[1]*x_p[1];\n                            sumq2[2] += weight[i]*x_m[1]*x_m[1];\n                            sumq2[3] += weight[i]*x_m[1]*x_m[1];\n                        } else {\n                            sumqx[0] += weight[i]*x_p[1]*xb[i];\n                            sumqx[2] += weight[i]*x_p[1]*xb[i];\n                            sumqx[1] += weight[i]*x_m[1]*xb[i];\n                            sumqx[3] += weight[i]*x_m[1]*xb[i];\n                            sumq2[0] += weight[i]*x_p[1]*x_p[1];\n                            sumq2[2] += weight[i]*x_p[1]*x_p[1];\n                            sumq2[1] += weight[i]*x_m[1]*x_m[1];\n                            sumq2[3] += weight[i]*x_m[1]*x_m[1];\n                        }\n                    }\n                    for (int j = i2; j < block_size; ++j) {\n                        int i = idx[2*j];\n                        if (i < block_size/2) {\n                            sumqx[0] += weight[i]*x_p[2]*xb[i];\n                            sumqx[1] += weight[i]*x_p[2]*xb[i];\n                            sumqx[2] += weight[i]*x_m[2]*xb[i];\n                            sumqx[3] += weight[i]*x_m[2]*xb[i];\n                            sumq2[0] += weight[i]*x_p[2]*x_p[2];\n                            sumq2[1] += weight[i]*x_p[2]*x_p[2];\n                            sumq2[2] += weight[i]*x_m[2]*x_m[2];\n                            sumq2[3] += weight[i]*x_m[2]*x_m[2];\n                        } else {\n                            sumqx[0] += weight[i]*x_p[2]*xb[i];\n                            sumqx[2] += weight[i]*x_p[2]*xb[i];\n                            sumqx[1] += weight[i]*x_m[2]*xb[i];\n                            sumqx[3] += weight[i]*x_m[2]*xb[i];\n                            sumq2[0] += weight[i]*x_p[2]*x_p[2];\n                            sumq2[2] += weight[i]*x_p[2]*x_p[2];\n                            sumq2[1] += weight[i]*x_m[2]*x_m[2];\n                            sumq2[3] += weight[i]*x_m[2]*x_m[2];\n                        }\n                    }\n                    for (int k = 0; k < 4; ++k) {\n                        if (sumq2[k] > 0 && sumqx[k]*sumqx[k] > best_score*sumq2[k]) {\n                            scale = sumqx[k]/sumq2[k]; best_score = scale*sumqx[k];\n                            besti1 = i1; besti2 = i2; best_k = k;\n                        }\n                    }\n                }\n            }\n            GGML_ASSERT(besti1 >= 0 && besti2 >= 0 && best_k >= 0);\n            for (int j =      0; j < besti1; ++j) L[idx[2*j]] = 0;\n            for (int j = besti1; j < besti2; ++j) L[idx[2*j]] = 1;\n            for (int j = besti2; j < block_size; ++j) L[idx[2*j]] = 2;\n            if (scale < 0) {\n                for (int j = 0; j < block_size; ++j) L[j] = 2 - L[j];\n                scale = -scale;\n                best_k = best_k == 0 ? 3 : best_k == 1 ? 2 : best_k == 2 ? 1 : 0;\n            }\n            bool all_on_grid = true;\n            for (int k = 0; k < block_size/8; ++k) {\n                if (k == 0) xx = best_k < 2 ? x_p : x_m;\n                else xx = best_k%2 == 0 ? x_p : x_m;\n                uint16_t u = 0;\n                for (int j = 0; j < 8; ++j) u |= (L[8*k+j] << 2*j);\n                int grid_index = kmap_q2xs[u];\n                if (grid_index < 0) {\n                    all_on_grid = false;\n                    const uint16_t * neighbours = kneighbors_q2xs - kmap_q2xs[u] - 1;\n                    grid_index = iq1_find_best_neighbour2(neighbours, kgrid_q2xs, xb + 8*k, weight + 8*k, scale, xx, L + 8*k, NGRID_IQ1S);\n                    GGML_ASSERT(grid_index >= 0);\n                }\n                index[k] = grid_index;\n            }\n            if (!all_on_grid) {\n                float sumqx_f = 0, sumq2_f = 0;\n                for (int k = 0; k < block_size/8; ++k) {\n                    if (k == 0) xx = best_k < 2 ? x_p : x_m;\n                    else xx = best_k%2 == 0 ? x_p : x_m;\n                    const int8_t * pg = (const int8_t *)(kgrid_q2xs + index[k]);\n                    for (int j = 0; j < 8; ++j) {\n                        float w = weight[8*k + j];\n                        float q = xx[(pg[j] - 1)/2];\n                        sumqx_f += w*q*xb[8*k+j];\n                        sumq2_f += w*q*q;\n                    }\n                }\n                if (sumqx_f > 0 && sumq2_f > 0) scale = sumqx_f/sumq2_f;\n            }\n            y[ibl].qs[2*ib + 0] = index[0] & 255;\n            y[ibl].qs[2*ib + 1] = index[1] & 255;\n            y[ibl].qh[ib] = (index[0] >> 8) | ((index[1] >> 8) << 4);\n            GGML_ASSERT(scale >= 0);\n            scales[ib] = scale;\n            shifts[ib] = best_k;\n            max_scale = MAX(max_scale, scale);\n        }\n\n        if (!max_scale) {\n            continue;\n        }\n\n        uint16_t * sc = (uint16_t *)y[ibl].scales;\n        float d = max_scale/15;\n        float id = 1/d;\n        float sumqx_f = 0, sumq2_f = 0;\n        for (int ib = 0; ib < QK_K/block_size; ++ib) {\n            int l = nearest_int(0.5f*(id*scales[ib+0]-1));\n            l = MAX(0, MIN(7, l));\n            sc[ib/4] |= (l << 3*(ib%4));\n            y[ibl].qh[ib] |= masks[shifts[ib]];\n            const float * xb = xbl + block_size*ib;\n            if (quant_weights) {\n                const float * qw = quant_weights + QK_K*ibl + block_size*ib;\n                for (int i = 0; i < block_size; ++i) weight[i] = qw[i] * sqrtf(sigma2 + xb[i]*xb[i]);\n            } else {\n                for (int i = 0; i < block_size; ++i) weight[i] = xb[i]*xb[i];\n            }\n            for (int k = 0; k < block_size/8; ++k) {\n                if (k == 0) xx = shifts[ib] < 2 ? x_p : x_m;\n                else xx = shifts[ib]%2 == 0 ? x_p : x_m;\n                const int8_t * pg = (const int8_t *)(kgrid_q2xs + y[ibl].qs[2*ib+k] + ((y[ibl].qh[ib] << (8 - 4*k)) & 0x700));\n                for (int j = 0; j < 8; ++j) {\n                    float w = weight[8*k + j];\n                    float q = xx[(pg[j] - 1)/2]*(2*l+1);\n                    sumqx_f += w*q*xb[8*k+j];\n                    sumq2_f += w*q*q;\n                }\n            }\n        }\n        if (sumq2_f > 0) d = sumqx_f/sumq2_f;\n        s.f16 = GGML_FP32_TO_FP16(d*1.1125f); // 1.1125f is another fudge factor. Don't ask me why it is needed.\n        sc[0] |= ((s.u16 & 0x000f) << 12);\n        sc[1] |= ((s.u16 & 0x00f0) <<  8);\n        sc[2] |= ((s.u16 & 0x0f00) <<  4);\n        sc[3] |= ((s.u16 & 0xf000) <<  0);\n    }\n}\n\nsize_t quantize_iq1_m(const float * restrict src, void * restrict dst, int64_t nrow, int64_t n_per_row, const float * quant_weights) {\n    GGML_ASSERT(n_per_row%QK_K == 0);\n    float  scales[QK_K/IQ1M_BLOCK_SIZE];\n    float  weight[IQ1M_BLOCK_SIZE];\n    int8_t L[IQ1M_BLOCK_SIZE];\n    float  pairs[2*IQ1M_BLOCK_SIZE];\n    uint16_t index[IQ1M_BLOCK_SIZE/8];\n    int8_t shifts[QK_K/IQ1M_BLOCK_SIZE];\n    int64_t nblock = n_per_row/QK_K;\n    char * qrow = (char *)dst;\n    for (int64_t row = 0; row < nrow; ++row) {\n        quantize_row_iq1_m_impl(src, qrow, n_per_row, quant_weights, scales, weight, pairs, L, index, shifts);\n        src += n_per_row;\n        qrow += nblock*sizeof(block_iq1_m);\n    }\n    return nrow * nblock * sizeof(block_iq1_m);\n}\n\n// ============================ 4-bit non-linear quants\n\nstatic inline int best_index_int8(int n, const int8_t * val, float x) {\n    if (x <= val[0]) return 0;\n    if (x >= val[n-1]) return n-1;\n    int ml = 0, mu = n-1;\n    while (mu-ml > 1) {\n        int mav = (ml+mu)/2;\n        if (x < val[mav]) mu = mav; else ml = mav;\n    }\n    return x - val[mu-1] < val[mu] - x ? mu-1 : mu;\n}\n\nstatic void quantize_row_iq4_nl_impl(const int super_block_size, const int block_size, const float * restrict x,\n        ggml_fp16_t * dh, uint8_t * q4, uint16_t * scales_h, uint8_t * scales_l,\n        float * scales, float * weight, uint8_t * L,\n        const int8_t * values,\n        const float * quant_weights,\n        const int ntry) {\n\n    float sigma2 = 0;\n    for (int j = 0; j < super_block_size; ++j) sigma2 += x[j]*x[j];\n    sigma2 *= 2.f/super_block_size;\n\n    memset(q4, 0, super_block_size/2);\n    dh[0] = GGML_FP32_TO_FP16(0.f);\n\n    float max_scale = 0, amax_scale = 0;\n    for (int ib = 0; ib < super_block_size/block_size; ++ib) {\n        const float * xb = x + ib*block_size;\n        uint8_t * Lb = L + ib*block_size;\n        if (quant_weights) {\n            const float * qw = quant_weights + ib*block_size;\n            for (int j = 0; j < block_size; ++j) weight[j] = qw[j] * sqrtf(sigma2 + xb[j]*xb[j]);\n        } else {\n            for (int j = 0; j < block_size; ++j) weight[j] = xb[j]*xb[j];\n        }\n        float amax = 0, max = 0;\n        for (int j = 0; j < block_size; ++j) {\n            float ax = fabsf(xb[j]);\n            if (ax > amax) {\n                amax = ax; max = xb[j];\n            }\n        }\n        if (amax < GROUP_MAX_EPS) {\n            scales[ib] = 0;\n            continue;\n        }\n        float d = ntry > 0 ? -max/values[0] : max/values[0];\n        float id = 1/d;\n        float sumqx = 0, sumq2 = 0;\n        for (int j = 0; j < block_size; ++j) {\n            float al = id*xb[j];\n            int l = best_index_int8(16, values, al);\n            Lb[j] = l;\n            float q = values[l];\n            float w = weight[j];\n            sumqx += w*q*xb[j];\n            sumq2 += w*q*q;\n        }\n        d = sumqx/sumq2;\n        float best = d*sumqx;\n        for (int itry = -ntry; itry <= ntry; ++itry) {\n            id = (itry + values[0])/max;\n            sumqx = sumq2 = 0;\n            for (int j = 0; j < block_size; ++j) {\n                float al = id*xb[j];\n                int l = best_index_int8(16, values, al);\n                float q = values[l];\n                float w = weight[j];\n                sumqx += w*q*xb[j];\n                sumq2 += w*q*q;\n            }\n            if (sumq2 > 0 && sumqx*sumqx > best*sumq2) {\n                d = sumqx/sumq2; best = d * sumqx;\n            }\n        }\n        scales[ib] = d;\n        float abs_d = fabsf(d);\n        if (abs_d > amax_scale) {\n            amax_scale = abs_d; max_scale = d;\n        }\n    }\n\n    if (super_block_size/block_size > 1) {\n        int nb = super_block_size/block_size;\n        memset(scales_h, 0, ((nb+7)/8)*sizeof(uint16_t));\n        float d = -max_scale/32;\n        dh[0] = GGML_FP32_TO_FP16(d);\n        float id = d ? 1/d : 0.f;\n        for (int ib = 0; ib < super_block_size/block_size; ++ib) {\n            int l = nearest_int(id*scales[ib]);\n            l = MAX(-32, MIN(31, l));\n            float dl = d * l;\n            float idl = dl ? 1/dl : 0.f;\n            uint8_t * Lb = L + ib*block_size;\n            const float * xb = x + ib*block_size;\n            for (int j = 0; j < block_size; ++j) {\n                Lb[j] = best_index_int8(16, values, idl*xb[j]);\n            }\n            l += 32;\n            uint8_t l_l = l & 0xf;\n            uint8_t l_h = l >>  4;\n            if (ib%2 == 0) scales_l[ib/2] = l_l;\n            else scales_l[ib/2] |= (l_l << 4);\n            scales_h[ib/8] |= (l_h << 2*(ib%8));\n        }\n    } else {\n        dh[0] = GGML_FP32_TO_FP16(scales[0]);\n        if (ntry > 0) {\n            float id = scales[0] ? 1/scales[0] : 0;\n            for (int j = 0; j < super_block_size; ++j) {\n                L[j] = best_index_int8(16, values, id*x[j]);\n            }\n        }\n    }\n\n    for (int i = 0; i < super_block_size/32; ++i) {\n        for (int j = 0; j < 16; ++j) {\n            q4[16*i + j] = L[32*i + j] | (L[32*i + 16 + j] << 4);\n        }\n    }\n}\n\nsize_t quantize_iq4_nl(const float * restrict src, void * restrict dst, int64_t nrow, int64_t n_per_row, const float * quant_weights) {\n    GGML_ASSERT(n_per_row%QK4_NL == 0);\n    int64_t nblock = n_per_row/QK4_NL;\n    char * qrow = (char *)dst;\n    uint8_t L[QK4_NL];\n    float weight[QK4_NL];\n    uint16_t unused_h;\n    uint8_t * unused_l = NULL;\n    float scale;\n    for (int64_t row = 0; row < nrow; ++row) {\n        block_iq4_nl * iq4 = (block_iq4_nl *)qrow;\n        for (int ibl = 0; ibl < nblock; ++ibl) {\n            const float * qw = quant_weights ? quant_weights + QK4_NL*ibl : NULL;\n            quantize_row_iq4_nl_impl(QK4_NL, 32, src + QK4_NL*ibl, &iq4[ibl].d, iq4[ibl].qs, &unused_h, unused_l,\n                    &scale, weight, L, kvalues_iq4nl, qw, 7);\n        }\n        src += n_per_row;\n        qrow += nblock*sizeof(block_iq4_nl);\n    }\n    return nrow * nblock * sizeof(block_iq4_nl);\n}\n\nvoid quantize_row_iq4_nl(const float * restrict x, void * restrict vy, int64_t k) {\n    GGML_ASSERT(k%QK4_NL == 0);\n    int64_t nblock = k/QK4_NL;\n    uint8_t L[QK4_NL];\n    float weight[QK4_NL];\n    uint16_t unused_h;\n    uint8_t * unused_l = NULL;\n    float scale;\n    block_iq4_nl * iq4 = (block_iq4_nl *)vy;\n    for (int ibl = 0; ibl < nblock; ++ibl) {\n        quantize_row_iq4_nl_impl(QK4_NL, 32, x + QK4_NL*ibl, &iq4[ibl].d, iq4[ibl].qs, &unused_h, unused_l,\n                &scale, weight, L, kvalues_iq4nl, NULL, -1);\n    }\n}\n\nvoid quantize_row_iq4_nl_ref(const float * restrict x, block_iq4_nl * restrict y, int64_t k) {\n    assert(k % QK4_NL == 0);\n    quantize_row_iq4_nl(x, y, k);\n}\n\nsize_t quantize_iq4_xs(const float * restrict src, void * restrict dst, int64_t nrow, int64_t n_per_row, const float * quant_weights) {\n    GGML_ASSERT(n_per_row%QK_K == 0);\n    int64_t nblock = n_per_row/QK_K;\n    char * qrow = (char *)dst;\n    uint8_t L[QK_K];\n    float weight[32];\n    float scales[QK_K/32];\n    for (int64_t row = 0; row < nrow; ++row) {\n        block_iq4_xs * iq4 = (block_iq4_xs *)qrow;\n        for (int ibl = 0; ibl < nblock; ++ibl) {\n            const float * qw = quant_weights ? quant_weights + QK_K*ibl : NULL;\n            quantize_row_iq4_nl_impl(QK_K, 32, src + QK_K*ibl, &iq4[ibl].d, iq4[ibl].qs, &iq4[ibl].scales_h, iq4[ibl].scales_l,\n                    scales, weight, L, kvalues_iq4nl, qw, 7);\n        }\n        src += n_per_row;\n        qrow += nblock*sizeof(block_iq4_xs);\n    }\n    return nrow * nblock * sizeof(block_iq4_xs);\n}\n\nvoid quantize_row_iq4_xs(const float * restrict x, void * restrict vy, int64_t k) {\n    assert(k % QK_K == 0);\n    block_iq4_xs * restrict y = vy;\n    quantize_row_iq4_xs_ref(x, y, k);\n}\n\nvoid quantize_row_iq4_xs_ref(const float * restrict x, block_iq4_xs * restrict y, int64_t k) {\n    assert(k % QK_K == 0);\n    quantize_iq4_xs(x, y, 1, k, NULL);\n}\n\n// =============================== 2.5625 bpw\n\nstatic void quantize_row_iq2_s_impl(const float * restrict x, void * restrict vy, int64_t n, const float * restrict quant_weights) {\n\n    const int gindex = iq2_data_index(GGML_TYPE_IQ2_S);\n\n    const uint64_t * kgrid_q2xs      = iq2_data[gindex].grid;\n    const int      * kmap_q2xs       = iq2_data[gindex].map;\n    const uint16_t * kneighbors_q2xs = iq2_data[gindex].neighbours;\n\n    GGML_ASSERT(kmap_q2xs       && \"forgot to call ggml_quantize_init()?\");\n    GGML_ASSERT(kgrid_q2xs      && \"forgot to call ggml_quantize_init()?\");\n    GGML_ASSERT(kneighbors_q2xs && \"forgot to call ggml_quantize_init()?\");\n    GGML_ASSERT(n%QK_K == 0);\n\n    const int kMaxQ = 3;\n\n    const int64_t nbl = n/QK_K;\n\n    block_iq2_s * y = vy;\n\n    float scales[QK_K/16];\n    float weight[16];\n    float xval[16];\n    int8_t L[16];\n    int8_t Laux[16];\n    float  waux[16];\n    bool   is_on_grid[2];\n    bool   is_on_grid_aux[2];\n    uint8_t block_signs[2];\n\n    for (int ibl = 0; ibl < nbl; ++ibl) {\n\n        memset(&y[ibl], 0, sizeof(block_iq2_s));\n        y[ibl].d = GGML_FP32_TO_FP16(0.f);\n\n        float max_scale = 0;\n\n        const float * xbl = x + QK_K*ibl;\n        float sumx2 = 0;\n        for (int i = 0; i < QK_K; ++i) sumx2 += xbl[i]*xbl[i];\n        float sigma2 = 2*sumx2/QK_K;\n\n        for (int ib = 0; ib < QK_K/16; ++ib) {\n            const float * xb = xbl + 16*ib;\n            if (quant_weights) {\n                const float * qw = quant_weights + QK_K*ibl + 16*ib;\n                for (int i = 0; i < 16; ++i) weight[i] = qw[i] * sqrtf(sigma2 + xb[i]*xb[i]);\n            } else {\n                for (int i = 0; i < 16; ++i) weight[i] = 0.25f*sigma2 + xb[i]*xb[i];\n            }\n            for (int i = 0; i < 16; ++i) waux[i] = sqrtf(weight[i]);\n            for (int k = 0; k < 2; ++k) {\n                uint8_t s = 0;\n                for (int i = 0; i < 8; ++i) {\n                    if (xb[8*k + i] >= 0) xval[8*k + i] = xb[8*k + i];\n                    else {\n                        xval[8*k + i] = -xb[8*k + i]; s |= (1 << i);\n                    }\n                }\n                block_signs[k] = s;\n            }\n            float max = xval[0];\n            for (int i = 1; i < 16; ++i) max = MAX(max, xval[i]);\n            if (max < GROUP_MAX_EPS_IQ2_S) {\n                scales[ib] = 0;\n                continue;\n            }\n            float best = 0;\n            float scale = max/(2*kMaxQ-1);\n            is_on_grid[0] = is_on_grid[1] = true;\n            for (int is = -9; is <= 9; ++is) {\n                float id = (2*kMaxQ-1+is*0.1f)/max;\n                float this_scale = 1/id;\n                for (int k = 0; k < 2; ++k) {\n                    for (int i = 0; i < 8; ++i) {\n                        int l = nearest_int(0.5f*(id*xval[8*k+i]-1));\n                        Laux[8*k+i] = MAX(0, MIN(kMaxQ-1, l));\n                    }\n                    uint16_t u = 0;\n                    for (int i = 0; i < 8; ++i) u |= (Laux[8*k+i] << 2*i);\n                    int grid_index = kmap_q2xs[u];\n                    is_on_grid_aux[k] = true;\n                    if (grid_index < 0) {\n                        is_on_grid_aux[k] = false;\n                        const uint16_t * neighbours = kneighbors_q2xs - kmap_q2xs[u] - 1;\n                        grid_index = iq2_find_best_neighbour(neighbours, kgrid_q2xs, xval + 8*k, waux + 8*k, this_scale, Laux + 8*k);\n                    }\n                }\n                float sumqx = 0, sumq2 = 0;\n                for (int i = 0; i < 16; ++i) {\n                    float w = weight[i];\n                    float q = 2*Laux[i] + 1;\n                    sumqx += w*xval[i]*q;\n                    sumq2 += w*q*q;\n                }\n                if (sumq2 > 0 && sumqx*sumqx > best*sumq2) {\n                    scale = sumqx/sumq2; best = scale*sumqx;\n                    for (int i = 0; i < 16; ++i) L[i] = Laux[i];\n                    for (int k = 0; k <  2; ++k) is_on_grid[k] = is_on_grid_aux[k];\n                }\n            }\n            int n_not_ongrid = 0;\n            for (int k = 0; k < 2; ++k) if (!is_on_grid[k]) ++n_not_ongrid;\n            if (n_not_ongrid > 0 && scale > 0) {\n                float id = 1/scale;\n                for (int k = 0; k < 2; ++k) {\n                    if (is_on_grid[k]) continue;\n                    uint16_t u = 0;\n                    for (int i = 0; i < 8; ++i) {\n                        int l = nearest_int(0.5f*(id*xval[8*k+i]-1));\n                        l = MAX(0, MIN(kMaxQ-1, l));\n                        u |= (l << 2*i);\n                        L[8*k + i] = l;\n                    }\n                    int grid_index = kmap_q2xs[u];\n                    if (grid_index < 0) {\n                        const uint16_t * neighbours = kneighbors_q2xs - kmap_q2xs[u] - 1;\n                        grid_index = iq2_find_best_neighbour(neighbours, kgrid_q2xs, xval + 8*k, waux + 8*k, scale, L + 8*k);\n                    }\n                }\n                float sumqx = 0, sumq2 = 0;\n                for (int i = 0; i < 16; ++i) {\n                    float w = weight[i];\n                    float q = 2*L[i] + 1;\n                    sumqx += w*xval[i]*q;\n                    sumq2 += w*q*q;\n                }\n                if (sumq2 > 0) scale = sumqx/sumq2;\n            }\n            if (scale < 0) {\n                scale = -scale;\n                for (int k = 0; k < 2; ++k) block_signs[k] = ~block_signs[k];\n            }\n            for (int k = 0; k < 2; ++k) {\n                uint16_t u = 0;\n                for (int i = 0; i < 8; ++i) u |= (L[8*k+i] << 2*i);\n                int grid_index = kmap_q2xs[u];\n                if (grid_index < 0) {\n                    printf(\"Oops: found point %u not on grid:\", u);\n                    for (int i = 0; i < 8; ++i) printf(\" %d\", L[8*k+i]);\n                    printf(\"\\n\");\n                    GGML_ABORT(\"fatal error\");\n                }\n                const int i8 = 2*ib + k;\n                y[ibl].qs[i8] = grid_index & 255;\n                y[ibl].qh[i8/4] |= ((grid_index >> 8) << 2*(i8%4));\n                y[ibl].qs[QK_K/8 + i8] = block_signs[k];\n            }\n            GGML_ASSERT(scale >= 0);\n            scales[ib] = scale;\n            max_scale = MAX(max_scale, scale);\n        }\n\n        if (!max_scale) {\n            continue;\n        }\n\n        float d = max_scale/31;\n        y[ibl].d = GGML_FP32_TO_FP16(d * 0.9875f);\n        float id = 1/d;\n        for (int ib = 0; ib < QK_K/16; ++ib) {\n            int l = nearest_int(0.5f*(id*scales[ib]-1));\n            l = MAX(0, MIN(15, l));\n            if (ib%2 == 0) y[ibl].scales[ib/2] = l;\n            else y[ibl].scales[ib/2] |= (l << 4);\n        }\n    }\n}\n\nsize_t quantize_iq2_s(const float * restrict src, void * restrict dst, int64_t nrow, int64_t n_per_row, const float * quant_weights) {\n    GGML_ASSERT(n_per_row%QK_K == 0);\n    int64_t nblock = n_per_row/QK_K;\n    char * qrow = (char *)dst;\n    for (int64_t row = 0; row < nrow; ++row) {\n        quantize_row_iq2_s_impl(src, qrow, n_per_row, quant_weights);\n        src += n_per_row;\n        qrow += nblock*sizeof(block_iq2_s);\n    }\n    return nrow * nblock * sizeof(block_iq2_s);\n}\n\nvoid quantize_row_iq2_s_ref(const float * restrict x, block_iq2_s * restrict y, int64_t k) {\n    assert(k % QK_K == 0);\n    quantize_iq2_s(x, y, 1, k, NULL);\n}\n\nvoid quantize_row_iq2_s(const float * restrict x, void * restrict vy, int64_t k) {\n    assert(k % QK_K == 0);\n    block_iq2_s * restrict y = vy;\n    quantize_row_iq2_s_ref(x, y, k);\n}\n\nstatic bool validate_float(float f, size_t i) {\n    if (isinf(f)) {\n        fprintf(stderr, \"ggml_validate_row_data: found inf value at block %zu\\n\", i);\n        return false;\n    }\n\n    if (isnan(f)) {\n        fprintf(stderr, \"ggml_validate_row_data: found nan value at block %zu\\n\", i);\n        return false;\n    }\n\n    return true;\n}\n\nstatic bool isinf_fp16(ggml_fp16_t f) {\n    return (f & 0x7c00) == 0x7c00 && (f & 0x03ff) == 0;\n}\n\nstatic bool isnan_fp16(ggml_fp16_t f) {\n    return (f & 0x7c00) == 0x7c00 && (f & 0x03ff) != 0;\n}\n\nstatic bool validate_fp16(ggml_fp16_t f, size_t i) {\n    if (isinf_fp16(f)) {\n        fprintf(stderr, \"ggml_validate_row_data: found inf value at block %zu\\n\", i);\n        return false;\n    }\n\n    if (isnan_fp16(f)) {\n        fprintf(stderr, \"ggml_validate_row_data: found nan value at block %zu\\n\", i);\n        return false;\n    }\n\n    return true;\n}\n\n#define VALIDATE_ROW_DATA_D_F16_IMPL(type, data, nb) \\\n    const type * q = (const type *) (data); \\\n    for (size_t i = 0; i < (nb); ++i) { \\\n        if (!validate_fp16(q[i].d, i)) { \\\n            return false; \\\n        } \\\n    }\n\n#define VALIDATE_ROW_DATA_DM_F16_IMPL(type, data, nb, d, m) \\\n    const type * q = (const type *) (data); \\\n    for (size_t i = 0; i < (nb); ++i) { \\\n        if (!validate_fp16(q[i].d, i) || !validate_fp16(q[i].m, i)) { \\\n            return false; \\\n        } \\\n    }\n\n#define VALIDATE_ROW_DATA_DVEC_F16_IMPL(type, data, nb, nr) \\\n    const type * q = (const type *) (data); \\\n    for (size_t i = 0; i < (nb); ++i) { \\\n        for (size_t j = 0; j < (nr); ++j) { \\\n            if (!validate_fp16(q[i].d[j], i)) { \\\n                return false; \\\n            } \\\n        } \\\n    }\n\nbool ggml_validate_row_data(enum ggml_type type, const void * data, size_t nbytes) {\n    if (type < 0 || type >= GGML_TYPE_COUNT) {\n        fprintf(stderr, \"%s: invalid type %d\\n\", __func__, type);\n        return false;\n    }\n\n    if (nbytes % ggml_type_size(type) != 0) {\n        fprintf(stderr, \"%s: invalid size %zu for type %s (type size = %zu)\\n\", __func__, nbytes, ggml_type_name(type), ggml_type_size(type));\n        return false;\n    }\n\n    const size_t nb = nbytes/ggml_type_size(type);\n\n    switch (type) {\n        case GGML_TYPE_BF16:\n            {\n                int nans = 0;\n                int infs = 0;\n                const unsigned short * f = (const unsigned short *) data;\n                for (size_t i = 0; i < nb; ++i) {\n                    nans += (f[i] & 0x7fff) > 0x7f80;\n                    infs += (f[i] & 0x7fff) == 0x7f80;\n                }\n                if (nans) {\n                    fprintf(stderr, \"%s: found %d NaNs in row of %zu BF16 values\\n\", __func__, nans, nb);\n                    return false;\n                }\n                if (infs) {\n                    fprintf(stderr, \"%s: found %d infinities in row of %zu BF16 values\\n\", __func__, infs, nb);\n                    return false;\n                }\n            } break;\n        case GGML_TYPE_F16:\n            {\n                const ggml_fp16_t * f = (const ggml_fp16_t *) data;\n                size_t i = 0;\n#if defined(__AVX2__)\n                for (; i + 15 < nb; i += 16) {\n                    __m256i v = _mm256_loadu_si256((const __m256i *)(f + i));\n                    __m256i vexp = _mm256_and_si256(v, _mm256_set1_epi16(0x7c00));\n                    __m256i cmp = _mm256_cmpeq_epi16(vexp, _mm256_set1_epi16(0x7c00));\n                    int mask = _mm256_movemask_epi8(cmp);\n                    if (mask) {\n                        for (size_t j = 0; j < 16; ++j) {\n                            if (!validate_fp16(f[i + j], i + j)) {\n                                return false;\n                            }\n                        }\n                        GGML_UNREACHABLE();\n                    }\n                }\n#elif defined(__ARM_NEON)\n                for (; i + 7 < nb; i += 8) {\n                    uint16x8_t v = vld1q_u16(f + i);\n                    uint16x8_t vexp = vandq_u16(v, vdupq_n_u16(0x7c00));\n                    uint16x8_t cmp = vceqq_u16(vexp, vdupq_n_u16(0x7c00));\n                    uint64_t mask = vget_lane_u64(vreinterpret_u64_u8(vshrn_n_u16(cmp, 4)), 0);\n                    if (mask) {\n                        for (size_t j = 0; j < 8; ++j) {\n                            if (!validate_fp16(f[i + j], i + j)) {\n                                return false;\n                            }\n                        }\n                        GGML_UNREACHABLE();\n                    }\n                }\n#endif\n                for (; i < nb; ++i) {\n                    if (!validate_fp16(f[i], i)) {\n                        return false;\n                    }\n                }\n            } break;\n        case GGML_TYPE_F32:\n            {\n                const float * f = (const float *) data;\n                size_t i = 0;\n#if defined(__AVX2__)\n                for (; i + 7 < nb; i += 8) {\n                    __m256i v = _mm256_loadu_si256((const __m256i *)(f + i));\n                    __m256i vexp = _mm256_and_si256(v, _mm256_set1_epi32(0x7f800000));\n                    __m256i cmp = _mm256_cmpeq_epi32(vexp, _mm256_set1_epi32(0x7f800000));\n                    int mask = _mm256_movemask_epi8(cmp);\n                    if (mask) {\n                        for (size_t j = 0; j < 8; ++j) {\n                            if (!validate_float(f[i + j], i + j)) {\n                                return false;\n                            }\n                        }\n                        GGML_UNREACHABLE();\n                    }\n                }\n#elif defined(__ARM_NEON)\n                for (; i + 3 < nb; i += 4) {\n                    uint32x4_t v = vld1q_u32((const uint32_t *)f + i);\n                    uint32x4_t vexp = vandq_u32(v, vdupq_n_u32(0x7f800000));\n                    uint32x4_t cmp = vceqq_u32(vexp, vdupq_n_u32(0x7f800000));\n                    uint64_t mask = vget_lane_u64(vreinterpret_u64_u16(vshrn_n_u32(cmp, 8)), 0);\n                    if (mask) {\n                        for (size_t j = 0; j < 4; ++j) {\n                            if (!validate_float(f[i + j], i + j)) {\n                                return false;\n                            }\n                        }\n                        GGML_UNREACHABLE();\n                    }\n                }\n#endif\n                for (; i < nb; ++i) {\n                    if (!validate_float(f[i], i)) {\n                        return false;\n                    }\n                }\n            } break;\n        case GGML_TYPE_F64:\n            {\n                const double * f = (const double *) data;\n                for (size_t i = 0; i < nb; ++i) {\n                    if (!validate_float(f[i], i)) {\n                        return false;\n                    }\n                }\n            } break;\n        case GGML_TYPE_Q4_0:\n            {\n                VALIDATE_ROW_DATA_D_F16_IMPL(block_q4_0, data, nb);\n            } break;\n        case GGML_TYPE_Q4_1:\n            {\n                VALIDATE_ROW_DATA_DM_F16_IMPL(block_q4_1, data, nb, d, m);\n            } break;\n        case GGML_TYPE_Q5_0:\n            {\n                VALIDATE_ROW_DATA_D_F16_IMPL(block_q5_0, data, nb);\n            } break;\n        case GGML_TYPE_Q5_1:\n            {\n                VALIDATE_ROW_DATA_DM_F16_IMPL(block_q5_1, data, nb, d, m);\n            } break;\n        case GGML_TYPE_Q8_0:\n            {\n                VALIDATE_ROW_DATA_D_F16_IMPL(block_q8_0, data, nb);\n            } break;\n        case GGML_TYPE_Q2_K:\n            {\n                VALIDATE_ROW_DATA_DM_F16_IMPL(block_q2_K, data, nb, d, dmin);\n            } break;\n        case GGML_TYPE_Q3_K:\n            {\n                VALIDATE_ROW_DATA_D_F16_IMPL(block_q3_K, data, nb);\n            } break;\n        case GGML_TYPE_Q4_K:\n            {\n                VALIDATE_ROW_DATA_DM_F16_IMPL(block_q4_K, data, nb, d, dmin);\n            } break;\n        case GGML_TYPE_Q5_K:\n            {\n                VALIDATE_ROW_DATA_DM_F16_IMPL(block_q5_K, data, nb, d, dmin);\n            } break;\n        case GGML_TYPE_Q6_K:\n            {\n                VALIDATE_ROW_DATA_D_F16_IMPL(block_q6_K, data, nb);\n            } break;\n        case GGML_TYPE_Q8_K:\n            {\n                const block_q8_K * q = (const block_q8_K *) data;\n                for (size_t i = 0; i < nb; ++i) {\n                    if (!validate_float(q[i].d, i)) {\n                        return false;\n                    }\n                }\n            } break;\n        case GGML_TYPE_TQ1_0:\n            {\n                VALIDATE_ROW_DATA_D_F16_IMPL(block_tq1_0, data, nb);\n            } break;\n        case GGML_TYPE_TQ2_0:\n            {\n                VALIDATE_ROW_DATA_D_F16_IMPL(block_tq2_0, data, nb);\n            } break;\n        case GGML_TYPE_IQ1_S:\n            {\n                VALIDATE_ROW_DATA_D_F16_IMPL(block_iq1_s, data, nb);\n            } break;\n        case GGML_TYPE_IQ1_M:\n            {\n                const block_iq1_m * q = (const block_iq1_m *) data;\n                for (size_t i = 0; i < nb; ++i) {\n                    iq1m_scale_t scale;\n                    const uint16_t * sc = (const uint16_t *)q[i].scales;\n                    scale.u16 = (sc[0] >> 12) | ((sc[1] >> 8) & 0x00f0) | ((sc[2] >> 4) & 0x0f00) | (sc[3] & 0xf000);\n                    if (!validate_fp16(scale.f16, i)) {\n                        return false;\n                    }\n                }\n            } break;\n        case GGML_TYPE_IQ2_XXS:\n            {\n                VALIDATE_ROW_DATA_D_F16_IMPL(block_iq2_xxs, data, nb);\n            } break;\n        case GGML_TYPE_IQ2_XS:\n            {\n                VALIDATE_ROW_DATA_D_F16_IMPL(block_iq2_xs, data, nb);\n            } break;\n        case GGML_TYPE_IQ2_S:\n            {\n                VALIDATE_ROW_DATA_D_F16_IMPL(block_iq2_s, data, nb);\n            } break;\n        case GGML_TYPE_IQ3_XXS:\n            {\n                VALIDATE_ROW_DATA_D_F16_IMPL(block_iq3_xxs, data, nb);\n            } break;\n\n        case GGML_TYPE_IQ3_S:\n            {\n                VALIDATE_ROW_DATA_D_F16_IMPL(block_iq3_s, data, nb);\n            } break;\n        case GGML_TYPE_IQ4_XS:\n            {\n                VALIDATE_ROW_DATA_D_F16_IMPL(block_iq4_xs, data, nb);\n            } break;\n        case GGML_TYPE_IQ4_NL:\n            {\n                VALIDATE_ROW_DATA_D_F16_IMPL(block_iq4_nl, data, nb);\n            } break;\n        case GGML_TYPE_Q4_0_4_4:\n        case GGML_TYPE_Q4_0_4_8:\n            {\n                VALIDATE_ROW_DATA_DVEC_F16_IMPL(block_q4_0x4, data, nbytes / sizeof(block_q4_0x4), 4);\n            } break;\n        case GGML_TYPE_Q4_0_8_8:\n            {\n                VALIDATE_ROW_DATA_DVEC_F16_IMPL(block_q4_0x8, data, nbytes / sizeof(block_q4_0x8), 8);\n            } break;\n\n        case GGML_TYPE_I8:\n        case GGML_TYPE_I16:\n        case GGML_TYPE_I32:\n        case GGML_TYPE_I64:\n            // nothing to validate\n            break;\n        default:\n            {\n                fprintf(stderr, \"%s: invalid type %d\\n\", __func__, type);\n                return false;\n            }\n    }\n\n    return true;\n}\n` was unexpected", "path": "llama/ggml-quants.c", "type": "Syntax error"}, {"code": 3, "level": "warn", "message": "Syntax error at line llama/stb_image.h:1:\n `/* stb_image - v2.30 - public domain image loader - http://nothings.org/stb\n                                  no warranty implied; use at your own risk\n\n   Do this:\n      #define STB_IMAGE_IMPLEMENTATION\n   before you include this file in *one* C or C++ file to create the implementation.\n\n   // i.e. it should look like this:\n   #include ...\n   #include ...\n   #include ...\n   #define STB_IMAGE_IMPLEMENTATION\n   #include \"stb_image.h\"\n\n   You can #define STBI_ASSERT(x) before the #include to avoid using assert.h.\n   And #define STBI_MALLOC, STBI_REALLOC, and STBI_FREE to avoid using malloc,realloc,free\n\n\n   QUICK NOTES:\n      Primarily of interest to game developers and other people who can\n          avoid problematic images and only need the trivial interface\n\n      JPEG baseline & progressive (12 bpc/arithmetic not supported, same as stock IJG lib)\n      PNG 1/2/4/8/16-bit-per-channel\n\n      TGA (not sure what subset, if a subset)\n      BMP non-1bpp, non-RLE\n      PSD (composited view only, no extra channels, 8/16 bit-per-channel)\n\n      GIF (*comp always reports as 4-channel)\n      HDR (radiance rgbE format)\n      PIC (Softimage PIC)\n      PNM (PPM and PGM binary only)\n\n      Animated GIF still needs a proper API, but here's one way to do it:\n          http://gist.github.com/urraka/685d9a6340b26b830d49\n\n      - decode from memory or through FILE (define STBI_NO_STDIO to remove code)\n      - decode from arbitrary I/O callbacks\n      - SIMD acceleration on x86/x64 (SSE2) and ARM (NEON)\n\n   Full documentation under \"DOCUMENTATION\" below.\n\n\nLICENSE\n\n  See end of file for license information.\n\nRECENT REVISION HISTORY:\n\n      2.30  (2024-05-31) avoid erroneous gcc warning\n      2.29  (2023-05-xx) optimizations\n      2.28  (2023-01-29) many error fixes, security errors, just tons of stuff\n      2.27  (2021-07-11) document stbi_info better, 16-bit PNM support, bug fixes\n      2.26  (2020-07-13) many minor fixes\n      2.25  (2020-02-02) fix warnings\n      2.24  (2020-02-02) fix warnings; thread-local failure_reason and flip_vertically\n      2.23  (2019-08-11) fix clang static analysis warning\n      2.22  (2019-03-04) gif fixes, fix warnings\n      2.21  (2019-02-25) fix typo in comment\n      2.20  (2019-02-07) support utf8 filenames in Windows; fix warnings and platform ifdefs\n      2.19  (2018-02-11) fix warning\n      2.18  (2018-01-30) fix warnings\n      2.17  (2018-01-29) bugfix, 1-bit BMP, 16-bitness query, fix warnings\n      2.16  (2017-07-23) all functions have 16-bit variants; optimizations; bugfixes\n      2.15  (2017-03-18) fix png-1,2,4; all Imagenet JPGs; no runtime SSE detection on GCC\n      2.14  (2017-03-03) remove deprecated STBI_JPEG_OLD; fixes for Imagenet JPGs\n      2.13  (2016-12-04) experimental 16-bit API, only for PNG so far; fixes\n      2.12  (2016-04-02) fix typo in 2.11 PSD fix that caused crashes\n      2.11  (2016-04-02) 16-bit PNGS; enable SSE2 in non-gcc x64\n                         RGB-format JPEG; remove white matting in PSD;\n                         allocate large structures on the stack;\n                         correct channel count for PNG & BMP\n      2.10  (2016-01-22) avoid warning introduced in 2.09\n      2.09  (2016-01-16) 16-bit TGA; comments in PNM files; STBI_REALLOC_SIZED\n\n   See end of file for full revision history.\n\n\n ============================    Contributors    =========================\n\n Image formats                          Extensions, features\n    Sean Barrett (jpeg, png, bmp)          Jetro Lauha (stbi_info)\n    Nicolas Schulz (hdr, psd)              Martin \"SpartanJ\" Golini (stbi_info)\n    Jonathan Dummer (tga)                  James \"moose2000\" Brown (iPhone PNG)\n    Jean-Marc Lienher (gif)                Ben \"Disch\" Wenger (io callbacks)\n    Tom Seddon (pic)                       Omar Cornut (1/2/4-bit PNG)\n    Thatcher Ulrich (psd)                  Nicolas Guillemot (vertical flip)\n    Ken Miller (pgm, ppm)                  Richard Mitton (16-bit PSD)\n    github:urraka (animated gif)           Junggon Kim (PNM comments)\n    Christopher Forseth (animated gif)     Daniel Gibson (16-bit TGA)\n                                           socks-the-fox (16-bit PNG)\n                                           Jeremy Sawicki (handle all ImageNet JPGs)\n Optimizations & bugfixes                  Mikhail Morozov (1-bit BMP)\n    Fabian \"ryg\" Giesen                    Anael Seghezzi (is-16-bit query)\n    Arseny Kapoulkine                      Simon Breuss (16-bit PNM)\n    John-Mark Allen\n    Carmelo J Fdez-Aguera\n\n Bug & warning fixes\n    Marc LeBlanc            David Woo          Guillaume George     Martins Mozeiko\n    Christpher Lloyd        Jerry Jansson      Joseph Thomson       Blazej Dariusz Roszkowski\n    Phil Jordan                                Dave Moore           Roy Eltham\n    Hayaki Saito            Nathan Reed        Won Chun\n    Luke Graham             Johan Duparc       Nick Verigakis       the Horde3D community\n    Thomas Ruf              Ronny Chevalier                         github:rlyeh\n    Janez Zemva             John Bartholomew   Michal Cichon        github:romigrou\n    Jonathan Blow           Ken Hamada         Tero Hanninen        github:svdijk\n    Eugene Golushkov        Laurent Gomila     Cort Stratton        github:snagar\n    Aruelien Pocheville     Sergio Gonzalez    Thibault Reuille     github:Zelex\n    Cass Everitt            Ryamond Barbiero                        github:grim210\n    Paul Du Bois            Engin Manap        Aldo Culquicondor    github:sammyhw\n    Philipp Wiesemann       Dale Weiler        Oriol Ferrer Mesia   github:phprus\n    Josh Tobin              Neil Bickford      Matthew Gregan       github:poppolopoppo\n    Julian Raschke          Gregory Mullen     Christian Floisand   github:darealshinji\n    Baldur Karlsson         Kevin Schmidt      JR Smith             github:Michaelangel007\n                            Brad Weinberger    Matvey Cherevko      github:mosra\n    Luca Sas                Alexander Veselov  Zack Middleton       [reserved]\n    Ryan C. Gordon          [reserved]                              [reserved]\n                     DO NOT ADD YOUR NAME HERE\n\n                     Jacko Dirks\n\n  To add your name to the credits, pick a random blank space in the middle and fill it.\n  80% of merge conflicts on stb PRs are due to people adding their name at the end\n  of the credits.\n*/\n\n#ifndef STBI_INCLUDE_STB_IMAGE_H\n#define STBI_INCLUDE_STB_IMAGE_H\n\n// DOCUMENTATION\n//\n// Limitations:\n//    - no 12-bit-per-channel JPEG\n//    - no JPEGs with arithmetic coding\n//    - GIF always returns *comp=4\n//\n// Basic usage (see HDR discussion below for HDR usage):\n//    int x,y,n;\n//    unsigned char *data = stbi_load(filename, &x, &y, &n, 0);\n//    // ... process data if not NULL ...\n//    // ... x = width, y = height, n = # 8-bit components per pixel ...\n//    // ... replace '0' with '1'..'4' to force that many components per pixel\n//    // ... but 'n' will always be the number that it would have been if you said 0\n//    stbi_image_free(data);\n//\n// Standard parameters:\n//    int *x                 -- outputs image width in pixels\n//    int *y                 -- outputs image height in pixels\n//    int *channels_in_file  -- outputs # of image components in image file\n//    int desired_channels   -- if non-zero, # of image components requested in result\n//\n// The return value from an image loader is an 'unsigned char *' which points\n// to the pixel data, or NULL on an allocation failure or if the image is\n// corrupt or invalid. The pixel data consists of *y scanlines of *x pixels,\n// with each pixel consisting of N interleaved 8-bit components; the first\n// pixel pointed to is top-left-most in the image. There is no padding between\n// image scanlines or between pixels, regardless of format. The number of\n// components N is 'desired_channels' if desired_channels is non-zero, or\n// *channels_in_file otherwise. If desired_channels is non-zero,\n// *channels_in_file has the number of components that _would_ have been\n// output otherwise. E.g. if you set desired_channels to 4, you will always\n// get RGBA output, but you can check *channels_in_file to see if it's trivially\n// opaque because e.g. there were only 3 channels in the source image.\n//\n// An output image with N components has the following components interleaved\n// in this order in each pixel:\n//\n//     N=#comp     components\n//       1           grey\n//       2           grey, alpha\n//       3           red, green, blue\n//       4           red, green, blue, alpha\n//\n// If image loading fails for any reason, the return value will be NULL,\n// and *x, *y, *channels_in_file will be unchanged. The function\n// stbi_failure_reason() can be queried for an extremely brief, end-user\n// unfriendly explanation of why the load failed. Define STBI_NO_FAILURE_STRINGS\n// to avoid compiling these strings at all, and STBI_FAILURE_USERMSG to get slightly\n// more user-friendly ones.\n//\n// Paletted PNG, BMP, GIF, and PIC images are automatically depalettized.\n//\n// To query the width, height and component count of an image without having to\n// decode the full file, you can use the stbi_info family of functions:\n//\n//   int x,y,n,ok;\n//   ok = stbi_info(filename, &x, &y, &n);\n//   // returns ok=1 and sets x, y, n if image is a supported format,\n//   // 0 otherwise.\n//\n// Note that stb_image pervasively uses ints in its public API for sizes,\n// including sizes of memory buffers. This is now part of the API and thus\n// hard to change without causing breakage. As a result, the various image\n// loaders all have certain limits on image size; these differ somewhat\n// by format but generally boil down to either just under 2GB or just under\n// 1GB. When the decoded image would be larger than this, stb_image decoding\n// will fail.\n//\n// Additionally, stb_image will reject image files that have any of their\n// dimensions set to a larger value than the configurable STBI_MAX_DIMENSIONS,\n// which defaults to 2**24 = 16777216 pixels. Due to the above memory limit,\n// the only way to have an image with such dimensions load correctly\n// is for it to have a rather extreme aspect ratio. Either way, the\n// assumption here is that such larger images are likely to be malformed\n// or malicious. If you do need to load an image with individual dimensions\n// larger than that, and it still fits in the overall size limit, you can\n// #define STBI_MAX_DIMENSIONS on your own to be something larger.\n//\n// ===========================================================================\n//\n// UNICODE:\n//\n//   If compiling for Windows and you wish to use Unicode filenames, compile\n//   with\n//       #define STBI_WINDOWS_UTF8\n//   and pass utf8-encoded filenames. Call stbi_convert_wchar_to_utf8 to convert\n//   Windows wchar_t filenames to utf8.\n//\n// ===========================================================================\n//\n// Philosophy\n//\n// stb libraries are designed with the following priorities:\n//\n//    1. easy to use\n//    2. easy to maintain\n//    3. good performance\n//\n// Sometimes I let \"good performance\" creep up in priority over \"easy to maintain\",\n// and for best performance I may provide less-easy-to-use APIs that give higher\n// performance, in addition to the easy-to-use ones. Nevertheless, it's important\n// to keep in mind that from the standpoint of you, a client of this library,\n// all you care about is #1 and #3, and stb libraries DO NOT emphasize #3 above all.\n//\n// Some secondary priorities arise directly from the first two, some of which\n// provide more explicit reasons why performance can't be emphasized.\n//\n//    - Portable (\"ease of use\")\n//    - Small source code footprint (\"easy to maintain\")\n//    - No dependencies (\"ease of use\")\n//\n// ===========================================================================\n//\n// I/O callbacks\n//\n// I/O callbacks allow you to read from arbitrary sources, like packaged\n// files or some other source. Data read from callbacks are processed\n// through a small internal buffer (currently 128 bytes) to try to reduce\n// overhead.\n//\n// The three functions you must define are \"read\" (reads some bytes of data),\n// \"skip\" (skips some bytes of data), \"eof\" (reports if the stream is at the end).\n//\n// ===========================================================================\n//\n// SIMD support\n//\n// The JPEG decoder will try to automatically use SIMD kernels on x86 when\n// supported by the compiler. For ARM Neon support, you must explicitly\n// request it.\n//\n// (The old do-it-yourself SIMD API is no longer supported in the current\n// code.)\n//\n// On x86, SSE2 will automatically be used when available based on a run-time\n// test; if not, the generic C versions are used as a fall-back. On ARM targets,\n// the typical path is to have separate builds for NEON and non-NEON devices\n// (at least this is true for iOS and Android). Therefore, the NEON support is\n// toggled by a build flag: define STBI_NEON to get NEON loops.\n//\n// If for some reason you do not want to use any of SIMD code, or if\n// you have issues compiling it, you can disable it entirely by\n// defining STBI_NO_SIMD.\n//\n// ===========================================================================\n//\n// HDR image support   (disable by defining STBI_NO_HDR)\n//\n// stb_image supports loading HDR images in general, and currently the Radiance\n// .HDR file format specifically. You can still load any file through the existing\n// interface; if you attempt to load an HDR file, it will be automatically remapped\n// to LDR, assuming gamma 2.2 and an arbitrary scale factor defaulting to 1;\n// both of these constants can be reconfigured through this interface:\n//\n//     stbi_hdr_to_ldr_gamma(2.2f);\n//     stbi_hdr_to_ldr_scale(1.0f);\n//\n// (note, do not use _inverse_ constants; stbi_image will invert them\n// appropriately).\n//\n// Additionally, there is a new, parallel interface for loading files as\n// (linear) floats to preserve the full dynamic range:\n//\n//    float *data = stbi_loadf(filename, &x, &y, &n, 0);\n//\n// If you load LDR images through this interface, those images will\n// be promoted to floating point values, run through the inverse of\n// constants corresponding to the above:\n//\n//     stbi_ldr_to_hdr_scale(1.0f);\n//     stbi_ldr_to_hdr_gamma(2.2f);\n//\n// Finally, given a filename (or an open file or memory block--see header\n// file for details) containing image data, you can query for the \"most\n// appropriate\" interface to use (that is, whether the image is HDR or\n// not), using:\n//\n//     stbi_is_hdr(char *filename);\n//\n// ===========================================================================\n//\n// iPhone PNG support:\n//\n// We optionally support converting iPhone-formatted PNGs (which store\n// premultiplied BGRA) back to RGB, even though they're internally encoded\n// differently. To enable this conversion, call\n// stbi_convert_iphone_png_to_rgb(1).\n//\n// Call stbi_set_unpremultiply_on_load(1) as well to force a divide per\n// pixel to remove any premultiplied alpha *only* if the image file explicitly\n// says there's premultiplied data (currently only happens in iPhone images,\n// and only if iPhone convert-to-rgb processing is on).\n//\n// ===========================================================================\n//\n// ADDITIONAL CONFIGURATION\n//\n//  - You can suppress implementation of any of the decoders to reduce\n//    your code footprint by #defining one or more of the following\n//    symbols before creating the implementation.\n//\n//        STBI_NO_JPEG\n//        STBI_NO_PNG\n//        STBI_NO_BMP\n//        STBI_NO_PSD\n//        STBI_NO_TGA\n//        STBI_NO_GIF\n//        STBI_NO_HDR\n//        STBI_NO_PIC\n//        STBI_NO_PNM   (.ppm and .pgm)\n//\n//  - You can request *only* certain decoders and suppress all other ones\n//    (this will be more forward-compatible, as addition of new decoders\n//    doesn't require you to disable them explicitly):\n//\n//        STBI_ONLY_JPEG\n//        STBI_ONLY_PNG\n//        STBI_ONLY_BMP\n//        STBI_ONLY_PSD\n//        STBI_ONLY_TGA\n//        STBI_ONLY_GIF\n//        STBI_ONLY_HDR\n//        STBI_ONLY_PIC\n//        STBI_ONLY_PNM   (.ppm and .pgm)\n//\n//   - If you use STBI_NO_PNG (or _ONLY_ without PNG), and you still\n//     want the zlib decoder to be available, #define STBI_SUPPORT_ZLIB\n//\n//  - If you define STBI_MAX_DIMENSIONS, stb_image will reject images greater\n//    than that size (in either width or height) without further processing.\n//    This is to let programs in the wild set an upper bound to prevent\n//    denial-of-service attacks on untrusted data, as one could generate a\n//    valid image of gigantic dimensions and force stb_image to allocate a\n//    huge block of memory and spend disproportionate time decoding it. By\n//    default this is set to (1 << 24), which is 16777216, but that's still\n//    very big.\n\n#ifndef STBI_NO_STDIO\n#include <stdio.h>\n#endif // STBI_NO_STDIO\n\n#define STBI_VERSION 1\n\nenum\n{\n   STBI_default = 0, // only used for desired_channels\n\n   STBI_grey       = 1,\n   STBI_grey_alpha = 2,\n   STBI_rgb        = 3,\n   STBI_rgb_alpha  = 4\n};\n\n#include <stdlib.h>\ntypedef unsigned char stbi_uc;\ntypedef unsigned short stbi_us;\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n#ifndef STBIDEF\n#ifdef STB_IMAGE_STATIC\n#define STBIDEF static\n#else\n#define STBIDEF extern\n#endif\n#endif\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// PRIMARY API - works on images of any type\n//\n\n//\n// load image by filename, open file, or memory buffer\n//\n\ntypedef struct\n{\n   int      (*read)  (void *user,char *data,int size);   // fill 'data' with 'size' bytes.  return number of bytes actually read\n   void     (*skip)  (void *user,int n);                 // skip the next 'n' bytes, or 'unget' the last -n bytes if negative\n   int      (*eof)   (void *user);                       // returns nonzero if we are at end of file/data\n} stbi_io_callbacks;\n\n////////////////////////////////////\n//\n// 8-bits-per-channel interface\n//\n\nSTBIDEF stbi_uc *stbi_load_from_memory   (stbi_uc           const *buffer, int len   , int *x, int *y, int *channels_in_file, int desired_channels);\nSTBIDEF stbi_uc *stbi_load_from_callbacks(stbi_io_callbacks const *clbk  , void *user, int *x, int *y, int *channels_in_file, int desired_channels);\n\n#ifndef STBI_NO_STDIO\nSTBIDEF stbi_uc *stbi_load            (char const *filename, int *x, int *y, int *channels_in_file, int desired_channels);\nSTBIDEF stbi_uc *stbi_load_from_file  (FILE *f, int *x, int *y, int *channels_in_file, int desired_channels);\n// for stbi_load_from_file, file pointer is left pointing immediately after image\n#endif\n\n#ifndef STBI_NO_GIF\nSTBIDEF stbi_uc *stbi_load_gif_from_memory(stbi_uc const *buffer, int len, int **delays, int *x, int *y, int *z, int *comp, int req_comp);\n#endif\n\n#ifdef STBI_WINDOWS_UTF8\nSTBIDEF int stbi_convert_wchar_to_utf8(char *buffer, size_t bufferlen, const wchar_t* input);\n#endif\n\n////////////////////////////////////\n//\n// 16-bits-per-channel interface\n//\n\nSTBIDEF stbi_us *stbi_load_16_from_memory   (stbi_uc const *buffer, int len, int *x, int *y, int *channels_in_file, int desired_channels);\nSTBIDEF stbi_us *stbi_load_16_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *channels_in_file, int desired_channels);\n\n#ifndef STBI_NO_STDIO\nSTBIDEF stbi_us *stbi_load_16          (char const *filename, int *x, int *y, int *channels_in_file, int desired_channels);\nSTBIDEF stbi_us *stbi_load_from_file_16(FILE *f, int *x, int *y, int *channels_in_file, int desired_channels);\n#endif\n\n////////////////////////////////////\n//\n// float-per-channel interface\n//\n#ifndef STBI_NO_LINEAR\n   STBIDEF float *stbi_loadf_from_memory     (stbi_uc const *buffer, int len, int *x, int *y, int *channels_in_file, int desired_channels);\n   STBIDEF float *stbi_loadf_from_callbacks  (stbi_io_callbacks const *clbk, void *user, int *x, int *y,  int *channels_in_file, int desired_channels);\n\n   #ifndef STBI_NO_STDIO\n   STBIDEF float *stbi_loadf            (char const *filename, int *x, int *y, int *channels_in_file, int desired_channels);\n   STBIDEF float *stbi_loadf_from_file  (FILE *f, int *x, int *y, int *channels_in_file, int desired_channels);\n   #endif\n#endif\n\n#ifndef STBI_NO_HDR\n   STBIDEF void   stbi_hdr_to_ldr_gamma(float gamma);\n   STBIDEF void   stbi_hdr_to_ldr_scale(float scale);\n#endif // STBI_NO_HDR\n\n#ifndef STBI_NO_LINEAR\n   STBIDEF void   stbi_ldr_to_hdr_gamma(float gamma);\n   STBIDEF void   stbi_ldr_to_hdr_scale(float scale);\n#endif // STBI_NO_LINEAR\n\n// stbi_is_hdr is always defined, but always returns false if STBI_NO_HDR\nSTBIDEF int    stbi_is_hdr_from_callbacks(stbi_io_callbacks const *clbk, void *user);\nSTBIDEF int    stbi_is_hdr_from_memory(stbi_uc const *buffer, int len);\n#ifndef STBI_NO_STDIO\nSTBIDEF int      stbi_is_hdr          (char const *filename);\nSTBIDEF int      stbi_is_hdr_from_file(FILE *f);\n#endif // STBI_NO_STDIO\n\n\n// get a VERY brief reason for failure\n// on most compilers (and ALL modern mainstream compilers) this is threadsafe\nSTBIDEF const char *stbi_failure_reason  (void);\n\n// free the loaded image -- this is just free()\nSTBIDEF void     stbi_image_free      (void *retval_from_stbi_load);\n\n// get image dimensions & components without fully decoding\nSTBIDEF int      stbi_info_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp);\nSTBIDEF int      stbi_info_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp);\nSTBIDEF int      stbi_is_16_bit_from_memory(stbi_uc const *buffer, int len);\nSTBIDEF int      stbi_is_16_bit_from_callbacks(stbi_io_callbacks const *clbk, void *user);\n\n#ifndef STBI_NO_STDIO\nSTBIDEF int      stbi_info               (char const *filename,     int *x, int *y, int *comp);\nSTBIDEF int      stbi_info_from_file     (FILE *f,                  int *x, int *y, int *comp);\nSTBIDEF int      stbi_is_16_bit          (char const *filename);\nSTBIDEF int      stbi_is_16_bit_from_file(FILE *f);\n#endif\n\n\n\n// for image formats that explicitly notate that they have premultiplied alpha,\n// we just return the colors as stored in the file. set this flag to force\n// unpremultiplication. results are undefined if the unpremultiply overflow.\nSTBIDEF void stbi_set_unpremultiply_on_load(int flag_true_if_should_unpremultiply);\n\n// indicate whether we should process iphone images back to canonical format,\n// or just pass them through \"as-is\"\nSTBIDEF void stbi_convert_iphone_png_to_rgb(int flag_true_if_should_convert);\n\n// flip the image vertically, so the first pixel in the output array is the bottom left\nSTBIDEF void stbi_set_flip_vertically_on_load(int flag_true_if_should_flip);\n\n// as above, but only applies to images loaded on the thread that calls the function\n// this function is only available if your compiler supports thread-local variables;\n// calling it will fail to link if your compiler doesn't\nSTBIDEF void stbi_set_unpremultiply_on_load_thread(int flag_true_if_should_unpremultiply);\nSTBIDEF void stbi_convert_iphone_png_to_rgb_thread(int flag_true_if_should_convert);\nSTBIDEF void stbi_set_flip_vertically_on_load_thread(int flag_true_if_should_flip);\n\n// ZLIB client - used by PNG, available for other purposes\n\nSTBIDEF char *stbi_zlib_decode_malloc_guesssize(const char *buffer, int len, int initial_size, int *outlen);\nSTBIDEF char *stbi_zlib_decode_malloc_guesssize_headerflag(const char *buffer, int len, int initial_size, int *outlen, int parse_header);\nSTBIDEF char *stbi_zlib_decode_malloc(const char *buffer, int len, int *outlen);\nSTBIDEF int   stbi_zlib_decode_buffer(char *obuffer, int olen, const char *ibuffer, int ilen);\n\nSTBIDEF char *stbi_zlib_decode_noheader_malloc(const char *buffer, int len, int *outlen);\nSTBIDEF int   stbi_zlib_decode_noheader_buffer(char *obuffer, int olen, const char *ibuffer, int ilen);\n\n\n#ifdef __cplusplus\n}\n#endif\n\n//\n//\n////   end header file   /////////////////////////////////////////////////////\n#endif // STBI_INCLUDE_STB_IMAGE_H\n\n#ifdef STB_IMAGE_IMPLEMENTATION\n\n#if defined(STBI_ONLY_JPEG) || defined(STBI_ONLY_PNG) || defined(STBI_ONLY_BMP) \\\n  || defined(STBI_ONLY_TGA) || defined(STBI_ONLY_GIF) || defined(STBI_ONLY_PSD) \\\n  || defined(STBI_ONLY_HDR) || defined(STBI_ONLY_PIC) || defined(STBI_ONLY_PNM) \\\n  || defined(STBI_ONLY_ZLIB)\n   #ifndef STBI_ONLY_JPEG\n   #define STBI_NO_JPEG\n   #endif\n   #ifndef STBI_ONLY_PNG\n   #define STBI_NO_PNG\n   #endif\n   #ifndef STBI_ONLY_BMP\n   #define STBI_NO_BMP\n   #endif\n   #ifndef STBI_ONLY_PSD\n   #define STBI_NO_PSD\n   #endif\n   #ifndef STBI_ONLY_TGA\n   #define STBI_NO_TGA\n   #endif\n   #ifndef STBI_ONLY_GIF\n   #define STBI_NO_GIF\n   #endif\n   #ifndef STBI_ONLY_HDR\n   #define STBI_NO_HDR\n   #endif\n   #ifndef STBI_ONLY_PIC\n   #define STBI_NO_PIC\n   #endif\n   #ifndef STBI_ONLY_PNM\n   #define STBI_NO_PNM\n   #endif\n#endif\n\n#if defined(STBI_NO_PNG) && !defined(STBI_SUPPORT_ZLIB) && !defined(STBI_NO_ZLIB)\n#define STBI_NO_ZLIB\n#endif\n\n\n#include <stdarg.h>\n#include <stddef.h> // ptrdiff_t on osx\n#include <stdlib.h>\n#include <string.h>\n#include <limits.h>\n\n#if !defined(STBI_NO_LINEAR) || !defined(STBI_NO_HDR)\n#include <math.h>  // ldexp, pow\n#endif\n\n#ifndef STBI_NO_STDIO\n#include <stdio.h>\n#endif\n\n#ifndef STBI_ASSERT\n#include <assert.h>\n#define STBI_ASSERT(x) assert(x)\n#endif\n\n#ifdef __cplusplus\n#define STBI_EXTERN extern \"C\"\n#else\n#define STBI_EXTERN extern\n#endif\n\n\n#ifndef _MSC_VER\n   #ifdef __cplusplus\n   #define stbi_inline inline\n   #else\n   #define stbi_inline\n   #endif\n#else\n   #define stbi_inline __forceinline\n#endif\n\n#ifndef STBI_NO_THREAD_LOCALS\n   #if defined(__cplusplus) &&  __cplusplus >= 201103L\n      #define STBI_THREAD_LOCAL       thread_local\n   #elif defined(__GNUC__) && __GNUC__ < 5\n      #define STBI_THREAD_LOCAL       __thread\n   #elif defined(_MSC_VER)\n      #define STBI_THREAD_LOCAL       __declspec(thread)\n   #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L && !defined(__STDC_NO_THREADS__)\n      #define STBI_THREAD_LOCAL       _Thread_local\n   #endif\n\n   #ifndef STBI_THREAD_LOCAL\n      #if defined(__GNUC__)\n        #define STBI_THREAD_LOCAL       __thread\n      #endif\n   #endif\n#endif\n\n#if defined(_MSC_VER) || defined(__SYMBIAN32__)\ntypedef unsigned short stbi__uint16;\ntypedef   signed short stbi__int16;\ntypedef unsigned int   stbi__uint32;\ntypedef   signed int   stbi__int32;\n#else\n#include <stdint.h>\ntypedef uint16_t stbi__uint16;\ntypedef int16_t  stbi__int16;\ntypedef uint32_t stbi__uint32;\ntypedef int32_t  stbi__int32;\n#endif\n\n// should produce compiler error if size is wrong\ntypedef unsigned char validate_uint32[sizeof(stbi__uint32)==4 ? 1 : -1];\n\n#ifdef _MSC_VER\n#define STBI_NOTUSED(v)  (void)(v)\n#else\n#define STBI_NOTUSED(v)  (void)sizeof(v)\n#endif\n\n#ifdef _MSC_VER\n#define STBI_HAS_LROTL\n#endif\n\n#ifdef STBI_HAS_LROTL\n   #define stbi_lrot(x,y)  _lrotl(x,y)\n#else\n   #define stbi_lrot(x,y)  (((x) << (y)) | ((x) >> (-(y) & 31)))\n#endif\n\n#if defined(STBI_MALLOC) && defined(STBI_FREE) && (defined(STBI_REALLOC) || defined(STBI_REALLOC_SIZED))\n// ok\n#elif !defined(STBI_MALLOC) && !defined(STBI_FREE) && !defined(STBI_REALLOC) && !defined(STBI_REALLOC_SIZED)\n// ok\n#else\n#error \"Must define all or none of STBI_MALLOC, STBI_FREE, and STBI_REALLOC (or STBI_REALLOC_SIZED).\"\n#endif\n\n#ifndef STBI_MALLOC\n#define STBI_MALLOC(sz)           malloc(sz)\n#define STBI_REALLOC(p,newsz)     realloc(p,newsz)\n#define STBI_FREE(p)              free(p)\n#endif\n\n#ifndef STBI_REALLOC_SIZED\n#define STBI_REALLOC_SIZED(p,oldsz,newsz) STBI_REALLOC(p,newsz)\n#endif\n\n// x86/x64 detection\n#if defined(__x86_64__) || defined(_M_X64)\n#define STBI__X64_TARGET\n#elif defined(__i386) || defined(_M_IX86)\n#define STBI__X86_TARGET\n#endif\n\n#if defined(__GNUC__) && defined(STBI__X86_TARGET) && !defined(__SSE2__) && !defined(STBI_NO_SIMD)\n// gcc doesn't support sse2 intrinsics unless you compile with -msse2,\n// which in turn means it gets to use SSE2 everywhere. This is unfortunate,\n// but previous attempts to provide the SSE2 functions with runtime\n// detection caused numerous issues. The way architecture extensions are\n// exposed in GCC/Clang is, sadly, not really suited for one-file libs.\n// New behavior: if compiled with -msse2, we use SSE2 without any\n// detection; if not, we don't use it at all.\n#define STBI_NO_SIMD\n#endif\n\n#if defined(__MINGW32__) && defined(STBI__X86_TARGET) && !defined(STBI_MINGW_ENABLE_SSE2) && !defined(STBI_NO_SIMD)\n// Note that __MINGW32__ doesn't actually mean 32-bit, so we have to avoid STBI__X64_TARGET\n//\n// 32-bit MinGW wants ESP to be 16-byte aligned, but this is not in the\n// Windows ABI and VC++ as well as Windows DLLs don't maintain that invariant.\n// As a result, enabling SSE2 on 32-bit MinGW is dangerous when not\n// simultaneously enabling \"-mstackrealign\".\n//\n// See https://github.com/nothings/stb/issues/81 for more information.\n//\n// So default to no SSE2 on 32-bit MinGW. If you've read this far and added\n// -mstackrealign to your build settings, feel free to #define STBI_MINGW_ENABLE_SSE2.\n#define STBI_NO_SIMD\n#endif\n\n#if !defined(STBI_NO_SIMD) && (defined(STBI__X86_TARGET) || defined(STBI__X64_TARGET))\n#define STBI_SSE2\n#include <emmintrin.h>\n\n#ifdef _MSC_VER\n\n#if _MSC_VER >= 1400  // not VC6\n#include <intrin.h> // __cpuid\nstatic int stbi__cpuid3(void)\n{\n   int info[4];\n   __cpuid(info,1);\n   return info[3];\n}\n#else\nstatic int stbi__cpuid3(void)\n{\n   int res;\n   __asm {\n      mov  eax,1\n      cpuid\n      mov  res,edx\n   }\n   return res;\n}\n#endif\n\n#define STBI_SIMD_ALIGN(type, name) __declspec(align(16)) type name\n\n#if !defined(STBI_NO_JPEG) && defined(STBI_SSE2)\nstatic int stbi__sse2_available(void)\n{\n   int info3 = stbi__cpuid3();\n   return ((info3 >> 26) & 1) != 0;\n}\n#endif\n\n#else // assume GCC-style if not VC++\n#define STBI_SIMD_ALIGN(type, name) type name __attribute__((aligned(16)))\n\n#if !defined(STBI_NO_JPEG) && defined(STBI_SSE2)\nstatic int stbi__sse2_available(void)\n{\n   // If we're even attempting to compile this on GCC/Clang, that means\n   // -msse2 is on, which means the compiler is allowed to use SSE2\n   // instructions at will, and so are we.\n   return 1;\n}\n#endif\n\n#endif\n#endif\n\n// ARM NEON\n#if defined(STBI_NO_SIMD) && defined(STBI_NEON)\n#undef STBI_NEON\n#endif\n\n#ifdef STBI_NEON\n#include <arm_neon.h>\n#ifdef _MSC_VER\n#define STBI_SIMD_ALIGN(type, name) __declspec(align(16)) type name\n#else\n#define STBI_SIMD_ALIGN(type, name) type name __attribute__((aligned(16)))\n#endif\n#endif\n\n#ifndef STBI_SIMD_ALIGN\n#define STBI_SIMD_ALIGN(type, name) type name\n#endif\n\n#ifndef STBI_MAX_DIMENSIONS\n#define STBI_MAX_DIMENSIONS (1 << 24)\n#endif\n\n///////////////////////////////////////////////\n//\n//  stbi__context struct and start_xxx functions\n\n// stbi__context structure is our basic context used by all images, so it\n// contains all the IO context, plus some basic image information\ntypedef struct\n{\n   stbi__uint32 img_x, img_y;\n   int img_n, img_out_n;\n\n   stbi_io_callbacks io;\n   void *io_user_data;\n\n   int read_from_callbacks;\n   int buflen;\n   stbi_uc buffer_start[128];\n   int callback_already_read;\n\n   stbi_uc *img_buffer, *img_buffer_end;\n   stbi_uc *img_buffer_original, *img_buffer_original_end;\n} stbi__context;\n\n\nstatic void stbi__refill_buffer(stbi__context *s);\n\n// initialize a memory-decode context\nstatic void stbi__start_mem(stbi__context *s, stbi_uc const *buffer, int len)\n{\n   s->io.read = NULL;\n   s->read_from_callbacks = 0;\n   s->callback_already_read = 0;\n   s->img_buffer = s->img_buffer_original = (stbi_uc *) buffer;\n   s->img_buffer_end = s->img_buffer_original_end = (stbi_uc *) buffer+len;\n}\n\n// initialize a callback-based context\nstatic void stbi__start_callbacks(stbi__context *s, stbi_io_callbacks *c, void *user)\n{\n   s->io = *c;\n   s->io_user_data = user;\n   s->buflen = sizeof(s->buffer_start);\n   s->read_from_callbacks = 1;\n   s->callback_already_read = 0;\n   s->img_buffer = s->img_buffer_original = s->buffer_start;\n   stbi__refill_buffer(s);\n   s->img_buffer_original_end = s->img_buffer_end;\n}\n\n#ifndef STBI_NO_STDIO\n\nstatic int stbi__stdio_read(void *user, char *data, int size)\n{\n   return (int) fread(data,1,size,(FILE*) user);\n}\n\nstatic void stbi__stdio_skip(void *user, int n)\n{\n   int ch;\n   fseek((FILE*) user, n, SEEK_CUR);\n   ch = fgetc((FILE*) user);  /* have to read a byte to reset feof()'s flag */\n   if (ch != EOF) {\n      ungetc(ch, (FILE *) user);  /* push byte back onto stream if valid. */\n   }\n}\n\nstatic int stbi__stdio_eof(void *user)\n{\n   return feof((FILE*) user) || ferror((FILE *) user);\n}\n\nstatic stbi_io_callbacks stbi__stdio_callbacks =\n{\n   stbi__stdio_read,\n   stbi__stdio_skip,\n   stbi__stdio_eof,\n};\n\nstatic void stbi__start_file(stbi__context *s, FILE *f)\n{\n   stbi__start_callbacks(s, &stbi__stdio_callbacks, (void *) f);\n}\n\n//static void stop_file(stbi__context *s) { }\n\n#endif // !STBI_NO_STDIO\n\nstatic void stbi__rewind(stbi__context *s)\n{\n   // conceptually rewind SHOULD rewind to the beginning of the stream,\n   // but we just rewind to the beginning of the initial buffer, because\n   // we only use it after doing 'test', which only ever looks at at most 92 bytes\n   s->img_buffer = s->img_buffer_original;\n   s->img_buffer_end = s->img_buffer_original_end;\n}\n\nenum\n{\n   STBI_ORDER_RGB,\n   STBI_ORDER_BGR\n};\n\ntypedef struct\n{\n   int bits_per_channel;\n   int num_channels;\n   int channel_order;\n} stbi__result_info;\n\n#ifndef STBI_NO_JPEG\nstatic int      stbi__jpeg_test(stbi__context *s);\nstatic void    *stbi__jpeg_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri);\nstatic int      stbi__jpeg_info(stbi__context *s, int *x, int *y, int *comp);\n#endif\n\n#ifndef STBI_NO_PNG\nstatic int      stbi__png_test(stbi__context *s);\nstatic void    *stbi__png_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri);\nstatic int      stbi__png_info(stbi__context *s, int *x, int *y, int *comp);\nstatic int      stbi__png_is16(stbi__context *s);\n#endif\n\n#ifndef STBI_NO_BMP\nstatic int      stbi__bmp_test(stbi__context *s);\nstatic void    *stbi__bmp_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri);\nstatic int      stbi__bmp_info(stbi__context *s, int *x, int *y, int *comp);\n#endif\n\n#ifndef STBI_NO_TGA\nstatic int      stbi__tga_test(stbi__context *s);\nstatic void    *stbi__tga_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri);\nstatic int      stbi__tga_info(stbi__context *s, int *x, int *y, int *comp);\n#endif\n\n#ifndef STBI_NO_PSD\nstatic int      stbi__psd_test(stbi__context *s);\nstatic void    *stbi__psd_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri, int bpc);\nstatic int      stbi__psd_info(stbi__context *s, int *x, int *y, int *comp);\nstatic int      stbi__psd_is16(stbi__context *s);\n#endif\n\n#ifndef STBI_NO_HDR\nstatic int      stbi__hdr_test(stbi__context *s);\nstatic float   *stbi__hdr_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri);\nstatic int      stbi__hdr_info(stbi__context *s, int *x, int *y, int *comp);\n#endif\n\n#ifndef STBI_NO_PIC\nstatic int      stbi__pic_test(stbi__context *s);\nstatic void    *stbi__pic_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri);\nstatic int      stbi__pic_info(stbi__context *s, int *x, int *y, int *comp);\n#endif\n\n#ifndef STBI_NO_GIF\nstatic int      stbi__gif_test(stbi__context *s);\nstatic void    *stbi__gif_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri);\nstatic void    *stbi__load_gif_main(stbi__context *s, int **delays, int *x, int *y, int *z, int *comp, int req_comp);\nstatic int      stbi__gif_info(stbi__context *s, int *x, int *y, int *comp);\n#endif\n\n#ifndef STBI_NO_PNM\nstatic int      stbi__pnm_test(stbi__context *s);\nstatic void    *stbi__pnm_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri);\nstatic int      stbi__pnm_info(stbi__context *s, int *x, int *y, int *comp);\nstatic int      stbi__pnm_is16(stbi__context *s);\n#endif\n\nstatic\n#ifdef STBI_THREAD_LOCAL\nSTBI_THREAD_LOCAL\n#endif\nconst char *stbi__g_failure_reason;\n\nSTBIDEF const char *stbi_failure_reason(void)\n{\n   return stbi__g_failure_reason;\n}\n\n#ifndef STBI_NO_FAILURE_STRINGS\nstatic int stbi__err(const char *str)\n{\n   stbi__g_failure_reason = str;\n   return 0;\n}\n#endif\n\nstatic void *stbi__malloc(size_t size)\n{\n    return STBI_MALLOC(size);\n}\n\n// stb_image uses ints pervasively, including for offset calculations.\n// therefore the largest decoded image size we can support with the\n// current code, even on 64-bit targets, is INT_MAX. this is not a\n// significant limitation for the intended use case.\n//\n// we do, however, need to make sure our size calculations don't\n// overflow. hence a few helper functions for size calculations that\n// multiply integers together, making sure that they're non-negative\n// and no overflow occurs.\n\n// return 1 if the sum is valid, 0 on overflow.\n// negative terms are considered invalid.\nstatic int stbi__addsizes_valid(int a, int b)\n{\n   if (b < 0) return 0;\n   // now 0 <= b <= INT_MAX, hence also\n   // 0 <= INT_MAX - b <= INTMAX.\n   // And \"a + b <= INT_MAX\" (which might overflow) is the\n   // same as a <= INT_MAX - b (no overflow)\n   return a <= INT_MAX - b;\n}\n\n// returns 1 if the product is valid, 0 on overflow.\n// negative factors are considered invalid.\nstatic int stbi__mul2sizes_valid(int a, int b)\n{\n   if (a < 0 || b < 0) return 0;\n   if (b == 0) return 1; // mul-by-0 is always safe\n   // portable way to check for no overflows in a*b\n   return a <= INT_MAX/b;\n}\n\n#if !defined(STBI_NO_JPEG) || !defined(STBI_NO_PNG) || !defined(STBI_NO_TGA) || !defined(STBI_NO_HDR)\n// returns 1 if \"a*b + add\" has no negative terms/factors and doesn't overflow\nstatic int stbi__mad2sizes_valid(int a, int b, int add)\n{\n   return stbi__mul2sizes_valid(a, b) && stbi__addsizes_valid(a*b, add);\n}\n#endif\n\n// returns 1 if \"a*b*c + add\" has no negative terms/factors and doesn't overflow\nstatic int stbi__mad3sizes_valid(int a, int b, int c, int add)\n{\n   return stbi__mul2sizes_valid(a, b) && stbi__mul2sizes_valid(a*b, c) &&\n      stbi__addsizes_valid(a*b*c, add);\n}\n\n// returns 1 if \"a*b*c*d + add\" has no negative terms/factors and doesn't overflow\n#if !defined(STBI_NO_LINEAR) || !defined(STBI_NO_HDR) || !defined(STBI_NO_PNM)\nstatic int stbi__mad4sizes_valid(int a, int b, int c, int d, int add)\n{\n   return stbi__mul2sizes_valid(a, b) && stbi__mul2sizes_valid(a*b, c) &&\n      stbi__mul2sizes_valid(a*b*c, d) && stbi__addsizes_valid(a*b*c*d, add);\n}\n#endif\n\n#if !defined(STBI_NO_JPEG) || !defined(STBI_NO_PNG) || !defined(STBI_NO_TGA) || !defined(STBI_NO_HDR)\n// mallocs with size overflow checking\nstatic void *stbi__malloc_mad2(int a, int b, int add)\n{\n   if (!stbi__mad2sizes_valid(a, b, add)) return NULL;\n   return stbi__malloc(a*b + add);\n}\n#endif\n\nstatic void *stbi__malloc_mad3(int a, int b, int c, int add)\n{\n   if (!stbi__mad3sizes_valid(a, b, c, add)) return NULL;\n   return stbi__malloc(a*b*c + add);\n}\n\n#if !defined(STBI_NO_LINEAR) || !defined(STBI_NO_HDR) || !defined(STBI_NO_PNM)\nstatic void *stbi__malloc_mad4(int a, int b, int c, int d, int add)\n{\n   if (!stbi__mad4sizes_valid(a, b, c, d, add)) return NULL;\n   return stbi__malloc(a*b*c*d + add);\n}\n#endif\n\n// returns 1 if the sum of two signed ints is valid (between -2^31 and 2^31-1 inclusive), 0 on overflow.\nstatic int stbi__addints_valid(int a, int b)\n{\n   if ((a >= 0) != (b >= 0)) return 1; // a and b have different signs, so no overflow\n   if (a < 0 && b < 0) return a >= INT_MIN - b; // same as a + b >= INT_MIN; INT_MIN - b cannot overflow since b < 0.\n   return a <= INT_MAX - b;\n}\n\n// returns 1 if the product of two ints fits in a signed short, 0 on overflow.\nstatic int stbi__mul2shorts_valid(int a, int b)\n{\n   if (b == 0 || b == -1) return 1; // multiplication by 0 is always 0; check for -1 so SHRT_MIN/b doesn't overflow\n   if ((a >= 0) == (b >= 0)) return a <= SHRT_MAX/b; // product is positive, so similar to mul2sizes_valid\n   if (b < 0) return a <= SHRT_MIN / b; // same as a * b >= SHRT_MIN\n   return a >= SHRT_MIN / b;\n}\n\n// stbi__err - error\n// stbi__errpf - error returning pointer to float\n// stbi__errpuc - error returning pointer to unsigned char\n\n#ifdef STBI_NO_FAILURE_STRINGS\n   #define stbi__err(x,y)  0\n#elif defined(STBI_FAILURE_USERMSG)\n   #define stbi__err(x,y)  stbi__err(y)\n#else\n   #define stbi__err(x,y)  stbi__err(x)\n#endif\n\n#define stbi__errpf(x,y)   ((float *)(size_t) (stbi__err(x,y)?NULL:NULL))\n#define stbi__errpuc(x,y)  ((unsigned char *)(size_t) (stbi__err(x,y)?NULL:NULL))\n\nSTBIDEF void stbi_image_free(void *retval_from_stbi_load)\n{\n   STBI_FREE(retval_from_stbi_load);\n}\n\n#ifndef STBI_NO_LINEAR\nstatic float   *stbi__ldr_to_hdr(stbi_uc *data, int x, int y, int comp);\n#endif\n\n#ifndef STBI_NO_HDR\nstatic stbi_uc *stbi__hdr_to_ldr(float   *data, int x, int y, int comp);\n#endif\n\nstatic int stbi__vertically_flip_on_load_global = 0;\n\nSTBIDEF void stbi_set_flip_vertically_on_load(int flag_true_if_should_flip)\n{\n   stbi__vertically_flip_on_load_global = flag_true_if_should_flip;\n}\n\n#ifndef STBI_THREAD_LOCAL\n#define stbi__vertically_flip_on_load  stbi__vertically_flip_on_load_global\n#else\nstatic STBI_THREAD_LOCAL int stbi__vertically_flip_on_load_local, stbi__vertically_flip_on_load_set;\n\nSTBIDEF void stbi_set_flip_vertically_on_load_thread(int flag_true_if_should_flip)\n{\n   stbi__vertically_flip_on_load_local = flag_true_if_should_flip;\n   stbi__vertically_flip_on_load_set = 1;\n}\n\n#define stbi__vertically_flip_on_load  (stbi__vertically_flip_on_load_set       \\\n                                         ? stbi__vertically_flip_on_load_local  \\\n                                         : stbi__vertically_flip_on_load_global)\n#endif // STBI_THREAD_LOCAL\n\nstatic void *stbi__load_main(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri, int bpc)\n{\n   memset(ri, 0, sizeof(*ri)); // make sure it's initialized if we add new fields\n   ri->bits_per_channel = 8; // default is 8 so most paths don't have to be changed\n   ri->channel_order = STBI_ORDER_RGB; // all current input & output are this, but this is here so we can add BGR order\n   ri->num_channels = 0;\n\n   // test the formats with a very explicit header first (at least a FOURCC\n   // or distinctive magic number first)\n   #ifndef STBI_NO_PNG\n   if (stbi__png_test(s))  return stbi__png_load(s,x,y,comp,req_comp, ri);\n   #endif\n   #ifndef STBI_NO_BMP\n   if (stbi__bmp_test(s))  return stbi__bmp_load(s,x,y,comp,req_comp, ri);\n   #endif\n   #ifndef STBI_NO_GIF\n   if (stbi__gif_test(s))  return stbi__gif_load(s,x,y,comp,req_comp, ri);\n   #endif\n   #ifndef STBI_NO_PSD\n   if (stbi__psd_test(s))  return stbi__psd_load(s,x,y,comp,req_comp, ri, bpc);\n   #else\n   STBI_NOTUSED(bpc);\n   #endif\n   #ifndef STBI_NO_PIC\n   if (stbi__pic_test(s))  return stbi__pic_load(s,x,y,comp,req_comp, ri);\n   #endif\n\n   // then the formats that can end up attempting to load with just 1 or 2\n   // bytes matching expectations; these are prone to false positives, so\n   // try them later\n   #ifndef STBI_NO_JPEG\n   if (stbi__jpeg_test(s)) return stbi__jpeg_load(s,x,y,comp,req_comp, ri);\n   #endif\n   #ifndef STBI_NO_PNM\n   if (stbi__pnm_test(s))  return stbi__pnm_load(s,x,y,comp,req_comp, ri);\n   #endif\n\n   #ifndef STBI_NO_HDR\n   if (stbi__hdr_test(s)) {\n      float *hdr = stbi__hdr_load(s, x,y,comp,req_comp, ri);\n      return stbi__hdr_to_ldr(hdr, *x, *y, req_comp ? req_comp : *comp);\n   }\n   #endif\n\n   #ifndef STBI_NO_TGA\n   // test tga last because it's a crappy test!\n   if (stbi__tga_test(s))\n      return stbi__tga_load(s,x,y,comp,req_comp, ri);\n   #endif\n\n   return stbi__errpuc(\"unknown image type\", \"Image not of any known type, or corrupt\");\n}\n\nstatic stbi_uc *stbi__convert_16_to_8(stbi__uint16 *orig, int w, int h, int channels)\n{\n   int i;\n   int img_len = w * h * channels;\n   stbi_uc *reduced;\n\n   reduced = (stbi_uc *) stbi__malloc(img_len);\n   if (reduced == NULL) return stbi__errpuc(\"outofmem\", \"Out of memory\");\n\n   for (i = 0; i < img_len; ++i)\n      reduced[i] = (stbi_uc)((orig[i] >> 8) & 0xFF); // top half of each byte is sufficient approx of 16->8 bit scaling\n\n   STBI_FREE(orig);\n   return reduced;\n}\n\nstatic stbi__uint16 *stbi__convert_8_to_16(stbi_uc *orig, int w, int h, int channels)\n{\n   int i;\n   int img_len = w * h * channels;\n   stbi__uint16 *enlarged;\n\n   enlarged = (stbi__uint16 *) stbi__malloc(img_len*2);\n   if (enlarged == NULL) return (stbi__uint16 *) stbi__errpuc(\"outofmem\", \"Out of memory\");\n\n   for (i = 0; i < img_len; ++i)\n      enlarged[i] = (stbi__uint16)((orig[i] << 8) + orig[i]); // replicate to high and low byte, maps 0->0, 255->0xffff\n\n   STBI_FREE(orig);\n   return enlarged;\n}\n\nstatic void stbi__vertical_flip(void *image, int w, int h, int bytes_per_pixel)\n{\n   int row;\n   size_t bytes_per_row = (size_t)w * bytes_per_pixel;\n   stbi_uc temp[2048];\n   stbi_uc *bytes = (stbi_uc *)image;\n\n   for (row = 0; row < (h>>1); row++) {\n      stbi_uc *row0 = bytes + row*bytes_per_row;\n      stbi_uc *row1 = bytes + (h - row - 1)*bytes_per_row;\n      // swap row0 with row1\n      size_t bytes_left = bytes_per_row;\n      while (bytes_left) {\n         size_t bytes_copy = (bytes_left < sizeof(temp)) ? bytes_left : sizeof(temp);\n         memcpy(temp, row0, bytes_copy);\n         memcpy(row0, row1, bytes_copy);\n         memcpy(row1, temp, bytes_copy);\n         row0 += bytes_copy;\n         row1 += bytes_copy;\n         bytes_left -= bytes_copy;\n      }\n   }\n}\n\n#ifndef STBI_NO_GIF\nstatic void stbi__vertical_flip_slices(void *image, int w, int h, int z, int bytes_per_pixel)\n{\n   int slice;\n   int slice_size = w * h * bytes_per_pixel;\n\n   stbi_uc *bytes = (stbi_uc *)image;\n   for (slice = 0; slice < z; ++slice) {\n      stbi__vertical_flip(bytes, w, h, bytes_per_pixel);\n      bytes += slice_size;\n   }\n}\n#endif\n\nstatic unsigned char *stbi__load_and_postprocess_8bit(stbi__context *s, int *x, int *y, int *comp, int req_comp)\n{\n   stbi__result_info ri;\n   void *result = stbi__load_main(s, x, y, comp, req_comp, &ri, 8);\n\n   if (result == NULL)\n      return NULL;\n\n   // it is the responsibility of the loaders to make sure we get either 8 or 16 bit.\n   STBI_ASSERT(ri.bits_per_channel == 8 || ri.bits_per_channel == 16);\n\n   if (ri.bits_per_channel != 8) {\n      result = stbi__convert_16_to_8((stbi__uint16 *) result, *x, *y, req_comp == 0 ? *comp : req_comp);\n      ri.bits_per_channel = 8;\n   }\n\n   // @TODO: move stbi__convert_format to here\n\n   if (stbi__vertically_flip_on_load) {\n      int channels = req_comp ? req_comp : *comp;\n      stbi__vertical_flip(result, *x, *y, channels * sizeof(stbi_uc));\n   }\n\n   return (unsigned char *) result;\n}\n\nstatic stbi__uint16 *stbi__load_and_postprocess_16bit(stbi__context *s, int *x, int *y, int *comp, int req_comp)\n{\n   stbi__result_info ri;\n   void *result = stbi__load_main(s, x, y, comp, req_comp, &ri, 16);\n\n   if (result == NULL)\n      return NULL;\n\n   // it is the responsibility of the loaders to make sure we get either 8 or 16 bit.\n   STBI_ASSERT(ri.bits_per_channel == 8 || ri.bits_per_channel == 16);\n\n   if (ri.bits_per_channel != 16) {\n      result = stbi__convert_8_to_16((stbi_uc *) result, *x, *y, req_comp == 0 ? *comp : req_comp);\n      ri.bits_per_channel = 16;\n   }\n\n   // @TODO: move stbi__convert_format16 to here\n   // @TODO: special case RGB-to-Y (and RGBA-to-YA) for 8-bit-to-16-bit case to keep more precision\n\n   if (stbi__vertically_flip_on_load) {\n      int channels = req_comp ? req_comp : *comp;\n      stbi__vertical_flip(result, *x, *y, channels * sizeof(stbi__uint16));\n   }\n\n   return (stbi__uint16 *) result;\n}\n\n#if !defined(STBI_NO_HDR) && !defined(STBI_NO_LINEAR)\nstatic void stbi__float_postprocess(float *result, int *x, int *y, int *comp, int req_comp)\n{\n   if (stbi__vertically_flip_on_load && result != NULL) {\n      int channels = req_comp ? req_comp : *comp;\n      stbi__vertical_flip(result, *x, *y, channels * sizeof(float));\n   }\n}\n#endif\n\n#ifndef STBI_NO_STDIO\n\n#if defined(_WIN32) && defined(STBI_WINDOWS_UTF8)\nSTBI_EXTERN __declspec(dllimport) int __stdcall MultiByteToWideChar(unsigned int cp, unsigned long flags, const char *str, int cbmb, wchar_t *widestr, int cchwide);\nSTBI_EXTERN __declspec(dllimport) int __stdcall WideCharToMultiByte(unsigned int cp, unsigned long flags, const wchar_t *widestr, int cchwide, char *str, int cbmb, const char *defchar, int *used_default);\n#endif\n\n#if defined(_WIN32) && defined(STBI_WINDOWS_UTF8)\nSTBIDEF int stbi_convert_wchar_to_utf8(char *buffer, size_t bufferlen, const wchar_t* input)\n{\n\treturn WideCharToMultiByte(65001 /* UTF8 */, 0, input, -1, buffer, (int) bufferlen, NULL, NULL);\n}\n#endif\n\nstatic FILE *stbi__fopen(char const *filename, char const *mode)\n{\n   FILE *f;\n#if defined(_WIN32) && defined(STBI_WINDOWS_UTF8)\n   wchar_t wMode[64];\n   wchar_t wFilename[1024];\n\tif (0 == MultiByteToWideChar(65001 /* UTF8 */, 0, filename, -1, wFilename, sizeof(wFilename)/sizeof(*wFilename)))\n      return 0;\n\n\tif (0 == MultiByteToWideChar(65001 /* UTF8 */, 0, mode, -1, wMode, sizeof(wMode)/sizeof(*wMode)))\n      return 0;\n\n#if defined(_MSC_VER) && _MSC_VER >= 1400\n\tif (0 != _wfopen_s(&f, wFilename, wMode))\n\t\tf = 0;\n#else\n   f = _wfopen(wFilename, wMode);\n#endif\n\n#elif defined(_MSC_VER) && _MSC_VER >= 1400\n   if (0 != fopen_s(&f, filename, mode))\n      f=0;\n#else\n   f = fopen(filename, mode);\n#endif\n   return f;\n}\n\n\nSTBIDEF stbi_uc *stbi_load(char const *filename, int *x, int *y, int *comp, int req_comp)\n{\n   FILE *f = stbi__fopen(filename, \"rb\");\n   unsigned char *result;\n   if (!f) return stbi__errpuc(\"can't fopen\", \"Unable to open file\");\n   result = stbi_load_from_file(f,x,y,comp,req_comp);\n   fclose(f);\n   return result;\n}\n\nSTBIDEF stbi_uc *stbi_load_from_file(FILE *f, int *x, int *y, int *comp, int req_comp)\n{\n   unsigned char *result;\n   stbi__context s;\n   stbi__start_file(&s,f);\n   result = stbi__load_and_postprocess_8bit(&s,x,y,comp,req_comp);\n   if (result) {\n      // need to 'unget' all the characters in the IO buffer\n      fseek(f, - (int) (s.img_buffer_end - s.img_buffer), SEEK_CUR);\n   }\n   return result;\n}\n\nSTBIDEF stbi__uint16 *stbi_load_from_file_16(FILE *f, int *x, int *y, int *comp, int req_comp)\n{\n   stbi__uint16 *result;\n   stbi__context s;\n   stbi__start_file(&s,f);\n   result = stbi__load_and_postprocess_16bit(&s,x,y,comp,req_comp);\n   if (result) {\n      // need to 'unget' all the characters in the IO buffer\n      fseek(f, - (int) (s.img_buffer_end - s.img_buffer), SEEK_CUR);\n   }\n   return result;\n}\n\nSTBIDEF stbi_us *stbi_load_16(char const *filename, int *x, int *y, int *comp, int req_comp)\n{\n   FILE *f = stbi__fopen(filename, \"rb\");\n   stbi__uint16 *result;\n   if (!f) return (stbi_us *) stbi__errpuc(\"can't fopen\", \"Unable to open file\");\n   result = stbi_load_from_file_16(f,x,y,comp,req_comp);\n   fclose(f);\n   return result;\n}\n\n\n#endif //!STBI_NO_STDIO\n\nSTBIDEF stbi_us *stbi_load_16_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *channels_in_file, int desired_channels)\n{\n   stbi__context s;\n   stbi__start_mem(&s,buffer,len);\n   return stbi__load_and_postprocess_16bit(&s,x,y,channels_in_file,desired_channels);\n}\n\nSTBIDEF stbi_us *stbi_load_16_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *channels_in_file, int desired_channels)\n{\n   stbi__context s;\n   stbi__start_callbacks(&s, (stbi_io_callbacks *)clbk, user);\n   return stbi__load_and_postprocess_16bit(&s,x,y,channels_in_file,desired_channels);\n}\n\nSTBIDEF stbi_uc *stbi_load_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp)\n{\n   stbi__context s;\n   stbi__start_mem(&s,buffer,len);\n   return stbi__load_and_postprocess_8bit(&s,x,y,comp,req_comp);\n}\n\nSTBIDEF stbi_uc *stbi_load_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp)\n{\n   stbi__context s;\n   stbi__start_callbacks(&s, (stbi_io_callbacks *) clbk, user);\n   return stbi__load_and_postprocess_8bit(&s,x,y,comp,req_comp);\n}\n\n#ifndef STBI_NO_GIF\nSTBIDEF stbi_uc *stbi_load_gif_from_memory(stbi_uc const *buffer, int len, int **delays, int *x, int *y, int *z, int *comp, int req_comp)\n{\n   unsigned char *result;\n   stbi__context s;\n   stbi__start_mem(&s,buffer,len);\n\n   result = (unsigned char*) stbi__load_gif_main(&s, delays, x, y, z, comp, req_comp);\n   if (stbi__vertically_flip_on_load) {\n      stbi__vertical_flip_slices( result, *x, *y, *z, *comp );\n   }\n\n   return result;\n}\n#endif\n\n#ifndef STBI_NO_LINEAR\nstatic float *stbi__loadf_main(stbi__context *s, int *x, int *y, int *comp, int req_comp)\n{\n   unsigned char *data;\n   #ifndef STBI_NO_HDR\n   if (stbi__hdr_test(s)) {\n      stbi__result_info ri;\n      float *hdr_data = stbi__hdr_load(s,x,y,comp,req_comp, &ri);\n      if (hdr_data)\n         stbi__float_postprocess(hdr_data,x,y,comp,req_comp);\n      return hdr_data;\n   }\n   #endif\n   data = stbi__load_and_postprocess_8bit(s, x, y, comp, req_comp);\n   if (data)\n      return stbi__ldr_to_hdr(data, *x, *y, req_comp ? req_comp : *comp);\n   return stbi__errpf(\"unknown image type\", \"Image not of any known type, or corrupt\");\n}\n\nSTBIDEF float *stbi_loadf_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp)\n{\n   stbi__context s;\n   stbi__start_mem(&s,buffer,len);\n   return stbi__loadf_main(&s,x,y,comp,req_comp);\n}\n\nSTBIDEF float *stbi_loadf_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp)\n{\n   stbi__context s;\n   stbi__start_callbacks(&s, (stbi_io_callbacks *) clbk, user);\n   return stbi__loadf_main(&s,x,y,comp,req_comp);\n}\n\n#ifndef STBI_NO_STDIO\nSTBIDEF float *stbi_loadf(char const *filename, int *x, int *y, int *comp, int req_comp)\n{\n   float *result;\n   FILE *f = stbi__fopen(filename, \"rb\");\n   if (!f) return stbi__errpf(\"can't fopen\", \"Unable to open file\");\n   result = stbi_loadf_from_file(f,x,y,comp,req_comp);\n   fclose(f);\n   return result;\n}\n\nSTBIDEF float *stbi_loadf_from_file(FILE *f, int *x, int *y, int *comp, int req_comp)\n{\n   stbi__context s;\n   stbi__start_file(&s,f);\n   return stbi__loadf_main(&s,x,y,comp,req_comp);\n}\n#endif // !STBI_NO_STDIO\n\n#endif // !STBI_NO_LINEAR\n\n// these is-hdr-or-not is defined independent of whether STBI_NO_LINEAR is\n// defined, for API simplicity; if STBI_NO_LINEAR is defined, it always\n// reports false!\n\nSTBIDEF int stbi_is_hdr_from_memory(stbi_uc const *buffer, int len)\n{\n   #ifndef STBI_NO_HDR\n   stbi__context s;\n   stbi__start_mem(&s,buffer,len);\n   return stbi__hdr_test(&s);\n   #else\n   STBI_NOTUSED(buffer);\n   STBI_NOTUSED(len);\n   return 0;\n   #endif\n}\n\n#ifndef STBI_NO_STDIO\nSTBIDEF int      stbi_is_hdr          (char const *filename)\n{\n   FILE *f = stbi__fopen(filename, \"rb\");\n   int result=0;\n   if (f) {\n      result = stbi_is_hdr_from_file(f);\n      fclose(f);\n   }\n   return result;\n}\n\nSTBIDEF int stbi_is_hdr_from_file(FILE *f)\n{\n   #ifndef STBI_NO_HDR\n   long pos = ftell(f);\n   int res;\n   stbi__context s;\n   stbi__start_file(&s,f);\n   res = stbi__hdr_test(&s);\n   fseek(f, pos, SEEK_SET);\n   return res;\n   #else\n   STBI_NOTUSED(f);\n   return 0;\n   #endif\n}\n#endif // !STBI_NO_STDIO\n\nSTBIDEF int      stbi_is_hdr_from_callbacks(stbi_io_callbacks const *clbk, void *user)\n{\n   #ifndef STBI_NO_HDR\n   stbi__context s;\n   stbi__start_callbacks(&s, (stbi_io_callbacks *) clbk, user);\n   return stbi__hdr_test(&s);\n   #else\n   STBI_NOTUSED(clbk);\n   STBI_NOTUSED(user);\n   return 0;\n   #endif\n}\n\n#ifndef STBI_NO_LINEAR\nstatic float stbi__l2h_gamma=2.2f, stbi__l2h_scale=1.0f;\n\nSTBIDEF void   stbi_ldr_to_hdr_gamma(float gamma) { stbi__l2h_gamma = gamma; }\nSTBIDEF void   stbi_ldr_to_hdr_scale(float scale) { stbi__l2h_scale = scale; }\n#endif\n\nstatic float stbi__h2l_gamma_i=1.0f/2.2f, stbi__h2l_scale_i=1.0f;\n\nSTBIDEF void   stbi_hdr_to_ldr_gamma(float gamma) { stbi__h2l_gamma_i = 1/gamma; }\nSTBIDEF void   stbi_hdr_to_ldr_scale(float scale) { stbi__h2l_scale_i = 1/scale; }\n\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Common code used by all image loaders\n//\n\nenum\n{\n   STBI__SCAN_load=0,\n   STBI__SCAN_type,\n   STBI__SCAN_header\n};\n\nstatic void stbi__refill_buffer(stbi__context *s)\n{\n   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);\n   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);\n   if (n == 0) {\n      // at end of file, treat same as if from memory, but need to handle case\n      // where s->img_buffer isn't pointing to safe memory, e.g. 0-byte file\n      s->read_from_callbacks = 0;\n      s->img_buffer = s->buffer_start;\n      s->img_buffer_end = s->buffer_start+1;\n      *s->img_buffer = 0;\n   } else {\n      s->img_buffer = s->buffer_start;\n      s->img_buffer_end = s->buffer_start + n;\n   }\n}\n\nstbi_inline static stbi_uc stbi__get8(stbi__context *s)\n{\n   if (s->img_buffer < s->img_buffer_end)\n      return *s->img_buffer++;\n   if (s->read_from_callbacks) {\n      stbi__refill_buffer(s);\n      return *s->img_buffer++;\n   }\n   return 0;\n}\n\n#if defined(STBI_NO_JPEG) && defined(STBI_NO_HDR) && defined(STBI_NO_PIC) && defined(STBI_NO_PNM)\n// nothing\n#else\nstbi_inline static int stbi__at_eof(stbi__context *s)\n{\n   if (s->io.read) {\n      if (!(s->io.eof)(s->io_user_data)) return 0;\n      // if feof() is true, check if buffer = end\n      // special case: we've only got the special 0 character at the end\n      if (s->read_from_callbacks == 0) return 1;\n   }\n\n   return s->img_buffer >= s->img_buffer_end;\n}\n#endif\n\n#if defined(STBI_NO_JPEG) && defined(STBI_NO_PNG) && defined(STBI_NO_BMP) && defined(STBI_NO_PSD) && defined(STBI_NO_TGA) && defined(STBI_NO_GIF) && defined(STBI_NO_PIC)\n// nothing\n#else\nstatic void stbi__skip(stbi__context *s, int n)\n{\n   if (n == 0) return;  // already there!\n   if (n < 0) {\n      s->img_buffer = s->img_buffer_end;\n      return;\n   }\n   if (s->io.read) {\n      int blen = (int) (s->img_buffer_end - s->img_buffer);\n      if (blen < n) {\n         s->img_buffer = s->img_buffer_end;\n         (s->io.skip)(s->io_user_data, n - blen);\n         return;\n      }\n   }\n   s->img_buffer += n;\n}\n#endif\n\n#if defined(STBI_NO_PNG) && defined(STBI_NO_TGA) && defined(STBI_NO_HDR) && defined(STBI_NO_PNM)\n// nothing\n#else\nstatic int stbi__getn(stbi__context *s, stbi_uc *buffer, int n)\n{\n   if (s->io.read) {\n      int blen = (int) (s->img_buffer_end - s->img_buffer);\n      if (blen < n) {\n         int res, count;\n\n         memcpy(buffer, s->img_buffer, blen);\n\n         count = (s->io.read)(s->io_user_data, (char*) buffer + blen, n - blen);\n         res = (count == (n-blen));\n         s->img_buffer = s->img_buffer_end;\n         return res;\n      }\n   }\n\n   if (s->img_buffer+n <= s->img_buffer_end) {\n      memcpy(buffer, s->img_buffer, n);\n      s->img_buffer += n;\n      return 1;\n   } else\n      return 0;\n}\n#endif\n\n#if defined(STBI_NO_JPEG) && defined(STBI_NO_PNG) && defined(STBI_NO_PSD) && defined(STBI_NO_PIC)\n// nothing\n#else\nstatic int stbi__get16be(stbi__context *s)\n{\n   int z = stbi__get8(s);\n   return (z << 8) + stbi__get8(s);\n}\n#endif\n\n#if defined(STBI_NO_PNG) && defined(STBI_NO_PSD) && defined(STBI_NO_PIC)\n// nothing\n#else\nstatic stbi__uint32 stbi__get32be(stbi__context *s)\n{\n   stbi__uint32 z = stbi__get16be(s);\n   return (z << 16) + stbi__get16be(s);\n}\n#endif\n\n#if defined(STBI_NO_BMP) && defined(STBI_NO_TGA) && defined(STBI_NO_GIF)\n// nothing\n#else\nstatic int stbi__get16le(stbi__context *s)\n{\n   int z = stbi__get8(s);\n   return z + (stbi__get8(s) << 8);\n}\n#endif\n\n#ifndef STBI_NO_BMP\nstatic stbi__uint32 stbi__get32le(stbi__context *s)\n{\n   stbi__uint32 z = stbi__get16le(s);\n   z += (stbi__uint32)stbi__get16le(s) << 16;\n   return z;\n}\n#endif\n\n#define STBI__BYTECAST(x)  ((stbi_uc) ((x) & 255))  // truncate int to byte without warnings\n\n#if defined(STBI_NO_JPEG) && defined(STBI_NO_PNG) && defined(STBI_NO_BMP) && defined(STBI_NO_PSD) && defined(STBI_NO_TGA) && defined(STBI_NO_GIF) && defined(STBI_NO_PIC) && defined(STBI_NO_PNM)\n// nothing\n#else\n//////////////////////////////////////////////////////////////////////////////\n//\n//  generic converter from built-in img_n to req_comp\n//    individual types do this automatically as much as possible (e.g. jpeg\n//    does all cases internally since it needs to colorspace convert anyway,\n//    and it never has alpha, so very few cases ). png can automatically\n//    interleave an alpha=255 channel, but falls back to this for other cases\n//\n//  assume data buffer is malloced, so malloc a new one and free that one\n//  only failure mode is malloc failing\n\nstatic stbi_uc stbi__compute_y(int r, int g, int b)\n{\n   return (stbi_uc) (((r*77) + (g*150) +  (29*b)) >> 8);\n}\n#endif\n\n#if defined(STBI_NO_PNG) && defined(STBI_NO_BMP) && defined(STBI_NO_PSD) && defined(STBI_NO_TGA) && defined(STBI_NO_GIF) && defined(STBI_NO_PIC) && defined(STBI_NO_PNM)\n// nothing\n#else\nstatic unsigned char *stbi__convert_format(unsigned char *data, int img_n, int req_comp, unsigned int x, unsigned int y)\n{\n   int i,j;\n   unsigned char *good;\n\n   if (req_comp == img_n) return data;\n   STBI_ASSERT(req_comp >= 1 && req_comp <= 4);\n\n   good = (unsigned char *) stbi__malloc_mad3(req_comp, x, y, 0);\n   if (good == NULL) {\n      STBI_FREE(data);\n      return stbi__errpuc(\"outofmem\", \"Out of memory\");\n   }\n\n   for (j=0; j < (int) y; ++j) {\n      unsigned char *src  = data + j * x * img_n   ;\n      unsigned char *dest = good + j * x * req_comp;\n\n      #define STBI__COMBO(a,b)  ((a)*8+(b))\n      #define STBI__CASE(a,b)   case STBI__COMBO(a,b): for(i=x-1; i >= 0; --i, src += a, dest += b)\n      // convert source image with img_n components to one with req_comp components;\n      // avoid switch per pixel, so use switch per scanline and massive macros\n      switch (STBI__COMBO(img_n, req_comp)) {\n         STBI__CASE(1,2) { dest[0]=src[0]; dest[1]=255;                                     } break;\n         STBI__CASE(1,3) { dest[0]=dest[1]=dest[2]=src[0];                                  } break;\n         STBI__CASE(1,4) { dest[0]=dest[1]=dest[2]=src[0]; dest[3]=255;                     } break;\n         STBI__CASE(2,1) { dest[0]=src[0];                                                  } break;\n         STBI__CASE(2,3) { dest[0]=dest[1]=dest[2]=src[0];                                  } break;\n         STBI__CASE(2,4) { dest[0]=dest[1]=dest[2]=src[0]; dest[3]=src[1];                  } break;\n         STBI__CASE(3,4) { dest[0]=src[0];dest[1]=src[1];dest[2]=src[2];dest[3]=255;        } break;\n         STBI__CASE(3,1) { dest[0]=stbi__compute_y(src[0],src[1],src[2]);                   } break;\n         STBI__CASE(3,2) { dest[0]=stbi__compute_y(src[0],src[1],src[2]); dest[1] = 255;    } break;\n         STBI__CASE(4,1) { dest[0]=stbi__compute_y(src[0],src[1],src[2]);                   } break;\n         STBI__CASE(4,2) { dest[0]=stbi__compute_y(src[0],src[1],src[2]); dest[1] = src[3]; } break;\n         STBI__CASE(4,3) { dest[0]=src[0];dest[1]=src[1];dest[2]=src[2];                    } break;\n         default: STBI_ASSERT(0); STBI_FREE(data); STBI_FREE(good); return stbi__errpuc(\"unsupported\", \"Unsupported format conversion\");\n      }\n      #undef STBI__CASE\n   }\n\n   STBI_FREE(data);\n   return good;\n}\n#endif\n\n#if defined(STBI_NO_PNG) && defined(STBI_NO_PSD)\n// nothing\n#else\nstatic stbi__uint16 stbi__compute_y_16(int r, int g, int b)\n{\n   return (stbi__uint16) (((r*77) + (g*150) +  (29*b)) >> 8);\n}\n#endif\n\n#if defined(STBI_NO_PNG) && defined(STBI_NO_PSD)\n// nothing\n#else\nstatic stbi__uint16 *stbi__convert_format16(stbi__uint16 *data, int img_n, int req_comp, unsigned int x, unsigned int y)\n{\n   int i,j;\n   stbi__uint16 *good;\n\n   if (req_comp == img_n) return data;\n   STBI_ASSERT(req_comp >= 1 && req_comp <= 4);\n\n   good = (stbi__uint16 *) stbi__malloc(req_comp * x * y * 2);\n   if (good == NULL) {\n      STBI_FREE(data);\n      return (stbi__uint16 *) stbi__errpuc(\"outofmem\", \"Out of memory\");\n   }\n\n   for (j=0; j < (int) y; ++j) {\n      stbi__uint16 *src  = data + j * x * img_n   ;\n      stbi__uint16 *dest = good + j * x * req_comp;\n\n      #define STBI__COMBO(a,b)  ((a)*8+(b))\n      #define STBI__CASE(a,b)   case STBI__COMBO(a,b): for(i=x-1; i >= 0; --i, src += a, dest += b)\n      // convert source image with img_n components to one with req_comp components;\n      // avoid switch per pixel, so use switch per scanline and massive macros\n      switch (STBI__COMBO(img_n, req_comp)) {\n         STBI__CASE(1,2) { dest[0]=src[0]; dest[1]=0xffff;                                     } break;\n         STBI__CASE(1,3) { dest[0]=dest[1]=dest[2]=src[0];                                     } break;\n         STBI__CASE(1,4) { dest[0]=dest[1]=dest[2]=src[0]; dest[3]=0xffff;                     } break;\n         STBI__CASE(2,1) { dest[0]=src[0];                                                     } break;\n         STBI__CASE(2,3) { dest[0]=dest[1]=dest[2]=src[0];                                     } break;\n         STBI__CASE(2,4) { dest[0]=dest[1]=dest[2]=src[0]; dest[3]=src[1];                     } break;\n         STBI__CASE(3,4) { dest[0]=src[0];dest[1]=src[1];dest[2]=src[2];dest[3]=0xffff;        } break;\n         STBI__CASE(3,1) { dest[0]=stbi__compute_y_16(src[0],src[1],src[2]);                   } break;\n         STBI__CASE(3,2) { dest[0]=stbi__compute_y_16(src[0],src[1],src[2]); dest[1] = 0xffff; } break;\n         STBI__CASE(4,1) { dest[0]=stbi__compute_y_16(src[0],src[1],src[2]);                   } break;\n         STBI__CASE(4,2) { dest[0]=stbi__compute_y_16(src[0],src[1],src[2]); dest[1] = src[3]; } break;\n         STBI__CASE(4,3) { dest[0]=src[0];dest[1]=src[1];dest[2]=src[2];                       } break;\n         default: STBI_ASSERT(0); STBI_FREE(data); STBI_FREE(good); return (stbi__uint16*) stbi__errpuc(\"unsupported\", \"Unsupported format conversion\");\n      }\n      #undef STBI__CASE\n   }\n\n   STBI_FREE(data);\n   return good;\n}\n#endif\n\n#ifndef STBI_NO_LINEAR\nstatic float   *stbi__ldr_to_hdr(stbi_uc *data, int x, int y, int comp)\n{\n   int i,k,n;\n   float *output;\n   if (!data) return NULL;\n   output = (float *) stbi__malloc_mad4(x, y, comp, sizeof(float), 0);\n   if (output == NULL) { STBI_FREE(data); return stbi__errpf(\"outofmem\", \"Out of memory\"); }\n   // compute number of non-alpha components\n   if (comp & 1) n = comp; else n = comp-1;\n   for (i=0; i < x*y; ++i) {\n      for (k=0; k < n; ++k) {\n         output[i*comp + k] = (float) (pow(data[i*comp+k]/255.0f, stbi__l2h_gamma) * stbi__l2h_scale);\n      }\n   }\n   if (n < comp) {\n      for (i=0; i < x*y; ++i) {\n         output[i*comp + n] = data[i*comp + n]/255.0f;\n      }\n   }\n   STBI_FREE(data);\n   return output;\n}\n#endif\n\n#ifndef STBI_NO_HDR\n#define stbi__float2int(x)   ((int) (x))\nstatic stbi_uc *stbi__hdr_to_ldr(float   *data, int x, int y, int comp)\n{\n   int i,k,n;\n   stbi_uc *output;\n   if (!data) return NULL;\n   output = (stbi_uc *) stbi__malloc_mad3(x, y, comp, 0);\n   if (output == NULL) { STBI_FREE(data); return stbi__errpuc(\"outofmem\", \"Out of memory\"); }\n   // compute number of non-alpha components\n   if (comp & 1) n = comp; else n = comp-1;\n   for (i=0; i < x*y; ++i) {\n      for (k=0; k < n; ++k) {\n         float z = (float) pow(data[i*comp+k]*stbi__h2l_scale_i, stbi__h2l_gamma_i) * 255 + 0.5f;\n         if (z < 0) z = 0;\n         if (z > 255) z = 255;\n         output[i*comp + k] = (stbi_uc) stbi__float2int(z);\n      }\n      if (k < comp) {\n         float z = data[i*comp+k] * 255 + 0.5f;\n         if (z < 0) z = 0;\n         if (z > 255) z = 255;\n         output[i*comp + k] = (stbi_uc) stbi__float2int(z);\n      }\n   }\n   STBI_FREE(data);\n   return output;\n}\n#endif\n\n//////////////////////////////////////////////////////////////////////////////\n//\n//  \"baseline\" JPEG/JFIF decoder\n//\n//    simple implementation\n//      - doesn't support delayed output of y-dimension\n//      - simple interface (only one output format: 8-bit interleaved RGB)\n//      - doesn't try to recover corrupt jpegs\n//      - doesn't allow partial loading, loading multiple at once\n//      - still fast on x86 (copying globals into locals doesn't help x86)\n//      - allocates lots of intermediate memory (full size of all components)\n//        - non-interleaved case requires this anyway\n//        - allows good upsampling (see next)\n//    high-quality\n//      - upsampled channels are bilinearly interpolated, even across blocks\n//      - quality integer IDCT derived from IJG's 'slow'\n//    performance\n//      - fast huffman; reasonable integer IDCT\n//      - some SIMD kernels for common paths on targets with SSE2/NEON\n//      - uses a lot of intermediate memory, could cache poorly\n\n#ifndef STBI_NO_JPEG\n\n// huffman decoding acceleration\n#define FAST_BITS   9  // larger handles more cases; smaller stomps less cache\n\ntypedef struct\n{\n   stbi_uc  fast[1 << FAST_BITS];\n   // weirdly, repacking this into AoS is a 10% speed loss, instead of a win\n   stbi__uint16 code[256];\n   stbi_uc  values[256];\n   stbi_uc  size[257];\n   unsigned int maxcode[18];\n   int    delta[17];   // old 'firstsymbol' - old 'firstcode'\n} stbi__huffman;\n\ntypedef struct\n{\n   stbi__context *s;\n   stbi__huffman huff_dc[4];\n   stbi__huffman huff_ac[4];\n   stbi__uint16 dequant[4][64];\n   stbi__int16 fast_ac[4][1 << FAST_BITS];\n\n// sizes for components, interleaved MCUs\n   int img_h_max, img_v_max;\n   int img_mcu_x, img_mcu_y;\n   int img_mcu_w, img_mcu_h;\n\n// definition of jpeg image component\n   struct\n   {\n      int id;\n      int h,v;\n      int tq;\n      int hd,ha;\n      int dc_pred;\n\n      int x,y,w2,h2;\n      stbi_uc *data;\n      void *raw_data, *raw_coeff;\n      stbi_uc *linebuf;\n      short   *coeff;   // progressive only\n      int      coeff_w, coeff_h; // number of 8x8 coefficient blocks\n   } img_comp[4];\n\n   stbi__uint32   code_buffer; // jpeg entropy-coded buffer\n   int            code_bits;   // number of valid bits\n   unsigned char  marker;      // marker seen while filling entropy buffer\n   int            nomore;      // flag if we saw a marker so must stop\n\n   int            progressive;\n   int            spec_start;\n   int            spec_end;\n   int            succ_high;\n   int            succ_low;\n   int            eob_run;\n   int            jfif;\n   int            app14_color_transform; // Adobe APP14 tag\n   int            rgb;\n\n   int scan_n, order[4];\n   int restart_interval, todo;\n\n// kernels\n   void (*idct_block_kernel)(stbi_uc *out, int out_stride, short data[64]);\n   void (*YCbCr_to_RGB_kernel)(stbi_uc *out, const stbi_uc *y, const stbi_uc *pcb, const stbi_uc *pcr, int count, int step);\n   stbi_uc *(*resample_row_hv_2_kernel)(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs);\n} stbi__jpeg;\n\nstatic int stbi__build_huffman(stbi__huffman *h, int *count)\n{\n   int i,j,k=0;\n   unsigned int code;\n   // build size list for each symbol (from JPEG spec)\n   for (i=0; i < 16; ++i) {\n      for (j=0; j < count[i]; ++j) {\n         h->size[k++] = (stbi_uc) (i+1);\n         if(k >= 257) return stbi__err(\"bad size list\",\"Corrupt JPEG\");\n      }\n   }\n   h->size[k] = 0;\n\n   // compute actual symbols (from jpeg spec)\n   code = 0;\n   k = 0;\n   for(j=1; j <= 16; ++j) {\n      // compute delta to add to code to compute symbol id\n      h->delta[j] = k - code;\n      if (h->size[k] == j) {\n         while (h->size[k] == j)\n            h->code[k++] = (stbi__uint16) (code++);\n         if (code-1 >= (1u << j)) return stbi__err(\"bad code lengths\",\"Corrupt JPEG\");\n      }\n      // compute largest code + 1 for this size, preshifted as needed later\n      h->maxcode[j] = code << (16-j);\n      code <<= 1;\n   }\n   h->maxcode[j] = 0xffffffff;\n\n   // build non-spec acceleration table; 255 is flag for not-accelerated\n   memset(h->fast, 255, 1 << FAST_BITS);\n   for (i=0; i < k; ++i) {\n      int s = h->size[i];\n      if (s <= FAST_BITS) {\n         int c = h->code[i] << (FAST_BITS-s);\n         int m = 1 << (FAST_BITS-s);\n         for (j=0; j < m; ++j) {\n            h->fast[c+j] = (stbi_uc) i;\n         }\n      }\n   }\n   return 1;\n}\n\n// build a table that decodes both magnitude and value of small ACs in\n// one go.\nstatic void stbi__build_fast_ac(stbi__int16 *fast_ac, stbi__huffman *h)\n{\n   int i;\n   for (i=0; i < (1 << FAST_BITS); ++i) {\n      stbi_uc fast = h->fast[i];\n      fast_ac[i] = 0;\n      if (fast < 255) {\n         int rs = h->values[fast];\n         int run = (rs >> 4) & 15;\n         int magbits = rs & 15;\n         int len = h->size[fast];\n\n         if (magbits && len + magbits <= FAST_BITS) {\n            // magnitude code followed by receive_extend code\n            int k = ((i << len) & ((1 << FAST_BITS) - 1)) >> (FAST_BITS - magbits);\n            int m = 1 << (magbits - 1);\n            if (k < m) k += (~0U << magbits) + 1;\n            // if the result is small enough, we can fit it in fast_ac table\n            if (k >= -128 && k <= 127)\n               fast_ac[i] = (stbi__int16) ((k * 256) + (run * 16) + (len + magbits));\n         }\n      }\n   }\n}\n\nstatic void stbi__grow_buffer_unsafe(stbi__jpeg *j)\n{\n   do {\n      unsigned int b = j->nomore ? 0 : stbi__get8(j->s);\n      if (b == 0xff) {\n         int c = stbi__get8(j->s);\n         while (c == 0xff) c = stbi__get8(j->s); // consume fill bytes\n         if (c != 0) {\n            j->marker = (unsigned char) c;\n            j->nomore = 1;\n            return;\n         }\n      }\n      j->code_buffer |= b << (24 - j->code_bits);\n      j->code_bits += 8;\n   } while (j->code_bits <= 24);\n}\n\n// (1 << n) - 1\nstatic const stbi__uint32 stbi__bmask[17]={0,1,3,7,15,31,63,127,255,511,1023,2047,4095,8191,16383,32767,65535};\n\n// decode a jpeg huffman value from the bitstream\nstbi_inline static int stbi__jpeg_huff_decode(stbi__jpeg *j, stbi__huffman *h)\n{\n   unsigned int temp;\n   int c,k;\n\n   if (j->code_bits < 16) stbi__grow_buffer_unsafe(j);\n\n   // look at the top FAST_BITS and determine what symbol ID it is,\n   // if the code is <= FAST_BITS\n   c = (j->code_buffer >> (32 - FAST_BITS)) & ((1 << FAST_BITS)-1);\n   k = h->fast[c];\n   if (k < 255) {\n      int s = h->size[k];\n      if (s > j->code_bits)\n         return -1;\n      j->code_buffer <<= s;\n      j->code_bits -= s;\n      return h->values[k];\n   }\n\n   // naive test is to shift the code_buffer down so k bits are\n   // valid, then test against maxcode. To speed this up, we've\n   // preshifted maxcode left so that it has (16-k) 0s at the\n   // end; in other words, regardless of the number of bits, it\n   // wants to be compared against something shifted to have 16;\n   // that way we don't need to shift inside the loop.\n   temp = j->code_buffer >> 16;\n   for (k=FAST_BITS+1 ; ; ++k)\n      if (temp < h->maxcode[k])\n         break;\n   if (k == 17) {\n      // error! code not found\n      j->code_bits -= 16;\n      return -1;\n   }\n\n   if (k > j->code_bits)\n      return -1;\n\n   // convert the huffman code to the symbol id\n   c = ((j->code_buffer >> (32 - k)) & stbi__bmask[k]) + h->delta[k];\n   if(c < 0 || c >= 256) // symbol id out of bounds!\n       return -1;\n   STBI_ASSERT((((j->code_buffer) >> (32 - h->size[c])) & stbi__bmask[h->size[c]]) == h->code[c]);\n\n   // convert the id to a symbol\n   j->code_bits -= k;\n   j->code_buffer <<= k;\n   return h->values[c];\n}\n\n// bias[n] = (-1<<n) + 1\nstatic const int stbi__jbias[16] = {0,-1,-3,-7,-15,-31,-63,-127,-255,-511,-1023,-2047,-4095,-8191,-16383,-32767};\n\n// combined JPEG 'receive' and JPEG 'extend', since baseline\n// always extends everything it receives.\nstbi_inline static int stbi__extend_receive(stbi__jpeg *j, int n)\n{\n   unsigned int k;\n   int sgn;\n   if (j->code_bits < n) stbi__grow_buffer_unsafe(j);\n   if (j->code_bits < n) return 0; // ran out of bits from stream, return 0s intead of continuing\n\n   sgn = j->code_buffer >> 31; // sign bit always in MSB; 0 if MSB clear (positive), 1 if MSB set (negative)\n   k = stbi_lrot(j->code_buffer, n);\n   j->code_buffer = k & ~stbi__bmask[n];\n   k &= stbi__bmask[n];\n   j->code_bits -= n;\n   return k + (stbi__jbias[n] & (sgn - 1));\n}\n\n// get some unsigned bits\nstbi_inline static int stbi__jpeg_get_bits(stbi__jpeg *j, int n)\n{\n   unsigned int k;\n   if (j->code_bits < n) stbi__grow_buffer_unsafe(j);\n   if (j->code_bits < n) return 0; // ran out of bits from stream, return 0s intead of continuing\n   k = stbi_lrot(j->code_buffer, n);\n   j->code_buffer = k & ~stbi__bmask[n];\n   k &= stbi__bmask[n];\n   j->code_bits -= n;\n   return k;\n}\n\nstbi_inline static int stbi__jpeg_get_bit(stbi__jpeg *j)\n{\n   unsigned int k;\n   if (j->code_bits < 1) stbi__grow_buffer_unsafe(j);\n   if (j->code_bits < 1) return 0; // ran out of bits from stream, return 0s intead of continuing\n   k = j->code_buffer;\n   j->code_buffer <<= 1;\n   --j->code_bits;\n   return k & 0x80000000;\n}\n\n// given a value that's at position X in the zigzag stream,\n// where does it appear in the 8x8 matrix coded as row-major?\nstatic const stbi_uc stbi__jpeg_dezigzag[64+15] =\n{\n    0,  1,  8, 16,  9,  2,  3, 10,\n   17, 24, 32, 25, 18, 11,  4,  5,\n   12, 19, 26, 33, 40, 48, 41, 34,\n   27, 20, 13,  6,  7, 14, 21, 28,\n   35, 42, 49, 56, 57, 50, 43, 36,\n   29, 22, 15, 23, 30, 37, 44, 51,\n   58, 59, 52, 45, 38, 31, 39, 46,\n   53, 60, 61, 54, 47, 55, 62, 63,\n   // let corrupt input sample past end\n   63, 63, 63, 63, 63, 63, 63, 63,\n   63, 63, 63, 63, 63, 63, 63\n};\n\n// decode one 64-entry block--\nstatic int stbi__jpeg_decode_block(stbi__jpeg *j, short data[64], stbi__huffman *hdc, stbi__huffman *hac, stbi__int16 *fac, int b, stbi__uint16 *dequant)\n{\n   int diff,dc,k;\n   int t;\n\n   if (j->code_bits < 16) stbi__grow_buffer_unsafe(j);\n   t = stbi__jpeg_huff_decode(j, hdc);\n   if (t < 0 || t > 15) return stbi__err(\"bad huffman code\",\"Corrupt JPEG\");\n\n   // 0 all the ac values now so we can do it 32-bits at a time\n   memset(data,0,64*sizeof(data[0]));\n\n   diff = t ? stbi__extend_receive(j, t) : 0;\n   if (!stbi__addints_valid(j->img_comp[b].dc_pred, diff)) return stbi__err(\"bad delta\",\"Corrupt JPEG\");\n   dc = j->img_comp[b].dc_pred + diff;\n   j->img_comp[b].dc_pred = dc;\n   if (!stbi__mul2shorts_valid(dc, dequant[0])) return stbi__err(\"can't merge dc and ac\", \"Corrupt JPEG\");\n   data[0] = (short) (dc * dequant[0]);\n\n   // decode AC components, see JPEG spec\n   k = 1;\n   do {\n      unsigned int zig;\n      int c,r,s;\n      if (j->code_bits < 16) stbi__grow_buffer_unsafe(j);\n      c = (j->code_buffer >> (32 - FAST_BITS)) & ((1 << FAST_BITS)-1);\n      r = fac[c];\n      if (r) { // fast-AC path\n         k += (r >> 4) & 15; // run\n         s = r & 15; // combined length\n         if (s > j->code_bits) return stbi__err(\"bad huffman code\", \"Combined length longer than code bits available\");\n         j->code_buffer <<= s;\n         j->code_bits -= s;\n         // decode into unzigzag'd location\n         zig = stbi__jpeg_dezigzag[k++];\n         data[zig] = (short) ((r >> 8) * dequant[zig]);\n      } else {\n         int rs = stbi__jpeg_huff_decode(j, hac);\n         if (rs < 0) return stbi__err(\"bad huffman code\",\"Corrupt JPEG\");\n         s = rs & 15;\n         r = rs >> 4;\n         if (s == 0) {\n            if (rs != 0xf0) break; // end block\n            k += 16;\n         } else {\n            k += r;\n            // decode into unzigzag'd location\n            zig = stbi__jpeg_dezigzag[k++];\n            data[zig] = (short) (stbi__extend_receive(j,s) * dequant[zig]);\n         }\n      }\n   } while (k < 64);\n   return 1;\n}\n\nstatic int stbi__jpeg_decode_block_prog_dc(stbi__jpeg *j, short data[64], stbi__huffman *hdc, int b)\n{\n   int diff,dc;\n   int t;\n   if (j->spec_end != 0) return stbi__err(\"can't merge dc and ac\", \"Corrupt JPEG\");\n\n   if (j->code_bits < 16) stbi__grow_buffer_unsafe(j);\n\n   if (j->succ_high == 0) {\n      // first scan for DC coefficient, must be first\n      memset(data,0,64*sizeof(data[0])); // 0 all the ac values now\n      t = stbi__jpeg_huff_decode(j, hdc);\n      if (t < 0 || t > 15) return stbi__err(\"can't merge dc and ac\", \"Corrupt JPEG\");\n      diff = t ? stbi__extend_receive(j, t) : 0;\n\n      if (!stbi__addints_valid(j->img_comp[b].dc_pred, diff)) return stbi__err(\"bad delta\", \"Corrupt JPEG\");\n      dc = j->img_comp[b].dc_pred + diff;\n      j->img_comp[b].dc_pred = dc;\n      if (!stbi__mul2shorts_valid(dc, 1 << j->succ_low)) return stbi__err(\"can't merge dc and ac\", \"Corrupt JPEG\");\n      data[0] = (short) (dc * (1 << j->succ_low));\n   } else {\n      // refinement scan for DC coefficient\n      if (stbi__jpeg_get_bit(j))\n         data[0] += (short) (1 << j->succ_low);\n   }\n   return 1;\n}\n\n// @OPTIMIZE: store non-zigzagged during the decode passes,\n// and only de-zigzag when dequantizing\nstatic int stbi__jpeg_decode_block_prog_ac(stbi__jpeg *j, short data[64], stbi__huffman *hac, stbi__int16 *fac)\n{\n   int k;\n   if (j->spec_start == 0) return stbi__err(\"can't merge dc and ac\", \"Corrupt JPEG\");\n\n   if (j->succ_high == 0) {\n      int shift = j->succ_low;\n\n      if (j->eob_run) {\n         --j->eob_run;\n         return 1;\n      }\n\n      k = j->spec_start;\n      do {\n         unsigned int zig;\n         int c,r,s;\n         if (j->code_bits < 16) stbi__grow_buffer_unsafe(j);\n         c = (j->code_buffer >> (32 - FAST_BITS)) & ((1 << FAST_BITS)-1);\n         r = fac[c];\n         if (r) { // fast-AC path\n            k += (r >> 4) & 15; // run\n            s = r & 15; // combined length\n            if (s > j->code_bits) return stbi__err(\"bad huffman code\", \"Combined length longer than code bits available\");\n            j->code_buffer <<= s;\n            j->code_bits -= s;\n            zig = stbi__jpeg_dezigzag[k++];\n            data[zig] = (short) ((r >> 8) * (1 << shift));\n         } else {\n            int rs = stbi__jpeg_huff_decode(j, hac);\n            if (rs < 0) return stbi__err(\"bad huffman code\",\"Corrupt JPEG\");\n            s = rs & 15;\n            r = rs >> 4;\n            if (s == 0) {\n               if (r < 15) {\n                  j->eob_run = (1 << r);\n                  if (r)\n                     j->eob_run += stbi__jpeg_get_bits(j, r);\n                  --j->eob_run;\n                  break;\n               }\n               k += 16;\n            } else {\n               k += r;\n               zig = stbi__jpeg_dezigzag[k++];\n               data[zig] = (short) (stbi__extend_receive(j,s) * (1 << shift));\n            }\n         }\n      } while (k <= j->spec_end);\n   } else {\n      // refinement scan for these AC coefficients\n\n      short bit = (short) (1 << j->succ_low);\n\n      if (j->eob_run) {\n         --j->eob_run;\n         for (k = j->spec_start; k <= j->spec_end; ++k) {\n            short *p = &data[stbi__jpeg_dezigzag[k]];\n            if (*p != 0)\n               if (stbi__jpeg_get_bit(j))\n                  if ((*p & bit)==0) {\n                     if (*p > 0)\n                        *p += bit;\n                     else\n                        *p -= bit;\n                  }\n         }\n      } else {\n         k = j->spec_start;\n         do {\n            int r,s;\n            int rs = stbi__jpeg_huff_decode(j, hac); // @OPTIMIZE see if we can use the fast path here, advance-by-r is so slow, eh\n            if (rs < 0) return stbi__err(\"bad huffman code\",\"Corrupt JPEG\");\n            s = rs & 15;\n            r = rs >> 4;\n            if (s == 0) {\n               if (r < 15) {\n                  j->eob_run = (1 << r) - 1;\n                  if (r)\n                     j->eob_run += stbi__jpeg_get_bits(j, r);\n                  r = 64; // force end of block\n               } else {\n                  // r=15 s=0 should write 16 0s, so we just do\n                  // a run of 15 0s and then write s (which is 0),\n                  // so we don't have to do anything special here\n               }\n            } else {\n               if (s != 1) return stbi__err(\"bad huffman code\", \"Corrupt JPEG\");\n               // sign bit\n               if (stbi__jpeg_get_bit(j))\n                  s = bit;\n               else\n                  s = -bit;\n            }\n\n            // advance by r\n            while (k <= j->spec_end) {\n               short *p = &data[stbi__jpeg_dezigzag[k++]];\n               if (*p != 0) {\n                  if (stbi__jpeg_get_bit(j))\n                     if ((*p & bit)==0) {\n                        if (*p > 0)\n                           *p += bit;\n                        else\n                           *p -= bit;\n                     }\n               } else {\n                  if (r == 0) {\n                     *p = (short) s;\n                     break;\n                  }\n                  --r;\n               }\n            }\n         } while (k <= j->spec_end);\n      }\n   }\n   return 1;\n}\n\n// take a -128..127 value and stbi__clamp it and convert to 0..255\nstbi_inline static stbi_uc stbi__clamp(int x)\n{\n   // trick to use a single test to catch both cases\n   if ((unsigned int) x > 255) {\n      if (x < 0) return 0;\n      if (x > 255) return 255;\n   }\n   return (stbi_uc) x;\n}\n\n#define stbi__f2f(x)  ((int) (((x) * 4096 + 0.5)))\n#define stbi__fsh(x)  ((x) * 4096)\n\n// derived from jidctint -- DCT_ISLOW\n#define STBI__IDCT_1D(s0,s1,s2,s3,s4,s5,s6,s7) \\\n   int t0,t1,t2,t3,p1,p2,p3,p4,p5,x0,x1,x2,x3; \\\n   p2 = s2;                                    \\\n   p3 = s6;                                    \\\n   p1 = (p2+p3) * stbi__f2f(0.5411961f);       \\\n   t2 = p1 + p3*stbi__f2f(-1.847759065f);      \\\n   t3 = p1 + p2*stbi__f2f( 0.765366865f);      \\\n   p2 = s0;                                    \\\n   p3 = s4;                                    \\\n   t0 = stbi__fsh(p2+p3);                      \\\n   t1 = stbi__fsh(p2-p3);                      \\\n   x0 = t0+t3;                                 \\\n   x3 = t0-t3;                                 \\\n   x1 = t1+t2;                                 \\\n   x2 = t1-t2;                                 \\\n   t0 = s7;                                    \\\n   t1 = s5;                                    \\\n   t2 = s3;                                    \\\n   t3 = s1;                                    \\\n   p3 = t0+t2;                                 \\\n   p4 = t1+t3;                                 \\\n   p1 = t0+t3;                                 \\\n   p2 = t1+t2;                                 \\\n   p5 = (p3+p4)*stbi__f2f( 1.175875602f);      \\\n   t0 = t0*stbi__f2f( 0.298631336f);           \\\n   t1 = t1*stbi__f2f( 2.053119869f);           \\\n   t2 = t2*stbi__f2f( 3.072711026f);           \\\n   t3 = t3*stbi__f2f( 1.501321110f);           \\\n   p1 = p5 + p1*stbi__f2f(-0.899976223f);      \\\n   p2 = p5 + p2*stbi__f2f(-2.562915447f);      \\\n   p3 = p3*stbi__f2f(-1.961570560f);           \\\n   p4 = p4*stbi__f2f(-0.390180644f);           \\\n   t3 += p1+p4;                                \\\n   t2 += p2+p3;                                \\\n   t1 += p2+p4;                                \\\n   t0 += p1+p3;\n\nstatic void stbi__idct_block(stbi_uc *out, int out_stride, short data[64])\n{\n   int i,val[64],*v=val;\n   stbi_uc *o;\n   short *d = data;\n\n   // columns\n   for (i=0; i < 8; ++i,++d, ++v) {\n      // if all zeroes, shortcut -- this avoids dequantizing 0s and IDCTing\n      if (d[ 8]==0 && d[16]==0 && d[24]==0 && d[32]==0\n           && d[40]==0 && d[48]==0 && d[56]==0) {\n         //    no shortcut                 0     seconds\n         //    (1|2|3|4|5|6|7)==0          0     seconds\n         //    all separate               -0.047 seconds\n         //    1 && 2|3 && 4|5 && 6|7:    -0.047 seconds\n         int dcterm = d[0]*4;\n         v[0] = v[8] = v[16] = v[24] = v[32] = v[40] = v[48] = v[56] = dcterm;\n      } else {\n         STBI__IDCT_1D(d[ 0],d[ 8],d[16],d[24],d[32],d[40],d[48],d[56])\n         // constants scaled things up by 1<<12; let's bring them back\n         // down, but keep 2 extra bits of precision\n         x0 += 512; x1 += 512; x2 += 512; x3 += 512;\n         v[ 0] = (x0+t3) >> 10;\n         v[56] = (x0-t3) >> 10;\n         v[ 8] = (x1+t2) >> 10;\n         v[48] = (x1-t2) >> 10;\n         v[16] = (x2+t1) >> 10;\n         v[40] = (x2-t1) >> 10;\n         v[24] = (x3+t0) >> 10;\n         v[32] = (x3-t0) >> 10;\n      }\n   }\n\n   for (i=0, v=val, o=out; i < 8; ++i,v+=8,o+=out_stride) {\n      // no fast case since the first 1D IDCT spread components out\n      STBI__IDCT_1D(v[0],v[1],v[2],v[3],v[4],v[5],v[6],v[7])\n      // constants scaled things up by 1<<12, plus we had 1<<2 from first\n      // loop, plus horizontal and vertical each scale by sqrt(8) so together\n      // we've got an extra 1<<3, so 1<<17 total we need to remove.\n      // so we want to round that, which means adding 0.5 * 1<<17,\n      // aka 65536. Also, we'll end up with -128 to 127 that we want\n      // to encode as 0..255 by adding 128, so we'll add that before the shift\n      x0 += 65536 + (128<<17);\n      x1 += 65536 + (128<<17);\n      x2 += 65536 + (128<<17);\n      x3 += 65536 + (128<<17);\n      // tried computing the shifts into temps, or'ing the temps to see\n      // if any were out of range, but that was slower\n      o[0] = stbi__clamp((x0+t3) >> 17);\n      o[7] = stbi__clamp((x0-t3) >> 17);\n      o[1] = stbi__clamp((x1+t2) >> 17);\n      o[6] = stbi__clamp((x1-t2) >> 17);\n      o[2] = stbi__clamp((x2+t1) >> 17);\n      o[5] = stbi__clamp((x2-t1) >> 17);\n      o[3] = stbi__clamp((x3+t0) >> 17);\n      o[4] = stbi__clamp((x3-t0) >> 17);\n   }\n}\n\n#ifdef STBI_SSE2\n// sse2 integer IDCT. not the fastest possible implementation but it\n// produces bit-identical results to the generic C version so it's\n// fully \"transparent\".\nstatic void stbi__idct_simd(stbi_uc *out, int out_stride, short data[64])\n{\n   // This is constructed to match our regular (generic) integer IDCT exactly.\n   __m128i row0, row1, row2, row3, row4, row5, row6, row7;\n   __m128i tmp;\n\n   // dot product constant: even elems=x, odd elems=y\n   #define dct_const(x,y)  _mm_setr_epi16((x),(y),(x),(y),(x),(y),(x),(y))\n\n   // out(0) = c0[even]*x + c0[odd]*y   (c0, x, y 16-bit, out 32-bit)\n   // out(1) = c1[even]*x + c1[odd]*y\n   #define dct_rot(out0,out1, x,y,c0,c1) \\\n      __m128i c0##lo = _mm_unpacklo_epi16((x),(y)); \\\n      __m128i c0##hi = _mm_unpackhi_epi16((x),(y)); \\\n      __m128i out0##_l = _mm_madd_epi16(c0##lo, c0); \\\n      __m128i out0##_h = _mm_madd_epi16(c0##hi, c0); \\\n      __m128i out1##_l = _mm_madd_epi16(c0##lo, c1); \\\n      __m128i out1##_h = _mm_madd_epi16(c0##hi, c1)\n\n   // out = in << 12  (in 16-bit, out 32-bit)\n   #define dct_widen(out, in) \\\n      __m128i out##_l = _mm_srai_epi32(_mm_unpacklo_epi16(_mm_setzero_si128(), (in)), 4); \\\n      __m128i out##_h = _mm_srai_epi32(_mm_unpackhi_epi16(_mm_setzero_si128(), (in)), 4)\n\n   // wide add\n   #define dct_wadd(out, a, b) \\\n      __m128i out##_l = _mm_add_epi32(a##_l, b##_l); \\\n      __m128i out##_h = _mm_add_epi32(a##_h, b##_h)\n\n   // wide sub\n   #define dct_wsub(out, a, b) \\\n      __m128i out##_l = _mm_sub_epi32(a##_l, b##_l); \\\n      __m128i out##_h = _mm_sub_epi32(a##_h, b##_h)\n\n   // butterfly a/b, add bias, then shift by \"s\" and pack\n   #define dct_bfly32o(out0, out1, a,b,bias,s) \\\n      { \\\n         __m128i abiased_l = _mm_add_epi32(a##_l, bias); \\\n         __m128i abiased_h = _mm_add_epi32(a##_h, bias); \\\n         dct_wadd(sum, abiased, b); \\\n         dct_wsub(dif, abiased, b); \\\n         out0 = _mm_packs_epi32(_mm_srai_epi32(sum_l, s), _mm_srai_epi32(sum_h, s)); \\\n         out1 = _mm_packs_epi32(_mm_srai_epi32(dif_l, s), _mm_srai_epi32(dif_h, s)); \\\n      }\n\n   // 8-bit interleave step (for transposes)\n   #define dct_interleave8(a, b) \\\n      tmp = a; \\\n      a = _mm_unpacklo_epi8(a, b); \\\n      b = _mm_unpackhi_epi8(tmp, b)\n\n   // 16-bit interleave step (for transposes)\n   #define dct_interleave16(a, b) \\\n      tmp = a; \\\n      a = _mm_unpacklo_epi16(a, b); \\\n      b = _mm_unpackhi_epi16(tmp, b)\n\n   #define dct_pass(bias,shift) \\\n      { \\\n         /* even part */ \\\n         dct_rot(t2e,t3e, row2,row6, rot0_0,rot0_1); \\\n         __m128i sum04 = _mm_add_epi16(row0, row4); \\\n         __m128i dif04 = _mm_sub_epi16(row0, row4); \\\n         dct_widen(t0e, sum04); \\\n         dct_widen(t1e, dif04); \\\n         dct_wadd(x0, t0e, t3e); \\\n         dct_wsub(x3, t0e, t3e); \\\n         dct_wadd(x1, t1e, t2e); \\\n         dct_wsub(x2, t1e, t2e); \\\n         /* odd part */ \\\n         dct_rot(y0o,y2o, row7,row3, rot2_0,rot2_1); \\\n         dct_rot(y1o,y3o, row5,row1, rot3_0,rot3_1); \\\n         __m128i sum17 = _mm_add_epi16(row1, row7); \\\n         __m128i sum35 = _mm_add_epi16(row3, row5); \\\n         dct_rot(y4o,y5o, sum17,sum35, rot1_0,rot1_1); \\\n         dct_wadd(x4, y0o, y4o); \\\n         dct_wadd(x5, y1o, y5o); \\\n         dct_wadd(x6, y2o, y5o); \\\n         dct_wadd(x7, y3o, y4o); \\\n         dct_bfly32o(row0,row7, x0,x7,bias,shift); \\\n         dct_bfly32o(row1,row6, x1,x6,bias,shift); \\\n         dct_bfly32o(row2,row5, x2,x5,bias,shift); \\\n         dct_bfly32o(row3,row4, x3,x4,bias,shift); \\\n      }\n\n   __m128i rot0_0 = dct_const(stbi__f2f(0.5411961f), stbi__f2f(0.5411961f) + stbi__f2f(-1.847759065f));\n   __m128i rot0_1 = dct_const(stbi__f2f(0.5411961f) + stbi__f2f( 0.765366865f), stbi__f2f(0.5411961f));\n   __m128i rot1_0 = dct_const(stbi__f2f(1.175875602f) + stbi__f2f(-0.899976223f), stbi__f2f(1.175875602f));\n   __m128i rot1_1 = dct_const(stbi__f2f(1.175875602f), stbi__f2f(1.175875602f) + stbi__f2f(-2.562915447f));\n   __m128i rot2_0 = dct_const(stbi__f2f(-1.961570560f) + stbi__f2f( 0.298631336f), stbi__f2f(-1.961570560f));\n   __m128i rot2_1 = dct_const(stbi__f2f(-1.961570560f), stbi__f2f(-1.961570560f) + stbi__f2f( 3.072711026f));\n   __m128i rot3_0 = dct_const(stbi__f2f(-0.390180644f) + stbi__f2f( 2.053119869f), stbi__f2f(-0.390180644f));\n   __m128i rot3_1 = dct_const(stbi__f2f(-0.390180644f), stbi__f2f(-0.390180644f) + stbi__f2f( 1.501321110f));\n\n   // rounding biases in column/row passes, see stbi__idct_block for explanation.\n   __m128i bias_0 = _mm_set1_epi32(512);\n   __m128i bias_1 = _mm_set1_epi32(65536 + (128<<17));\n\n   // load\n   row0 = _mm_load_si128((const __m128i *) (data + 0*8));\n   row1 = _mm_load_si128((const __m128i *) (data + 1*8));\n   row2 = _mm_load_si128((const __m128i *) (data + 2*8));\n   row3 = _mm_load_si128((const __m128i *) (data + 3*8));\n   row4 = _mm_load_si128((const __m128i *) (data + 4*8));\n   row5 = _mm_load_si128((const __m128i *) (data + 5*8));\n   row6 = _mm_load_si128((const __m128i *) (data + 6*8));\n   row7 = _mm_load_si128((const __m128i *) (data + 7*8));\n\n   // column pass\n   dct_pass(bias_0, 10);\n\n   {\n      // 16bit 8x8 transpose pass 1\n      dct_interleave16(row0, row4);\n      dct_interleave16(row1, row5);\n      dct_interleave16(row2, row6);\n      dct_interleave16(row3, row7);\n\n      // transpose pass 2\n      dct_interleave16(row0, row2);\n      dct_interleave16(row1, row3);\n      dct_interleave16(row4, row6);\n      dct_interleave16(row5, row7);\n\n      // transpose pass 3\n      dct_interleave16(row0, row1);\n      dct_interleave16(row2, row3);\n      dct_interleave16(row4, row5);\n      dct_interleave16(row6, row7);\n   }\n\n   // row pass\n   dct_pass(bias_1, 17);\n\n   {\n      // pack\n      __m128i p0 = _mm_packus_epi16(row0, row1); // a0a1a2a3...a7b0b1b2b3...b7\n      __m128i p1 = _mm_packus_epi16(row2, row3);\n      __m128i p2 = _mm_packus_epi16(row4, row5);\n      __m128i p3 = _mm_packus_epi16(row6, row7);\n\n      // 8bit 8x8 transpose pass 1\n      dct_interleave8(p0, p2); // a0e0a1e1...\n      dct_interleave8(p1, p3); // c0g0c1g1...\n\n      // transpose pass 2\n      dct_interleave8(p0, p1); // a0c0e0g0...\n      dct_interleave8(p2, p3); // b0d0f0h0...\n\n      // transpose pass 3\n      dct_interleave8(p0, p2); // a0b0c0d0...\n      dct_interleave8(p1, p3); // a4b4c4d4...\n\n      // store\n      _mm_storel_epi64((__m128i *) out, p0); out += out_stride;\n      _mm_storel_epi64((__m128i *) out, _mm_shuffle_epi32(p0, 0x4e)); out += out_stride;\n      _mm_storel_epi64((__m128i *) out, p2); out += out_stride;\n      _mm_storel_epi64((__m128i *) out, _mm_shuffle_epi32(p2, 0x4e)); out += out_stride;\n      _mm_storel_epi64((__m128i *) out, p1); out += out_stride;\n      _mm_storel_epi64((__m128i *) out, _mm_shuffle_epi32(p1, 0x4e)); out += out_stride;\n      _mm_storel_epi64((__m128i *) out, p3); out += out_stride;\n      _mm_storel_epi64((__m128i *) out, _mm_shuffle_epi32(p3, 0x4e));\n   }\n\n#undef dct_const\n#undef dct_rot\n#undef dct_widen\n#undef dct_wadd\n#undef dct_wsub\n#undef dct_bfly32o\n#undef dct_interleave8\n#undef dct_interleave16\n#undef dct_pass\n}\n\n#endif // STBI_SSE2\n\n#ifdef STBI_NEON\n\n// NEON integer IDCT. should produce bit-identical\n// results to the generic C version.\nstatic void stbi__idct_simd(stbi_uc *out, int out_stride, short data[64])\n{\n   int16x8_t row0, row1, row2, row3, row4, row5, row6, row7;\n\n   int16x4_t rot0_0 = vdup_n_s16(stbi__f2f(0.5411961f));\n   int16x4_t rot0_1 = vdup_n_s16(stbi__f2f(-1.847759065f));\n   int16x4_t rot0_2 = vdup_n_s16(stbi__f2f( 0.765366865f));\n   int16x4_t rot1_0 = vdup_n_s16(stbi__f2f( 1.175875602f));\n   int16x4_t rot1_1 = vdup_n_s16(stbi__f2f(-0.899976223f));\n   int16x4_t rot1_2 = vdup_n_s16(stbi__f2f(-2.562915447f));\n   int16x4_t rot2_0 = vdup_n_s16(stbi__f2f(-1.961570560f));\n   int16x4_t rot2_1 = vdup_n_s16(stbi__f2f(-0.390180644f));\n   int16x4_t rot3_0 = vdup_n_s16(stbi__f2f( 0.298631336f));\n   int16x4_t rot3_1 = vdup_n_s16(stbi__f2f( 2.053119869f));\n   int16x4_t rot3_2 = vdup_n_s16(stbi__f2f( 3.072711026f));\n   int16x4_t rot3_3 = vdup_n_s16(stbi__f2f( 1.501321110f));\n\n#define dct_long_mul(out, inq, coeff) \\\n   int32x4_t out##_l = vmull_s16(vget_low_s16(inq), coeff); \\\n   int32x4_t out##_h = vmull_s16(vget_high_s16(inq), coeff)\n\n#define dct_long_mac(out, acc, inq, coeff) \\\n   int32x4_t out##_l = vmlal_s16(acc##_l, vget_low_s16(inq), coeff); \\\n   int32x4_t out##_h = vmlal_s16(acc##_h, vget_high_s16(inq), coeff)\n\n#define dct_widen(out, inq) \\\n   int32x4_t out##_l = vshll_n_s16(vget_low_s16(inq), 12); \\\n   int32x4_t out##_h = vshll_n_s16(vget_high_s16(inq), 12)\n\n// wide add\n#define dct_wadd(out, a, b) \\\n   int32x4_t out##_l = vaddq_s32(a##_l, b##_l); \\\n   int32x4_t out##_h = vaddq_s32(a##_h, b##_h)\n\n// wide sub\n#define dct_wsub(out, a, b) \\\n   int32x4_t out##_l = vsubq_s32(a##_l, b##_l); \\\n   int32x4_t out##_h = vsubq_s32(a##_h, b##_h)\n\n// butterfly a/b, then shift using \"shiftop\" by \"s\" and pack\n#define dct_bfly32o(out0,out1, a,b,shiftop,s) \\\n   { \\\n      dct_wadd(sum, a, b); \\\n      dct_wsub(dif, a, b); \\\n      out0 = vcombine_s16(shiftop(sum_l, s), shiftop(sum_h, s)); \\\n      out1 = vcombine_s16(shiftop(dif_l, s), shiftop(dif_h, s)); \\\n   }\n\n#define dct_pass(shiftop, shift) \\\n   { \\\n      /* even part */ \\\n      int16x8_t sum26 = vaddq_s16(row2, row6); \\\n      dct_long_mul(p1e, sum26, rot0_0); \\\n      dct_long_mac(t2e, p1e, row6, rot0_1); \\\n      dct_long_mac(t3e, p1e, row2, rot0_2); \\\n      int16x8_t sum04 = vaddq_s16(row0, row4); \\\n      int16x8_t dif04 = vsubq_s16(row0, row4); \\\n      dct_widen(t0e, sum04); \\\n      dct_widen(t1e, dif04); \\\n      dct_wadd(x0, t0e, t3e); \\\n      dct_wsub(x3, t0e, t3e); \\\n      dct_wadd(x1, t1e, t2e); \\\n      dct_wsub(x2, t1e, t2e); \\\n      /* odd part */ \\\n      int16x8_t sum15 = vaddq_s16(row1, row5); \\\n      int16x8_t sum17 = vaddq_s16(row1, row7); \\\n      int16x8_t sum35 = vaddq_s16(row3, row5); \\\n      int16x8_t sum37 = vaddq_s16(row3, row7); \\\n      int16x8_t sumodd = vaddq_s16(sum17, sum35); \\\n      dct_long_mul(p5o, sumodd, rot1_0); \\\n      dct_long_mac(p1o, p5o, sum17, rot1_1); \\\n      dct_long_mac(p2o, p5o, sum35, rot1_2); \\\n      dct_long_mul(p3o, sum37, rot2_0); \\\n      dct_long_mul(p4o, sum15, rot2_1); \\\n      dct_wadd(sump13o, p1o, p3o); \\\n      dct_wadd(sump24o, p2o, p4o); \\\n      dct_wadd(sump23o, p2o, p3o); \\\n      dct_wadd(sump14o, p1o, p4o); \\\n      dct_long_mac(x4, sump13o, row7, rot3_0); \\\n      dct_long_mac(x5, sump24o, row5, rot3_1); \\\n      dct_long_mac(x6, sump23o, row3, rot3_2); \\\n      dct_long_mac(x7, sump14o, row1, rot3_3); \\\n      dct_bfly32o(row0,row7, x0,x7,shiftop,shift); \\\n      dct_bfly32o(row1,row6, x1,x6,shiftop,shift); \\\n      dct_bfly32o(row2,row5, x2,x5,shiftop,shift); \\\n      dct_bfly32o(row3,row4, x3,x4,shiftop,shift); \\\n   }\n\n   // load\n   row0 = vld1q_s16(data + 0*8);\n   row1 = vld1q_s16(data + 1*8);\n   row2 = vld1q_s16(data + 2*8);\n   row3 = vld1q_s16(data + 3*8);\n   row4 = vld1q_s16(data + 4*8);\n   row5 = vld1q_s16(data + 5*8);\n   row6 = vld1q_s16(data + 6*8);\n   row7 = vld1q_s16(data + 7*8);\n\n   // add DC bias\n   row0 = vaddq_s16(row0, vsetq_lane_s16(1024, vdupq_n_s16(0), 0));\n\n   // column pass\n   dct_pass(vrshrn_n_s32, 10);\n\n   // 16bit 8x8 transpose\n   {\n// these three map to a single VTRN.16, VTRN.32, and VSWP, respectively.\n// whether compilers actually get this is another story, sadly.\n#define dct_trn16(x, y) { int16x8x2_t t = vtrnq_s16(x, y); x = t.val[0]; y = t.val[1]; }\n#define dct_trn32(x, y) { int32x4x2_t t = vtrnq_s32(vreinterpretq_s32_s16(x), vreinterpretq_s32_s16(y)); x = vreinterpretq_s16_s32(t.val[0]); y = vreinterpretq_s16_s32(t.val[1]); }\n#define dct_trn64(x, y) { int16x8_t x0 = x; int16x8_t y0 = y; x = vcombine_s16(vget_low_s16(x0), vget_low_s16(y0)); y = vcombine_s16(vget_high_s16(x0), vget_high_s16(y0)); }\n\n      // pass 1\n      dct_trn16(row0, row1); // a0b0a2b2a4b4a6b6\n      dct_trn16(row2, row3);\n      dct_trn16(row4, row5);\n      dct_trn16(row6, row7);\n\n      // pass 2\n      dct_trn32(row0, row2); // a0b0c0d0a4b4c4d4\n      dct_trn32(row1, row3);\n      dct_trn32(row4, row6);\n      dct_trn32(row5, row7);\n\n      // pass 3\n      dct_trn64(row0, row4); // a0b0c0d0e0f0g0h0\n      dct_trn64(row1, row5);\n      dct_trn64(row2, row6);\n      dct_trn64(row3, row7);\n\n#undef dct_trn16\n#undef dct_trn32\n#undef dct_trn64\n   }\n\n   // row pass\n   // vrshrn_n_s32 only supports shifts up to 16, we need\n   // 17. so do a non-rounding shift of 16 first then follow\n   // up with a rounding shift by 1.\n   dct_pass(vshrn_n_s32, 16);\n\n   {\n      // pack and round\n      uint8x8_t p0 = vqrshrun_n_s16(row0, 1);\n      uint8x8_t p1 = vqrshrun_n_s16(row1, 1);\n      uint8x8_t p2 = vqrshrun_n_s16(row2, 1);\n      uint8x8_t p3 = vqrshrun_n_s16(row3, 1);\n      uint8x8_t p4 = vqrshrun_n_s16(row4, 1);\n      uint8x8_t p5 = vqrshrun_n_s16(row5, 1);\n      uint8x8_t p6 = vqrshrun_n_s16(row6, 1);\n      uint8x8_t p7 = vqrshrun_n_s16(row7, 1);\n\n      // again, these can translate into one instruction, but often don't.\n#define dct_trn8_8(x, y) { uint8x8x2_t t = vtrn_u8(x, y); x = t.val[0]; y = t.val[1]; }\n#define dct_trn8_16(x, y) { uint16x4x2_t t = vtrn_u16(vreinterpret_u16_u8(x), vreinterpret_u16_u8(y)); x = vreinterpret_u8_u16(t.val[0]); y = vreinterpret_u8_u16(t.val[1]); }\n#define dct_trn8_32(x, y) { uint32x2x2_t t = vtrn_u32(vreinterpret_u32_u8(x), vreinterpret_u32_u8(y)); x = vreinterpret_u8_u32(t.val[0]); y = vreinterpret_u8_u32(t.val[1]); }\n\n      // sadly can't use interleaved stores here since we only write\n      // 8 bytes to each scan line!\n\n      // 8x8 8-bit transpose pass 1\n      dct_trn8_8(p0, p1);\n      dct_trn8_8(p2, p3);\n      dct_trn8_8(p4, p5);\n      dct_trn8_8(p6, p7);\n\n      // pass 2\n      dct_trn8_16(p0, p2);\n      dct_trn8_16(p1, p3);\n      dct_trn8_16(p4, p6);\n      dct_trn8_16(p5, p7);\n\n      // pass 3\n      dct_trn8_32(p0, p4);\n      dct_trn8_32(p1, p5);\n      dct_trn8_32(p2, p6);\n      dct_trn8_32(p3, p7);\n\n      // store\n      vst1_u8(out, p0); out += out_stride;\n      vst1_u8(out, p1); out += out_stride;\n      vst1_u8(out, p2); out += out_stride;\n      vst1_u8(out, p3); out += out_stride;\n      vst1_u8(out, p4); out += out_stride;\n      vst1_u8(out, p5); out += out_stride;\n      vst1_u8(out, p6); out += out_stride;\n      vst1_u8(out, p7);\n\n#undef dct_trn8_8\n#undef dct_trn8_16\n#undef dct_trn8_32\n   }\n\n#undef dct_long_mul\n#undef dct_long_mac\n#undef dct_widen\n#undef dct_wadd\n#undef dct_wsub\n#undef dct_bfly32o\n#undef dct_pass\n}\n\n#endif // STBI_NEON\n\n#define STBI__MARKER_none  0xff\n// if there's a pending marker from the entropy stream, return that\n// otherwise, fetch from the stream and get a marker. if there's no\n// marker, return 0xff, which is never a valid marker value\nstatic stbi_uc stbi__get_marker(stbi__jpeg *j)\n{\n   stbi_uc x;\n   if (j->marker != STBI__MARKER_none) { x = j->marker; j->marker = STBI__MARKER_none; return x; }\n   x = stbi__get8(j->s);\n   if (x != 0xff) return STBI__MARKER_none;\n   while (x == 0xff)\n      x = stbi__get8(j->s); // consume repeated 0xff fill bytes\n   return x;\n}\n\n// in each scan, we'll have scan_n components, and the order\n// of the components is specified by order[]\n#define STBI__RESTART(x)     ((x) >= 0xd0 && (x) <= 0xd7)\n\n// after a restart interval, stbi__jpeg_reset the entropy decoder and\n// the dc prediction\nstatic void stbi__jpeg_reset(stbi__jpeg *j)\n{\n   j->code_bits = 0;\n   j->code_buffer = 0;\n   j->nomore = 0;\n   j->img_comp[0].dc_pred = j->img_comp[1].dc_pred = j->img_comp[2].dc_pred = j->img_comp[3].dc_pred = 0;\n   j->marker = STBI__MARKER_none;\n   j->todo = j->restart_interval ? j->restart_interval : 0x7fffffff;\n   j->eob_run = 0;\n   // no more than 1<<31 MCUs if no restart_interal? that's plenty safe,\n   // since we don't even allow 1<<30 pixels\n}\n\nstatic int stbi__parse_entropy_coded_data(stbi__jpeg *z)\n{\n   stbi__jpeg_reset(z);\n   if (!z->progressive) {\n      if (z->scan_n == 1) {\n         int i,j;\n         STBI_SIMD_ALIGN(short, data[64]);\n         int n = z->order[0];\n         // non-interleaved data, we just need to process one block at a time,\n         // in trivial scanline order\n         // number of blocks to do just depends on how many actual \"pixels\" this\n         // component has, independent of interleaved MCU blocking and such\n         int w = (z->img_comp[n].x+7) >> 3;\n         int h = (z->img_comp[n].y+7) >> 3;\n         for (j=0; j < h; ++j) {\n            for (i=0; i < w; ++i) {\n               int ha = z->img_comp[n].ha;\n               if (!stbi__jpeg_decode_block(z, data, z->huff_dc+z->img_comp[n].hd, z->huff_ac+ha, z->fast_ac[ha], n, z->dequant[z->img_comp[n].tq])) return 0;\n               z->idct_block_kernel(z->img_comp[n].data+z->img_comp[n].w2*j*8+i*8, z->img_comp[n].w2, data);\n               // every data block is an MCU, so countdown the restart interval\n               if (--z->todo <= 0) {\n                  if (z->code_bits < 24) stbi__grow_buffer_unsafe(z);\n                  // if it's NOT a restart, then just bail, so we get corrupt data\n                  // rather than no data\n                  if (!STBI__RESTART(z->marker)) return 1;\n                  stbi__jpeg_reset(z);\n               }\n            }\n         }\n         return 1;\n      } else { // interleaved\n         int i,j,k,x,y;\n         STBI_SIMD_ALIGN(short, data[64]);\n         for (j=0; j < z->img_mcu_y; ++j) {\n            for (i=0; i < z->img_mcu_x; ++i) {\n               // scan an interleaved mcu... process scan_n components in order\n               for (k=0; k < z->scan_n; ++k) {\n                  int n = z->order[k];\n                  // scan out an mcu's worth of this component; that's just determined\n                  // by the basic H and V specified for the component\n                  for (y=0; y < z->img_comp[n].v; ++y) {\n                     for (x=0; x < z->img_comp[n].h; ++x) {\n                        int x2 = (i*z->img_comp[n].h + x)*8;\n                        int y2 = (j*z->img_comp[n].v + y)*8;\n                        int ha = z->img_comp[n].ha;\n                        if (!stbi__jpeg_decode_block(z, data, z->huff_dc+z->img_comp[n].hd, z->huff_ac+ha, z->fast_ac[ha], n, z->dequant[z->img_comp[n].tq])) return 0;\n                        z->idct_block_kernel(z->img_comp[n].data+z->img_comp[n].w2*y2+x2, z->img_comp[n].w2, data);\n                     }\n                  }\n               }\n               // after all interleaved components, that's an interleaved MCU,\n               // so now count down the restart interval\n               if (--z->todo <= 0) {\n                  if (z->code_bits < 24) stbi__grow_buffer_unsafe(z);\n                  if (!STBI__RESTART(z->marker)) return 1;\n                  stbi__jpeg_reset(z);\n               }\n            }\n         }\n         return 1;\n      }\n   } else {\n      if (z->scan_n == 1) {\n         int i,j;\n         int n = z->order[0];\n         // non-interleaved data, we just need to process one block at a time,\n         // in trivial scanline order\n         // number of blocks to do just depends on how many actual \"pixels\" this\n         // component has, independent of interleaved MCU blocking and such\n         int w = (z->img_comp[n].x+7) >> 3;\n         int h = (z->img_comp[n].y+7) >> 3;\n         for (j=0; j < h; ++j) {\n            for (i=0; i < w; ++i) {\n               short *data = z->img_comp[n].coeff + 64 * (i + j * z->img_comp[n].coeff_w);\n               if (z->spec_start == 0) {\n                  if (!stbi__jpeg_decode_block_prog_dc(z, data, &z->huff_dc[z->img_comp[n].hd], n))\n                     return 0;\n               } else {\n                  int ha = z->img_comp[n].ha;\n                  if (!stbi__jpeg_decode_block_prog_ac(z, data, &z->huff_ac[ha], z->fast_ac[ha]))\n                     return 0;\n               }\n               // every data block is an MCU, so countdown the restart interval\n               if (--z->todo <= 0) {\n                  if (z->code_bits < 24) stbi__grow_buffer_unsafe(z);\n                  if (!STBI__RESTART(z->marker)) return 1;\n                  stbi__jpeg_reset(z);\n               }\n            }\n         }\n         return 1;\n      } else { // interleaved\n         int i,j,k,x,y;\n         for (j=0; j < z->img_mcu_y; ++j) {\n            for (i=0; i < z->img_mcu_x; ++i) {\n               // scan an interleaved mcu... process scan_n components in order\n               for (k=0; k < z->scan_n; ++k) {\n                  int n = z->order[k];\n                  // scan out an mcu's worth of this component; that's just determined\n                  // by the basic H and V specified for the component\n                  for (y=0; y < z->img_comp[n].v; ++y) {\n                     for (x=0; x < z->img_comp[n].h; ++x) {\n                        int x2 = (i*z->img_comp[n].h + x);\n                        int y2 = (j*z->img_comp[n].v + y);\n                        short *data = z->img_comp[n].coeff + 64 * (x2 + y2 * z->img_comp[n].coeff_w);\n                        if (!stbi__jpeg_decode_block_prog_dc(z, data, &z->huff_dc[z->img_comp[n].hd], n))\n                           return 0;\n                     }\n                  }\n               }\n               // after all interleaved components, that's an interleaved MCU,\n               // so now count down the restart interval\n               if (--z->todo <= 0) {\n                  if (z->code_bits < 24) stbi__grow_buffer_unsafe(z);\n                  if (!STBI__RESTART(z->marker)) return 1;\n                  stbi__jpeg_reset(z);\n               }\n            }\n         }\n         return 1;\n      }\n   }\n}\n\nstatic void stbi__jpeg_dequantize(short *data, stbi__uint16 *dequant)\n{\n   int i;\n   for (i=0; i < 64; ++i)\n      data[i] *= dequant[i];\n}\n\nstatic void stbi__jpeg_finish(stbi__jpeg *z)\n{\n   if (z->progressive) {\n      // dequantize and idct the data\n      int i,j,n;\n      for (n=0; n < z->s->img_n; ++n) {\n         int w = (z->img_comp[n].x+7) >> 3;\n         int h = (z->img_comp[n].y+7) >> 3;\n         for (j=0; j < h; ++j) {\n            for (i=0; i < w; ++i) {\n               short *data = z->img_comp[n].coeff + 64 * (i + j * z->img_comp[n].coeff_w);\n               stbi__jpeg_dequantize(data, z->dequant[z->img_comp[n].tq]);\n               z->idct_block_kernel(z->img_comp[n].data+z->img_comp[n].w2*j*8+i*8, z->img_comp[n].w2, data);\n            }\n         }\n      }\n   }\n}\n\nstatic int stbi__process_marker(stbi__jpeg *z, int m)\n{\n   int L;\n   switch (m) {\n      case STBI__MARKER_none: // no marker found\n         return stbi__err(\"expected marker\",\"Corrupt JPEG\");\n\n      case 0xDD: // DRI - specify restart interval\n         if (stbi__get16be(z->s) != 4) return stbi__err(\"bad DRI len\",\"Corrupt JPEG\");\n         z->restart_interval = stbi__get16be(z->s);\n         return 1;\n\n      case 0xDB: // DQT - define quantization table\n         L = stbi__get16be(z->s)-2;\n         while (L > 0) {\n            int q = stbi__get8(z->s);\n            int p = q >> 4, sixteen = (p != 0);\n            int t = q & 15,i;\n            if (p != 0 && p != 1) return stbi__err(\"bad DQT type\",\"Corrupt JPEG\");\n            if (t > 3) return stbi__err(\"bad DQT table\",\"Corrupt JPEG\");\n\n            for (i=0; i < 64; ++i)\n               z->dequant[t][stbi__jpeg_dezigzag[i]] = (stbi__uint16)(sixteen ? stbi__get16be(z->s) : stbi__get8(z->s));\n            L -= (sixteen ? 129 : 65);\n         }\n         return L==0;\n\n      case 0xC4: // DHT - define huffman table\n         L = stbi__get16be(z->s)-2;\n         while (L > 0) {\n            stbi_uc *v;\n            int sizes[16],i,n=0;\n            int q = stbi__get8(z->s);\n            int tc = q >> 4;\n            int th = q & 15;\n            if (tc > 1 || th > 3) return stbi__err(\"bad DHT header\",\"Corrupt JPEG\");\n            for (i=0; i < 16; ++i) {\n               sizes[i] = stbi__get8(z->s);\n               n += sizes[i];\n            }\n            if(n > 256) return stbi__err(\"bad DHT header\",\"Corrupt JPEG\"); // Loop over i < n would write past end of values!\n            L -= 17;\n            if (tc == 0) {\n               if (!stbi__build_huffman(z->huff_dc+th, sizes)) return 0;\n               v = z->huff_dc[th].values;\n            } else {\n               if (!stbi__build_huffman(z->huff_ac+th, sizes)) return 0;\n               v = z->huff_ac[th].values;\n            }\n            for (i=0; i < n; ++i)\n               v[i] = stbi__get8(z->s);\n            if (tc != 0)\n               stbi__build_fast_ac(z->fast_ac[th], z->huff_ac + th);\n            L -= n;\n         }\n         return L==0;\n   }\n\n   // check for comment block or APP blocks\n   if ((m >= 0xE0 && m <= 0xEF) || m == 0xFE) {\n      L = stbi__get16be(z->s);\n      if (L < 2) {\n         if (m == 0xFE)\n            return stbi__err(\"bad COM len\",\"Corrupt JPEG\");\n         else\n            return stbi__err(\"bad APP len\",\"Corrupt JPEG\");\n      }\n      L -= 2;\n\n      if (m == 0xE0 && L >= 5) { // JFIF APP0 segment\n         static const unsigned char tag[5] = {'J','F','I','F','\\0'};\n         int ok = 1;\n         int i;\n         for (i=0; i < 5; ++i)\n            if (stbi__get8(z->s) != tag[i])\n               ok = 0;\n         L -= 5;\n         if (ok)\n            z->jfif = 1;\n      } else if (m == 0xEE && L >= 12) { // Adobe APP14 segment\n         static const unsigned char tag[6] = {'A','d','o','b','e','\\0'};\n         int ok = 1;\n         int i;\n         for (i=0; i < 6; ++i)\n            if (stbi__get8(z->s) != tag[i])\n               ok = 0;\n         L -= 6;\n         if (ok) {\n            stbi__get8(z->s); // version\n            stbi__get16be(z->s); // flags0\n            stbi__get16be(z->s); // flags1\n            z->app14_color_transform = stbi__get8(z->s); // color transform\n            L -= 6;\n         }\n      }\n\n      stbi__skip(z->s, L);\n      return 1;\n   }\n\n   return stbi__err(\"unknown marker\",\"Corrupt JPEG\");\n}\n\n// after we see SOS\nstatic int stbi__process_scan_header(stbi__jpeg *z)\n{\n   int i;\n   int Ls = stbi__get16be(z->s);\n   z->scan_n = stbi__get8(z->s);\n   if (z->scan_n < 1 || z->scan_n > 4 || z->scan_n > (int) z->s->img_n) return stbi__err(\"bad SOS component count\",\"Corrupt JPEG\");\n   if (Ls != 6+2*z->scan_n) return stbi__err(\"bad SOS len\",\"Corrupt JPEG\");\n   for (i=0; i < z->scan_n; ++i) {\n      int id = stbi__get8(z->s), which;\n      int q = stbi__get8(z->s);\n      for (which = 0; which < z->s->img_n; ++which)\n         if (z->img_comp[which].id == id)\n            break;\n      if (which == z->s->img_n) return 0; // no match\n      z->img_comp[which].hd = q >> 4;   if (z->img_comp[which].hd > 3) return stbi__err(\"bad DC huff\",\"Corrupt JPEG\");\n      z->img_comp[which].ha = q & 15;   if (z->img_comp[which].ha > 3) return stbi__err(\"bad AC huff\",\"Corrupt JPEG\");\n      z->order[i] = which;\n   }\n\n   {\n      int aa;\n      z->spec_start = stbi__get8(z->s);\n      z->spec_end   = stbi__get8(z->s); // should be 63, but might be 0\n      aa = stbi__get8(z->s);\n      z->succ_high = (aa >> 4);\n      z->succ_low  = (aa & 15);\n      if (z->progressive) {\n         if (z->spec_start > 63 || z->spec_end > 63  || z->spec_start > z->spec_end || z->succ_high > 13 || z->succ_low > 13)\n            return stbi__err(\"bad SOS\", \"Corrupt JPEG\");\n      } else {\n         if (z->spec_start != 0) return stbi__err(\"bad SOS\",\"Corrupt JPEG\");\n         if (z->succ_high != 0 || z->succ_low != 0) return stbi__err(\"bad SOS\",\"Corrupt JPEG\");\n         z->spec_end = 63;\n      }\n   }\n\n   return 1;\n}\n\nstatic int stbi__free_jpeg_components(stbi__jpeg *z, int ncomp, int why)\n{\n   int i;\n   for (i=0; i < ncomp; ++i) {\n      if (z->img_comp[i].raw_data) {\n         STBI_FREE(z->img_comp[i].raw_data);\n         z->img_comp[i].raw_data = NULL;\n         z->img_comp[i].data = NULL;\n      }\n      if (z->img_comp[i].raw_coeff) {\n         STBI_FREE(z->img_comp[i].raw_coeff);\n         z->img_comp[i].raw_coeff = 0;\n         z->img_comp[i].coeff = 0;\n      }\n      if (z->img_comp[i].linebuf) {\n         STBI_FREE(z->img_comp[i].linebuf);\n         z->img_comp[i].linebuf = NULL;\n      }\n   }\n   return why;\n}\n\nstatic int stbi__process_frame_header(stbi__jpeg *z, int scan)\n{\n   stbi__context *s = z->s;\n   int Lf,p,i,q, h_max=1,v_max=1,c;\n   Lf = stbi__get16be(s);         if (Lf < 11) return stbi__err(\"bad SOF len\",\"Corrupt JPEG\"); // JPEG\n   p  = stbi__get8(s);            if (p != 8) return stbi__err(\"only 8-bit\",\"JPEG format not supported: 8-bit only\"); // JPEG baseline\n   s->img_y = stbi__get16be(s);   if (s->img_y == 0) return stbi__err(\"no header height\", \"JPEG format not supported: delayed height\"); // Legal, but we don't handle it--but neither does IJG\n   s->img_x = stbi__get16be(s);   if (s->img_x == 0) return stbi__err(\"0 width\",\"Corrupt JPEG\"); // JPEG requires\n   if (s->img_y > STBI_MAX_DIMENSIONS) return stbi__err(\"too large\",\"Very large image (corrupt?)\");\n   if (s->img_x > STBI_MAX_DIMENSIONS) return stbi__err(\"too large\",\"Very large image (corrupt?)\");\n   c = stbi__get8(s);\n   if (c != 3 && c != 1 && c != 4) return stbi__err(\"bad component count\",\"Corrupt JPEG\");\n   s->img_n = c;\n   for (i=0; i < c; ++i) {\n      z->img_comp[i].data = NULL;\n      z->img_comp[i].linebuf = NULL;\n   }\n\n   if (Lf != 8+3*s->img_n) return stbi__err(\"bad SOF len\",\"Corrupt JPEG\");\n\n   z->rgb = 0;\n   for (i=0; i < s->img_n; ++i) {\n      static const unsigned char rgb[3] = { 'R', 'G', 'B' };\n      z->img_comp[i].id = stbi__get8(s);\n      if (s->img_n == 3 && z->img_comp[i].id == rgb[i])\n         ++z->rgb;\n      q = stbi__get8(s);\n      z->img_comp[i].h = (q >> 4);  if (!z->img_comp[i].h || z->img_comp[i].h > 4) return stbi__err(\"bad H\",\"Corrupt JPEG\");\n      z->img_comp[i].v = q & 15;    if (!z->img_comp[i].v || z->img_comp[i].v > 4) return stbi__err(\"bad V\",\"Corrupt JPEG\");\n      z->img_comp[i].tq = stbi__get8(s);  if (z->img_comp[i].tq > 3) return stbi__err(\"bad TQ\",\"Corrupt JPEG\");\n   }\n\n   if (scan != STBI__SCAN_load) return 1;\n\n   if (!stbi__mad3sizes_valid(s->img_x, s->img_y, s->img_n, 0)) return stbi__err(\"too large\", \"Image too large to decode\");\n\n   for (i=0; i < s->img_n; ++i) {\n      if (z->img_comp[i].h > h_max) h_max = z->img_comp[i].h;\n      if (z->img_comp[i].v > v_max) v_max = z->img_comp[i].v;\n   }\n\n   // check that plane subsampling factors are integer ratios; our resamplers can't deal with fractional ratios\n   // and I've never seen a non-corrupted JPEG file actually use them\n   for (i=0; i < s->img_n; ++i) {\n      if (h_max % z->img_comp[i].h != 0) return stbi__err(\"bad H\",\"Corrupt JPEG\");\n      if (v_max % z->img_comp[i].v != 0) return stbi__err(\"bad V\",\"Corrupt JPEG\");\n   }\n\n   // compute interleaved mcu info\n   z->img_h_max = h_max;\n   z->img_v_max = v_max;\n   z->img_mcu_w = h_max * 8;\n   z->img_mcu_h = v_max * 8;\n   // these sizes can't be more than 17 bits\n   z->img_mcu_x = (s->img_x + z->img_mcu_w-1) / z->img_mcu_w;\n   z->img_mcu_y = (s->img_y + z->img_mcu_h-1) / z->img_mcu_h;\n\n   for (i=0; i < s->img_n; ++i) {\n      // number of effective pixels (e.g. for non-interleaved MCU)\n      z->img_comp[i].x = (s->img_x * z->img_comp[i].h + h_max-1) / h_max;\n      z->img_comp[i].y = (s->img_y * z->img_comp[i].v + v_max-1) / v_max;\n      // to simplify generation, we'll allocate enough memory to decode\n      // the bogus oversized data from using interleaved MCUs and their\n      // big blocks (e.g. a 16x16 iMCU on an image of width 33); we won't\n      // discard the extra data until colorspace conversion\n      //\n      // img_mcu_x, img_mcu_y: <=17 bits; comp[i].h and .v are <=4 (checked earlier)\n      // so these muls can't overflow with 32-bit ints (which we require)\n      z->img_comp[i].w2 = z->img_mcu_x * z->img_comp[i].h * 8;\n      z->img_comp[i].h2 = z->img_mcu_y * z->img_comp[i].v * 8;\n      z->img_comp[i].coeff = 0;\n      z->img_comp[i].raw_coeff = 0;\n      z->img_comp[i].linebuf = NULL;\n      z->img_comp[i].raw_data = stbi__malloc_mad2(z->img_comp[i].w2, z->img_comp[i].h2, 15);\n      if (z->img_comp[i].raw_data == NULL)\n         return stbi__free_jpeg_components(z, i+1, stbi__err(\"outofmem\", \"Out of memory\"));\n      // align blocks for idct using mmx/sse\n      z->img_comp[i].data = (stbi_uc*) (((size_t) z->img_comp[i].raw_data + 15) & ~15);\n      if (z->progressive) {\n         // w2, h2 are multiples of 8 (see above)\n         z->img_comp[i].coeff_w = z->img_comp[i].w2 / 8;\n         z->img_comp[i].coeff_h = z->img_comp[i].h2 / 8;\n         z->img_comp[i].raw_coeff = stbi__malloc_mad3(z->img_comp[i].w2, z->img_comp[i].h2, sizeof(short), 15);\n         if (z->img_comp[i].raw_coeff == NULL)\n            return stbi__free_jpeg_components(z, i+1, stbi__err(\"outofmem\", \"Out of memory\"));\n         z->img_comp[i].coeff = (short*) (((size_t) z->img_comp[i].raw_coeff + 15) & ~15);\n      }\n   }\n\n   return 1;\n}\n\n// use comparisons since in some cases we handle more than one case (e.g. SOF)\n#define stbi__DNL(x)         ((x) == 0xdc)\n#define stbi__SOI(x)         ((x) == 0xd8)\n#define stbi__EOI(x)         ((x) == 0xd9)\n#define stbi__SOF(x)         ((x) == 0xc0 || (x) == 0xc1 || (x) == 0xc2)\n#define stbi__SOS(x)         ((x) == 0xda)\n\n#define stbi__SOF_progressive(x)   ((x) == 0xc2)\n\nstatic int stbi__decode_jpeg_header(stbi__jpeg *z, int scan)\n{\n   int m;\n   z->jfif = 0;\n   z->app14_color_transform = -1; // valid values are 0,1,2\n   z->marker = STBI__MARKER_none; // initialize cached marker to empty\n   m = stbi__get_marker(z);\n   if (!stbi__SOI(m)) return stbi__err(\"no SOI\",\"Corrupt JPEG\");\n   if (scan == STBI__SCAN_type) return 1;\n   m = stbi__get_marker(z);\n   while (!stbi__SOF(m)) {\n      if (!stbi__process_marker(z,m)) return 0;\n      m = stbi__get_marker(z);\n      while (m == STBI__MARKER_none) {\n         // some files have extra padding after their blocks, so ok, we'll scan\n         if (stbi__at_eof(z->s)) return stbi__err(\"no SOF\", \"Corrupt JPEG\");\n         m = stbi__get_marker(z);\n      }\n   }\n   z->progressive = stbi__SOF_progressive(m);\n   if (!stbi__process_frame_header(z, scan)) return 0;\n   return 1;\n}\n\nstatic stbi_uc stbi__skip_jpeg_junk_at_end(stbi__jpeg *j)\n{\n   // some JPEGs have junk at end, skip over it but if we find what looks\n   // like a valid marker, resume there\n   while (!stbi__at_eof(j->s)) {\n      stbi_uc x = stbi__get8(j->s);\n      while (x == 0xff) { // might be a marker\n         if (stbi__at_eof(j->s)) return STBI__MARKER_none;\n         x = stbi__get8(j->s);\n         if (x != 0x00 && x != 0xff) {\n            // not a stuffed zero or lead-in to another marker, looks\n            // like an actual marker, return it\n            return x;\n         }\n         // stuffed zero has x=0 now which ends the loop, meaning we go\n         // back to regular scan loop.\n         // repeated 0xff keeps trying to read the next byte of the marker.\n      }\n   }\n   return STBI__MARKER_none;\n}\n\n// decode image to YCbCr format\nstatic int stbi__decode_jpeg_image(stbi__jpeg *j)\n{\n   int m;\n   for (m = 0; m < 4; m++) {\n      j->img_comp[m].raw_data = NULL;\n      j->img_comp[m].raw_coeff = NULL;\n   }\n   j->restart_interval = 0;\n   if (!stbi__decode_jpeg_header(j, STBI__SCAN_load)) return 0;\n   m = stbi__get_marker(j);\n   while (!stbi__EOI(m)) {\n      if (stbi__SOS(m)) {\n         if (!stbi__process_scan_header(j)) return 0;\n         if (!stbi__parse_entropy_coded_data(j)) return 0;\n         if (j->marker == STBI__MARKER_none ) {\n         j->marker = stbi__skip_jpeg_junk_at_end(j);\n            // if we reach eof without hitting a marker, stbi__get_marker() below will fail and we'll eventually return 0\n         }\n         m = stbi__get_marker(j);\n         if (STBI__RESTART(m))\n            m = stbi__get_marker(j);\n      } else if (stbi__DNL(m)) {\n         int Ld = stbi__get16be(j->s);\n         stbi__uint32 NL = stbi__get16be(j->s);\n         if (Ld != 4) return stbi__err(\"bad DNL len\", \"Corrupt JPEG\");\n         if (NL != j->s->img_y) return stbi__err(\"bad DNL height\", \"Corrupt JPEG\");\n         m = stbi__get_marker(j);\n      } else {\n         if (!stbi__process_marker(j, m)) return 1;\n         m = stbi__get_marker(j);\n      }\n   }\n   if (j->progressive)\n      stbi__jpeg_finish(j);\n   return 1;\n}\n\n// static jfif-centered resampling (across block boundaries)\n\ntypedef stbi_uc *(*resample_row_func)(stbi_uc *out, stbi_uc *in0, stbi_uc *in1,\n                                    int w, int hs);\n\n#define stbi__div4(x) ((stbi_uc) ((x) >> 2))\n\nstatic stbi_uc *resample_row_1(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)\n{\n   STBI_NOTUSED(out);\n   STBI_NOTUSED(in_far);\n   STBI_NOTUSED(w);\n   STBI_NOTUSED(hs);\n   return in_near;\n}\n\nstatic stbi_uc* stbi__resample_row_v_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)\n{\n   // need to generate two samples vertically for every one in input\n   int i;\n   STBI_NOTUSED(hs);\n   for (i=0; i < w; ++i)\n      out[i] = stbi__div4(3*in_near[i] + in_far[i] + 2);\n   return out;\n}\n\nstatic stbi_uc*  stbi__resample_row_h_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)\n{\n   // need to generate two samples horizontally for every one in input\n   int i;\n   stbi_uc *input = in_near;\n\n   if (w == 1) {\n      // if only one sample, can't do any interpolation\n      out[0] = out[1] = input[0];\n      return out;\n   }\n\n   out[0] = input[0];\n   out[1] = stbi__div4(input[0]*3 + input[1] + 2);\n   for (i=1; i < w-1; ++i) {\n      int n = 3*input[i]+2;\n      out[i*2+0] = stbi__div4(n+input[i-1]);\n      out[i*2+1] = stbi__div4(n+input[i+1]);\n   }\n   out[i*2+0] = stbi__div4(input[w-2]*3 + input[w-1] + 2);\n   out[i*2+1] = input[w-1];\n\n   STBI_NOTUSED(in_far);\n   STBI_NOTUSED(hs);\n\n   return out;\n}\n\n#define stbi__div16(x) ((stbi_uc) ((x) >> 4))\n\nstatic stbi_uc *stbi__resample_row_hv_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)\n{\n   // need to generate 2x2 samples for every one in input\n   int i,t0,t1;\n   if (w == 1) {\n      out[0] = out[1] = stbi__div4(3*in_near[0] + in_far[0] + 2);\n      return out;\n   }\n\n   t1 = 3*in_near[0] + in_far[0];\n   out[0] = stbi__div4(t1+2);\n   for (i=1; i < w; ++i) {\n      t0 = t1;\n      t1 = 3*in_near[i]+in_far[i];\n      out[i*2-1] = stbi__div16(3*t0 + t1 + 8);\n      out[i*2  ] = stbi__div16(3*t1 + t0 + 8);\n   }\n   out[w*2-1] = stbi__div4(t1+2);\n\n   STBI_NOTUSED(hs);\n\n   return out;\n}\n\n#if defined(STBI_SSE2) || defined(STBI_NEON)\nstatic stbi_uc *stbi__resample_row_hv_2_simd(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)\n{\n   // need to generate 2x2 samples for every one in input\n   int i=0,t0,t1;\n\n   if (w == 1) {\n      out[0] = out[1] = stbi__div4(3*in_near[0] + in_far[0] + 2);\n      return out;\n   }\n\n   t1 = 3*in_near[0] + in_far[0];\n   // process groups of 8 pixels for as long as we can.\n   // note we can't handle the last pixel in a row in this loop\n   // because we need to handle the filter boundary conditions.\n   for (; i < ((w-1) & ~7); i += 8) {\n#if defined(STBI_SSE2)\n      // load and perform the vertical filtering pass\n      // this uses 3*x + y = 4*x + (y - x)\n      __m128i zero  = _mm_setzero_si128();\n      __m128i farb  = _mm_loadl_epi64((__m128i *) (in_far + i));\n      __m128i nearb = _mm_loadl_epi64((__m128i *) (in_near + i));\n      __m128i farw  = _mm_unpacklo_epi8(farb, zero);\n      __m128i nearw = _mm_unpacklo_epi8(nearb, zero);\n      __m128i diff  = _mm_sub_epi16(farw, nearw);\n      __m128i nears = _mm_slli_epi16(nearw, 2);\n      __m128i curr  = _mm_add_epi16(nears, diff); // current row\n\n      // horizontal filter works the same based on shifted vers of current\n      // row. \"prev\" is current row shifted right by 1 pixel; we need to\n      // insert the previous pixel value (from t1).\n      // \"next\" is current row shifted left by 1 pixel, with first pixel\n      // of next block of 8 pixels added in.\n      __m128i prv0 = _mm_slli_si128(curr, 2);\n      __m128i nxt0 = _mm_srli_si128(curr, 2);\n      __m128i prev = _mm_insert_epi16(prv0, t1, 0);\n      __m128i next = _mm_insert_epi16(nxt0, 3*in_near[i+8] + in_far[i+8], 7);\n\n      // horizontal filter, polyphase implementation since it's convenient:\n      // even pixels = 3*cur + prev = cur*4 + (prev - cur)\n      // odd  pixels = 3*cur + next = cur*4 + (next - cur)\n      // note the shared term.\n      __m128i bias  = _mm_set1_epi16(8);\n      __m128i curs = _mm_slli_epi16(curr, 2);\n      __m128i prvd = _mm_sub_epi16(prev, curr);\n      __m128i nxtd = _mm_sub_epi16(next, curr);\n      __m128i curb = _mm_add_epi16(curs, bias);\n      __m128i even = _mm_add_epi16(prvd, curb);\n      __m128i odd  = _mm_add_epi16(nxtd, curb);\n\n      // interleave even and odd pixels, then undo scaling.\n      __m128i int0 = _mm_unpacklo_epi16(even, odd);\n      __m128i int1 = _mm_unpackhi_epi16(even, odd);\n      __m128i de0  = _mm_srli_epi16(int0, 4);\n      __m128i de1  = _mm_srli_epi16(int1, 4);\n\n      // pack and write output\n      __m128i outv = _mm_packus_epi16(de0, de1);\n      _mm_storeu_si128((__m128i *) (out + i*2), outv);\n#elif defined(STBI_NEON)\n      // load and perform the vertical filtering pass\n      // this uses 3*x + y = 4*x + (y - x)\n      uint8x8_t farb  = vld1_u8(in_far + i);\n      uint8x8_t nearb = vld1_u8(in_near + i);\n      int16x8_t diff  = vreinterpretq_s16_u16(vsubl_u8(farb, nearb));\n      int16x8_t nears = vreinterpretq_s16_u16(vshll_n_u8(nearb, 2));\n      int16x8_t curr  = vaddq_s16(nears, diff); // current row\n\n      // horizontal filter works the same based on shifted vers of current\n      // row. \"prev\" is current row shifted right by 1 pixel; we need to\n      // insert the previous pixel value (from t1).\n      // \"next\" is current row shifted left by 1 pixel, with first pixel\n      // of next block of 8 pixels added in.\n      int16x8_t prv0 = vextq_s16(curr, curr, 7);\n      int16x8_t nxt0 = vextq_s16(curr, curr, 1);\n      int16x8_t prev = vsetq_lane_s16(t1, prv0, 0);\n      int16x8_t next = vsetq_lane_s16(3*in_near[i+8] + in_far[i+8], nxt0, 7);\n\n      // horizontal filter, polyphase implementation since it's convenient:\n      // even pixels = 3*cur + prev = cur*4 + (prev - cur)\n      // odd  pixels = 3*cur + next = cur*4 + (next - cur)\n      // note the shared term.\n      int16x8_t curs = vshlq_n_s16(curr, 2);\n      int16x8_t prvd = vsubq_s16(prev, curr);\n      int16x8_t nxtd = vsubq_s16(next, curr);\n      int16x8_t even = vaddq_s16(curs, prvd);\n      int16x8_t odd  = vaddq_s16(curs, nxtd);\n\n      // undo scaling and round, then store with even/odd phases interleaved\n      uint8x8x2_t o;\n      o.val[0] = vqrshrun_n_s16(even, 4);\n      o.val[1] = vqrshrun_n_s16(odd,  4);\n      vst2_u8(out + i*2, o);\n#endif\n\n      // \"previous\" value for next iter\n      t1 = 3*in_near[i+7] + in_far[i+7];\n   }\n\n   t0 = t1;\n   t1 = 3*in_near[i] + in_far[i];\n   out[i*2] = stbi__div16(3*t1 + t0 + 8);\n\n   for (++i; i < w; ++i) {\n      t0 = t1;\n      t1 = 3*in_near[i]+in_far[i];\n      out[i*2-1] = stbi__div16(3*t0 + t1 + 8);\n      out[i*2  ] = stbi__div16(3*t1 + t0 + 8);\n   }\n   out[w*2-1] = stbi__div4(t1+2);\n\n   STBI_NOTUSED(hs);\n\n   return out;\n}\n#endif\n\nstatic stbi_uc *stbi__resample_row_generic(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)\n{\n   // resample with nearest-neighbor\n   int i,j;\n   STBI_NOTUSED(in_far);\n   for (i=0; i < w; ++i)\n      for (j=0; j < hs; ++j)\n         out[i*hs+j] = in_near[i];\n   return out;\n}\n\n// this is a reduced-precision calculation of YCbCr-to-RGB introduced\n// to make sure the code produces the same results in both SIMD and scalar\n#define stbi__float2fixed(x)  (((int) ((x) * 4096.0f + 0.5f)) << 8)\nstatic void stbi__YCbCr_to_RGB_row(stbi_uc *out, const stbi_uc *y, const stbi_uc *pcb, const stbi_uc *pcr, int count, int step)\n{\n   int i;\n   for (i=0; i < count; ++i) {\n      int y_fixed = (y[i] << 20) + (1<<19); // rounding\n      int r,g,b;\n      int cr = pcr[i] - 128;\n      int cb = pcb[i] - 128;\n      r = y_fixed +  cr* stbi__float2fixed(1.40200f);\n      g = y_fixed + (cr*-stbi__float2fixed(0.71414f)) + ((cb*-stbi__float2fixed(0.34414f)) & 0xffff0000);\n      b = y_fixed                                     +   cb* stbi__float2fixed(1.77200f);\n      r >>= 20;\n      g >>= 20;\n      b >>= 20;\n      if ((unsigned) r > 255) { if (r < 0) r = 0; else r = 255; }\n      if ((unsigned) g > 255) { if (g < 0) g = 0; else g = 255; }\n      if ((unsigned) b > 255) { if (b < 0) b = 0; else b = 255; }\n      out[0] = (stbi_uc)r;\n      out[1] = (stbi_uc)g;\n      out[2] = (stbi_uc)b;\n      out[3] = 255;\n      out += step;\n   }\n}\n\n#if defined(STBI_SSE2) || defined(STBI_NEON)\nstatic void stbi__YCbCr_to_RGB_simd(stbi_uc *out, stbi_uc const *y, stbi_uc const *pcb, stbi_uc const *pcr, int count, int step)\n{\n   int i = 0;\n\n#ifdef STBI_SSE2\n   // step == 3 is pretty ugly on the final interleave, and i'm not convinced\n   // it's useful in practice (you wouldn't use it for textures, for example).\n   // so just accelerate step == 4 case.\n   if (step == 4) {\n      // this is a fairly straightforward implementation and not super-optimized.\n      __m128i signflip  = _mm_set1_epi8(-0x80);\n      __m128i cr_const0 = _mm_set1_epi16(   (short) ( 1.40200f*4096.0f+0.5f));\n      __m128i cr_const1 = _mm_set1_epi16( - (short) ( 0.71414f*4096.0f+0.5f));\n      __m128i cb_const0 = _mm_set1_epi16( - (short) ( 0.34414f*4096.0f+0.5f));\n      __m128i cb_const1 = _mm_set1_epi16(   (short) ( 1.77200f*4096.0f+0.5f));\n      __m128i y_bias = _mm_set1_epi8((char) (unsigned char) 128);\n      __m128i xw = _mm_set1_epi16(255); // alpha channel\n\n      for (; i+7 < count; i += 8) {\n         // load\n         __m128i y_bytes = _mm_loadl_epi64((__m128i *) (y+i));\n         __m128i cr_bytes = _mm_loadl_epi64((__m128i *) (pcr+i));\n         __m128i cb_bytes = _mm_loadl_epi64((__m128i *) (pcb+i));\n         __m128i cr_biased = _mm_xor_si128(cr_bytes, signflip); // -128\n         __m128i cb_biased = _mm_xor_si128(cb_bytes, signflip); // -128\n\n         // unpack to short (and left-shift cr, cb by 8)\n         __m128i yw  = _mm_unpacklo_epi8(y_bias, y_bytes);\n         __m128i crw = _mm_unpacklo_epi8(_mm_setzero_si128(), cr_biased);\n         __m128i cbw = _mm_unpacklo_epi8(_mm_setzero_si128(), cb_biased);\n\n         // color transform\n         __m128i yws = _mm_srli_epi16(yw, 4);\n         __m128i cr0 = _mm_mulhi_epi16(cr_const0, crw);\n         __m128i cb0 = _mm_mulhi_epi16(cb_const0, cbw);\n         __m128i cb1 = _mm_mulhi_epi16(cbw, cb_const1);\n         __m128i cr1 = _mm_mulhi_epi16(crw, cr_const1);\n         __m128i rws = _mm_add_epi16(cr0, yws);\n         __m128i gwt = _mm_add_epi16(cb0, yws);\n         __m128i bws = _mm_add_epi16(yws, cb1);\n         __m128i gws = _mm_add_epi16(gwt, cr1);\n\n         // descale\n         __m128i rw = _mm_srai_epi16(rws, 4);\n         __m128i bw = _mm_srai_epi16(bws, 4);\n         __m128i gw = _mm_srai_epi16(gws, 4);\n\n         // back to byte, set up for transpose\n         __m128i brb = _mm_packus_epi16(rw, bw);\n         __m128i gxb = _mm_packus_epi16(gw, xw);\n\n         // transpose to interleave channels\n         __m128i t0 = _mm_unpacklo_epi8(brb, gxb);\n         __m128i t1 = _mm_unpackhi_epi8(brb, gxb);\n         __m128i o0 = _mm_unpacklo_epi16(t0, t1);\n         __m128i o1 = _mm_unpackhi_epi16(t0, t1);\n\n         // store\n         _mm_storeu_si128((__m128i *) (out + 0), o0);\n         _mm_storeu_si128((__m128i *) (out + 16), o1);\n         out += 32;\n      }\n   }\n#endif\n\n#ifdef STBI_NEON\n   // in this version, step=3 support would be easy to add. but is there demand?\n   if (step == 4) {\n      // this is a fairly straightforward implementation and not super-optimized.\n      uint8x8_t signflip = vdup_n_u8(0x80);\n      int16x8_t cr_const0 = vdupq_n_s16(   (short) ( 1.40200f*4096.0f+0.5f));\n      int16x8_t cr_const1 = vdupq_n_s16( - (short) ( 0.71414f*4096.0f+0.5f));\n      int16x8_t cb_const0 = vdupq_n_s16( - (short) ( 0.34414f*4096.0f+0.5f));\n      int16x8_t cb_const1 = vdupq_n_s16(   (short) ( 1.77200f*4096.0f+0.5f));\n\n      for (; i+7 < count; i += 8) {\n         // load\n         uint8x8_t y_bytes  = vld1_u8(y + i);\n         uint8x8_t cr_bytes = vld1_u8(pcr + i);\n         uint8x8_t cb_bytes = vld1_u8(pcb + i);\n         int8x8_t cr_biased = vreinterpret_s8_u8(vsub_u8(cr_bytes, signflip));\n         int8x8_t cb_biased = vreinterpret_s8_u8(vsub_u8(cb_bytes, signflip));\n\n         // expand to s16\n         int16x8_t yws = vreinterpretq_s16_u16(vshll_n_u8(y_bytes, 4));\n         int16x8_t crw = vshll_n_s8(cr_biased, 7);\n         int16x8_t cbw = vshll_n_s8(cb_biased, 7);\n\n         // color transform\n         int16x8_t cr0 = vqdmulhq_s16(crw, cr_const0);\n         int16x8_t cb0 = vqdmulhq_s16(cbw, cb_const0);\n         int16x8_t cr1 = vqdmulhq_s16(crw, cr_const1);\n         int16x8_t cb1 = vqdmulhq_s16(cbw, cb_const1);\n         int16x8_t rws = vaddq_s16(yws, cr0);\n         int16x8_t gws = vaddq_s16(vaddq_s16(yws, cb0), cr1);\n         int16x8_t bws = vaddq_s16(yws, cb1);\n\n         // undo scaling, round, convert to byte\n         uint8x8x4_t o;\n         o.val[0] = vqrshrun_n_s16(rws, 4);\n         o.val[1] = vqrshrun_n_s16(gws, 4);\n         o.val[2] = vqrshrun_n_s16(bws, 4);\n         o.val[3] = vdup_n_u8(255);\n\n         // store, interleaving r/g/b/a\n         vst4_u8(out, o);\n         out += 8*4;\n      }\n   }\n#endif\n\n   for (; i < count; ++i) {\n      int y_fixed = (y[i] << 20) + (1<<19); // rounding\n      int r,g,b;\n      int cr = pcr[i] - 128;\n      int cb = pcb[i] - 128;\n      r = y_fixed + cr* stbi__float2fixed(1.40200f);\n      g = y_fixed + cr*-stbi__float2fixed(0.71414f) + ((cb*-stbi__float2fixed(0.34414f)) & 0xffff0000);\n      b = y_fixed                                   +   cb* stbi__float2fixed(1.77200f);\n      r >>= 20;\n      g >>= 20;\n      b >>= 20;\n      if ((unsigned) r > 255) { if (r < 0) r = 0; else r = 255; }\n      if ((unsigned) g > 255) { if (g < 0) g = 0; else g = 255; }\n      if ((unsigned) b > 255) { if (b < 0) b = 0; else b = 255; }\n      out[0] = (stbi_uc)r;\n      out[1] = (stbi_uc)g;\n      out[2] = (stbi_uc)b;\n      out[3] = 255;\n      out += step;\n   }\n}\n#endif\n\n// set up the kernels\nstatic void stbi__setup_jpeg(stbi__jpeg *j)\n{\n   j->idct_block_kernel = stbi__idct_block;\n   j->YCbCr_to_RGB_kernel = stbi__YCbCr_to_RGB_row;\n   j->resample_row_hv_2_kernel = stbi__resample_row_hv_2;\n\n#ifdef STBI_SSE2\n   if (stbi__sse2_available()) {\n      j->idct_block_kernel = stbi__idct_simd;\n      j->YCbCr_to_RGB_kernel = stbi__YCbCr_to_RGB_simd;\n      j->resample_row_hv_2_kernel = stbi__resample_row_hv_2_simd;\n   }\n#endif\n\n#ifdef STBI_NEON\n   j->idct_block_kernel = stbi__idct_simd;\n   j->YCbCr_to_RGB_kernel = stbi__YCbCr_to_RGB_simd;\n   j->resample_row_hv_2_kernel = stbi__resample_row_hv_2_simd;\n#endif\n}\n\n// clean up the temporary component buffers\nstatic void stbi__cleanup_jpeg(stbi__jpeg *j)\n{\n   stbi__free_jpeg_components(j, j->s->img_n, 0);\n}\n\ntypedef struct\n{\n   resample_row_func resample;\n   stbi_uc *line0,*line1;\n   int hs,vs;   // expansion factor in each axis\n   int w_lores; // horizontal pixels pre-expansion\n   int ystep;   // how far through vertical expansion we are\n   int ypos;    // which pre-expansion row we're on\n} stbi__resample;\n\n// fast 0..255 * 0..255 => 0..255 rounded multiplication\nstatic stbi_uc stbi__blinn_8x8(stbi_uc x, stbi_uc y)\n{\n   unsigned int t = x*y + 128;\n   return (stbi_uc) ((t + (t >>8)) >> 8);\n}\n\nstatic stbi_uc *load_jpeg_image(stbi__jpeg *z, int *out_x, int *out_y, int *comp, int req_comp)\n{\n   int n, decode_n, is_rgb;\n   z->s->img_n = 0; // make stbi__cleanup_jpeg safe\n\n   // validate req_comp\n   if (req_comp < 0 || req_comp > 4) return stbi__errpuc(\"bad req_comp\", \"Internal error\");\n\n   // load a jpeg image from whichever source, but leave in YCbCr format\n   if (!stbi__decode_jpeg_image(z)) { stbi__cleanup_jpeg(z); return NULL; }\n\n   // determine actual number of components to generate\n   n = req_comp ? req_comp : z->s->img_n >= 3 ? 3 : 1;\n\n   is_rgb = z->s->img_n == 3 && (z->rgb == 3 || (z->app14_color_transform == 0 && !z->jfif));\n\n   if (z->s->img_n == 3 && n < 3 && !is_rgb)\n      decode_n = 1;\n   else\n      decode_n = z->s->img_n;\n\n   // nothing to do if no components requested; check this now to avoid\n   // accessing uninitialized coutput[0] later\n   if (decode_n <= 0) { stbi__cleanup_jpeg(z); return NULL; }\n\n   // resample and color-convert\n   {\n      int k;\n      unsigned int i,j;\n      stbi_uc *output;\n      stbi_uc *coutput[4] = { NULL, NULL, NULL, NULL };\n\n      stbi__resample res_comp[4];\n\n      for (k=0; k < decode_n; ++k) {\n         stbi__resample *r = &res_comp[k];\n\n         // allocate line buffer big enough for upsampling off the edges\n         // with upsample factor of 4\n         z->img_comp[k].linebuf = (stbi_uc *) stbi__malloc(z->s->img_x + 3);\n         if (!z->img_comp[k].linebuf) { stbi__cleanup_jpeg(z); return stbi__errpuc(\"outofmem\", \"Out of memory\"); }\n\n         r->hs      = z->img_h_max / z->img_comp[k].h;\n         r->vs      = z->img_v_max / z->img_comp[k].v;\n         r->ystep   = r->vs >> 1;\n         r->w_lores = (z->s->img_x + r->hs-1) / r->hs;\n         r->ypos    = 0;\n         r->line0   = r->line1 = z->img_comp[k].data;\n\n         if      (r->hs == 1 && r->vs == 1) r->resample = resample_row_1;\n         else if (r->hs == 1 && r->vs == 2) r->resample = stbi__resample_row_v_2;\n         else if (r->hs == 2 && r->vs == 1) r->resample = stbi__resample_row_h_2;\n         else if (r->hs == 2 && r->vs == 2) r->resample = z->resample_row_hv_2_kernel;\n         else                               r->resample = stbi__resample_row_generic;\n      }\n\n      // can't error after this so, this is safe\n      output = (stbi_uc *) stbi__malloc_mad3(n, z->s->img_x, z->s->img_y, 1);\n      if (!output) { stbi__cleanup_jpeg(z); return stbi__errpuc(\"outofmem\", \"Out of memory\"); }\n\n      // now go ahead and resample\n      for (j=0; j < z->s->img_y; ++j) {\n         stbi_uc *out = output + n * z->s->img_x * j;\n         for (k=0; k < decode_n; ++k) {\n            stbi__resample *r = &res_comp[k];\n            int y_bot = r->ystep >= (r->vs >> 1);\n            coutput[k] = r->resample(z->img_comp[k].linebuf,\n                                     y_bot ? r->line1 : r->line0,\n                                     y_bot ? r->line0 : r->line1,\n                                     r->w_lores, r->hs);\n            if (++r->ystep >= r->vs) {\n               r->ystep = 0;\n               r->line0 = r->line1;\n               if (++r->ypos < z->img_comp[k].y)\n                  r->line1 += z->img_comp[k].w2;\n            }\n         }\n         if (n >= 3) {\n            stbi_uc *y = coutput[0];\n            if (z->s->img_n == 3) {\n               if (is_rgb) {\n                  for (i=0; i < z->s->img_x; ++i) {\n                     out[0] = y[i];\n                     out[1] = coutput[1][i];\n                     out[2] = coutput[2][i];\n                     out[3] = 255;\n                     out += n;\n                  }\n               } else {\n                  z->YCbCr_to_RGB_kernel(out, y, coutput[1], coutput[2], z->s->img_x, n);\n               }\n            } else if (z->s->img_n == 4) {\n               if (z->app14_color_transform == 0) { // CMYK\n                  for (i=0; i < z->s->img_x; ++i) {\n                     stbi_uc m = coutput[3][i];\n                     out[0] = stbi__blinn_8x8(coutput[0][i], m);\n                     out[1] = stbi__blinn_8x8(coutput[1][i], m);\n                     out[2] = stbi__blinn_8x8(coutput[2][i], m);\n                     out[3] = 255;\n                     out += n;\n                  }\n               } else if (z->app14_color_transform == 2) { // YCCK\n                  z->YCbCr_to_RGB_kernel(out, y, coutput[1], coutput[2], z->s->img_x, n);\n                  for (i=0; i < z->s->img_x; ++i) {\n                     stbi_uc m = coutput[3][i];\n                     out[0] = stbi__blinn_8x8(255 - out[0], m);\n                     out[1] = stbi__blinn_8x8(255 - out[1], m);\n                     out[2] = stbi__blinn_8x8(255 - out[2], m);\n                     out += n;\n                  }\n               } else { // YCbCr + alpha?  Ignore the fourth channel for now\n                  z->YCbCr_to_RGB_kernel(out, y, coutput[1], coutput[2], z->s->img_x, n);\n               }\n            } else\n               for (i=0; i < z->s->img_x; ++i) {\n                  out[0] = out[1] = out[2] = y[i];\n                  out[3] = 255; // not used if n==3\n                  out += n;\n               }\n         } else {\n            if (is_rgb) {\n               if (n == 1)\n                  for (i=0; i < z->s->img_x; ++i)\n                     *out++ = stbi__compute_y(coutput[0][i], coutput[1][i], coutput[2][i]);\n               else {\n                  for (i=0; i < z->s->img_x; ++i, out += 2) {\n                     out[0] = stbi__compute_y(coutput[0][i], coutput[1][i], coutput[2][i]);\n                     out[1] = 255;\n                  }\n               }\n            } else if (z->s->img_n == 4 && z->app14_color_transform == 0) {\n               for (i=0; i < z->s->img_x; ++i) {\n                  stbi_uc m = coutput[3][i];\n                  stbi_uc r = stbi__blinn_8x8(coutput[0][i], m);\n                  stbi_uc g = stbi__blinn_8x8(coutput[1][i], m);\n                  stbi_uc b = stbi__blinn_8x8(coutput[2][i], m);\n                  out[0] = stbi__compute_y(r, g, b);\n                  out[1] = 255;\n                  out += n;\n               }\n            } else if (z->s->img_n == 4 && z->app14_color_transform == 2) {\n               for (i=0; i < z->s->img_x; ++i) {\n                  out[0] = stbi__blinn_8x8(255 - coutput[0][i], coutput[3][i]);\n                  out[1] = 255;\n                  out += n;\n               }\n            } else {\n               stbi_uc *y = coutput[0];\n               if (n == 1)\n                  for (i=0; i < z->s->img_x; ++i) out[i] = y[i];\n               else\n                  for (i=0; i < z->s->img_x; ++i) { *out++ = y[i]; *out++ = 255; }\n            }\n         }\n      }\n      stbi__cleanup_jpeg(z);\n      *out_x = z->s->img_x;\n      *out_y = z->s->img_y;\n      if (comp) *comp = z->s->img_n >= 3 ? 3 : 1; // report original components, not output\n      return output;\n   }\n}\n\nstatic void *stbi__jpeg_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)\n{\n   unsigned char* result;\n   stbi__jpeg* j = (stbi__jpeg*) stbi__malloc(sizeof(stbi__jpeg));\n   if (!j) return stbi__errpuc(\"outofmem\", \"Out of memory\");\n   memset(j, 0, sizeof(stbi__jpeg));\n   STBI_NOTUSED(ri);\n   j->s = s;\n   stbi__setup_jpeg(j);\n   result = load_jpeg_image(j, x,y,comp,req_comp);\n   STBI_FREE(j);\n   return result;\n}\n\nstatic int stbi__jpeg_test(stbi__context *s)\n{\n   int r;\n   stbi__jpeg* j = (stbi__jpeg*)stbi__malloc(sizeof(stbi__jpeg));\n   if (!j) return stbi__err(\"outofmem\", \"Out of memory\");\n   memset(j, 0, sizeof(stbi__jpeg));\n   j->s = s;\n   stbi__setup_jpeg(j);\n   r = stbi__decode_jpeg_header(j, STBI__SCAN_type);\n   stbi__rewind(s);\n   STBI_FREE(j);\n   return r;\n}\n\nstatic int stbi__jpeg_info_raw(stbi__jpeg *j, int *x, int *y, int *comp)\n{\n   if (!stbi__decode_jpeg_header(j, STBI__SCAN_header)) {\n      stbi__rewind( j->s );\n      return 0;\n   }\n   if (x) *x = j->s->img_x;\n   if (y) *y = j->s->img_y;\n   if (comp) *comp = j->s->img_n >= 3 ? 3 : 1;\n   return 1;\n}\n\nstatic int stbi__jpeg_info(stbi__context *s, int *x, int *y, int *comp)\n{\n   int result;\n   stbi__jpeg* j = (stbi__jpeg*) (stbi__malloc(sizeof(stbi__jpeg)));\n   if (!j) return stbi__err(\"outofmem\", \"Out of memory\");\n   memset(j, 0, sizeof(stbi__jpeg));\n   j->s = s;\n   result = stbi__jpeg_info_raw(j, x, y, comp);\n   STBI_FREE(j);\n   return result;\n}\n#endif\n\n// public domain zlib decode    v0.2  Sean Barrett 2006-11-18\n//    simple implementation\n//      - all input must be provided in an upfront buffer\n//      - all output is written to a single output buffer (can malloc/realloc)\n//    performance\n//      - fast huffman\n\n#ifndef STBI_NO_ZLIB\n\n// fast-way is faster to check than jpeg huffman, but slow way is slower\n#define STBI__ZFAST_BITS  9 // accelerate all cases in default tables\n#define STBI__ZFAST_MASK  ((1 << STBI__ZFAST_BITS) - 1)\n#define STBI__ZNSYMS 288 // number of symbols in literal/length alphabet\n\n// zlib-style huffman encoding\n// (jpegs packs from left, zlib from right, so can't share code)\ntypedef struct\n{\n   stbi__uint16 fast[1 << STBI__ZFAST_BITS];\n   stbi__uint16 firstcode[16];\n   int maxcode[17];\n   stbi__uint16 firstsymbol[16];\n   stbi_uc  size[STBI__ZNSYMS];\n   stbi__uint16 value[STBI__ZNSYMS];\n} stbi__zhuffman;\n\nstbi_inline static int stbi__bitreverse16(int n)\n{\n  n = ((n & 0xAAAA) >>  1) | ((n & 0x5555) << 1);\n  n = ((n & 0xCCCC) >>  2) | ((n & 0x3333) << 2);\n  n = ((n & 0xF0F0) >>  4) | ((n & 0x0F0F) << 4);\n  n = ((n & 0xFF00) >>  8) | ((n & 0x00FF) << 8);\n  return n;\n}\n\nstbi_inline static int stbi__bit_reverse(int v, int bits)\n{\n   STBI_ASSERT(bits <= 16);\n   // to bit reverse n bits, reverse 16 and shift\n   // e.g. 11 bits, bit reverse and shift away 5\n   return stbi__bitreverse16(v) >> (16-bits);\n}\n\nstatic int stbi__zbuild_huffman(stbi__zhuffman *z, const stbi_uc *sizelist, int num)\n{\n   int i,k=0;\n   int code, next_code[16], sizes[17];\n\n   // DEFLATE spec for generating codes\n   memset(sizes, 0, sizeof(sizes));\n   memset(z->fast, 0, sizeof(z->fast));\n   for (i=0; i < num; ++i)\n      ++sizes[sizelist[i]];\n   sizes[0] = 0;\n   for (i=1; i < 16; ++i)\n      if (sizes[i] > (1 << i))\n         return stbi__err(\"bad sizes\", \"Corrupt PNG\");\n   code = 0;\n   for (i=1; i < 16; ++i) {\n      next_code[i] = code;\n      z->firstcode[i] = (stbi__uint16) code;\n      z->firstsymbol[i] = (stbi__uint16) k;\n      code = (code + sizes[i]);\n      if (sizes[i])\n         if (code-1 >= (1 << i)) return stbi__err(\"bad codelengths\",\"Corrupt PNG\");\n      z->maxcode[i] = code << (16-i); // preshift for inner loop\n      code <<= 1;\n      k += sizes[i];\n   }\n   z->maxcode[16] = 0x10000; // sentinel\n   for (i=0; i < num; ++i) {\n      int s = sizelist[i];\n      if (s) {\n         int c = next_code[s] - z->firstcode[s] + z->firstsymbol[s];\n         stbi__uint16 fastv = (stbi__uint16) ((s << 9) | i);\n         z->size [c] = (stbi_uc     ) s;\n         z->value[c] = (stbi__uint16) i;\n         if (s <= STBI__ZFAST_BITS) {\n            int j = stbi__bit_reverse(next_code[s],s);\n            while (j < (1 << STBI__ZFAST_BITS)) {\n               z->fast[j] = fastv;\n               j += (1 << s);\n            }\n         }\n         ++next_code[s];\n      }\n   }\n   return 1;\n}\n\n// zlib-from-memory implementation for PNG reading\n//    because PNG allows splitting the zlib stream arbitrarily,\n//    and it's annoying structurally to have PNG call ZLIB call PNG,\n//    we require PNG read all the IDATs and combine them into a single\n//    memory buffer\n\ntypedef struct\n{\n   stbi_uc *zbuffer, *zbuffer_end;\n   int num_bits;\n   int hit_zeof_once;\n   stbi__uint32 code_buffer;\n\n   char *zout;\n   char *zout_start;\n   char *zout_end;\n   int   z_expandable;\n\n   stbi__zhuffman z_length, z_distance;\n} stbi__zbuf;\n\nstbi_inline static int stbi__zeof(stbi__zbuf *z)\n{\n   return (z->zbuffer >= z->zbuffer_end);\n}\n\nstbi_inline static stbi_uc stbi__zget8(stbi__zbuf *z)\n{\n   return stbi__zeof(z) ? 0 : *z->zbuffer++;\n}\n\nstatic void stbi__fill_bits(stbi__zbuf *z)\n{\n   do {\n      if (z->code_buffer >= (1U << z->num_bits)) {\n        z->zbuffer = z->zbuffer_end;  /* treat this as EOF so we fail. */\n        return;\n      }\n      z->code_buffer |= (unsigned int) stbi__zget8(z) << z->num_bits;\n      z->num_bits += 8;\n   } while (z->num_bits <= 24);\n}\n\nstbi_inline static unsigned int stbi__zreceive(stbi__zbuf *z, int n)\n{\n   unsigned int k;\n   if (z->num_bits < n) stbi__fill_bits(z);\n   k = z->code_buffer & ((1 << n) - 1);\n   z->code_buffer >>= n;\n   z->num_bits -= n;\n   return k;\n}\n\nstatic int stbi__zhuffman_decode_slowpath(stbi__zbuf *a, stbi__zhuffman *z)\n{\n   int b,s,k;\n   // not resolved by fast table, so compute it the slow way\n   // use jpeg approach, which requires MSbits at top\n   k = stbi__bit_reverse(a->code_buffer, 16);\n   for (s=STBI__ZFAST_BITS+1; ; ++s)\n      if (k < z->maxcode[s])\n         break;\n   if (s >= 16) return -1; // invalid code!\n   // code size is s, so:\n   b = (k >> (16-s)) - z->firstcode[s] + z->firstsymbol[s];\n   if (b >= STBI__ZNSYMS) return -1; // some data was corrupt somewhere!\n   if (z->size[b] != s) return -1;  // was originally an assert, but report failure instead.\n   a->code_buffer >>= s;\n   a->num_bits -= s;\n   return z->value[b];\n}\n\nstbi_inline static int stbi__zhuffman_decode(stbi__zbuf *a, stbi__zhuffman *z)\n{\n   int b,s;\n   if (a->num_bits < 16) {\n      if (stbi__zeof(a)) {\n         if (!a->hit_zeof_once) {\n            // This is the first time we hit eof, insert 16 extra padding btis\n            // to allow us to keep going; if we actually consume any of them\n            // though, that is invalid data. This is caught later.\n            a->hit_zeof_once = 1;\n            a->num_bits += 16; // add 16 implicit zero bits\n         } else {\n            // We already inserted our extra 16 padding bits and are again\n            // out, this stream is actually prematurely terminated.\n            return -1;\n         }\n      } else {\n         stbi__fill_bits(a);\n      }\n   }\n   b = z->fast[a->code_buffer & STBI__ZFAST_MASK];\n   if (b) {\n      s = b >> 9;\n      a->code_buffer >>= s;\n      a->num_bits -= s;\n      return b & 511;\n   }\n   return stbi__zhuffman_decode_slowpath(a, z);\n}\n\nstatic int stbi__zexpand(stbi__zbuf *z, char *zout, int n)  // need to make room for n bytes\n{\n   char *q;\n   unsigned int cur, limit, old_limit;\n   z->zout = zout;\n   if (!z->z_expandable) return stbi__err(\"output buffer limit\",\"Corrupt PNG\");\n   cur   = (unsigned int) (z->zout - z->zout_start);\n   limit = old_limit = (unsigned) (z->zout_end - z->zout_start);\n   if (UINT_MAX - cur < (unsigned) n) return stbi__err(\"outofmem\", \"Out of memory\");\n   while (cur + n > limit) {\n      if(limit > UINT_MAX / 2) return stbi__err(\"outofmem\", \"Out of memory\");\n      limit *= 2;\n   }\n   q = (char *) STBI_REALLOC_SIZED(z->zout_start, old_limit, limit);\n   STBI_NOTUSED(old_limit);\n   if (q == NULL) return stbi__err(\"outofmem\", \"Out of memory\");\n   z->zout_start = q;\n   z->zout       = q + cur;\n   z->zout_end   = q + limit;\n   return 1;\n}\n\nstatic const int stbi__zlength_base[31] = {\n   3,4,5,6,7,8,9,10,11,13,\n   15,17,19,23,27,31,35,43,51,59,\n   67,83,99,115,131,163,195,227,258,0,0 };\n\nstatic const int stbi__zlength_extra[31]=\n{ 0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0 };\n\nstatic const int stbi__zdist_base[32] = { 1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,\n257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0};\n\nstatic const int stbi__zdist_extra[32] =\n{ 0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13};\n\nstatic int stbi__parse_huffman_block(stbi__zbuf *a)\n{\n   char *zout = a->zout;\n   for(;;) {\n      int z = stbi__zhuffman_decode(a, &a->z_length);\n      if (z < 256) {\n         if (z < 0) return stbi__err(\"bad huffman code\",\"Corrupt PNG\"); // error in huffman codes\n         if (zout >= a->zout_end) {\n            if (!stbi__zexpand(a, zout, 1)) return 0;\n            zout = a->zout;\n         }\n         *zout++ = (char) z;\n      } else {\n         stbi_uc *p;\n         int len,dist;\n         if (z == 256) {\n            a->zout = zout;\n            if (a->hit_zeof_once && a->num_bits < 16) {\n               // The first time we hit zeof, we inserted 16 extra zero bits into our bit\n               // buffer so the decoder can just do its speculative decoding. But if we\n               // actually consumed any of those bits (which is the case when num_bits < 16),\n               // the stream actually read past the end so it is malformed.\n               return stbi__err(\"unexpected end\",\"Corrupt PNG\");\n            }\n            return 1;\n         }\n         if (z >= 286) return stbi__err(\"bad huffman code\",\"Corrupt PNG\"); // per DEFLATE, length codes 286 and 287 must not appear in compressed data\n         z -= 257;\n         len = stbi__zlength_base[z];\n         if (stbi__zlength_extra[z]) len += stbi__zreceive(a, stbi__zlength_extra[z]);\n         z = stbi__zhuffman_decode(a, &a->z_distance);\n         if (z < 0 || z >= 30) return stbi__err(\"bad huffman code\",\"Corrupt PNG\"); // per DEFLATE, distance codes 30 and 31 must not appear in compressed data\n         dist = stbi__zdist_base[z];\n         if (stbi__zdist_extra[z]) dist += stbi__zreceive(a, stbi__zdist_extra[z]);\n         if (zout - a->zout_start < dist) return stbi__err(\"bad dist\",\"Corrupt PNG\");\n         if (len > a->zout_end - zout) {\n            if (!stbi__zexpand(a, zout, len)) return 0;\n            zout = a->zout;\n         }\n         p = (stbi_uc *) (zout - dist);\n         if (dist == 1) { // run of one byte; common in images.\n            stbi_uc v = *p;\n            if (len) { do *zout++ = v; while (--len); }\n         } else {\n            if (len) { do *zout++ = *p++; while (--len); }\n         }\n      }\n   }\n}\n\nstatic int stbi__compute_huffman_codes(stbi__zbuf *a)\n{\n   static const stbi_uc length_dezigzag[19] = { 16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15 };\n   stbi__zhuffman z_codelength;\n   stbi_uc lencodes[286+32+137];//padding for maximum single op\n   stbi_uc codelength_sizes[19];\n   int i,n;\n\n   int hlit  = stbi__zreceive(a,5) + 257;\n   int hdist = stbi__zreceive(a,5) + 1;\n   int hclen = stbi__zreceive(a,4) + 4;\n   int ntot  = hlit + hdist;\n\n   memset(codelength_sizes, 0, sizeof(codelength_sizes));\n   for (i=0; i < hclen; ++i) {\n      int s = stbi__zreceive(a,3);\n      codelength_sizes[length_dezigzag[i]] = (stbi_uc) s;\n   }\n   if (!stbi__zbuild_huffman(&z_codelength, codelength_sizes, 19)) return 0;\n\n   n = 0;\n   while (n < ntot) {\n      int c = stbi__zhuffman_decode(a, &z_codelength);\n      if (c < 0 || c >= 19) return stbi__err(\"bad codelengths\", \"Corrupt PNG\");\n      if (c < 16)\n         lencodes[n++] = (stbi_uc) c;\n      else {\n         stbi_uc fill = 0;\n         if (c == 16) {\n            c = stbi__zreceive(a,2)+3;\n            if (n == 0) return stbi__err(\"bad codelengths\", \"Corrupt PNG\");\n            fill = lencodes[n-1];\n         } else if (c == 17) {\n            c = stbi__zreceive(a,3)+3;\n         } else if (c == 18) {\n            c = stbi__zreceive(a,7)+11;\n         } else {\n            return stbi__err(\"bad codelengths\", \"Corrupt PNG\");\n         }\n         if (ntot - n < c) return stbi__err(\"bad codelengths\", \"Corrupt PNG\");\n         memset(lencodes+n, fill, c);\n         n += c;\n      }\n   }\n   if (n != ntot) return stbi__err(\"bad codelengths\",\"Corrupt PNG\");\n   if (!stbi__zbuild_huffman(&a->z_length, lencodes, hlit)) return 0;\n   if (!stbi__zbuild_huffman(&a->z_distance, lencodes+hlit, hdist)) return 0;\n   return 1;\n}\n\nstatic int stbi__parse_uncompressed_block(stbi__zbuf *a)\n{\n   stbi_uc header[4];\n   int len,nlen,k;\n   if (a->num_bits & 7)\n      stbi__zreceive(a, a->num_bits & 7); // discard\n   // drain the bit-packed data into header\n   k = 0;\n   while (a->num_bits > 0) {\n      header[k++] = (stbi_uc) (a->code_buffer & 255); // suppress MSVC run-time check\n      a->code_buffer >>= 8;\n      a->num_bits -= 8;\n   }\n   if (a->num_bits < 0) return stbi__err(\"zlib corrupt\",\"Corrupt PNG\");\n   // now fill header the normal way\n   while (k < 4)\n      header[k++] = stbi__zget8(a);\n   len  = header[1] * 256 + header[0];\n   nlen = header[3] * 256 + header[2];\n   if (nlen != (len ^ 0xffff)) return stbi__err(\"zlib corrupt\",\"Corrupt PNG\");\n   if (a->zbuffer + len > a->zbuffer_end) return stbi__err(\"read past buffer\",\"Corrupt PNG\");\n   if (a->zout + len > a->zout_end)\n      if (!stbi__zexpand(a, a->zout, len)) return 0;\n   memcpy(a->zout, a->zbuffer, len);\n   a->zbuffer += len;\n   a->zout += len;\n   return 1;\n}\n\nstatic int stbi__parse_zlib_header(stbi__zbuf *a)\n{\n   int cmf   = stbi__zget8(a);\n   int cm    = cmf & 15;\n   /* int cinfo = cmf >> 4; */\n   int flg   = stbi__zget8(a);\n   if (stbi__zeof(a)) return stbi__err(\"bad zlib header\",\"Corrupt PNG\"); // zlib spec\n   if ((cmf*256+flg) % 31 != 0) return stbi__err(\"bad zlib header\",\"Corrupt PNG\"); // zlib spec\n   if (flg & 32) return stbi__err(\"no preset dict\",\"Corrupt PNG\"); // preset dictionary not allowed in png\n   if (cm != 8) return stbi__err(\"bad compression\",\"Corrupt PNG\"); // DEFLATE required for png\n   // window = 1 << (8 + cinfo)... but who cares, we fully buffer output\n   return 1;\n}\n\nstatic const stbi_uc stbi__zdefault_length[STBI__ZNSYMS] =\n{\n   8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8, 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,\n   8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8, 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,\n   8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8, 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,\n   8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8, 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,\n   8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,\n   9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,\n   9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,\n   9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,\n   7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7, 7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8\n};\nstatic const stbi_uc stbi__zdefault_distance[32] =\n{\n   5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5\n};\n/*\nInit algorithm:\n{\n   int i;   // use <= to match clearly with spec\n   for (i=0; i <= 143; ++i)     stbi__zdefault_length[i]   = 8;\n   for (   ; i <= 255; ++i)     stbi__zdefault_length[i]   = 9;\n   for (   ; i <= 279; ++i)     stbi__zdefault_length[i]   = 7;\n   for (   ; i <= 287; ++i)     stbi__zdefault_length[i]   = 8;\n\n   for (i=0; i <=  31; ++i)     stbi__zdefault_distance[i] = 5;\n}\n*/\n\nstatic int stbi__parse_zlib(stbi__zbuf *a, int parse_header)\n{\n   int final, type;\n   if (parse_header)\n      if (!stbi__parse_zlib_header(a)) return 0;\n   a->num_bits = 0;\n   a->code_buffer = 0;\n   a->hit_zeof_once = 0;\n   do {\n      final = stbi__zreceive(a,1);\n      type = stbi__zreceive(a,2);\n      if (type == 0) {\n         if (!stbi__parse_uncompressed_block(a)) return 0;\n      } else if (type == 3) {\n         return 0;\n      } else {\n         if (type == 1) {\n            // use fixed code lengths\n            if (!stbi__zbuild_huffman(&a->z_length  , stbi__zdefault_length  , STBI__ZNSYMS)) return 0;\n            if (!stbi__zbuild_huffman(&a->z_distance, stbi__zdefault_distance,  32)) return 0;\n         } else {\n            if (!stbi__compute_huffman_codes(a)) return 0;\n         }\n         if (!stbi__parse_huffman_block(a)) return 0;\n      }\n   } while (!final);\n   return 1;\n}\n\nstatic int stbi__do_zlib(stbi__zbuf *a, char *obuf, int olen, int exp, int parse_header)\n{\n   a->zout_start = obuf;\n   a->zout       = obuf;\n   a->zout_end   = obuf + olen;\n   a->z_expandable = exp;\n\n   return stbi__parse_zlib(a, parse_header);\n}\n\nSTBIDEF char *stbi_zlib_decode_malloc_guesssize(const char *buffer, int len, int initial_size, int *outlen)\n{\n   stbi__zbuf a;\n   char *p = (char *) stbi__malloc(initial_size);\n   if (p == NULL) return NULL;\n   a.zbuffer = (stbi_uc *) buffer;\n   a.zbuffer_end = (stbi_uc *) buffer + len;\n   if (stbi__do_zlib(&a, p, initial_size, 1, 1)) {\n      if (outlen) *outlen = (int) (a.zout - a.zout_start);\n      return a.zout_start;\n   } else {\n      STBI_FREE(a.zout_start);\n      return NULL;\n   }\n}\n\nSTBIDEF char *stbi_zlib_decode_malloc(char const *buffer, int len, int *outlen)\n{\n   return stbi_zlib_decode_malloc_guesssize(buffer, len, 16384, outlen);\n}\n\nSTBIDEF char *stbi_zlib_decode_malloc_guesssize_headerflag(const char *buffer, int len, int initial_size, int *outlen, int parse_header)\n{\n   stbi__zbuf a;\n   char *p = (char *) stbi__malloc(initial_size);\n   if (p == NULL) return NULL;\n   a.zbuffer = (stbi_uc *) buffer;\n   a.zbuffer_end = (stbi_uc *) buffer + len;\n   if (stbi__do_zlib(&a, p, initial_size, 1, parse_header)) {\n      if (outlen) *outlen = (int) (a.zout - a.zout_start);\n      return a.zout_start;\n   } else {\n      STBI_FREE(a.zout_start);\n      return NULL;\n   }\n}\n\nSTBIDEF int stbi_zlib_decode_buffer(char *obuffer, int olen, char const *ibuffer, int ilen)\n{\n   stbi__zbuf a;\n   a.zbuffer = (stbi_uc *) ibuffer;\n   a.zbuffer_end = (stbi_uc *) ibuffer + ilen;\n   if (stbi__do_zlib(&a, obuffer, olen, 0, 1))\n      return (int) (a.zout - a.zout_start);\n   else\n      return -1;\n}\n\nSTBIDEF char *stbi_zlib_decode_noheader_malloc(char const *buffer, int len, int *outlen)\n{\n   stbi__zbuf a;\n   char *p = (char *) stbi__malloc(16384);\n   if (p == NULL) return NULL;\n   a.zbuffer = (stbi_uc *) buffer;\n   a.zbuffer_end = (stbi_uc *) buffer+len;\n   if (stbi__do_zlib(&a, p, 16384, 1, 0)) {\n      if (outlen) *outlen = (int) (a.zout - a.zout_start);\n      return a.zout_start;\n   } else {\n      STBI_FREE(a.zout_start);\n      return NULL;\n   }\n}\n\nSTBIDEF int stbi_zlib_decode_noheader_buffer(char *obuffer, int olen, const char *ibuffer, int ilen)\n{\n   stbi__zbuf a;\n   a.zbuffer = (stbi_uc *) ibuffer;\n   a.zbuffer_end = (stbi_uc *) ibuffer + ilen;\n   if (stbi__do_zlib(&a, obuffer, olen, 0, 0))\n      return (int) (a.zout - a.zout_start);\n   else\n      return -1;\n}\n#endif\n\n// public domain \"baseline\" PNG decoder   v0.10  Sean Barrett 2006-11-18\n//    simple implementation\n//      - only 8-bit samples\n//      - no CRC checking\n//      - allocates lots of intermediate memory\n//        - avoids problem of streaming data between subsystems\n//        - avoids explicit window management\n//    performance\n//      - uses stb_zlib, a PD zlib implementation with fast huffman decoding\n\n#ifndef STBI_NO_PNG\ntypedef struct\n{\n   stbi__uint32 length;\n   stbi__uint32 type;\n} stbi__pngchunk;\n\nstatic stbi__pngchunk stbi__get_chunk_header(stbi__context *s)\n{\n   stbi__pngchunk c;\n   c.length = stbi__get32be(s);\n   c.type   = stbi__get32be(s);\n   return c;\n}\n\nstatic int stbi__check_png_header(stbi__context *s)\n{\n   static const stbi_uc png_sig[8] = { 137,80,78,71,13,10,26,10 };\n   int i;\n   for (i=0; i < 8; ++i)\n      if (stbi__get8(s) != png_sig[i]) return stbi__err(\"bad png sig\",\"Not a PNG\");\n   return 1;\n}\n\ntypedef struct\n{\n   stbi__context *s;\n   stbi_uc *idata, *expanded, *out;\n   int depth;\n} stbi__png;\n\n\nenum {\n   STBI__F_none=0,\n   STBI__F_sub=1,\n   STBI__F_up=2,\n   STBI__F_avg=3,\n   STBI__F_paeth=4,\n   // synthetic filter used for first scanline to avoid needing a dummy row of 0s\n   STBI__F_avg_first\n};\n\nstatic stbi_uc first_row_filter[5] =\n{\n   STBI__F_none,\n   STBI__F_sub,\n   STBI__F_none,\n   STBI__F_avg_first,\n   STBI__F_sub // Paeth with b=c=0 turns out to be equivalent to sub\n};\n\nstatic int stbi__paeth(int a, int b, int c)\n{\n   // This formulation looks very different from the reference in the PNG spec, but is\n   // actually equivalent and has favorable data dependencies and admits straightforward\n   // generation of branch-free code, which helps performance significantly.\n   int thresh = c*3 - (a + b);\n   int lo = a < b ? a : b;\n   int hi = a < b ? b : a;\n   int t0 = (hi <= thresh) ? lo : c;\n   int t1 = (thresh <= lo) ? hi : t0;\n   return t1;\n}\n\nstatic const stbi_uc stbi__depth_scale_table[9] = { 0, 0xff, 0x55, 0, 0x11, 0,0,0, 0x01 };\n\n// adds an extra all-255 alpha channel\n// dest == src is legal\n// img_n must be 1 or 3\nstatic void stbi__create_png_alpha_expand8(stbi_uc *dest, stbi_uc *src, stbi__uint32 x, int img_n)\n{\n   int i;\n   // must process data backwards since we allow dest==src\n   if (img_n == 1) {\n      for (i=x-1; i >= 0; --i) {\n         dest[i*2+1] = 255;\n         dest[i*2+0] = src[i];\n      }\n   } else {\n      STBI_ASSERT(img_n == 3);\n      for (i=x-1; i >= 0; --i) {\n         dest[i*4+3] = 255;\n         dest[i*4+2] = src[i*3+2];\n         dest[i*4+1] = src[i*3+1];\n         dest[i*4+0] = src[i*3+0];\n      }\n   }\n}\n\n// create the png data from post-deflated data\nstatic int stbi__create_png_image_raw(stbi__png *a, stbi_uc *raw, stbi__uint32 raw_len, int out_n, stbi__uint32 x, stbi__uint32 y, int depth, int color)\n{\n   int bytes = (depth == 16 ? 2 : 1);\n   stbi__context *s = a->s;\n   stbi__uint32 i,j,stride = x*out_n*bytes;\n   stbi__uint32 img_len, img_width_bytes;\n   stbi_uc *filter_buf;\n   int all_ok = 1;\n   int k;\n   int img_n = s->img_n; // copy it into a local for later\n\n   int output_bytes = out_n*bytes;\n   int filter_bytes = img_n*bytes;\n   int width = x;\n\n   STBI_ASSERT(out_n == s->img_n || out_n == s->img_n+1);\n   a->out = (stbi_uc *) stbi__malloc_mad3(x, y, output_bytes, 0); // extra bytes to write off the end into\n   if (!a->out) return stbi__err(\"outofmem\", \"Out of memory\");\n\n   // note: error exits here don't need to clean up a->out individually,\n   // stbi__do_png always does on error.\n   if (!stbi__mad3sizes_valid(img_n, x, depth, 7)) return stbi__err(\"too large\", \"Corrupt PNG\");\n   img_width_bytes = (((img_n * x * depth) + 7) >> 3);\n   if (!stbi__mad2sizes_valid(img_width_bytes, y, img_width_bytes)) return stbi__err(\"too large\", \"Corrupt PNG\");\n   img_len = (img_width_bytes + 1) * y;\n\n   // we used to check for exact match between raw_len and img_len on non-interlaced PNGs,\n   // but issue #276 reported a PNG in the wild that had extra data at the end (all zeros),\n   // so just check for raw_len < img_len always.\n   if (raw_len < img_len) return stbi__err(\"not enough pixels\",\"Corrupt PNG\");\n\n   // Allocate two scan lines worth of filter workspace buffer.\n   filter_buf = (stbi_uc *) stbi__malloc_mad2(img_width_bytes, 2, 0);\n   if (!filter_buf) return stbi__err(\"outofmem\", \"Out of memory\");\n\n   // Filtering for low-bit-depth images\n   if (depth < 8) {\n      filter_bytes = 1;\n      width = img_width_bytes;\n   }\n\n   for (j=0; j < y; ++j) {\n      // cur/prior filter buffers alternate\n      stbi_uc *cur = filter_buf + (j & 1)*img_width_bytes;\n      stbi_uc *prior = filter_buf + (~j & 1)*img_width_bytes;\n      stbi_uc *dest = a->out + stride*j;\n      int nk = width * filter_bytes;\n      int filter = *raw++;\n\n      // check filter type\n      if (filter > 4) {\n         all_ok = stbi__err(\"invalid filter\",\"Corrupt PNG\");\n         break;\n      }\n\n      // if first row, use special filter that doesn't sample previous row\n      if (j == 0) filter = first_row_filter[filter];\n\n      // perform actual filtering\n      switch (filter) {\n      case STBI__F_none:\n         memcpy(cur, raw, nk);\n         break;\n      case STBI__F_sub:\n         memcpy(cur, raw, filter_bytes);\n         for (k = filter_bytes; k < nk; ++k)\n            cur[k] = STBI__BYTECAST(raw[k] + cur[k-filter_bytes]);\n         break;\n      case STBI__F_up:\n         for (k = 0; k < nk; ++k)\n            cur[k] = STBI__BYTECAST(raw[k] + prior[k]);\n         break;\n      case STBI__F_avg:\n         for (k = 0; k < filter_bytes; ++k)\n            cur[k] = STBI__BYTECAST(raw[k] + (prior[k]>>1));\n         for (k = filter_bytes; k < nk; ++k)\n            cur[k] = STBI__BYTECAST(raw[k] + ((prior[k] + cur[k-filter_bytes])>>1));\n         break;\n      case STBI__F_paeth:\n         for (k = 0; k < filter_bytes; ++k)\n            cur[k] = STBI__BYTECAST(raw[k] + prior[k]); // prior[k] == stbi__paeth(0,prior[k],0)\n         for (k = filter_bytes; k < nk; ++k)\n            cur[k] = STBI__BYTECAST(raw[k] + stbi__paeth(cur[k-filter_bytes], prior[k], prior[k-filter_bytes]));\n         break;\n      case STBI__F_avg_first:\n         memcpy(cur, raw, filter_bytes);\n         for (k = filter_bytes; k < nk; ++k)\n            cur[k] = STBI__BYTECAST(raw[k] + (cur[k-filter_bytes] >> 1));\n         break;\n      }\n\n      raw += nk;\n\n      // expand decoded bits in cur to dest, also adding an extra alpha channel if desired\n      if (depth < 8) {\n         stbi_uc scale = (color == 0) ? stbi__depth_scale_table[depth] : 1; // scale grayscale values to 0..255 range\n         stbi_uc *in = cur;\n         stbi_uc *out = dest;\n         stbi_uc inb = 0;\n         stbi__uint32 nsmp = x*img_n;\n\n         // expand bits to bytes first\n         if (depth == 4) {\n            for (i=0; i < nsmp; ++i) {\n               if ((i & 1) == 0) inb = *in++;\n               *out++ = scale * (inb >> 4);\n               inb <<= 4;\n            }\n         } else if (depth == 2) {\n            for (i=0; i < nsmp; ++i) {\n               if ((i & 3) == 0) inb = *in++;\n               *out++ = scale * (inb >> 6);\n               inb <<= 2;\n            }\n         } else {\n            STBI_ASSERT(depth == 1);\n            for (i=0; i < nsmp; ++i) {\n               if ((i & 7) == 0) inb = *in++;\n               *out++ = scale * (inb >> 7);\n               inb <<= 1;\n            }\n         }\n\n         // insert alpha=255 values if desired\n         if (img_n != out_n)\n            stbi__create_png_alpha_expand8(dest, dest, x, img_n);\n      } else if (depth == 8) {\n         if (img_n == out_n)\n            memcpy(dest, cur, x*img_n);\n         else\n            stbi__create_png_alpha_expand8(dest, cur, x, img_n);\n      } else if (depth == 16) {\n         // convert the image data from big-endian to platform-native\n         stbi__uint16 *dest16 = (stbi__uint16*)dest;\n         stbi__uint32 nsmp = x*img_n;\n\n         if (img_n == out_n) {\n            for (i = 0; i < nsmp; ++i, ++dest16, cur += 2)\n               *dest16 = (cur[0] << 8) | cur[1];\n         } else {\n            STBI_ASSERT(img_n+1 == out_n);\n            if (img_n == 1) {\n               for (i = 0; i < x; ++i, dest16 += 2, cur += 2) {\n                  dest16[0] = (cur[0] << 8) | cur[1];\n                  dest16[1] = 0xffff;\n               }\n            } else {\n               STBI_ASSERT(img_n == 3);\n               for (i = 0; i < x; ++i, dest16 += 4, cur += 6) {\n                  dest16[0] = (cur[0] << 8) | cur[1];\n                  dest16[1] = (cur[2] << 8) | cur[3];\n                  dest16[2] = (cur[4] << 8) | cur[5];\n                  dest16[3] = 0xffff;\n               }\n            }\n         }\n      }\n   }\n\n   STBI_FREE(filter_buf);\n   if (!all_ok) return 0;\n\n   return 1;\n}\n\nstatic int stbi__create_png_image(stbi__png *a, stbi_uc *image_data, stbi__uint32 image_data_len, int out_n, int depth, int color, int interlaced)\n{\n   int bytes = (depth == 16 ? 2 : 1);\n   int out_bytes = out_n * bytes;\n   stbi_uc *final;\n   int p;\n   if (!interlaced)\n      return stbi__create_png_image_raw(a, image_data, image_data_len, out_n, a->s->img_x, a->s->img_y, depth, color);\n\n   // de-interlacing\n   final = (stbi_uc *) stbi__malloc_mad3(a->s->img_x, a->s->img_y, out_bytes, 0);\n   if (!final) return stbi__err(\"outofmem\", \"Out of memory\");\n   for (p=0; p < 7; ++p) {\n      int xorig[] = { 0,4,0,2,0,1,0 };\n      int yorig[] = { 0,0,4,0,2,0,1 };\n      int xspc[]  = { 8,8,4,4,2,2,1 };\n      int yspc[]  = { 8,8,8,4,4,2,2 };\n      int i,j,x,y;\n      // pass1_x[4] = 0, pass1_x[5] = 1, pass1_x[12] = 1\n      x = (a->s->img_x - xorig[p] + xspc[p]-1) / xspc[p];\n      y = (a->s->img_y - yorig[p] + yspc[p]-1) / yspc[p];\n      if (x && y) {\n         stbi__uint32 img_len = ((((a->s->img_n * x * depth) + 7) >> 3) + 1) * y;\n         if (!stbi__create_png_image_raw(a, image_data, image_data_len, out_n, x, y, depth, color)) {\n            STBI_FREE(final);\n            return 0;\n         }\n         for (j=0; j < y; ++j) {\n            for (i=0; i < x; ++i) {\n               int out_y = j*yspc[p]+yorig[p];\n               int out_x = i*xspc[p]+xorig[p];\n               memcpy(final + out_y*a->s->img_x*out_bytes + out_x*out_bytes,\n                      a->out + (j*x+i)*out_bytes, out_bytes);\n            }\n         }\n         STBI_FREE(a->out);\n         image_data += img_len;\n         image_data_len -= img_len;\n      }\n   }\n   a->out = final;\n\n   return 1;\n}\n\nstatic int stbi__compute_transparency(stbi__png *z, stbi_uc tc[3], int out_n)\n{\n   stbi__context *s = z->s;\n   stbi__uint32 i, pixel_count = s->img_x * s->img_y;\n   stbi_uc *p = z->out;\n\n   // compute color-based transparency, assuming we've\n   // already got 255 as the alpha value in the output\n   STBI_ASSERT(out_n == 2 || out_n == 4);\n\n   if (out_n == 2) {\n      for (i=0; i < pixel_count; ++i) {\n         p[1] = (p[0] == tc[0] ? 0 : 255);\n         p += 2;\n      }\n   } else {\n      for (i=0; i < pixel_count; ++i) {\n         if (p[0] == tc[0] && p[1] == tc[1] && p[2] == tc[2])\n            p[3] = 0;\n         p += 4;\n      }\n   }\n   return 1;\n}\n\nstatic int stbi__compute_transparency16(stbi__png *z, stbi__uint16 tc[3], int out_n)\n{\n   stbi__context *s = z->s;\n   stbi__uint32 i, pixel_count = s->img_x * s->img_y;\n   stbi__uint16 *p = (stbi__uint16*) z->out;\n\n   // compute color-based transparency, assuming we've\n   // already got 65535 as the alpha value in the output\n   STBI_ASSERT(out_n == 2 || out_n == 4);\n\n   if (out_n == 2) {\n      for (i = 0; i < pixel_count; ++i) {\n         p[1] = (p[0] == tc[0] ? 0 : 65535);\n         p += 2;\n      }\n   } else {\n      for (i = 0; i < pixel_count; ++i) {\n         if (p[0] == tc[0] && p[1] == tc[1] && p[2] == tc[2])\n            p[3] = 0;\n         p += 4;\n      }\n   }\n   return 1;\n}\n\nstatic int stbi__expand_png_palette(stbi__png *a, stbi_uc *palette, int len, int pal_img_n)\n{\n   stbi__uint32 i, pixel_count = a->s->img_x * a->s->img_y;\n   stbi_uc *p, *temp_out, *orig = a->out;\n\n   p = (stbi_uc *) stbi__malloc_mad2(pixel_count, pal_img_n, 0);\n   if (p == NULL) return stbi__err(\"outofmem\", \"Out of memory\");\n\n   // between here and free(out) below, exitting would leak\n   temp_out = p;\n\n   if (pal_img_n == 3) {\n      for (i=0; i < pixel_count; ++i) {\n         int n = orig[i]*4;\n         p[0] = palette[n  ];\n         p[1] = palette[n+1];\n         p[2] = palette[n+2];\n         p += 3;\n      }\n   } else {\n      for (i=0; i < pixel_count; ++i) {\n         int n = orig[i]*4;\n         p[0] = palette[n  ];\n         p[1] = palette[n+1];\n         p[2] = palette[n+2];\n         p[3] = palette[n+3];\n         p += 4;\n      }\n   }\n   STBI_FREE(a->out);\n   a->out = temp_out;\n\n   STBI_NOTUSED(len);\n\n   return 1;\n}\n\nstatic int stbi__unpremultiply_on_load_global = 0;\nstatic int stbi__de_iphone_flag_global = 0;\n\nSTBIDEF void stbi_set_unpremultiply_on_load(int flag_true_if_should_unpremultiply)\n{\n   stbi__unpremultiply_on_load_global = flag_true_if_should_unpremultiply;\n}\n\nSTBIDEF void stbi_convert_iphone_png_to_rgb(int flag_true_if_should_convert)\n{\n   stbi__de_iphone_flag_global = flag_true_if_should_convert;\n}\n\n#ifndef STBI_THREAD_LOCAL\n#define stbi__unpremultiply_on_load  stbi__unpremultiply_on_load_global\n#define stbi__de_iphone_flag  stbi__de_iphone_flag_global\n#else\nstatic STBI_THREAD_LOCAL int stbi__unpremultiply_on_load_local, stbi__unpremultiply_on_load_set;\nstatic STBI_THREAD_LOCAL int stbi__de_iphone_flag_local, stbi__de_iphone_flag_set;\n\nSTBIDEF void stbi_set_unpremultiply_on_load_thread(int flag_true_if_should_unpremultiply)\n{\n   stbi__unpremultiply_on_load_local = flag_true_if_should_unpremultiply;\n   stbi__unpremultiply_on_load_set = 1;\n}\n\nSTBIDEF void stbi_convert_iphone_png_to_rgb_thread(int flag_true_if_should_convert)\n{\n   stbi__de_iphone_flag_local = flag_true_if_should_convert;\n   stbi__de_iphone_flag_set = 1;\n}\n\n#define stbi__unpremultiply_on_load  (stbi__unpremultiply_on_load_set           \\\n                                       ? stbi__unpremultiply_on_load_local      \\\n                                       : stbi__unpremultiply_on_load_global)\n#define stbi__de_iphone_flag  (stbi__de_iphone_flag_set                         \\\n                                ? stbi__de_iphone_flag_local                    \\\n                                : stbi__de_iphone_flag_global)\n#endif // STBI_THREAD_LOCAL\n\nstatic void stbi__de_iphone(stbi__png *z)\n{\n   stbi__context *s = z->s;\n   stbi__uint32 i, pixel_count = s->img_x * s->img_y;\n   stbi_uc *p = z->out;\n\n   if (s->img_out_n == 3) {  // convert bgr to rgb\n      for (i=0; i < pixel_count; ++i) {\n         stbi_uc t = p[0];\n         p[0] = p[2];\n         p[2] = t;\n         p += 3;\n      }\n   } else {\n      STBI_ASSERT(s->img_out_n == 4);\n      if (stbi__unpremultiply_on_load) {\n         // convert bgr to rgb and unpremultiply\n         for (i=0; i < pixel_count; ++i) {\n            stbi_uc a = p[3];\n            stbi_uc t = p[0];\n            if (a) {\n               stbi_uc half = a / 2;\n               p[0] = (p[2] * 255 + half) / a;\n               p[1] = (p[1] * 255 + half) / a;\n               p[2] = ( t   * 255 + half) / a;\n            } else {\n               p[0] = p[2];\n               p[2] = t;\n            }\n            p += 4;\n         }\n      } else {\n         // convert bgr to rgb\n         for (i=0; i < pixel_count; ++i) {\n            stbi_uc t = p[0];\n            p[0] = p[2];\n            p[2] = t;\n            p += 4;\n         }\n      }\n   }\n}\n\n#define STBI__PNG_TYPE(a,b,c,d)  (((unsigned) (a) << 24) + ((unsigned) (b) << 16) + ((unsigned) (c) << 8) + (unsigned) (d))\n\nstatic int stbi__parse_png_file(stbi__png *z, int scan, int req_comp)\n{\n   stbi_uc palette[1024], pal_img_n=0;\n   stbi_uc has_trans=0, tc[3]={0};\n   stbi__uint16 tc16[3];\n   stbi__uint32 ioff=0, idata_limit=0, i, pal_len=0;\n   int first=1,k,interlace=0, color=0, is_iphone=0;\n   stbi__context *s = z->s;\n\n   z->expanded = NULL;\n   z->idata = NULL;\n   z->out = NULL;\n\n   if (!stbi__check_png_header(s)) return 0;\n\n   if (scan == STBI__SCAN_type) return 1;\n\n   for (;;) {\n      stbi__pngchunk c = stbi__get_chunk_header(s);\n      switch (c.type) {\n         case STBI__PNG_TYPE('C','g','B','I'):\n            is_iphone = 1;\n            stbi__skip(s, c.length);\n            break;\n         case STBI__PNG_TYPE('I','H','D','R'): {\n            int comp,filter;\n            if (!first) return stbi__err(\"multiple IHDR\",\"Corrupt PNG\");\n            first = 0;\n            if (c.length != 13) return stbi__err(\"bad IHDR len\",\"Corrupt PNG\");\n            s->img_x = stbi__get32be(s);\n            s->img_y = stbi__get32be(s);\n            if (s->img_y > STBI_MAX_DIMENSIONS) return stbi__err(\"too large\",\"Very large image (corrupt?)\");\n            if (s->img_x > STBI_MAX_DIMENSIONS) return stbi__err(\"too large\",\"Very large image (corrupt?)\");\n            z->depth = stbi__get8(s);  if (z->depth != 1 && z->depth != 2 && z->depth != 4 && z->depth != 8 && z->depth != 16)  return stbi__err(\"1/2/4/8/16-bit only\",\"PNG not supported: 1/2/4/8/16-bit only\");\n            color = stbi__get8(s);  if (color > 6)         return stbi__err(\"bad ctype\",\"Corrupt PNG\");\n            if (color == 3 && z->depth == 16)                  return stbi__err(\"bad ctype\",\"Corrupt PNG\");\n            if (color == 3) pal_img_n = 3; else if (color & 1) return stbi__err(\"bad ctype\",\"Corrupt PNG\");\n            comp  = stbi__get8(s);  if (comp) return stbi__err(\"bad comp method\",\"Corrupt PNG\");\n            filter= stbi__get8(s);  if (filter) return stbi__err(\"bad filter method\",\"Corrupt PNG\");\n            interlace = stbi__get8(s); if (interlace>1) return stbi__err(\"bad interlace method\",\"Corrupt PNG\");\n            if (!s->img_x || !s->img_y) return stbi__err(\"0-pixel image\",\"Corrupt PNG\");\n            if (!pal_img_n) {\n               s->img_n = (color & 2 ? 3 : 1) + (color & 4 ? 1 : 0);\n               if ((1 << 30) / s->img_x / s->img_n < s->img_y) return stbi__err(\"too large\", \"Image too large to decode\");\n            } else {\n               // if paletted, then pal_n is our final components, and\n               // img_n is # components to decompress/filter.\n               s->img_n = 1;\n               if ((1 << 30) / s->img_x / 4 < s->img_y) return stbi__err(\"too large\",\"Corrupt PNG\");\n            }\n            // even with SCAN_header, have to scan to see if we have a tRNS\n            break;\n         }\n\n         case STBI__PNG_TYPE('P','L','T','E'):  {\n            if (first) return stbi__err(\"first not IHDR\", \"Corrupt PNG\");\n            if (c.length > 256*3) return stbi__err(\"invalid PLTE\",\"Corrupt PNG\");\n            pal_len = c.length / 3;\n            if (pal_len * 3 != c.length) return stbi__err(\"invalid PLTE\",\"Corrupt PNG\");\n            for (i=0; i < pal_len; ++i) {\n               palette[i*4+0] = stbi__get8(s);\n               palette[i*4+1] = stbi__get8(s);\n               palette[i*4+2] = stbi__get8(s);\n               palette[i*4+3] = 255;\n            }\n            break;\n         }\n\n         case STBI__PNG_TYPE('t','R','N','S'): {\n            if (first) return stbi__err(\"first not IHDR\", \"Corrupt PNG\");\n            if (z->idata) return stbi__err(\"tRNS after IDAT\",\"Corrupt PNG\");\n            if (pal_img_n) {\n               if (scan == STBI__SCAN_header) { s->img_n = 4; return 1; }\n               if (pal_len == 0) return stbi__err(\"tRNS before PLTE\",\"Corrupt PNG\");\n               if (c.length > pal_len) return stbi__err(\"bad tRNS len\",\"Corrupt PNG\");\n               pal_img_n = 4;\n               for (i=0; i < c.length; ++i)\n                  palette[i*4+3] = stbi__get8(s);\n            } else {\n               if (!(s->img_n & 1)) return stbi__err(\"tRNS with alpha\",\"Corrupt PNG\");\n               if (c.length != (stbi__uint32) s->img_n*2) return stbi__err(\"bad tRNS len\",\"Corrupt PNG\");\n               has_trans = 1;\n               // non-paletted with tRNS = constant alpha. if header-scanning, we can stop now.\n               if (scan == STBI__SCAN_header) { ++s->img_n; return 1; }\n               if (z->depth == 16) {\n                  for (k = 0; k < s->img_n && k < 3; ++k) // extra loop test to suppress false GCC warning\n                     tc16[k] = (stbi__uint16)stbi__get16be(s); // copy the values as-is\n               } else {\n                  for (k = 0; k < s->img_n && k < 3; ++k)\n                     tc[k] = (stbi_uc)(stbi__get16be(s) & 255) * stbi__depth_scale_table[z->depth]; // non 8-bit images will be larger\n               }\n            }\n            break;\n         }\n\n         case STBI__PNG_TYPE('I','D','A','T'): {\n            if (first) return stbi__err(\"first not IHDR\", \"Corrupt PNG\");\n            if (pal_img_n && !pal_len) return stbi__err(\"no PLTE\",\"Corrupt PNG\");\n            if (scan == STBI__SCAN_header) {\n               // header scan definitely stops at first IDAT\n               if (pal_img_n)\n                  s->img_n = pal_img_n;\n               return 1;\n            }\n            if (c.length > (1u << 30)) return stbi__err(\"IDAT size limit\", \"IDAT section larger than 2^30 bytes\");\n            if ((int)(ioff + c.length) < (int)ioff) return 0;\n            if (ioff + c.length > idata_limit) {\n               stbi__uint32 idata_limit_old = idata_limit;\n               stbi_uc *p;\n               if (idata_limit == 0) idata_limit = c.length > 4096 ? c.length : 4096;\n               while (ioff + c.length > idata_limit)\n                  idata_limit *= 2;\n               STBI_NOTUSED(idata_limit_old);\n               p = (stbi_uc *) STBI_REALLOC_SIZED(z->idata, idata_limit_old, idata_limit); if (p == NULL) return stbi__err(\"outofmem\", \"Out of memory\");\n               z->idata = p;\n            }\n            if (!stbi__getn(s, z->idata+ioff,c.length)) return stbi__err(\"outofdata\",\"Corrupt PNG\");\n            ioff += c.length;\n            break;\n         }\n\n         case STBI__PNG_TYPE('I','E','N','D'): {\n            stbi__uint32 raw_len, bpl;\n            if (first) return stbi__err(\"first not IHDR\", \"Corrupt PNG\");\n            if (scan != STBI__SCAN_load) return 1;\n            if (z->idata == NULL) return stbi__err(\"no IDAT\",\"Corrupt PNG\");\n            // initial guess for decoded data size to avoid unnecessary reallocs\n            bpl = (s->img_x * z->depth + 7) / 8; // bytes per line, per component\n            raw_len = bpl * s->img_y * s->img_n /* pixels */ + s->img_y /* filter mode per row */;\n            z->expanded = (stbi_uc *) stbi_zlib_decode_malloc_guesssize_headerflag((char *) z->idata, ioff, raw_len, (int *) &raw_len, !is_iphone);\n            if (z->expanded == NULL) return 0; // zlib should set error\n            STBI_FREE(z->idata); z->idata = NULL;\n            if ((req_comp == s->img_n+1 && req_comp != 3 && !pal_img_n) || has_trans)\n               s->img_out_n = s->img_n+1;\n            else\n               s->img_out_n = s->img_n;\n            if (!stbi__create_png_image(z, z->expanded, raw_len, s->img_out_n, z->depth, color, interlace)) return 0;\n            if (has_trans) {\n               if (z->depth == 16) {\n                  if (!stbi__compute_transparency16(z, tc16, s->img_out_n)) return 0;\n               } else {\n                  if (!stbi__compute_transparency(z, tc, s->img_out_n)) return 0;\n               }\n            }\n            if (is_iphone && stbi__de_iphone_flag && s->img_out_n > 2)\n               stbi__de_iphone(z);\n            if (pal_img_n) {\n               // pal_img_n == 3 or 4\n               s->img_n = pal_img_n; // record the actual colors we had\n               s->img_out_n = pal_img_n;\n               if (req_comp >= 3) s->img_out_n = req_comp;\n               if (!stbi__expand_png_palette(z, palette, pal_len, s->img_out_n))\n                  return 0;\n            } else if (has_trans) {\n               // non-paletted image with tRNS -> source image has (constant) alpha\n               ++s->img_n;\n            }\n            STBI_FREE(z->expanded); z->expanded = NULL;\n            // end of PNG chunk, read and skip CRC\n            stbi__get32be(s);\n            return 1;\n         }\n\n         default:\n            // if critical, fail\n            if (first) return stbi__err(\"first not IHDR\", \"Corrupt PNG\");\n            if ((c.type & (1 << 29)) == 0) {\n               #ifndef STBI_NO_FAILURE_STRINGS\n               // not threadsafe\n               static char invalid_chunk[] = \"XXXX PNG chunk not known\";\n               invalid_chunk[0] = STBI__BYTECAST(c.type >> 24);\n               invalid_chunk[1] = STBI__BYTECAST(c.type >> 16);\n               invalid_chunk[2] = STBI__BYTECAST(c.type >>  8);\n               invalid_chunk[3] = STBI__BYTECAST(c.type >>  0);\n               #endif\n               return stbi__err(invalid_chunk, \"PNG not supported: unknown PNG chunk type\");\n            }\n            stbi__skip(s, c.length);\n            break;\n      }\n      // end of PNG chunk, read and skip CRC\n      stbi__get32be(s);\n   }\n}\n\nstatic void *stbi__do_png(stbi__png *p, int *x, int *y, int *n, int req_comp, stbi__result_info *ri)\n{\n   void *result=NULL;\n   if (req_comp < 0 || req_comp > 4) return stbi__errpuc(\"bad req_comp\", \"Internal error\");\n   if (stbi__parse_png_file(p, STBI__SCAN_load, req_comp)) {\n      if (p->depth <= 8)\n         ri->bits_per_channel = 8;\n      else if (p->depth == 16)\n         ri->bits_per_channel = 16;\n      else\n         return stbi__errpuc(\"bad bits_per_channel\", \"PNG not supported: unsupported color depth\");\n      result = p->out;\n      p->out = NULL;\n      if (req_comp && req_comp != p->s->img_out_n) {\n         if (ri->bits_per_channel == 8)\n            result = stbi__convert_format((unsigned char *) result, p->s->img_out_n, req_comp, p->s->img_x, p->s->img_y);\n         else\n            result = stbi__convert_format16((stbi__uint16 *) result, p->s->img_out_n, req_comp, p->s->img_x, p->s->img_y);\n         p->s->img_out_n = req_comp;\n         if (result == NULL) return result;\n      }\n      *x = p->s->img_x;\n      *y = p->s->img_y;\n      if (n) *n = p->s->img_n;\n   }\n   STBI_FREE(p->out);      p->out      = NULL;\n   STBI_FREE(p->expanded); p->expanded = NULL;\n   STBI_FREE(p->idata);    p->idata    = NULL;\n\n   return result;\n}\n\nstatic void *stbi__png_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)\n{\n   stbi__png p;\n   p.s = s;\n   return stbi__do_png(&p, x,y,comp,req_comp, ri);\n}\n\nstatic int stbi__png_test(stbi__context *s)\n{\n   int r;\n   r = stbi__check_png_header(s);\n   stbi__rewind(s);\n   return r;\n}\n\nstatic int stbi__png_info_raw(stbi__png *p, int *x, int *y, int *comp)\n{\n   if (!stbi__parse_png_file(p, STBI__SCAN_header, 0)) {\n      stbi__rewind( p->s );\n      return 0;\n   }\n   if (x) *x = p->s->img_x;\n   if (y) *y = p->s->img_y;\n   if (comp) *comp = p->s->img_n;\n   return 1;\n}\n\nstatic int stbi__png_info(stbi__context *s, int *x, int *y, int *comp)\n{\n   stbi__png p;\n   p.s = s;\n   return stbi__png_info_raw(&p, x, y, comp);\n}\n\nstatic int stbi__png_is16(stbi__context *s)\n{\n   stbi__png p;\n   p.s = s;\n   if (!stbi__png_info_raw(&p, NULL, NULL, NULL))\n\t   return 0;\n   if (p.depth != 16) {\n      stbi__rewind(p.s);\n      return 0;\n   }\n   return 1;\n}\n#endif\n\n// Microsoft/Windows BMP image\n\n#ifndef STBI_NO_BMP\nstatic int stbi__bmp_test_raw(stbi__context *s)\n{\n   int r;\n   int sz;\n   if (stbi__get8(s) != 'B') return 0;\n   if (stbi__get8(s) != 'M') return 0;\n   stbi__get32le(s); // discard filesize\n   stbi__get16le(s); // discard reserved\n   stbi__get16le(s); // discard reserved\n   stbi__get32le(s); // discard data offset\n   sz = stbi__get32le(s);\n   r = (sz == 12 || sz == 40 || sz == 56 || sz == 108 || sz == 124);\n   return r;\n}\n\nstatic int stbi__bmp_test(stbi__context *s)\n{\n   int r = stbi__bmp_test_raw(s);\n   stbi__rewind(s);\n   return r;\n}\n\n\n// returns 0..31 for the highest set bit\nstatic int stbi__high_bit(unsigned int z)\n{\n   int n=0;\n   if (z == 0) return -1;\n   if (z >= 0x10000) { n += 16; z >>= 16; }\n   if (z >= 0x00100) { n +=  8; z >>=  8; }\n   if (z >= 0x00010) { n +=  4; z >>=  4; }\n   if (z >= 0x00004) { n +=  2; z >>=  2; }\n   if (z >= 0x00002) { n +=  1;/* >>=  1;*/ }\n   return n;\n}\n\nstatic int stbi__bitcount(unsigned int a)\n{\n   a = (a & 0x55555555) + ((a >>  1) & 0x55555555); // max 2\n   a = (a & 0x33333333) + ((a >>  2) & 0x33333333); // max 4\n   a = (a + (a >> 4)) & 0x0f0f0f0f; // max 8 per 4, now 8 bits\n   a = (a + (a >> 8)); // max 16 per 8 bits\n   a = (a + (a >> 16)); // max 32 per 8 bits\n   return a & 0xff;\n}\n\n// extract an arbitrarily-aligned N-bit value (N=bits)\n// from v, and then make it 8-bits long and fractionally\n// extend it to full full range.\nstatic int stbi__shiftsigned(unsigned int v, int shift, int bits)\n{\n   static unsigned int mul_table[9] = {\n      0,\n      0xff/*0b11111111*/, 0x55/*0b01010101*/, 0x49/*0b01001001*/, 0x11/*0b00010001*/,\n      0x21/*0b00100001*/, 0x41/*0b01000001*/, 0x81/*0b10000001*/, 0x01/*0b00000001*/,\n   };\n   static unsigned int shift_table[9] = {\n      0, 0,0,1,0,2,4,6,0,\n   };\n   if (shift < 0)\n      v <<= -shift;\n   else\n      v >>= shift;\n   STBI_ASSERT(v < 256);\n   v >>= (8-bits);\n   STBI_ASSERT(bits >= 0 && bits <= 8);\n   return (int) ((unsigned) v * mul_table[bits]) >> shift_table[bits];\n}\n\ntypedef struct\n{\n   int bpp, offset, hsz;\n   unsigned int mr,mg,mb,ma, all_a;\n   int extra_read;\n} stbi__bmp_data;\n\nstatic int stbi__bmp_set_mask_defaults(stbi__bmp_data *info, int compress)\n{\n   // BI_BITFIELDS specifies masks explicitly, don't override\n   if (compress == 3)\n      return 1;\n\n   if (compress == 0) {\n      if (info->bpp == 16) {\n         info->mr = 31u << 10;\n         info->mg = 31u <<  5;\n         info->mb = 31u <<  0;\n      } else if (info->bpp == 32) {\n         info->mr = 0xffu << 16;\n         info->mg = 0xffu <<  8;\n         info->mb = 0xffu <<  0;\n         info->ma = 0xffu << 24;\n         info->all_a = 0; // if all_a is 0 at end, then we loaded alpha channel but it was all 0\n      } else {\n         // otherwise, use defaults, which is all-0\n         info->mr = info->mg = info->mb = info->ma = 0;\n      }\n      return 1;\n   }\n   return 0; // error\n}\n\nstatic void *stbi__bmp_parse_header(stbi__context *s, stbi__bmp_data *info)\n{\n   int hsz;\n   if (stbi__get8(s) != 'B' || stbi__get8(s) != 'M') return stbi__errpuc(\"not BMP\", \"Corrupt BMP\");\n   stbi__get32le(s); // discard filesize\n   stbi__get16le(s); // discard reserved\n   stbi__get16le(s); // discard reserved\n   info->offset = stbi__get32le(s);\n   info->hsz = hsz = stbi__get32le(s);\n   info->mr = info->mg = info->mb = info->ma = 0;\n   info->extra_read = 14;\n\n   if (info->offset < 0) return stbi__errpuc(\"bad BMP\", \"bad BMP\");\n\n   if (hsz != 12 && hsz != 40 && hsz != 56 && hsz != 108 && hsz != 124) return stbi__errpuc(\"unknown BMP\", \"BMP type not supported: unknown\");\n   if (hsz == 12) {\n      s->img_x = stbi__get16le(s);\n      s->img_y = stbi__get16le(s);\n   } else {\n      s->img_x = stbi__get32le(s);\n      s->img_y = stbi__get32le(s);\n   }\n   if (stbi__get16le(s) != 1) return stbi__errpuc(\"bad BMP\", \"bad BMP\");\n   info->bpp = stbi__get16le(s);\n   if (hsz != 12) {\n      int compress = stbi__get32le(s);\n      if (compress == 1 || compress == 2) return stbi__errpuc(\"BMP RLE\", \"BMP type not supported: RLE\");\n      if (compress >= 4) return stbi__errpuc(\"BMP JPEG/PNG\", \"BMP type not supported: unsupported compression\"); // this includes PNG/JPEG modes\n      if (compress == 3 && info->bpp != 16 && info->bpp != 32) return stbi__errpuc(\"bad BMP\", \"bad BMP\"); // bitfields requires 16 or 32 bits/pixel\n      stbi__get32le(s); // discard sizeof\n      stbi__get32le(s); // discard hres\n      stbi__get32le(s); // discard vres\n      stbi__get32le(s); // discard colorsused\n      stbi__get32le(s); // discard max important\n      if (hsz == 40 || hsz == 56) {\n         if (hsz == 56) {\n            stbi__get32le(s);\n            stbi__get32le(s);\n            stbi__get32le(s);\n            stbi__get32le(s);\n         }\n         if (info->bpp == 16 || info->bpp == 32) {\n            if (compress == 0) {\n               stbi__bmp_set_mask_defaults(info, compress);\n            } else if (compress == 3) {\n               info->mr = stbi__get32le(s);\n               info->mg = stbi__get32le(s);\n               info->mb = stbi__get32le(s);\n               info->extra_read += 12;\n               // not documented, but generated by photoshop and handled by mspaint\n               if (info->mr == info->mg && info->mg == info->mb) {\n                  // ?!?!?\n                  return stbi__errpuc(\"bad BMP\", \"bad BMP\");\n               }\n            } else\n               return stbi__errpuc(\"bad BMP\", \"bad BMP\");\n         }\n      } else {\n         // V4/V5 header\n         int i;\n         if (hsz != 108 && hsz != 124)\n            return stbi__errpuc(\"bad BMP\", \"bad BMP\");\n         info->mr = stbi__get32le(s);\n         info->mg = stbi__get32le(s);\n         info->mb = stbi__get32le(s);\n         info->ma = stbi__get32le(s);\n         if (compress != 3) // override mr/mg/mb unless in BI_BITFIELDS mode, as per docs\n            stbi__bmp_set_mask_defaults(info, compress);\n         stbi__get32le(s); // discard color space\n         for (i=0; i < 12; ++i)\n            stbi__get32le(s); // discard color space parameters\n         if (hsz == 124) {\n            stbi__get32le(s); // discard rendering intent\n            stbi__get32le(s); // discard offset of profile data\n            stbi__get32le(s); // discard size of profile data\n            stbi__get32le(s); // discard reserved\n         }\n      }\n   }\n   return (void *) 1;\n}\n\n\nstatic void *stbi__bmp_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)\n{\n   stbi_uc *out;\n   unsigned int mr=0,mg=0,mb=0,ma=0, all_a;\n   stbi_uc pal[256][4];\n   int psize=0,i,j,width;\n   int flip_vertically, pad, target;\n   stbi__bmp_data info;\n   STBI_NOTUSED(ri);\n\n   info.all_a = 255;\n   if (stbi__bmp_parse_header(s, &info) == NULL)\n      return NULL; // error code already set\n\n   flip_vertically = ((int) s->img_y) > 0;\n   s->img_y = abs((int) s->img_y);\n\n   if (s->img_y > STBI_MAX_DIMENSIONS) return stbi__errpuc(\"too large\",\"Very large image (corrupt?)\");\n   if (s->img_x > STBI_MAX_DIMENSIONS) return stbi__errpuc(\"too large\",\"Very large image (corrupt?)\");\n\n   mr = info.mr;\n   mg = info.mg;\n   mb = info.mb;\n   ma = info.ma;\n   all_a = info.all_a;\n\n   if (info.hsz == 12) {\n      if (info.bpp < 24)\n         psize = (info.offset - info.extra_read - 24) / 3;\n   } else {\n      if (info.bpp < 16)\n         psize = (info.offset - info.extra_read - info.hsz) >> 2;\n   }\n   if (psize == 0) {\n      // accept some number of extra bytes after the header, but if the offset points either to before\n      // the header ends or implies a large amount of extra data, reject the file as malformed\n      int bytes_read_so_far = s->callback_already_read + (int)(s->img_buffer - s->img_buffer_original);\n      int header_limit = 1024; // max we actually read is below 256 bytes currently.\n      int extra_data_limit = 256*4; // what ordinarily goes here is a palette; 256 entries*4 bytes is its max size.\n      if (bytes_read_so_far <= 0 || bytes_read_so_far > header_limit) {\n         return stbi__errpuc(\"bad header\", \"Corrupt BMP\");\n      }\n      // we established that bytes_read_so_far is positive and sensible.\n      // the first half of this test rejects offsets that are either too small positives, or\n      // negative, and guarantees that info.offset >= bytes_read_so_far > 0. this in turn\n      // ensures the number computed in the second half of the test can't overflow.\n      if (info.offset < bytes_read_so_far || info.offset - bytes_read_so_far > extra_data_limit) {\n         return stbi__errpuc(\"bad offset\", \"Corrupt BMP\");\n      } else {\n         stbi__skip(s, info.offset - bytes_read_so_far);\n      }\n   }\n\n   if (info.bpp == 24 && ma == 0xff000000)\n      s->img_n = 3;\n   else\n      s->img_n = ma ? 4 : 3;\n   if (req_comp && req_comp >= 3) // we can directly decode 3 or 4\n      target = req_comp;\n   else\n      target = s->img_n; // if they want monochrome, we'll post-convert\n\n   // sanity-check size\n   if (!stbi__mad3sizes_valid(target, s->img_x, s->img_y, 0))\n      return stbi__errpuc(\"too large\", \"Corrupt BMP\");\n\n   out = (stbi_uc *) stbi__malloc_mad3(target, s->img_x, s->img_y, 0);\n   if (!out) return stbi__errpuc(\"outofmem\", \"Out of memory\");\n   if (info.bpp < 16) {\n      int z=0;\n      if (psize == 0 || psize > 256) { STBI_FREE(out); return stbi__errpuc(\"invalid\", \"Corrupt BMP\"); }\n      for (i=0; i < psize; ++i) {\n         pal[i][2] = stbi__get8(s);\n         pal[i][1] = stbi__get8(s);\n         pal[i][0] = stbi__get8(s);\n         if (info.hsz != 12) stbi__get8(s);\n         pal[i][3] = 255;\n      }\n      stbi__skip(s, info.offset - info.extra_read - info.hsz - psize * (info.hsz == 12 ? 3 : 4));\n      if (info.bpp == 1) width = (s->img_x + 7) >> 3;\n      else if (info.bpp == 4) width = (s->img_x + 1) >> 1;\n      else if (info.bpp == 8) width = s->img_x;\n      else { STBI_FREE(out); return stbi__errpuc(\"bad bpp\", \"Corrupt BMP\"); }\n      pad = (-width)&3;\n      if (info.bpp == 1) {\n         for (j=0; j < (int) s->img_y; ++j) {\n            int bit_offset = 7, v = stbi__get8(s);\n            for (i=0; i < (int) s->img_x; ++i) {\n               int color = (v>>bit_offset)&0x1;\n               out[z++] = pal[color][0];\n               out[z++] = pal[color][1];\n               out[z++] = pal[color][2];\n               if (target == 4) out[z++] = 255;\n               if (i+1 == (int) s->img_x) break;\n               if((--bit_offset) < 0) {\n                  bit_offset = 7;\n                  v = stbi__get8(s);\n               }\n            }\n            stbi__skip(s, pad);\n         }\n      } else {\n         for (j=0; j < (int) s->img_y; ++j) {\n            for (i=0; i < (int) s->img_x; i += 2) {\n               int v=stbi__get8(s),v2=0;\n               if (info.bpp == 4) {\n                  v2 = v & 15;\n                  v >>= 4;\n               }\n               out[z++] = pal[v][0];\n               out[z++] = pal[v][1];\n               out[z++] = pal[v][2];\n               if (target == 4) out[z++] = 255;\n               if (i+1 == (int) s->img_x) break;\n               v = (info.bpp == 8) ? stbi__get8(s) : v2;\n               out[z++] = pal[v][0];\n               out[z++] = pal[v][1];\n               out[z++] = pal[v][2];\n               if (target == 4) out[z++] = 255;\n            }\n            stbi__skip(s, pad);\n         }\n      }\n   } else {\n      int rshift=0,gshift=0,bshift=0,ashift=0,rcount=0,gcount=0,bcount=0,acount=0;\n      int z = 0;\n      int easy=0;\n      stbi__skip(s, info.offset - info.extra_read - info.hsz);\n      if (info.bpp == 24) width = 3 * s->img_x;\n      else if (info.bpp == 16) width = 2*s->img_x;\n      else /* bpp = 32 and pad = 0 */ width=0;\n      pad = (-width) & 3;\n      if (info.bpp == 24) {\n         easy = 1;\n      } else if (info.bpp == 32) {\n         if (mb == 0xff && mg == 0xff00 && mr == 0x00ff0000 && ma == 0xff000000)\n            easy = 2;\n      }\n      if (!easy) {\n         if (!mr || !mg || !mb) { STBI_FREE(out); return stbi__errpuc(\"bad masks\", \"Corrupt BMP\"); }\n         // right shift amt to put high bit in position #7\n         rshift = stbi__high_bit(mr)-7; rcount = stbi__bitcount(mr);\n         gshift = stbi__high_bit(mg)-7; gcount = stbi__bitcount(mg);\n         bshift = stbi__high_bit(mb)-7; bcount = stbi__bitcount(mb);\n         ashift = stbi__high_bit(ma)-7; acount = stbi__bitcount(ma);\n         if (rcount > 8 || gcount > 8 || bcount > 8 || acount > 8) { STBI_FREE(out); return stbi__errpuc(\"bad masks\", \"Corrupt BMP\"); }\n      }\n      for (j=0; j < (int) s->img_y; ++j) {\n         if (easy) {\n            for (i=0; i < (int) s->img_x; ++i) {\n               unsigned char a;\n               out[z+2] = stbi__get8(s);\n               out[z+1] = stbi__get8(s);\n               out[z+0] = stbi__get8(s);\n               z += 3;\n               a = (easy == 2 ? stbi__get8(s) : 255);\n               all_a |= a;\n               if (target == 4) out[z++] = a;\n            }\n         } else {\n            int bpp = info.bpp;\n            for (i=0; i < (int) s->img_x; ++i) {\n               stbi__uint32 v = (bpp == 16 ? (stbi__uint32) stbi__get16le(s) : stbi__get32le(s));\n               unsigned int a;\n               out[z++] = STBI__BYTECAST(stbi__shiftsigned(v & mr, rshift, rcount));\n               out[z++] = STBI__BYTECAST(stbi__shiftsigned(v & mg, gshift, gcount));\n               out[z++] = STBI__BYTECAST(stbi__shiftsigned(v & mb, bshift, bcount));\n               a = (ma ? stbi__shiftsigned(v & ma, ashift, acount) : 255);\n               all_a |= a;\n               if (target == 4) out[z++] = STBI__BYTECAST(a);\n            }\n         }\n         stbi__skip(s, pad);\n      }\n   }\n\n   // if alpha channel is all 0s, replace with all 255s\n   if (target == 4 && all_a == 0)\n      for (i=4*s->img_x*s->img_y-1; i >= 0; i -= 4)\n         out[i] = 255;\n\n   if (flip_vertically) {\n      stbi_uc t;\n      for (j=0; j < (int) s->img_y>>1; ++j) {\n         stbi_uc *p1 = out +      j     *s->img_x*target;\n         stbi_uc *p2 = out + (s->img_y-1-j)*s->img_x*target;\n         for (i=0; i < (int) s->img_x*target; ++i) {\n            t = p1[i]; p1[i] = p2[i]; p2[i] = t;\n         }\n      }\n   }\n\n   if (req_comp && req_comp != target) {\n      out = stbi__convert_format(out, target, req_comp, s->img_x, s->img_y);\n      if (out == NULL) return out; // stbi__convert_format frees input on failure\n   }\n\n   *x = s->img_x;\n   *y = s->img_y;\n   if (comp) *comp = s->img_n;\n   return out;\n}\n#endif\n\n// Targa Truevision - TGA\n// by Jonathan Dummer\n#ifndef STBI_NO_TGA\n// returns STBI_rgb or whatever, 0 on error\nstatic int stbi__tga_get_comp(int bits_per_pixel, int is_grey, int* is_rgb16)\n{\n   // only RGB or RGBA (incl. 16bit) or grey allowed\n   if (is_rgb16) *is_rgb16 = 0;\n   switch(bits_per_pixel) {\n      case 8:  return STBI_grey;\n      case 16: if(is_grey) return STBI_grey_alpha;\n               // fallthrough\n      case 15: if(is_rgb16) *is_rgb16 = 1;\n               return STBI_rgb;\n      case 24: // fallthrough\n      case 32: return bits_per_pixel/8;\n      default: return 0;\n   }\n}\n\nstatic int stbi__tga_info(stbi__context *s, int *x, int *y, int *comp)\n{\n    int tga_w, tga_h, tga_comp, tga_image_type, tga_bits_per_pixel, tga_colormap_bpp;\n    int sz, tga_colormap_type;\n    stbi__get8(s);                   // discard Offset\n    tga_colormap_type = stbi__get8(s); // colormap type\n    if( tga_colormap_type > 1 ) {\n        stbi__rewind(s);\n        return 0;      // only RGB or indexed allowed\n    }\n    tga_image_type = stbi__get8(s); // image type\n    if ( tga_colormap_type == 1 ) { // colormapped (paletted) image\n        if (tga_image_type != 1 && tga_image_type != 9) {\n            stbi__rewind(s);\n            return 0;\n        }\n        stbi__skip(s,4);       // skip index of first colormap entry and number of entries\n        sz = stbi__get8(s);    //   check bits per palette color entry\n        if ( (sz != 8) && (sz != 15) && (sz != 16) && (sz != 24) && (sz != 32) ) {\n            stbi__rewind(s);\n            return 0;\n        }\n        stbi__skip(s,4);       // skip image x and y origin\n        tga_colormap_bpp = sz;\n    } else { // \"normal\" image w/o colormap - only RGB or grey allowed, +/- RLE\n        if ( (tga_image_type != 2) && (tga_image_type != 3) && (tga_image_type != 10) && (tga_image_type != 11) ) {\n            stbi__rewind(s);\n            return 0; // only RGB or grey allowed, +/- RLE\n        }\n        stbi__skip(s,9); // skip colormap specification and image x/y origin\n        tga_colormap_bpp = 0;\n    }\n    tga_w = stbi__get16le(s);\n    if( tga_w < 1 ) {\n        stbi__rewind(s);\n        return 0;   // test width\n    }\n    tga_h = stbi__get16le(s);\n    if( tga_h < 1 ) {\n        stbi__rewind(s);\n        return 0;   // test height\n    }\n    tga_bits_per_pixel = stbi__get8(s); // bits per pixel\n    stbi__get8(s); // ignore alpha bits\n    if (tga_colormap_bpp != 0) {\n        if((tga_bits_per_pixel != 8) && (tga_bits_per_pixel != 16)) {\n            // when using a colormap, tga_bits_per_pixel is the size of the indexes\n            // I don't think anything but 8 or 16bit indexes makes sense\n            stbi__rewind(s);\n            return 0;\n        }\n        tga_comp = stbi__tga_get_comp(tga_colormap_bpp, 0, NULL);\n    } else {\n        tga_comp = stbi__tga_get_comp(tga_bits_per_pixel, (tga_image_type == 3) || (tga_image_type == 11), NULL);\n    }\n    if(!tga_comp) {\n      stbi__rewind(s);\n      return 0;\n    }\n    if (x) *x = tga_w;\n    if (y) *y = tga_h;\n    if (comp) *comp = tga_comp;\n    return 1;                   // seems to have passed everything\n}\n\nstatic int stbi__tga_test(stbi__context *s)\n{\n   int res = 0;\n   int sz, tga_color_type;\n   stbi__get8(s);      //   discard Offset\n   tga_color_type = stbi__get8(s);   //   color type\n   if ( tga_color_type > 1 ) goto errorEnd;   //   only RGB or indexed allowed\n   sz = stbi__get8(s);   //   image type\n   if ( tga_color_type == 1 ) { // colormapped (paletted) image\n      if (sz != 1 && sz != 9) goto errorEnd; // colortype 1 demands image type 1 or 9\n      stbi__skip(s,4);       // skip index of first colormap entry and number of entries\n      sz = stbi__get8(s);    //   check bits per palette color entry\n      if ( (sz != 8) && (sz != 15) && (sz != 16) && (sz != 24) && (sz != 32) ) goto errorEnd;\n      stbi__skip(s,4);       // skip image x and y origin\n   } else { // \"normal\" image w/o colormap\n      if ( (sz != 2) && (sz != 3) && (sz != 10) && (sz != 11) ) goto errorEnd; // only RGB or grey allowed, +/- RLE\n      stbi__skip(s,9); // skip colormap specification and image x/y origin\n   }\n   if ( stbi__get16le(s) < 1 ) goto errorEnd;      //   test width\n   if ( stbi__get16le(s) < 1 ) goto errorEnd;      //   test height\n   sz = stbi__get8(s);   //   bits per pixel\n   if ( (tga_color_type == 1) && (sz != 8) && (sz != 16) ) goto errorEnd; // for colormapped images, bpp is size of an index\n   if ( (sz != 8) && (sz != 15) && (sz != 16) && (sz != 24) && (sz != 32) ) goto errorEnd;\n\n   res = 1; // if we got this far, everything's good and we can return 1 instead of 0\n\nerrorEnd:\n   stbi__rewind(s);\n   return res;\n}\n\n// read 16bit value and convert to 24bit RGB\nstatic void stbi__tga_read_rgb16(stbi__context *s, stbi_uc* out)\n{\n   stbi__uint16 px = (stbi__uint16)stbi__get16le(s);\n   stbi__uint16 fiveBitMask = 31;\n   // we have 3 channels with 5bits each\n   int r = (px >> 10) & fiveBitMask;\n   int g = (px >> 5) & fiveBitMask;\n   int b = px & fiveBitMask;\n   // Note that this saves the data in RGB(A) order, so it doesn't need to be swapped later\n   out[0] = (stbi_uc)((r * 255)/31);\n   out[1] = (stbi_uc)((g * 255)/31);\n   out[2] = (stbi_uc)((b * 255)/31);\n\n   // some people claim that the most significant bit might be used for alpha\n   // (possibly if an alpha-bit is set in the \"image descriptor byte\")\n   // but that only made 16bit test images completely translucent..\n   // so let's treat all 15 and 16bit TGAs as RGB with no alpha.\n}\n\nstatic void *stbi__tga_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)\n{\n   //   read in the TGA header stuff\n   int tga_offset = stbi__get8(s);\n   int tga_indexed = stbi__get8(s);\n   int tga_image_type = stbi__get8(s);\n   int tga_is_RLE = 0;\n   int tga_palette_start = stbi__get16le(s);\n   int tga_palette_len = stbi__get16le(s);\n   int tga_palette_bits = stbi__get8(s);\n   int tga_x_origin = stbi__get16le(s);\n   int tga_y_origin = stbi__get16le(s);\n   int tga_width = stbi__get16le(s);\n   int tga_height = stbi__get16le(s);\n   int tga_bits_per_pixel = stbi__get8(s);\n   int tga_comp, tga_rgb16=0;\n   int tga_inverted = stbi__get8(s);\n   // int tga_alpha_bits = tga_inverted & 15; // the 4 lowest bits - unused (useless?)\n   //   image data\n   unsigned char *tga_data;\n   unsigned char *tga_palette = NULL;\n   int i, j;\n   unsigned char raw_data[4] = {0};\n   int RLE_count = 0;\n   int RLE_repeating = 0;\n   int read_next_pixel = 1;\n   STBI_NOTUSED(ri);\n   STBI_NOTUSED(tga_x_origin); // @TODO\n   STBI_NOTUSED(tga_y_origin); // @TODO\n\n   if (tga_height > STBI_MAX_DIMENSIONS) return stbi__errpuc(\"too large\",\"Very large image (corrupt?)\");\n   if (tga_width > STBI_MAX_DIMENSIONS) return stbi__errpuc(\"too large\",\"Very large image (corrupt?)\");\n\n   //   do a tiny bit of precessing\n   if ( tga_image_type >= 8 )\n   {\n      tga_image_type -= 8;\n      tga_is_RLE = 1;\n   }\n   tga_inverted = 1 - ((tga_inverted >> 5) & 1);\n\n   //   If I'm paletted, then I'll use the number of bits from the palette\n   if ( tga_indexed ) tga_comp = stbi__tga_get_comp(tga_palette_bits, 0, &tga_rgb16);\n   else tga_comp = stbi__tga_get_comp(tga_bits_per_pixel, (tga_image_type == 3), &tga_rgb16);\n\n   if(!tga_comp) // shouldn't really happen, stbi__tga_test() should have ensured basic consistency\n      return stbi__errpuc(\"bad format\", \"Can't find out TGA pixelformat\");\n\n   //   tga info\n   *x = tga_width;\n   *y = tga_height;\n   if (comp) *comp = tga_comp;\n\n   if (!stbi__mad3sizes_valid(tga_width, tga_height, tga_comp, 0))\n      return stbi__errpuc(\"too large\", \"Corrupt TGA\");\n\n   tga_data = (unsigned char*)stbi__malloc_mad3(tga_width, tga_height, tga_comp, 0);\n   if (!tga_data) return stbi__errpuc(\"outofmem\", \"Out of memory\");\n\n   // skip to the data's starting position (offset usually = 0)\n   stbi__skip(s, tga_offset );\n\n   if ( !tga_indexed && !tga_is_RLE && !tga_rgb16 ) {\n      for (i=0; i < tga_height; ++i) {\n         int row = tga_inverted ? tga_height -i - 1 : i;\n         stbi_uc *tga_row = tga_data + row*tga_width*tga_comp;\n         stbi__getn(s, tga_row, tga_width * tga_comp);\n      }\n   } else  {\n      //   do I need to load a palette?\n      if ( tga_indexed)\n      {\n         if (tga_palette_len == 0) {  /* you have to have at least one entry! */\n            STBI_FREE(tga_data);\n            return stbi__errpuc(\"bad palette\", \"Corrupt TGA\");\n         }\n\n         //   any data to skip? (offset usually = 0)\n         stbi__skip(s, tga_palette_start );\n         //   load the palette\n         tga_palette = (unsigned char*)stbi__malloc_mad2(tga_palette_len, tga_comp, 0);\n         if (!tga_palette) {\n            STBI_FREE(tga_data);\n            return stbi__errpuc(\"outofmem\", \"Out of memory\");\n         }\n         if (tga_rgb16) {\n            stbi_uc *pal_entry = tga_palette;\n            STBI_ASSERT(tga_comp == STBI_rgb);\n            for (i=0; i < tga_palette_len; ++i) {\n               stbi__tga_read_rgb16(s, pal_entry);\n               pal_entry += tga_comp;\n            }\n         } else if (!stbi__getn(s, tga_palette, tga_palette_len * tga_comp)) {\n               STBI_FREE(tga_data);\n               STBI_FREE(tga_palette);\n               return stbi__errpuc(\"bad palette\", \"Corrupt TGA\");\n         }\n      }\n      //   load the data\n      for (i=0; i < tga_width * tga_height; ++i)\n      {\n         //   if I'm in RLE mode, do I need to get a RLE stbi__pngchunk?\n         if ( tga_is_RLE )\n         {\n            if ( RLE_count == 0 )\n            {\n               //   yep, get the next byte as a RLE command\n               int RLE_cmd = stbi__get8(s);\n               RLE_count = 1 + (RLE_cmd & 127);\n               RLE_repeating = RLE_cmd >> 7;\n               read_next_pixel = 1;\n            } else if ( !RLE_repeating )\n            {\n               read_next_pixel = 1;\n            }\n         } else\n         {\n            read_next_pixel = 1;\n         }\n         //   OK, if I need to read a pixel, do it now\n         if ( read_next_pixel )\n         {\n            //   load however much data we did have\n            if ( tga_indexed )\n            {\n               // read in index, then perform the lookup\n               int pal_idx = (tga_bits_per_pixel == 8) ? stbi__get8(s) : stbi__get16le(s);\n               if ( pal_idx >= tga_palette_len ) {\n                  // invalid index\n                  pal_idx = 0;\n               }\n               pal_idx *= tga_comp;\n               for (j = 0; j < tga_comp; ++j) {\n                  raw_data[j] = tga_palette[pal_idx+j];\n               }\n            } else if(tga_rgb16) {\n               STBI_ASSERT(tga_comp == STBI_rgb);\n               stbi__tga_read_rgb16(s, raw_data);\n            } else {\n               //   read in the data raw\n               for (j = 0; j < tga_comp; ++j) {\n                  raw_data[j] = stbi__get8(s);\n               }\n            }\n            //   clear the reading flag for the next pixel\n            read_next_pixel = 0;\n         } // end of reading a pixel\n\n         // copy data\n         for (j = 0; j < tga_comp; ++j)\n           tga_data[i*tga_comp+j] = raw_data[j];\n\n         //   in case we're in RLE mode, keep counting down\n         --RLE_count;\n      }\n      //   do I need to invert the image?\n      if ( tga_inverted )\n      {\n         for (j = 0; j*2 < tga_height; ++j)\n         {\n            int index1 = j * tga_width * tga_comp;\n            int index2 = (tga_height - 1 - j) * tga_width * tga_comp;\n            for (i = tga_width * tga_comp; i > 0; --i)\n            {\n               unsigned char temp = tga_data[index1];\n               tga_data[index1] = tga_data[index2];\n               tga_data[index2] = temp;\n               ++index1;\n               ++index2;\n            }\n         }\n      }\n      //   clear my palette, if I had one\n      if ( tga_palette != NULL )\n      {\n         STBI_FREE( tga_palette );\n      }\n   }\n\n   // swap RGB - if the source data was RGB16, it already is in the right order\n   if (tga_comp >= 3 && !tga_rgb16)\n   {\n      unsigned char* tga_pixel = tga_data;\n      for (i=0; i < tga_width * tga_height; ++i)\n      {\n         unsigned char temp = tga_pixel[0];\n         tga_pixel[0] = tga_pixel[2];\n         tga_pixel[2] = temp;\n         tga_pixel += tga_comp;\n      }\n   }\n\n   // convert to target component count\n   if (req_comp && req_comp != tga_comp)\n      tga_data = stbi__convert_format(tga_data, tga_comp, req_comp, tga_width, tga_height);\n\n   //   the things I do to get rid of an error message, and yet keep\n   //   Microsoft's C compilers happy... [8^(\n   tga_palette_start = tga_palette_len = tga_palette_bits =\n         tga_x_origin = tga_y_origin = 0;\n   STBI_NOTUSED(tga_palette_start);\n   //   OK, done\n   return tga_data;\n}\n#endif\n\n// *************************************************************************************************\n// Photoshop PSD loader -- PD by Thatcher Ulrich, integration by Nicolas Schulz, tweaked by STB\n\n#ifndef STBI_NO_PSD\nstatic int stbi__psd_test(stbi__context *s)\n{\n   int r = (stbi__get32be(s) == 0x38425053);\n   stbi__rewind(s);\n   return r;\n}\n\nstatic int stbi__psd_decode_rle(stbi__context *s, stbi_uc *p, int pixelCount)\n{\n   int count, nleft, len;\n\n   count = 0;\n   while ((nleft = pixelCount - count) > 0) {\n      len = stbi__get8(s);\n      if (len == 128) {\n         // No-op.\n      } else if (len < 128) {\n         // Copy next len+1 bytes literally.\n         len++;\n         if (len > nleft) return 0; // corrupt data\n         count += len;\n         while (len) {\n            *p = stbi__get8(s);\n            p += 4;\n            len--;\n         }\n      } else if (len > 128) {\n         stbi_uc   val;\n         // Next -len+1 bytes in the dest are replicated from next source byte.\n         // (Interpret len as a negative 8-bit int.)\n         len = 257 - len;\n         if (len > nleft) return 0; // corrupt data\n         val = stbi__get8(s);\n         count += len;\n         while (len) {\n            *p = val;\n            p += 4;\n            len--;\n         }\n      }\n   }\n\n   return 1;\n}\n\nstatic void *stbi__psd_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri, int bpc)\n{\n   int pixelCount;\n   int channelCount, compression;\n   int channel, i;\n   int bitdepth;\n   int w,h;\n   stbi_uc *out;\n   STBI_NOTUSED(ri);\n\n   // Check identifier\n   if (stbi__get32be(s) != 0x38425053)   // \"8BPS\"\n      return stbi__errpuc(\"not PSD\", \"Corrupt PSD image\");\n\n   // Check file type version.\n   if (stbi__get16be(s) != 1)\n      return stbi__errpuc(\"wrong version\", \"Unsupported version of PSD image\");\n\n   // Skip 6 reserved bytes.\n   stbi__skip(s, 6 );\n\n   // Read the number of channels (R, G, B, A, etc).\n   channelCount = stbi__get16be(s);\n   if (channelCount < 0 || channelCount > 16)\n      return stbi__errpuc(\"wrong channel count\", \"Unsupported number of channels in PSD image\");\n\n   // Read the rows and columns of the image.\n   h = stbi__get32be(s);\n   w = stbi__get32be(s);\n\n   if (h > STBI_MAX_DIMENSIONS) return stbi__errpuc(\"too large\",\"Very large image (corrupt?)\");\n   if (w > STBI_MAX_DIMENSIONS) return stbi__errpuc(\"too large\",\"Very large image (corrupt?)\");\n\n   // Make sure the depth is 8 bits.\n   bitdepth = stbi__get16be(s);\n   if (bitdepth != 8 && bitdepth != 16)\n      return stbi__errpuc(\"unsupported bit depth\", \"PSD bit depth is not 8 or 16 bit\");\n\n   // Make sure the color mode is RGB.\n   // Valid options are:\n   //   0: Bitmap\n   //   1: Grayscale\n   //   2: Indexed color\n   //   3: RGB color\n   //   4: CMYK color\n   //   7: Multichannel\n   //   8: Duotone\n   //   9: Lab color\n   if (stbi__get16be(s) != 3)\n      return stbi__errpuc(\"wrong color format\", \"PSD is not in RGB color format\");\n\n   // Skip the Mode Data.  (It's the palette for indexed color; other info for other modes.)\n   stbi__skip(s,stbi__get32be(s) );\n\n   // Skip the image resources.  (resolution, pen tool paths, etc)\n   stbi__skip(s, stbi__get32be(s) );\n\n   // Skip the reserved data.\n   stbi__skip(s, stbi__get32be(s) );\n\n   // Find out if the data is compressed.\n   // Known values:\n   //   0: no compression\n   //   1: RLE compressed\n   compression = stbi__get16be(s);\n   if (compression > 1)\n      return stbi__errpuc(\"bad compression\", \"PSD has an unknown compression format\");\n\n   // Check size\n   if (!stbi__mad3sizes_valid(4, w, h, 0))\n      return stbi__errpuc(\"too large\", \"Corrupt PSD\");\n\n   // Create the destination image.\n\n   if (!compression && bitdepth == 16 && bpc == 16) {\n      out = (stbi_uc *) stbi__malloc_mad3(8, w, h, 0);\n      ri->bits_per_channel = 16;\n   } else\n      out = (stbi_uc *) stbi__malloc(4 * w*h);\n\n   if (!out) return stbi__errpuc(\"outofmem\", \"Out of memory\");\n   pixelCount = w*h;\n\n   // Initialize the data to zero.\n   //memset( out, 0, pixelCount * 4 );\n\n   // Finally, the image data.\n   if (compression) {\n      // RLE as used by .PSD and .TIFF\n      // Loop until you get the number of unpacked bytes you are expecting:\n      //     Read the next source byte into n.\n      //     If n is between 0 and 127 inclusive, copy the next n+1 bytes literally.\n      //     Else if n is between -127 and -1 inclusive, copy the next byte -n+1 times.\n      //     Else if n is 128, noop.\n      // Endloop\n\n      // The RLE-compressed data is preceded by a 2-byte data count for each row in the data,\n      // which we're going to just skip.\n      stbi__skip(s, h * channelCount * 2 );\n\n      // Read the RLE data by channel.\n      for (channel = 0; channel < 4; channel++) {\n         stbi_uc *p;\n\n         p = out+channel;\n         if (channel >= channelCount) {\n            // Fill this channel with default data.\n            for (i = 0; i < pixelCount; i++, p += 4)\n               *p = (channel == 3 ? 255 : 0);\n         } else {\n            // Read the RLE data.\n            if (!stbi__psd_decode_rle(s, p, pixelCount)) {\n               STBI_FREE(out);\n               return stbi__errpuc(\"corrupt\", \"bad RLE data\");\n            }\n         }\n      }\n\n   } else {\n      // We're at the raw image data.  It's each channel in order (Red, Green, Blue, Alpha, ...)\n      // where each channel consists of an 8-bit (or 16-bit) value for each pixel in the image.\n\n      // Read the data by channel.\n      for (channel = 0; channel < 4; channel++) {\n         if (channel >= channelCount) {\n            // Fill this channel with default data.\n            if (bitdepth == 16 && bpc == 16) {\n               stbi__uint16 *q = ((stbi__uint16 *) out) + channel;\n               stbi__uint16 val = channel == 3 ? 65535 : 0;\n               for (i = 0; i < pixelCount; i++, q += 4)\n                  *q = val;\n            } else {\n               stbi_uc *p = out+channel;\n               stbi_uc val = channel == 3 ? 255 : 0;\n               for (i = 0; i < pixelCount; i++, p += 4)\n                  *p = val;\n            }\n         } else {\n            if (ri->bits_per_channel == 16) {    // output bpc\n               stbi__uint16 *q = ((stbi__uint16 *) out) + channel;\n               for (i = 0; i < pixelCount; i++, q += 4)\n                  *q = (stbi__uint16) stbi__get16be(s);\n            } else {\n               stbi_uc *p = out+channel;\n               if (bitdepth == 16) {  // input bpc\n                  for (i = 0; i < pixelCount; i++, p += 4)\n                     *p = (stbi_uc) (stbi__get16be(s) >> 8);\n               } else {\n                  for (i = 0; i < pixelCount; i++, p += 4)\n                     *p = stbi__get8(s);\n               }\n            }\n         }\n      }\n   }\n\n   // remove weird white matte from PSD\n   if (channelCount >= 4) {\n      if (ri->bits_per_channel == 16) {\n         for (i=0; i < w*h; ++i) {\n            stbi__uint16 *pixel = (stbi__uint16 *) out + 4*i;\n            if (pixel[3] != 0 && pixel[3] != 65535) {\n               float a = pixel[3] / 65535.0f;\n               float ra = 1.0f / a;\n               float inv_a = 65535.0f * (1 - ra);\n               pixel[0] = (stbi__uint16) (pixel[0]*ra + inv_a);\n               pixel[1] = (stbi__uint16) (pixel[1]*ra + inv_a);\n               pixel[2] = (stbi__uint16) (pixel[2]*ra + inv_a);\n            }\n         }\n      } else {\n         for (i=0; i < w*h; ++i) {\n            unsigned char *pixel = out + 4*i;\n            if (pixel[3] != 0 && pixel[3] != 255) {\n               float a = pixel[3] / 255.0f;\n               float ra = 1.0f / a;\n               float inv_a = 255.0f * (1 - ra);\n               pixel[0] = (unsigned char) (pixel[0]*ra + inv_a);\n               pixel[1] = (unsigned char) (pixel[1]*ra + inv_a);\n               pixel[2] = (unsigned char) (pixel[2]*ra + inv_a);\n            }\n         }\n      }\n   }\n\n   // convert to desired output format\n   if (req_comp && req_comp != 4) {\n      if (ri->bits_per_channel == 16)\n         out = (stbi_uc *) stbi__convert_format16((stbi__uint16 *) out, 4, req_comp, w, h);\n      else\n         out = stbi__convert_format(out, 4, req_comp, w, h);\n      if (out == NULL) return out; // stbi__convert_format frees input on failure\n   }\n\n   if (comp) *comp = 4;\n   *y = h;\n   *x = w;\n\n   return out;\n}\n#endif\n\n// *************************************************************************************************\n// Softimage PIC loader\n// by Tom Seddon\n//\n// See http://softimage.wiki.softimage.com/index.php/INFO:_PIC_file_format\n// See http://ozviz.wasp.uwa.edu.au/~pbourke/dataformats/softimagepic/\n\n#ifndef STBI_NO_PIC\nstatic int stbi__pic_is4(stbi__context *s,const char *str)\n{\n   int i;\n   for (i=0; i<4; ++i)\n      if (stbi__get8(s) != (stbi_uc)str[i])\n         return 0;\n\n   return 1;\n}\n\nstatic int stbi__pic_test_core(stbi__context *s)\n{\n   int i;\n\n   if (!stbi__pic_is4(s,\"\\x53\\x80\\xF6\\x34\"))\n      return 0;\n\n   for(i=0;i<84;++i)\n      stbi__get8(s);\n\n   if (!stbi__pic_is4(s,\"PICT\"))\n      return 0;\n\n   return 1;\n}\n\ntypedef struct\n{\n   stbi_uc size,type,channel;\n} stbi__pic_packet;\n\nstatic stbi_uc *stbi__readval(stbi__context *s, int channel, stbi_uc *dest)\n{\n   int mask=0x80, i;\n\n   for (i=0; i<4; ++i, mask>>=1) {\n      if (channel & mask) {\n         if (stbi__at_eof(s)) return stbi__errpuc(\"bad file\",\"PIC file too short\");\n         dest[i]=stbi__get8(s);\n      }\n   }\n\n   return dest;\n}\n\nstatic void stbi__copyval(int channel,stbi_uc *dest,const stbi_uc *src)\n{\n   int mask=0x80,i;\n\n   for (i=0;i<4; ++i, mask>>=1)\n      if (channel&mask)\n         dest[i]=src[i];\n}\n\nstatic stbi_uc *stbi__pic_load_core(stbi__context *s,int width,int height,int *comp, stbi_uc *result)\n{\n   int act_comp=0,num_packets=0,y,chained;\n   stbi__pic_packet packets[10];\n\n   // this will (should...) cater for even some bizarre stuff like having data\n    // for the same channel in multiple packets.\n   do {\n      stbi__pic_packet *packet;\n\n      if (num_packets==sizeof(packets)/sizeof(packets[0]))\n         return stbi__errpuc(\"bad format\",\"too many packets\");\n\n      packet = &packets[num_packets++];\n\n      chained = stbi__get8(s);\n      packet->size    = stbi__get8(s);\n      packet->type    = stbi__get8(s);\n      packet->channel = stbi__get8(s);\n\n      act_comp |= packet->channel;\n\n      if (stbi__at_eof(s))          return stbi__errpuc(\"bad file\",\"file too short (reading packets)\");\n      if (packet->size != 8)  return stbi__errpuc(\"bad format\",\"packet isn't 8bpp\");\n   } while (chained);\n\n   *comp = (act_comp & 0x10 ? 4 : 3); // has alpha channel?\n\n   for(y=0; y<height; ++y) {\n      int packet_idx;\n\n      for(packet_idx=0; packet_idx < num_packets; ++packet_idx) {\n         stbi__pic_packet *packet = &packets[packet_idx];\n         stbi_uc *dest = result+y*width*4;\n\n         switch (packet->type) {\n            default:\n               return stbi__errpuc(\"bad format\",\"packet has bad compression type\");\n\n            case 0: {//uncompressed\n               int x;\n\n               for(x=0;x<width;++x, dest+=4)\n                  if (!stbi__readval(s,packet->channel,dest))\n                     return 0;\n               break;\n            }\n\n            case 1://Pure RLE\n               {\n                  int left=width, i;\n\n                  while (left>0) {\n                     stbi_uc count,value[4];\n\n                     count=stbi__get8(s);\n                     if (stbi__at_eof(s))   return stbi__errpuc(\"bad file\",\"file too short (pure read count)\");\n\n                     if (count > left)\n                        count = (stbi_uc) left;\n\n                     if (!stbi__readval(s,packet->channel,value))  return 0;\n\n                     for(i=0; i<count; ++i,dest+=4)\n                        stbi__copyval(packet->channel,dest,value);\n                     left -= count;\n                  }\n               }\n               break;\n\n            case 2: {//Mixed RLE\n               int left=width;\n               while (left>0) {\n                  int count = stbi__get8(s), i;\n                  if (stbi__at_eof(s))  return stbi__errpuc(\"bad file\",\"file too short (mixed read count)\");\n\n                  if (count >= 128) { // Repeated\n                     stbi_uc value[4];\n\n                     if (count==128)\n                        count = stbi__get16be(s);\n                     else\n                        count -= 127;\n                     if (count > left)\n                        return stbi__errpuc(\"bad file\",\"scanline overrun\");\n\n                     if (!stbi__readval(s,packet->channel,value))\n                        return 0;\n\n                     for(i=0;i<count;++i, dest += 4)\n                        stbi__copyval(packet->channel,dest,value);\n                  } else { // Raw\n                     ++count;\n                     if (count>left) return stbi__errpuc(\"bad file\",\"scanline overrun\");\n\n                     for(i=0;i<count;++i, dest+=4)\n                        if (!stbi__readval(s,packet->channel,dest))\n                           return 0;\n                  }\n                  left-=count;\n               }\n               break;\n            }\n         }\n      }\n   }\n\n   return result;\n}\n\nstatic void *stbi__pic_load(stbi__context *s,int *px,int *py,int *comp,int req_comp, stbi__result_info *ri)\n{\n   stbi_uc *result;\n   int i, x,y, internal_comp;\n   STBI_NOTUSED(ri);\n\n   if (!comp) comp = &internal_comp;\n\n   for (i=0; i<92; ++i)\n      stbi__get8(s);\n\n   x = stbi__get16be(s);\n   y = stbi__get16be(s);\n\n   if (y > STBI_MAX_DIMENSIONS) return stbi__errpuc(\"too large\",\"Very large image (corrupt?)\");\n   if (x > STBI_MAX_DIMENSIONS) return stbi__errpuc(\"too large\",\"Very large image (corrupt?)\");\n\n   if (stbi__at_eof(s))  return stbi__errpuc(\"bad file\",\"file too short (pic header)\");\n   if (!stbi__mad3sizes_valid(x, y, 4, 0)) return stbi__errpuc(\"too large\", \"PIC image too large to decode\");\n\n   stbi__get32be(s); //skip `ratio'\n   stbi__get16be(s); //skip `fields'\n   stbi__get16be(s); //skip `pad'\n\n   // intermediate buffer is RGBA\n   result = (stbi_uc *) stbi__malloc_mad3(x, y, 4, 0);\n   if (!result) return stbi__errpuc(\"outofmem\", \"Out of memory\");\n   memset(result, 0xff, x*y*4);\n\n   if (!stbi__pic_load_core(s,x,y,comp, result)) {\n      STBI_FREE(result);\n      result=0;\n   }\n   *px = x;\n   *py = y;\n   if (req_comp == 0) req_comp = *comp;\n   result=stbi__convert_format(result,4,req_comp,x,y);\n\n   return result;\n}\n\nstatic int stbi__pic_test(stbi__context *s)\n{\n   int r = stbi__pic_test_core(s);\n   stbi__rewind(s);\n   return r;\n}\n#endif\n\n// *************************************************************************************************\n// GIF loader -- public domain by Jean-Marc Lienher -- simplified/shrunk by stb\n\n#ifndef STBI_NO_GIF\ntypedef struct\n{\n   stbi__int16 prefix;\n   stbi_uc first;\n   stbi_uc suffix;\n} stbi__gif_lzw;\n\ntypedef struct\n{\n   int w,h;\n   stbi_uc *out;                 // output buffer (always 4 components)\n   stbi_uc *background;          // The current \"background\" as far as a gif is concerned\n   stbi_uc *history;\n   int flags, bgindex, ratio, transparent, eflags;\n   stbi_uc  pal[256][4];\n   stbi_uc lpal[256][4];\n   stbi__gif_lzw codes[8192];\n   stbi_uc *color_table;\n   int parse, step;\n   int lflags;\n   int start_x, start_y;\n   int max_x, max_y;\n   int cur_x, cur_y;\n   int line_size;\n   int delay;\n} stbi__gif;\n\nstatic int stbi__gif_test_raw(stbi__context *s)\n{\n   int sz;\n   if (stbi__get8(s) != 'G' || stbi__get8(s) != 'I' || stbi__get8(s) != 'F' || stbi__get8(s) != '8') return 0;\n   sz = stbi__get8(s);\n   if (sz != '9' && sz != '7') return 0;\n   if (stbi__get8(s) != 'a') return 0;\n   return 1;\n}\n\nstatic int stbi__gif_test(stbi__context *s)\n{\n   int r = stbi__gif_test_raw(s);\n   stbi__rewind(s);\n   return r;\n}\n\nstatic void stbi__gif_parse_colortable(stbi__context *s, stbi_uc pal[256][4], int num_entries, int transp)\n{\n   int i;\n   for (i=0; i < num_entries; ++i) {\n      pal[i][2] = stbi__get8(s);\n      pal[i][1] = stbi__get8(s);\n      pal[i][0] = stbi__get8(s);\n      pal[i][3] = transp == i ? 0 : 255;\n   }\n}\n\nstatic int stbi__gif_header(stbi__context *s, stbi__gif *g, int *comp, int is_info)\n{\n   stbi_uc version;\n   if (stbi__get8(s) != 'G' || stbi__get8(s) != 'I' || stbi__get8(s) != 'F' || stbi__get8(s) != '8')\n      return stbi__err(\"not GIF\", \"Corrupt GIF\");\n\n   version = stbi__get8(s);\n   if (version != '7' && version != '9')    return stbi__err(\"not GIF\", \"Corrupt GIF\");\n   if (stbi__get8(s) != 'a')                return stbi__err(\"not GIF\", \"Corrupt GIF\");\n\n   stbi__g_failure_reason = \"\";\n   g->w = stbi__get16le(s);\n   g->h = stbi__get16le(s);\n   g->flags = stbi__get8(s);\n   g->bgindex = stbi__get8(s);\n   g->ratio = stbi__get8(s);\n   g->transparent = -1;\n\n   if (g->w > STBI_MAX_DIMENSIONS) return stbi__err(\"too large\",\"Very large image (corrupt?)\");\n   if (g->h > STBI_MAX_DIMENSIONS) return stbi__err(\"too large\",\"Very large image (corrupt?)\");\n\n   if (comp != 0) *comp = 4;  // can't actually tell whether it's 3 or 4 until we parse the comments\n\n   if (is_info) return 1;\n\n   if (g->flags & 0x80)\n      stbi__gif_parse_colortable(s,g->pal, 2 << (g->flags & 7), -1);\n\n   return 1;\n}\n\nstatic int stbi__gif_info_raw(stbi__context *s, int *x, int *y, int *comp)\n{\n   stbi__gif* g = (stbi__gif*) stbi__malloc(sizeof(stbi__gif));\n   if (!g) return stbi__err(\"outofmem\", \"Out of memory\");\n   if (!stbi__gif_header(s, g, comp, 1)) {\n      STBI_FREE(g);\n      stbi__rewind( s );\n      return 0;\n   }\n   if (x) *x = g->w;\n   if (y) *y = g->h;\n   STBI_FREE(g);\n   return 1;\n}\n\nstatic void stbi__out_gif_code(stbi__gif *g, stbi__uint16 code)\n{\n   stbi_uc *p, *c;\n   int idx;\n\n   // recurse to decode the prefixes, since the linked-list is backwards,\n   // and working backwards through an interleaved image would be nasty\n   if (g->codes[code].prefix >= 0)\n      stbi__out_gif_code(g, g->codes[code].prefix);\n\n   if (g->cur_y >= g->max_y) return;\n\n   idx = g->cur_x + g->cur_y;\n   p = &g->out[idx];\n   g->history[idx / 4] = 1;\n\n   c = &g->color_table[g->codes[code].suffix * 4];\n   if (c[3] > 128) { // don't render transparent pixels;\n      p[0] = c[2];\n      p[1] = c[1];\n      p[2] = c[0];\n      p[3] = c[3];\n   }\n   g->cur_x += 4;\n\n   if (g->cur_x >= g->max_x) {\n      g->cur_x = g->start_x;\n      g->cur_y += g->step;\n\n      while (g->cur_y >= g->max_y && g->parse > 0) {\n         g->step = (1 << g->parse) * g->line_size;\n         g->cur_y = g->start_y + (g->step >> 1);\n         --g->parse;\n      }\n   }\n}\n\nstatic stbi_uc *stbi__process_gif_raster(stbi__context *s, stbi__gif *g)\n{\n   stbi_uc lzw_cs;\n   stbi__int32 len, init_code;\n   stbi__uint32 first;\n   stbi__int32 codesize, codemask, avail, oldcode, bits, valid_bits, clear;\n   stbi__gif_lzw *p;\n\n   lzw_cs = stbi__get8(s);\n   if (lzw_cs > 12) return NULL;\n   clear = 1 << lzw_cs;\n   first = 1;\n   codesize = lzw_cs + 1;\n   codemask = (1 << codesize) - 1;\n   bits = 0;\n   valid_bits = 0;\n   for (init_code = 0; init_code < clear; init_code++) {\n      g->codes[init_code].prefix = -1;\n      g->codes[init_code].first = (stbi_uc) init_code;\n      g->codes[init_code].suffix = (stbi_uc) init_code;\n   }\n\n   // support no starting clear code\n   avail = clear+2;\n   oldcode = -1;\n\n   len = 0;\n   for(;;) {\n      if (valid_bits < codesize) {\n         if (len == 0) {\n            len = stbi__get8(s); // start new block\n            if (len == 0)\n               return g->out;\n         }\n         --len;\n         bits |= (stbi__int32) stbi__get8(s) << valid_bits;\n         valid_bits += 8;\n      } else {\n         stbi__int32 code = bits & codemask;\n         bits >>= codesize;\n         valid_bits -= codesize;\n         // @OPTIMIZE: is there some way we can accelerate the non-clear path?\n         if (code == clear) {  // clear code\n            codesize = lzw_cs + 1;\n            codemask = (1 << codesize) - 1;\n            avail = clear + 2;\n            oldcode = -1;\n            first = 0;\n         } else if (code == clear + 1) { // end of stream code\n            stbi__skip(s, len);\n            while ((len = stbi__get8(s)) > 0)\n               stbi__skip(s,len);\n            return g->out;\n         } else if (code <= avail) {\n            if (first) {\n               return stbi__errpuc(\"no clear code\", \"Corrupt GIF\");\n            }\n\n            if (oldcode >= 0) {\n               p = &g->codes[avail++];\n               if (avail > 8192) {\n                  return stbi__errpuc(\"too many codes\", \"Corrupt GIF\");\n               }\n\n               p->prefix = (stbi__int16) oldcode;\n               p->first = g->codes[oldcode].first;\n               p->suffix = (code == avail) ? p->first : g->codes[code].first;\n            } else if (code == avail)\n               return stbi__errpuc(\"illegal code in raster\", \"Corrupt GIF\");\n\n            stbi__out_gif_code(g, (stbi__uint16) code);\n\n            if ((avail & codemask) == 0 && avail <= 0x0FFF) {\n               codesize++;\n               codemask = (1 << codesize) - 1;\n            }\n\n            oldcode = code;\n         } else {\n            return stbi__errpuc(\"illegal code in raster\", \"Corrupt GIF\");\n         }\n      }\n   }\n}\n\n// this function is designed to support animated gifs, although stb_image doesn't support it\n// two back is the image from two frames ago, used for a very specific disposal format\nstatic stbi_uc *stbi__gif_load_next(stbi__context *s, stbi__gif *g, int *comp, int req_comp, stbi_uc *two_back)\n{\n   int dispose;\n   int first_frame;\n   int pi;\n   int pcount;\n   STBI_NOTUSED(req_comp);\n\n   // on first frame, any non-written pixels get the background colour (non-transparent)\n   first_frame = 0;\n   if (g->out == 0) {\n      if (!stbi__gif_header(s, g, comp,0)) return 0; // stbi__g_failure_reason set by stbi__gif_header\n      if (!stbi__mad3sizes_valid(4, g->w, g->h, 0))\n         return stbi__errpuc(\"too large\", \"GIF image is too large\");\n      pcount = g->w * g->h;\n      g->out = (stbi_uc *) stbi__malloc(4 * pcount);\n      g->background = (stbi_uc *) stbi__malloc(4 * pcount);\n      g->history = (stbi_uc *) stbi__malloc(pcount);\n      if (!g->out || !g->background || !g->history)\n         return stbi__errpuc(\"outofmem\", \"Out of memory\");\n\n      // image is treated as \"transparent\" at the start - ie, nothing overwrites the current background;\n      // background colour is only used for pixels that are not rendered first frame, after that \"background\"\n      // color refers to the color that was there the previous frame.\n      memset(g->out, 0x00, 4 * pcount);\n      memset(g->background, 0x00, 4 * pcount); // state of the background (starts transparent)\n      memset(g->history, 0x00, pcount);        // pixels that were affected previous frame\n      first_frame = 1;\n   } else {\n      // second frame - how do we dispose of the previous one?\n      dispose = (g->eflags & 0x1C) >> 2;\n      pcount = g->w * g->h;\n\n      if ((dispose == 3) && (two_back == 0)) {\n         dispose = 2; // if I don't have an image to revert back to, default to the old background\n      }\n\n      if (dispose == 3) { // use previous graphic\n         for (pi = 0; pi < pcount; ++pi) {\n            if (g->history[pi]) {\n               memcpy( &g->out[pi * 4], &two_back[pi * 4], 4 );\n            }\n         }\n      } else if (dispose == 2) {\n         // restore what was changed last frame to background before that frame;\n         for (pi = 0; pi < pcount; ++pi) {\n            if (g->history[pi]) {\n               memcpy( &g->out[pi * 4], &g->background[pi * 4], 4 );\n            }\n         }\n      } else {\n         // This is a non-disposal case eithe way, so just\n         // leave the pixels as is, and they will become the new background\n         // 1: do not dispose\n         // 0:  not specified.\n      }\n\n      // background is what out is after the undoing of the previou frame;\n      memcpy( g->background, g->out, 4 * g->w * g->h );\n   }\n\n   // clear my history;\n   memset( g->history, 0x00, g->w * g->h );        // pixels that were affected previous frame\n\n   for (;;) {\n      int tag = stbi__get8(s);\n      switch (tag) {\n         case 0x2C: /* Image Descriptor */\n         {\n            stbi__int32 x, y, w, h;\n            stbi_uc *o;\n\n            x = stbi__get16le(s);\n            y = stbi__get16le(s);\n            w = stbi__get16le(s);\n            h = stbi__get16le(s);\n            if (((x + w) > (g->w)) || ((y + h) > (g->h)))\n               return stbi__errpuc(\"bad Image Descriptor\", \"Corrupt GIF\");\n\n            g->line_size = g->w * 4;\n            g->start_x = x * 4;\n            g->start_y = y * g->line_size;\n            g->max_x   = g->start_x + w * 4;\n            g->max_y   = g->start_y + h * g->line_size;\n            g->cur_x   = g->start_x;\n            g->cur_y   = g->start_y;\n\n            // if the width of the specified rectangle is 0, that means\n            // we may not see *any* pixels or the image is malformed;\n            // to make sure this is caught, move the current y down to\n            // max_y (which is what out_gif_code checks).\n            if (w == 0)\n               g->cur_y = g->max_y;\n\n            g->lflags = stbi__get8(s);\n\n            if (g->lflags & 0x40) {\n               g->step = 8 * g->line_size; // first interlaced spacing\n               g->parse = 3;\n            } else {\n               g->step = g->line_size;\n               g->parse = 0;\n            }\n\n            if (g->lflags & 0x80) {\n               stbi__gif_parse_colortable(s,g->lpal, 2 << (g->lflags & 7), g->eflags & 0x01 ? g->transparent : -1);\n               g->color_table = (stbi_uc *) g->lpal;\n            } else if (g->flags & 0x80) {\n               g->color_table = (stbi_uc *) g->pal;\n            } else\n               return stbi__errpuc(\"missing color table\", \"Corrupt GIF\");\n\n            o = stbi__process_gif_raster(s, g);\n            if (!o) return NULL;\n\n            // if this was the first frame,\n            pcount = g->w * g->h;\n            if (first_frame && (g->bgindex > 0)) {\n               // if first frame, any pixel not drawn to gets the background color\n               for (pi = 0; pi < pcount; ++pi) {\n                  if (g->history[pi] == 0) {\n                     g->pal[g->bgindex][3] = 255; // just in case it was made transparent, undo that; It will be reset next frame if need be;\n                     memcpy( &g->out[pi * 4], &g->pal[g->bgindex], 4 );\n                  }\n               }\n            }\n\n            return o;\n         }\n\n         case 0x21: // Comment Extension.\n         {\n            int len;\n            int ext = stbi__get8(s);\n            if (ext == 0xF9) { // Graphic Control Extension.\n               len = stbi__get8(s);\n               if (len == 4) {\n                  g->eflags = stbi__get8(s);\n                  g->delay = 10 * stbi__get16le(s); // delay - 1/100th of a second, saving as 1/1000ths.\n\n                  // unset old transparent\n                  if (g->transparent >= 0) {\n                     g->pal[g->transparent][3] = 255;\n                  }\n                  if (g->eflags & 0x01) {\n                     g->transparent = stbi__get8(s);\n                     if (g->transparent >= 0) {\n                        g->pal[g->transparent][3] = 0;\n                     }\n                  } else {\n                     // don't need transparent\n                     stbi__skip(s, 1);\n                     g->transparent = -1;\n                  }\n               } else {\n                  stbi__skip(s, len);\n                  break;\n               }\n            }\n            while ((len = stbi__get8(s)) != 0) {\n               stbi__skip(s, len);\n            }\n            break;\n         }\n\n         case 0x3B: // gif stream termination code\n            return (stbi_uc *) s; // using '1' causes warning on some compilers\n\n         default:\n            return stbi__errpuc(\"unknown code\", \"Corrupt GIF\");\n      }\n   }\n}\n\nstatic void *stbi__load_gif_main_outofmem(stbi__gif *g, stbi_uc *out, int **delays)\n{\n   STBI_FREE(g->out);\n   STBI_FREE(g->history);\n   STBI_FREE(g->background);\n\n   if (out) STBI_FREE(out);\n   if (delays && *delays) STBI_FREE(*delays);\n   return stbi__errpuc(\"outofmem\", \"Out of memory\");\n}\n\nstatic void *stbi__load_gif_main(stbi__context *s, int **delays, int *x, int *y, int *z, int *comp, int req_comp)\n{\n   if (stbi__gif_test(s)) {\n      int layers = 0;\n      stbi_uc *u = 0;\n      stbi_uc *out = 0;\n      stbi_uc *two_back = 0;\n      stbi__gif g;\n      int stride;\n      int out_size = 0;\n      int delays_size = 0;\n\n      STBI_NOTUSED(out_size);\n      STBI_NOTUSED(delays_size);\n\n      memset(&g, 0, sizeof(g));\n      if (delays) {\n         *delays = 0;\n      }\n\n      do {\n         u = stbi__gif_load_next(s, &g, comp, req_comp, two_back);\n         if (u == (stbi_uc *) s) u = 0;  // end of animated gif marker\n\n         if (u) {\n            *x = g.w;\n            *y = g.h;\n            ++layers;\n            stride = g.w * g.h * 4;\n\n            if (out) {\n               void *tmp = (stbi_uc*) STBI_REALLOC_SIZED( out, out_size, layers * stride );\n               if (!tmp)\n                  return stbi__load_gif_main_outofmem(&g, out, delays);\n               else {\n                   out = (stbi_uc*) tmp;\n                   out_size = layers * stride;\n               }\n\n               if (delays) {\n                  int *new_delays = (int*) STBI_REALLOC_SIZED( *delays, delays_size, sizeof(int) * layers );\n                  if (!new_delays)\n                     return stbi__load_gif_main_outofmem(&g, out, delays);\n                  *delays = new_delays;\n                  delays_size = layers * sizeof(int);\n               }\n            } else {\n               out = (stbi_uc*)stbi__malloc( layers * stride );\n               if (!out)\n                  return stbi__load_gif_main_outofmem(&g, out, delays);\n               out_size = layers * stride;\n               if (delays) {\n                  *delays = (int*) stbi__malloc( layers * sizeof(int) );\n                  if (!*delays)\n                     return stbi__load_gif_main_outofmem(&g, out, delays);\n                  delays_size = layers * sizeof(int);\n               }\n            }\n            memcpy( out + ((layers - 1) * stride), u, stride );\n            if (layers >= 2) {\n               two_back = out - 2 * stride;\n            }\n\n            if (delays) {\n               (*delays)[layers - 1U] = g.delay;\n            }\n         }\n      } while (u != 0);\n\n      // free temp buffer;\n      STBI_FREE(g.out);\n      STBI_FREE(g.history);\n      STBI_FREE(g.background);\n\n      // do the final conversion after loading everything;\n      if (req_comp && req_comp != 4)\n         out = stbi__convert_format(out, 4, req_comp, layers * g.w, g.h);\n\n      *z = layers;\n      return out;\n   } else {\n      return stbi__errpuc(\"not GIF\", \"Image was not as a gif type.\");\n   }\n}\n\nstatic void *stbi__gif_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)\n{\n   stbi_uc *u = 0;\n   stbi__gif g;\n   memset(&g, 0, sizeof(g));\n   STBI_NOTUSED(ri);\n\n   u = stbi__gif_load_next(s, &g, comp, req_comp, 0);\n   if (u == (stbi_uc *) s) u = 0;  // end of animated gif marker\n   if (u) {\n      *x = g.w;\n      *y = g.h;\n\n      // moved conversion to after successful load so that the same\n      // can be done for multiple frames.\n      if (req_comp && req_comp != 4)\n         u = stbi__convert_format(u, 4, req_comp, g.w, g.h);\n   } else if (g.out) {\n      // if there was an error and we allocated an image buffer, free it!\n      STBI_FREE(g.out);\n   }\n\n   // free buffers needed for multiple frame loading;\n   STBI_FREE(g.history);\n   STBI_FREE(g.background);\n\n   return u;\n}\n\nstatic int stbi__gif_info(stbi__context *s, int *x, int *y, int *comp)\n{\n   return stbi__gif_info_raw(s,x,y,comp);\n}\n#endif\n\n// *************************************************************************************************\n// Radiance RGBE HDR loader\n// originally by Nicolas Schulz\n#ifndef STBI_NO_HDR\nstatic int stbi__hdr_test_core(stbi__context *s, const char *signature)\n{\n   int i;\n   for (i=0; signature[i]; ++i)\n      if (stbi__get8(s) != signature[i])\n          return 0;\n   stbi__rewind(s);\n   return 1;\n}\n\nstatic int stbi__hdr_test(stbi__context* s)\n{\n   int r = stbi__hdr_test_core(s, \"#?RADIANCE\\n\");\n   stbi__rewind(s);\n   if(!r) {\n       r = stbi__hdr_test_core(s, \"#?RGBE\\n\");\n       stbi__rewind(s);\n   }\n   return r;\n}\n\n#define STBI__HDR_BUFLEN  1024\nstatic char *stbi__hdr_gettoken(stbi__context *z, char *buffer)\n{\n   int len=0;\n   char c = '\\0';\n\n   c = (char) stbi__get8(z);\n\n   while (!stbi__at_eof(z) && c != '\\n') {\n      buffer[len++] = c;\n      if (len == STBI__HDR_BUFLEN-1) {\n         // flush to end of line\n         while (!stbi__at_eof(z) && stbi__get8(z) != '\\n')\n            ;\n         break;\n      }\n      c = (char) stbi__get8(z);\n   }\n\n   buffer[len] = 0;\n   return buffer;\n}\n\nstatic void stbi__hdr_convert(float *output, stbi_uc *input, int req_comp)\n{\n   if ( input[3] != 0 ) {\n      float f1;\n      // Exponent\n      f1 = (float) ldexp(1.0f, input[3] - (int)(128 + 8));\n      if (req_comp <= 2)\n         output[0] = (input[0] + input[1] + input[2]) * f1 / 3;\n      else {\n         output[0] = input[0] * f1;\n         output[1] = input[1] * f1;\n         output[2] = input[2] * f1;\n      }\n      if (req_comp == 2) output[1] = 1;\n      if (req_comp == 4) output[3] = 1;\n   } else {\n      switch (req_comp) {\n         case 4: output[3] = 1; /* fallthrough */\n         case 3: output[0] = output[1] = output[2] = 0;\n                 break;\n         case 2: output[1] = 1; /* fallthrough */\n         case 1: output[0] = 0;\n                 break;\n      }\n   }\n}\n\nstatic float *stbi__hdr_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)\n{\n   char buffer[STBI__HDR_BUFLEN];\n   char *token;\n   int valid = 0;\n   int width, height;\n   stbi_uc *scanline;\n   float *hdr_data;\n   int len;\n   unsigned char count, value;\n   int i, j, k, c1,c2, z;\n   const char *headerToken;\n   STBI_NOTUSED(ri);\n\n   // Check identifier\n   headerToken = stbi__hdr_gettoken(s,buffer);\n   if (strcmp(headerToken, \"#?RADIANCE\") != 0 && strcmp(headerToken, \"#?RGBE\") != 0)\n      return stbi__errpf(\"not HDR\", \"Corrupt HDR image\");\n\n   // Parse header\n   for(;;) {\n      token = stbi__hdr_gettoken(s,buffer);\n      if (token[0] == 0) break;\n      if (strcmp(token, \"FORMAT=32-bit_rle_rgbe\") == 0) valid = 1;\n   }\n\n   if (!valid)    return stbi__errpf(\"unsupported format\", \"Unsupported HDR format\");\n\n   // Parse width and height\n   // can't use sscanf() if we're not using stdio!\n   token = stbi__hdr_gettoken(s,buffer);\n   if (strncmp(token, \"-Y \", 3))  return stbi__errpf(\"unsupported data layout\", \"Unsupported HDR format\");\n   token += 3;\n   height = (int) strtol(token, &token, 10);\n   while (*token == ' ') ++token;\n   if (strncmp(token, \"+X \", 3))  return stbi__errpf(\"unsupported data layout\", \"Unsupported HDR format\");\n   token += 3;\n   width = (int) strtol(token, NULL, 10);\n\n   if (height > STBI_MAX_DIMENSIONS) return stbi__errpf(\"too large\",\"Very large image (corrupt?)\");\n   if (width > STBI_MAX_DIMENSIONS) return stbi__errpf(\"too large\",\"Very large image (corrupt?)\");\n\n   *x = width;\n   *y = height;\n\n   if (comp) *comp = 3;\n   if (req_comp == 0) req_comp = 3;\n\n   if (!stbi__mad4sizes_valid(width, height, req_comp, sizeof(float), 0))\n      return stbi__errpf(\"too large\", \"HDR image is too large\");\n\n   // Read data\n   hdr_data = (float *) stbi__malloc_mad4(width, height, req_comp, sizeof(float), 0);\n   if (!hdr_data)\n      return stbi__errpf(\"outofmem\", \"Out of memory\");\n\n   // Load image data\n   // image data is stored as some number of sca\n   if ( width < 8 || width >= 32768) {\n      // Read flat data\n      for (j=0; j < height; ++j) {\n         for (i=0; i < width; ++i) {\n            stbi_uc rgbe[4];\n           main_decode_loop:\n            stbi__getn(s, rgbe, 4);\n            stbi__hdr_convert(hdr_data + j * width * req_comp + i * req_comp, rgbe, req_comp);\n         }\n      }\n   } else {\n      // Read RLE-encoded data\n      scanline = NULL;\n\n      for (j = 0; j < height; ++j) {\n         c1 = stbi__get8(s);\n         c2 = stbi__get8(s);\n         len = stbi__get8(s);\n         if (c1 != 2 || c2 != 2 || (len & 0x80)) {\n            // not run-length encoded, so we have to actually use THIS data as a decoded\n            // pixel (note this can't be a valid pixel--one of RGB must be >= 128)\n            stbi_uc rgbe[4];\n            rgbe[0] = (stbi_uc) c1;\n            rgbe[1] = (stbi_uc) c2;\n            rgbe[2] = (stbi_uc) len;\n            rgbe[3] = (stbi_uc) stbi__get8(s);\n            stbi__hdr_convert(hdr_data, rgbe, req_comp);\n            i = 1;\n            j = 0;\n            STBI_FREE(scanline);\n            goto main_decode_loop; // yes, this makes no sense\n         }\n         len <<= 8;\n         len |= stbi__get8(s);\n         if (len != width) { STBI_FREE(hdr_data); STBI_FREE(scanline); return stbi__errpf(\"invalid decoded scanline length\", \"corrupt HDR\"); }\n         if (scanline == NULL) {\n            scanline = (stbi_uc *) stbi__malloc_mad2(width, 4, 0);\n            if (!scanline) {\n               STBI_FREE(hdr_data);\n               return stbi__errpf(\"outofmem\", \"Out of memory\");\n            }\n         }\n\n         for (k = 0; k < 4; ++k) {\n            int nleft;\n            i = 0;\n            while ((nleft = width - i) > 0) {\n               count = stbi__get8(s);\n               if (count > 128) {\n                  // Run\n                  value = stbi__get8(s);\n                  count -= 128;\n                  if ((count == 0) || (count > nleft)) { STBI_FREE(hdr_data); STBI_FREE(scanline); return stbi__errpf(\"corrupt\", \"bad RLE data in HDR\"); }\n                  for (z = 0; z < count; ++z)\n                     scanline[i++ * 4 + k] = value;\n               } else {\n                  // Dump\n                  if ((count == 0) || (count > nleft)) { STBI_FREE(hdr_data); STBI_FREE(scanline); return stbi__errpf(\"corrupt\", \"bad RLE data in HDR\"); }\n                  for (z = 0; z < count; ++z)\n                     scanline[i++ * 4 + k] = stbi__get8(s);\n               }\n            }\n         }\n         for (i=0; i < width; ++i)\n            stbi__hdr_convert(hdr_data+(j*width + i)*req_comp, scanline + i*4, req_comp);\n      }\n      if (scanline)\n         STBI_FREE(scanline);\n   }\n\n   return hdr_data;\n}\n\nstatic int stbi__hdr_info(stbi__context *s, int *x, int *y, int *comp)\n{\n   char buffer[STBI__HDR_BUFLEN];\n   char *token;\n   int valid = 0;\n   int dummy;\n\n   if (!x) x = &dummy;\n   if (!y) y = &dummy;\n   if (!comp) comp = &dummy;\n\n   if (stbi__hdr_test(s) == 0) {\n       stbi__rewind( s );\n       return 0;\n   }\n\n   for(;;) {\n      token = stbi__hdr_gettoken(s,buffer);\n      if (token[0] == 0) break;\n      if (strcmp(token, \"FORMAT=32-bit_rle_rgbe\") == 0) valid = 1;\n   }\n\n   if (!valid) {\n       stbi__rewind( s );\n       return 0;\n   }\n   token = stbi__hdr_gettoken(s,buffer);\n   if (strncmp(token, \"-Y \", 3)) {\n       stbi__rewind( s );\n       return 0;\n   }\n   token += 3;\n   *y = (int) strtol(token, &token, 10);\n   while (*token == ' ') ++token;\n   if (strncmp(token, \"+X \", 3)) {\n       stbi__rewind( s );\n       return 0;\n   }\n   token += 3;\n   *x = (int) strtol(token, NULL, 10);\n   *comp = 3;\n   return 1;\n}\n#endif // STBI_NO_HDR\n\n#ifndef STBI_NO_BMP\nstatic int stbi__bmp_info(stbi__context *s, int *x, int *y, int *comp)\n{\n   void *p;\n   stbi__bmp_data info;\n\n   info.all_a = 255;\n   p = stbi__bmp_parse_header(s, &info);\n   if (p == NULL) {\n      stbi__rewind( s );\n      return 0;\n   }\n   if (x) *x = s->img_x;\n   if (y) *y = s->img_y;\n   if (comp) {\n      if (info.bpp == 24 && info.ma == 0xff000000)\n         *comp = 3;\n      else\n         *comp = info.ma ? 4 : 3;\n   }\n   return 1;\n}\n#endif\n\n#ifndef STBI_NO_PSD\nstatic int stbi__psd_info(stbi__context *s, int *x, int *y, int *comp)\n{\n   int channelCount, dummy, depth;\n   if (!x) x = &dummy;\n   if (!y) y = &dummy;\n   if (!comp) comp = &dummy;\n   if (stbi__get32be(s) != 0x38425053) {\n       stbi__rewind( s );\n       return 0;\n   }\n   if (stbi__get16be(s) != 1) {\n       stbi__rewind( s );\n       return 0;\n   }\n   stbi__skip(s, 6);\n   channelCount = stbi__get16be(s);\n   if (channelCount < 0 || channelCount > 16) {\n       stbi__rewind( s );\n       return 0;\n   }\n   *y = stbi__get32be(s);\n   *x = stbi__get32be(s);\n   depth = stbi__get16be(s);\n   if (depth != 8 && depth != 16) {\n       stbi__rewind( s );\n       return 0;\n   }\n   if (stbi__get16be(s) != 3) {\n       stbi__rewind( s );\n       return 0;\n   }\n   *comp = 4;\n   return 1;\n}\n\nstatic int stbi__psd_is16(stbi__context *s)\n{\n   int channelCount, depth;\n   if (stbi__get32be(s) != 0x38425053) {\n       stbi__rewind( s );\n       return 0;\n   }\n   if (stbi__get16be(s) != 1) {\n       stbi__rewind( s );\n       return 0;\n   }\n   stbi__skip(s, 6);\n   channelCount = stbi__get16be(s);\n   if (channelCount < 0 || channelCount > 16) {\n       stbi__rewind( s );\n       return 0;\n   }\n   STBI_NOTUSED(stbi__get32be(s));\n   STBI_NOTUSED(stbi__get32be(s));\n   depth = stbi__get16be(s);\n   if (depth != 16) {\n       stbi__rewind( s );\n       return 0;\n   }\n   return 1;\n}\n#endif\n\n#ifndef STBI_NO_PIC\nstatic int stbi__pic_info(stbi__context *s, int *x, int *y, int *comp)\n{\n   int act_comp=0,num_packets=0,chained,dummy;\n   stbi__pic_packet packets[10];\n\n   if (!x) x = &dummy;\n   if (!y) y = &dummy;\n   if (!comp) comp = &dummy;\n\n   if (!stbi__pic_is4(s,\"\\x53\\x80\\xF6\\x34\")) {\n      stbi__rewind(s);\n      return 0;\n   }\n\n   stbi__skip(s, 88);\n\n   *x = stbi__get16be(s);\n   *y = stbi__get16be(s);\n   if (stbi__at_eof(s)) {\n      stbi__rewind( s);\n      return 0;\n   }\n   if ( (*x) != 0 && (1 << 28) / (*x) < (*y)) {\n      stbi__rewind( s );\n      return 0;\n   }\n\n   stbi__skip(s, 8);\n\n   do {\n      stbi__pic_packet *packet;\n\n      if (num_packets==sizeof(packets)/sizeof(packets[0]))\n         return 0;\n\n      packet = &packets[num_packets++];\n      chained = stbi__get8(s);\n      packet->size    = stbi__get8(s);\n      packet->type    = stbi__get8(s);\n      packet->channel = stbi__get8(s);\n      act_comp |= packet->channel;\n\n      if (stbi__at_eof(s)) {\n          stbi__rewind( s );\n          return 0;\n      }\n      if (packet->size != 8) {\n          stbi__rewind( s );\n          return 0;\n      }\n   } while (chained);\n\n   *comp = (act_comp & 0x10 ? 4 : 3);\n\n   return 1;\n}\n#endif\n\n// *************************************************************************************************\n// Portable Gray Map and Portable Pixel Map loader\n// by Ken Miller\n//\n// PGM: http://netpbm.sourceforge.net/doc/pgm.html\n// PPM: http://netpbm.sourceforge.net/doc/ppm.html\n//\n// Known limitations:\n//    Does not support comments in the header section\n//    Does not support ASCII image data (formats P2 and P3)\n\n#ifndef STBI_NO_PNM\n\nstatic int      stbi__pnm_test(stbi__context *s)\n{\n   char p, t;\n   p = (char) stbi__get8(s);\n   t = (char) stbi__get8(s);\n   if (p != 'P' || (t != '5' && t != '6')) {\n       stbi__rewind( s );\n       return 0;\n   }\n   return 1;\n}\n\nstatic void *stbi__pnm_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)\n{\n   stbi_uc *out;\n   STBI_NOTUSED(ri);\n\n   ri->bits_per_channel = stbi__pnm_info(s, (int *)&s->img_x, (int *)&s->img_y, (int *)&s->img_n);\n   if (ri->bits_per_channel == 0)\n      return 0;\n\n   if (s->img_y > STBI_MAX_DIMENSIONS) return stbi__errpuc(\"too large\",\"Very large image (corrupt?)\");\n   if (s->img_x > STBI_MAX_DIMENSIONS) return stbi__errpuc(\"too large\",\"Very large image (corrupt?)\");\n\n   *x = s->img_x;\n   *y = s->img_y;\n   if (comp) *comp = s->img_n;\n\n   if (!stbi__mad4sizes_valid(s->img_n, s->img_x, s->img_y, ri->bits_per_channel / 8, 0))\n      return stbi__errpuc(\"too large\", \"PNM too large\");\n\n   out = (stbi_uc *) stbi__malloc_mad4(s->img_n, s->img_x, s->img_y, ri->bits_per_channel / 8, 0);\n   if (!out) return stbi__errpuc(\"outofmem\", \"Out of memory\");\n   if (!stbi__getn(s, out, s->img_n * s->img_x * s->img_y * (ri->bits_per_channel / 8))) {\n      STBI_FREE(out);\n      return stbi__errpuc(\"bad PNM\", \"PNM file truncated\");\n   }\n\n   if (req_comp && req_comp != s->img_n) {\n      if (ri->bits_per_channel == 16) {\n         out = (stbi_uc *) stbi__convert_format16((stbi__uint16 *) out, s->img_n, req_comp, s->img_x, s->img_y);\n      } else {\n         out = stbi__convert_format(out, s->img_n, req_comp, s->img_x, s->img_y);\n      }\n      if (out == NULL) return out; // stbi__convert_format frees input on failure\n   }\n   return out;\n}\n\nstatic int      stbi__pnm_isspace(char c)\n{\n   return c == ' ' || c == '\\t' || c == '\\n' || c == '\\v' || c == '\\f' || c == '\\r';\n}\n\nstatic void     stbi__pnm_skip_whitespace(stbi__context *s, char *c)\n{\n   for (;;) {\n      while (!stbi__at_eof(s) && stbi__pnm_isspace(*c))\n         *c = (char) stbi__get8(s);\n\n      if (stbi__at_eof(s) || *c != '#')\n         break;\n\n      while (!stbi__at_eof(s) && *c != '\\n' && *c != '\\r' )\n         *c = (char) stbi__get8(s);\n   }\n}\n\nstatic int      stbi__pnm_isdigit(char c)\n{\n   return c >= '0' && c <= '9';\n}\n\nstatic int      stbi__pnm_getinteger(stbi__context *s, char *c)\n{\n   int value = 0;\n\n   while (!stbi__at_eof(s) && stbi__pnm_isdigit(*c)) {\n      value = value*10 + (*c - '0');\n      *c = (char) stbi__get8(s);\n      if((value > 214748364) || (value == 214748364 && *c > '7'))\n          return stbi__err(\"integer parse overflow\", \"Parsing an integer in the PPM header overflowed a 32-bit int\");\n   }\n\n   return value;\n}\n\nstatic int      stbi__pnm_info(stbi__context *s, int *x, int *y, int *comp)\n{\n   int maxv, dummy;\n   char c, p, t;\n\n   if (!x) x = &dummy;\n   if (!y) y = &dummy;\n   if (!comp) comp = &dummy;\n\n   stbi__rewind(s);\n\n   // Get identifier\n   p = (char) stbi__get8(s);\n   t = (char) stbi__get8(s);\n   if (p != 'P' || (t != '5' && t != '6')) {\n       stbi__rewind(s);\n       return 0;\n   }\n\n   *comp = (t == '6') ? 3 : 1;  // '5' is 1-component .pgm; '6' is 3-component .ppm\n\n   c = (char) stbi__get8(s);\n   stbi__pnm_skip_whitespace(s, &c);\n\n   *x = stbi__pnm_getinteger(s, &c); // read width\n   if(*x == 0)\n       return stbi__err(\"invalid width\", \"PPM image header had zero or overflowing width\");\n   stbi__pnm_skip_whitespace(s, &c);\n\n   *y = stbi__pnm_getinteger(s, &c); // read height\n   if (*y == 0)\n       return stbi__err(\"invalid width\", \"PPM image header had zero or overflowing width\");\n   stbi__pnm_skip_whitespace(s, &c);\n\n   maxv = stbi__pnm_getinteger(s, &c);  // read max value\n   if (maxv > 65535)\n      return stbi__err(\"max value > 65535\", \"PPM image supports only 8-bit and 16-bit images\");\n   else if (maxv > 255)\n      return 16;\n   else\n      return 8;\n}\n\nstatic int stbi__pnm_is16(stbi__context *s)\n{\n   if (stbi__pnm_info(s, NULL, NULL, NULL) == 16)\n\t   return 1;\n   return 0;\n}\n#endif\n\nstatic int stbi__info_main(stbi__context *s, int *x, int *y, int *comp)\n{\n   #ifndef STBI_NO_JPEG\n   if (stbi__jpeg_info(s, x, y, comp)) return 1;\n   #endif\n\n   #ifndef STBI_NO_PNG\n   if (stbi__png_info(s, x, y, comp))  return 1;\n   #endif\n\n   #ifndef STBI_NO_GIF\n   if (stbi__gif_info(s, x, y, comp))  return 1;\n   #endif\n\n   #ifndef STBI_NO_BMP\n   if (stbi__bmp_info(s, x, y, comp))  return 1;\n   #endif\n\n   #ifndef STBI_NO_PSD\n   if (stbi__psd_info(s, x, y, comp))  return 1;\n   #endif\n\n   #ifndef STBI_NO_PIC\n   if (stbi__pic_info(s, x, y, comp))  return 1;\n   #endif\n\n   #ifndef STBI_NO_PNM\n   if (stbi__pnm_info(s, x, y, comp))  return 1;\n   #endif\n\n   #ifndef STBI_NO_HDR\n   if (stbi__hdr_info(s, x, y, comp))  return 1;\n   #endif\n\n   // test tga last because it's a crappy test!\n   #ifndef STBI_NO_TGA\n   if (stbi__tga_info(s, x, y, comp))\n       return 1;\n   #endif\n   return stbi__err(\"unknown image type\", \"Image not of any known type, or corrupt\");\n}\n\nstatic int stbi__is_16_main(stbi__context *s)\n{\n   #ifndef STBI_NO_PNG\n   if (stbi__png_is16(s))  return 1;\n   #endif\n\n   #ifndef STBI_NO_PSD\n   if (stbi__psd_is16(s))  return 1;\n   #endif\n\n   #ifndef STBI_NO_PNM\n   if (stbi__pnm_is16(s))  return 1;\n   #endif\n   return 0;\n}\n\n#ifndef STBI_NO_STDIO\nSTBIDEF int stbi_info(char const *filename, int *x, int *y, int *comp)\n{\n    FILE *f = stbi__fopen(filename, \"rb\");\n    int result;\n    if (!f) return stbi__err(\"can't fopen\", \"Unable to open file\");\n    result = stbi_info_from_file(f, x, y, comp);\n    fclose(f);\n    return result;\n}\n\nSTBIDEF int stbi_info_from_file(FILE *f, int *x, int *y, int *comp)\n{\n   int r;\n   stbi__context s;\n   long pos = ftell(f);\n   stbi__start_file(&s, f);\n   r = stbi__info_main(&s,x,y,comp);\n   fseek(f,pos,SEEK_SET);\n   return r;\n}\n\nSTBIDEF int stbi_is_16_bit(char const *filename)\n{\n    FILE *f = stbi__fopen(filename, \"rb\");\n    int result;\n    if (!f) return stbi__err(\"can't fopen\", \"Unable to open file\");\n    result = stbi_is_16_bit_from_file(f);\n    fclose(f);\n    return result;\n}\n\nSTBIDEF int stbi_is_16_bit_from_file(FILE *f)\n{\n   int r;\n   stbi__context s;\n   long pos = ftell(f);\n   stbi__start_file(&s, f);\n   r = stbi__is_16_main(&s);\n   fseek(f,pos,SEEK_SET);\n   return r;\n}\n#endif // !STBI_NO_STDIO\n\nSTBIDEF int stbi_info_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp)\n{\n   stbi__context s;\n   stbi__start_mem(&s,buffer,len);\n   return stbi__info_main(&s,x,y,comp);\n}\n\nSTBIDEF int stbi_info_from_callbacks(stbi_io_callbacks const *c, void *user, int *x, int *y, int *comp)\n{\n   stbi__context s;\n   stbi__start_callbacks(&s, (stbi_io_callbacks *) c, user);\n   return stbi__info_main(&s,x,y,comp);\n}\n\nSTBIDEF int stbi_is_16_bit_from_memory(stbi_uc const *buffer, int len)\n{\n   stbi__context s;\n   stbi__start_mem(&s,buffer,len);\n   return stbi__is_16_main(&s);\n}\n\nSTBIDEF int stbi_is_16_bit_from_callbacks(stbi_io_callbacks const *c, void *user)\n{\n   stbi__context s;\n   stbi__start_callbacks(&s, (stbi_io_callbacks *) c, user);\n   return stbi__is_16_main(&s);\n}\n\n#endif // STB_IMAGE_IMPLEMENTATION\n\n/*\n   revision history:\n      2.20  (2019-02-07) support utf8 filenames in Windows; fix warnings and platform ifdefs\n      2.19  (2018-02-11) fix warning\n      2.18  (2018-01-30) fix warnings\n      2.17  (2018-01-29) change sbti__shiftsigned to avoid clang -O2 bug\n                         1-bit BMP\n                         *_is_16_bit api\n                         avoid warnings\n      2.16  (2017-07-23) all functions have 16-bit variants;\n                         STBI_NO_STDIO works again;\n                         compilation fixes;\n                         fix rounding in unpremultiply;\n                         optimize vertical flip;\n                         disable raw_len validation;\n                         documentation fixes\n      2.15  (2017-03-18) fix png-1,2,4 bug; now all Imagenet JPGs decode;\n                         warning fixes; disable run-time SSE detection on gcc;\n                         uniform handling of optional \"return\" values;\n                         thread-safe initialization of zlib tables\n      2.14  (2017-03-03) remove deprecated STBI_JPEG_OLD; fixes for Imagenet JPGs\n      2.13  (2016-11-29) add 16-bit API, only supported for PNG right now\n      2.12  (2016-04-02) fix typo in 2.11 PSD fix that caused crashes\n      2.11  (2016-04-02) allocate large structures on the stack\n                         remove white matting for transparent PSD\n                         fix reported channel count for PNG & BMP\n                         re-enable SSE2 in non-gcc 64-bit\n                         support RGB-formatted JPEG\n                         read 16-bit PNGs (only as 8-bit)\n      2.10  (2016-01-22) avoid warning introduced in 2.09 by STBI_REALLOC_SIZED\n      2.09  (2016-01-16) allow comments in PNM files\n                         16-bit-per-pixel TGA (not bit-per-component)\n                         info() for TGA could break due to .hdr handling\n                         info() for BMP to shares code instead of sloppy parse\n                         can use STBI_REALLOC_SIZED if allocator doesn't support realloc\n                         code cleanup\n      2.08  (2015-09-13) fix to 2.07 cleanup, reading RGB PSD as RGBA\n      2.07  (2015-09-13) fix compiler warnings\n                         partial animated GIF support\n                         limited 16-bpc PSD support\n                         #ifdef unused functions\n                         bug with < 92 byte PIC,PNM,HDR,TGA\n      2.06  (2015-04-19) fix bug where PSD returns wrong '*comp' value\n      2.05  (2015-04-19) fix bug in progressive JPEG handling, fix warning\n      2.04  (2015-04-15) try to re-enable SIMD on MinGW 64-bit\n      2.03  (2015-04-12) extra corruption checking (mmozeiko)\n                         stbi_set_flip_vertically_on_load (nguillemot)\n                         fix NEON support; fix mingw support\n      2.02  (2015-01-19) fix incorrect assert, fix warning\n      2.01  (2015-01-17) fix various warnings; suppress SIMD on gcc 32-bit without -msse2\n      2.00b (2014-12-25) fix STBI_MALLOC in progressive JPEG\n      2.00  (2014-12-25) optimize JPG, including x86 SSE2 & NEON SIMD (ryg)\n                         progressive JPEG (stb)\n                         PGM/PPM support (Ken Miller)\n                         STBI_MALLOC,STBI_REALLOC,STBI_FREE\n                         GIF bugfix -- seemingly never worked\n                         STBI_NO_*, STBI_ONLY_*\n      1.48  (2014-12-14) fix incorrectly-named assert()\n      1.47  (2014-12-14) 1/2/4-bit PNG support, both direct and paletted (Omar Cornut & stb)\n                         optimize PNG (ryg)\n                         fix bug in interlaced PNG with user-specified channel count (stb)\n      1.46  (2014-08-26)\n              fix broken tRNS chunk (colorkey-style transparency) in non-paletted PNG\n      1.45  (2014-08-16)\n              fix MSVC-ARM internal compiler error by wrapping malloc\n      1.44  (2014-08-07)\n              various warning fixes from Ronny Chevalier\n      1.43  (2014-07-15)\n              fix MSVC-only compiler problem in code changed in 1.42\n      1.42  (2014-07-09)\n              don't define _CRT_SECURE_NO_WARNINGS (affects user code)\n              fixes to stbi__cleanup_jpeg path\n              added STBI_ASSERT to avoid requiring assert.h\n      1.41  (2014-06-25)\n              fix search&replace from 1.36 that messed up comments/error messages\n      1.40  (2014-06-22)\n              fix gcc struct-initialization warning\n      1.39  (2014-06-15)\n              fix to TGA optimization when req_comp != number of components in TGA;\n              fix to GIF loading because BMP wasn't rewinding (whoops, no GIFs in my test suite)\n              add support for BMP version 5 (more ignored fields)\n      1.38  (2014-06-06)\n              suppress MSVC warnings on integer casts truncating values\n              fix accidental rename of 'skip' field of I/O\n      1.37  (2014-06-04)\n              remove duplicate typedef\n      1.36  (2014-06-03)\n              convert to header file single-file library\n              if de-iphone isn't set, load iphone images color-swapped instead of returning NULL\n      1.35  (2014-05-27)\n              various warnings\n              fix broken STBI_SIMD path\n              fix bug where stbi_load_from_file no longer left file pointer in correct place\n              fix broken non-easy path for 32-bit BMP (possibly never used)\n              TGA optimization by Arseny Kapoulkine\n      1.34  (unknown)\n              use STBI_NOTUSED in stbi__resample_row_generic(), fix one more leak in tga failure case\n      1.33  (2011-07-14)\n              make stbi_is_hdr work in STBI_NO_HDR (as specified), minor compiler-friendly improvements\n      1.32  (2011-07-13)\n              support for \"info\" function for all supported filetypes (SpartanJ)\n      1.31  (2011-06-20)\n              a few more leak fixes, bug in PNG handling (SpartanJ)\n      1.30  (2011-06-11)\n              added ability to load files via callbacks to accomidate custom input streams (Ben Wenger)\n              removed deprecated format-specific test/load functions\n              removed support for installable file formats (stbi_loader) -- would have been broken for IO callbacks anyway\n              error cases in bmp and tga give messages and don't leak (Raymond Barbiero, grisha)\n              fix inefficiency in decoding 32-bit BMP (David Woo)\n      1.29  (2010-08-16)\n              various warning fixes from Aurelien Pocheville\n      1.28  (2010-08-01)\n              fix bug in GIF palette transparency (SpartanJ)\n      1.27  (2010-08-01)\n              cast-to-stbi_uc to fix warnings\n      1.26  (2010-07-24)\n              fix bug in file buffering for PNG reported by SpartanJ\n      1.25  (2010-07-17)\n              refix trans_data warning (Won Chun)\n      1.24  (2010-07-12)\n              perf improvements reading from files on platforms with lock-heavy fgetc()\n              minor perf improvements for jpeg\n              deprecated type-specific functions so we'll get feedback if they're needed\n              attempt to fix trans_data warning (Won Chun)\n      1.23    fixed bug in iPhone support\n      1.22  (2010-07-10)\n              removed image *writing* support\n              stbi_info support from Jetro Lauha\n              GIF support from Jean-Marc Lienher\n              iPhone PNG-extensions from James Brown\n              warning-fixes from Nicolas Schulz and Janez Zemva (i.stbi__err. Janez (U+017D)emva)\n      1.21    fix use of 'stbi_uc' in header (reported by jon blow)\n      1.20    added support for Softimage PIC, by Tom Seddon\n      1.19    bug in interlaced PNG corruption check (found by ryg)\n      1.18  (2008-08-02)\n              fix a threading bug (local mutable static)\n      1.17    support interlaced PNG\n      1.16    major bugfix - stbi__convert_format converted one too many pixels\n      1.15    initialize some fields for thread safety\n      1.14    fix threadsafe conversion bug\n              header-file-only version (#define STBI_HEADER_FILE_ONLY before including)\n      1.13    threadsafe\n      1.12    const qualifiers in the API\n      1.11    Support installable IDCT, colorspace conversion routines\n      1.10    Fixes for 64-bit (don't use \"unsigned long\")\n              optimized upsampling by Fabian \"ryg\" Giesen\n      1.09    Fix format-conversion for PSD code (bad global variables!)\n      1.08    Thatcher Ulrich's PSD code integrated by Nicolas Schulz\n      1.07    attempt to fix C++ warning/errors again\n      1.06    attempt to fix C++ warning/errors again\n      1.05    fix TGA loading to return correct *comp and use good luminance calc\n      1.04    default float alpha is 1, not 255; use 'void *' for stbi_image_free\n      1.03    bugfixes to STBI_NO_STDIO, STBI_NO_HDR\n      1.02    support for (subset of) HDR files, float interface for preferred access to them\n      1.01    fix bug: possible bug in handling right-side up bmps... not sure\n              fix bug: the stbi__bmp_load() and stbi__tga_load() functions didn't work at all\n      1.00    interface to zlib that skips zlib header\n      0.99    correct handling of alpha in palette\n      0.98    TGA loader by lonesock; dynamically add loaders (untested)\n      0.97    jpeg errors on too large a file; also catch another malloc failure\n      0.96    fix detection of invalid v value - particleman@mollyrocket forum\n      0.95    during header scan, seek to markers in case of padding\n      0.94    STBI_NO_STDIO to disable stdio usage; rename all #defines the same\n      0.93    handle jpegtran output; verbose errors\n      0.92    read 4,8,16,24,32-bit BMP files of several formats\n      0.91    output 24-bit Windows 3.0 BMP files\n      0.90    fix a few more warnings; bump version number to approach 1.0\n      0.61    bugfixes due to Marc LeBlanc, Christopher Lloyd\n      0.60    fix compiling as c++\n      0.59    fix warnings: merge Dave Moore's -Wall fixes\n      0.58    fix bug: zlib uncompressed mode len/nlen was wrong endian\n      0.57    fix bug: jpg last huffman symbol before marker was >9 bits but less than 16 available\n      0.56    fix bug: zlib uncompressed mode len vs. nlen\n      0.55    fix bug: restart_interval not initialized to 0\n      0.54    allow NULL for 'int *comp'\n      0.53    fix bug in png 3->4; speedup png decoding\n      0.52    png handles req_comp=3,4 directly; minor cleanup; jpeg comments\n      0.51    obey req_comp requests, 1-component jpegs return as 1-component,\n              on 'test' only check type, not whether we support this variant\n      0.50  (2006-11-19)\n              first released version\n*/\n\n\n/*\n------------------------------------------------------------------------------\nThis software is available under 2 licenses -- choose whichever you prefer.\n------------------------------------------------------------------------------\nALTERNATIVE A - MIT License\nCopyright (c) 2017 Sean Barrett\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n------------------------------------------------------------------------------\nALTERNATIVE B - Public Domain (www.unlicense.org)\nThis is free and unencumbered software released into the public domain.\nAnyone is free to copy, modify, publish, use, compile, sell, or distribute this\nsoftware, either in source code form or as a compiled binary, for any purpose,\ncommercial or non-commercial, and by any means.\nIn jurisdictions that recognize copyright laws, the author or authors of this\nsoftware dedicate any and all copyright interest in the software to the public\ndomain. We make this dedication for the benefit of the public at large and to\nthe detriment of our heirs and successors. We intend this dedication to be an\novert act of relinquishment in perpetuity of all present and future rights to\nthis software under copyright law.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\nACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n------------------------------------------------------------------------------\n*/\n` was unexpected", "path": "llama/stb_image.h", "type": "Syntax error"}, {"code": 2, "level": "warn", "message": "Timeout when running cpp.lang.security.strings.narrow-to-wide-string-mismatch.narrow-to-wide-string-mismatch on llama/ggml-aarch64.c:\n ", "path": "llama/ggml-aarch64.c", "rule_id": "cpp.lang.security.strings.narrow-to-wide-string-mismatch.narrow-to-wide-string-mismatch", "type": "Timeout"}, {"code": 2, "level": "warn", "message": "Timeout when running cpp.lang.security.strings.wide-to-narrow-string-mismatch.wide-to-narrow-string-mismatch on llama/ggml-aarch64.c:\n ", "path": "llama/ggml-aarch64.c", "rule_id": "cpp.lang.security.strings.wide-to-narrow-string-mismatch.wide-to-narrow-string-mismatch", "type": "Timeout"}, {"code": 2, "level": "warn", "message": "Timeout when running cpp.lang.security.use-after-free.local-variable-new-delete.local-variable-new-delete on llama/ggml-aarch64.c:\n ", "path": "llama/ggml-aarch64.c", "rule_id": "cpp.lang.security.use-after-free.local-variable-new-delete.local-variable-new-delete", "type": "Timeout"}, {"code": 2, "level": "warn", "message": "Timeout when running cpp.lang.security.use-after-free.local-variable-malloc-free.local-variable-malloc-free on llama/unicode-data.cpp:\n ", "path": "llama/unicode-data.cpp", "rule_id": "cpp.lang.security.use-after-free.local-variable-malloc-free.local-variable-malloc-free", "type": "Timeout"}, {"code": 2, "level": "warn", "message": "Timeout when running cpp.lang.security.use-after-free.local-variable-new-delete.local-variable-new-delete on llama/unicode-data.cpp:\n ", "path": "llama/unicode-data.cpp", "rule_id": "cpp.lang.security.use-after-free.local-variable-new-delete.local-variable-new-delete", "type": "Timeout"}, {"code": 3, "level": "warn", "message": "Syntax error at line llama/ggml-common.h:1:\n `/**\n * llama.cpp - commit 3f1ae2e32cde00c39b96be6d01c2997c29bae555 - do not edit this file\n *\n * MIT License\n *\n * Copyright (c) 2023-2024 The ggml authors\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n#ifndef GGML_COMMON_DECL\n\n#if defined(GGML_COMMON_DECL_C)\n#include <stdint.h>\n\ntypedef uint16_t ggml_half;\ntypedef uint32_t ggml_half2;\n\n#define GGML_COMMON_AGGR\n\n#define GGML_COMMON_DECL\n#elif defined(GGML_COMMON_DECL_METAL)\n#include <metal_stdlib>\n\ntypedef half  ggml_half;\ntypedef half2 ggml_half2;\n\n#define GGML_COMMON_AGGR\n\n#define GGML_COMMON_DECL\n#elif defined(GGML_COMMON_DECL_CUDA)\n#if defined(GGML_COMMON_DECL_MUSA)\n#include <musa_fp16.h>\n#else\n#include <cuda_fp16.h>\n#endif\n#include <cstdint>\n\ntypedef half  ggml_half;\ntypedef half2 ggml_half2;\n\n#define GGML_COMMON_AGGR data\n\n#define GGML_COMMON_DECL\n#elif defined(GGML_COMMON_DECL_HIP)\n#include <hip/hip_fp16.h>\n#include <cstdint>\n\ntypedef half  ggml_half;\ntypedef half2 ggml_half2;\n\n#define GGML_COMMON_AGGR data\n\n#define GGML_COMMON_DECL\n#elif defined(GGML_COMMON_DECL_SYCL)\n#include <sycl/half_type.hpp>\n#include <cstdint>\n\ntypedef sycl::half  ggml_half;\ntypedef sycl::half2 ggml_half2;\n\n#define GGML_COMMON_AGGR data\n\n#define GGML_COMMON_DECL\n#endif\n\n#if defined(GGML_COMMON_DECL)\n\n#ifndef __cplusplus\n#ifndef static_assert\n#if defined(__STDC_VERSION__) && (__STDC_VERSION__ >= 201100L)\n#define static_assert(cond, msg) _Static_assert(cond, msg)\n#else\n#define static_assert(cond, msg) struct global_scope_noop_trick\n#endif\n#endif\n#endif // __cplusplus\n\n// QK = number of values after dequantization\n// QK_K = super-block size\n\n#define QK_K 256\n#define K_SCALE_SIZE 12\n\n#if defined(GGML_COMMON_DECL_CUDA) || defined(GGML_COMMON_DECL_HIP) || defined(GGML_COMMON_DECL_SYCL)\n// QR = QK / number of values before dequantization\n// QI = number of 32 bit integers before dequantization\n\n#define QI4_0 (QK4_0 / (4 * QR4_0))\n#define QR4_0 2\n\n#define QI4_1 (QK4_1 / (4 * QR4_1))\n#define QR4_1 2\n\n#define QI5_0 (QK5_0 / (4 * QR5_0))\n#define QR5_0 2\n\n#define QI5_1 (QK5_1 / (4 * QR5_1))\n#define QR5_1 2\n\n#define QI8_0 (QK8_0 / (4 * QR8_0))\n#define QR8_0 1\n\n#define QI8_1 (QK8_1 / (4 * QR8_1))\n#define QR8_1 1\n\n#define QI2_K (QK_K / (4*QR2_K))\n#define QR2_K 4\n\n#define QI3_K (QK_K / (4*QR3_K))\n#define QR3_K 4\n\n#define QI4_K (QK_K / (4*QR4_K))\n#define QR4_K 2\n\n#define QI5_K (QK_K / (4*QR5_K))\n#define QR5_K 2\n\n#define QI6_K (QK_K / (4*QR6_K))\n#define QR6_K 2\n\n#define QI2_XXS (QK_K / (4*QR2_XXS))\n#define QR2_XXS 4\n\n#define QI2_XS (QK_K / (4*QR2_XS))\n#define QR2_XS 4\n\n#define QI2_S (QK_K / (4*QR2_S))\n#define QR2_S 4\n\n#define QI3_XXS (QK_K / (4*QR3_XXS))\n#define QR3_XXS 4\n\n#define QI3_XS (QK_K / (4*QR3_XS))\n#define QR3_XS 4\n\n#define QI1_S (QK_K / (4*QR1_S))\n#define QR1_S 8\n\n#define QI1_M (QK_K / (4*QR1_M))\n#define QR1_M 8\n\n#define QI4_NL (QK4_NL / (4*QR4_NL))\n#define QR4_NL 2\n\n#define QI4_XS (QK_K / (4*QR4_XS))\n#define QR4_XS 2\n\n#define QI3_S (QK_K / (4*QR3_S))\n#define QR3_S 4\n\n#endif // GGML_COMMON_DECL_CUDA || GGML_COMMON_DECL_HIP\n\n#define QK4_0 32\ntypedef struct {\n    ggml_half d;           // delta\n    uint8_t qs[QK4_0 / 2]; // nibbles / quants\n} block_q4_0;\nstatic_assert(sizeof(block_q4_0) == sizeof(ggml_half) + QK4_0 / 2, \"wrong q4_0 block size/padding\");\n\n#define QK4_1 32\ntypedef struct {\n    union {\n        struct {\n            ggml_half d; // delta\n            ggml_half m; // min\n        } GGML_COMMON_AGGR;\n        ggml_half2 dm;\n    };\n    uint8_t qs[QK4_1 / 2]; // nibbles / quants\n} block_q4_1;\nstatic_assert(sizeof(block_q4_1) == 2 * sizeof(ggml_half) + QK4_1 / 2, \"wrong q4_1 block size/padding\");\n\n#define QK5_0 32\ntypedef struct {\n    ggml_half d;           // delta\n    uint8_t qh[4];         // 5-th bit of quants\n    uint8_t qs[QK5_0 / 2]; // nibbles / quants\n} block_q5_0;\nstatic_assert(sizeof(block_q5_0) == sizeof(ggml_half) + sizeof(uint32_t) + QK5_0 / 2, \"wrong q5_0 block size/padding\");\n\n#define QK5_1 32\ntypedef struct {\n    union {\n        struct {\n            ggml_half d; // delta\n            ggml_half m; // min\n        } GGML_COMMON_AGGR;\n        ggml_half2 dm;\n    };\n    uint8_t qh[4];         // 5-th bit of quants\n    uint8_t qs[QK5_1 / 2]; // nibbles / quants\n} block_q5_1;\nstatic_assert(sizeof(block_q5_1) == 2 * sizeof(ggml_half) + sizeof(uint32_t) + QK5_1 / 2, \"wrong q5_1 block size/padding\");\n\n#define QK8_0 32\ntypedef struct {\n    ggml_half d;       // delta\n    int8_t  qs[QK8_0]; // quants\n} block_q8_0;\nstatic_assert(sizeof(block_q8_0) == sizeof(ggml_half) + QK8_0, \"wrong q8_0 block size/padding\");\n\n#define QK8_1 32\ntypedef struct {\n    union {\n        struct {\n            ggml_half d; // delta\n            ggml_half s; // d * sum(qs[i])\n        } GGML_COMMON_AGGR;\n        ggml_half2 ds;\n    };\n    int8_t qs[QK8_1]; // quants\n} block_q8_1;\nstatic_assert(sizeof(block_q8_1) == 2*sizeof(ggml_half) + QK8_1, \"wrong q8_1 block size/padding\");\n\ntypedef struct {\n    ggml_half d[4];        // deltas for 4 q4_0 blocks\n    uint8_t qs[QK4_0 * 2]; // nibbles / quants for 4 q4_0 blocks\n} block_q4_0x4;\nstatic_assert(sizeof(block_q4_0x4) == 4 * sizeof(ggml_half) + QK4_0 * 2, \"wrong q4_0x4 block size/padding\");\n\ntypedef struct {\n    ggml_half d[8];        // deltas for 8 q4_0 blocks\n    uint8_t qs[QK4_0 * 4]; // nibbles / quants for 8 q4_0 blocks\n} block_q4_0x8;\nstatic_assert(sizeof(block_q4_0x8) == 8 * sizeof(ggml_half) + QK4_0 * 4, \"wrong q4_0x8 block size/padding\");\n\ntypedef struct {\n    ggml_half d[4];        // deltas for 4 q8_0 blocks\n    int8_t qs[QK8_0 * 4];  // quants for 4 q8_0 blocks\n} block_q8_0x4;\nstatic_assert(sizeof(block_q8_0x4) == 4 * sizeof(ggml_half) + QK8_0 * 4, \"wrong q8_0x4 block size/padding\");\n\ntypedef struct {\n    ggml_half d[8];        // deltas for 8 q8_0 blocks\n    int8_t qs[QK8_0 * 8];  // quants for 8 q8_0 blocks\n} block_q8_0x8;\nstatic_assert(sizeof(block_q8_0x8) == 8 * sizeof(ggml_half) + QK8_0 * 8, \"wrong q8_0x8 block size/padding\");\n\n//\n// Ternary quantization\n//\n\n// 1.6875 bpw\ntypedef struct {\n    uint8_t qs[(QK_K - 4 * QK_K / 64) / 5]; // 5 elements per byte (3^5 = 243 < 256)\n    uint8_t qh[QK_K/64]; // 4 elements per byte\n    ggml_half d;\n} block_tq1_0;\nstatic_assert(sizeof(block_tq1_0) == sizeof(ggml_half) + QK_K / 64 + (QK_K - 4 * QK_K / 64) / 5, \"wrong tq1_0 block size/padding\");\n\n// 2.0625 bpw\ntypedef struct {\n    uint8_t qs[QK_K/4]; // 2 bits per element\n    ggml_half d;\n} block_tq2_0;\nstatic_assert(sizeof(block_tq2_0) == sizeof(ggml_half) + QK_K / 4, \"wrong tq2_0 block size/padding\");\n\n//\n// Super-block quantization structures\n//\n\n// 2-bit quantization\n// weight is represented as x = a * q + b\n// 16 blocks of 16 elements each\n// Effectively 2.625 bits per weight\ntypedef struct {\n    uint8_t scales[QK_K/16]; // scales and mins, quantized with 4 bits\n    uint8_t qs[QK_K/4];      // quants\n    union {\n        struct {\n            ggml_half d;    // super-block scale for quantized scales\n            ggml_half dmin; // super-block scale for quantized mins\n        } GGML_COMMON_AGGR;\n        ggml_half2 dm;\n    };\n} block_q2_K;\nstatic_assert(sizeof(block_q2_K) == 2*sizeof(ggml_half) + QK_K/16 + QK_K/4, \"wrong q2_K block size/padding\");\n\n// 3-bit quantization\n// weight is represented as x = a * q\n// 16 blocks of 16 elements each\n// Effectively 3.4375 bits per weight\ntypedef struct {\n    uint8_t hmask[QK_K/8]; // quants - high bit\n    uint8_t qs[QK_K/4];    // quants - low 2 bits\n    uint8_t scales[12];    // scales, quantized with 6 bits\n    ggml_half d;           // super-block scale\n} block_q3_K;\nstatic_assert(sizeof(block_q3_K) == sizeof(ggml_half) + QK_K / 4 + QK_K / 8 + 12, \"wrong q3_K block size/padding\");\n\n// 4-bit quantization\n// 8 blocks of 32 elements each\n// weight is represented as x = a * q + b\n// Effectively 4.5 bits per weight\ntypedef struct {\n    union {\n        struct {\n            ggml_half d;    // super-block scale for quantized scales\n            ggml_half dmin; // super-block scale for quantized mins\n        } GGML_COMMON_AGGR;\n        ggml_half2 dm;\n    };\n    uint8_t scales[K_SCALE_SIZE]; // scales and mins, quantized with 6 bits\n    uint8_t qs[QK_K/2];           // 4--bit quants\n} block_q4_K;\nstatic_assert(sizeof(block_q4_K) == 2*sizeof(ggml_half) + K_SCALE_SIZE + QK_K/2, \"wrong q4_K block size/padding\");\n\n// 5-bit quantization\n// 8 blocks of 32 elements each\n// weight is represented as x = a * q + b\n// Effectively 5.5 bits per weight\ntypedef struct {\n    union {\n        struct {\n            ggml_half d;    // super-block scale for quantized scales\n            ggml_half dmin; // super-block scale for quantized mins\n        } GGML_COMMON_AGGR;\n        ggml_half2 dm;\n    };\n    uint8_t scales[K_SCALE_SIZE]; // scales and mins, quantized with 6 bits\n    uint8_t qh[QK_K/8];           // quants, high bit\n    uint8_t qs[QK_K/2];           // quants, low 4 bits\n} block_q5_K;\nstatic_assert(sizeof(block_q5_K) == 2*sizeof(ggml_half) + K_SCALE_SIZE + QK_K/2 + QK_K/8, \"wrong q5_K block size/padding\");\n\n// 6-bit quantization\n// weight is represented as x = a * q\n// 16 blocks of 16 elements each\n// Effectively 6.5625 bits per weight\ntypedef struct {\n    uint8_t ql[QK_K/2];      // quants, lower 4 bits\n    uint8_t qh[QK_K/4];      // quants, upper 2 bits\n    int8_t  scales[QK_K/16]; // scales, quantized with 8 bits\n    ggml_half d;             // super-block scale\n} block_q6_K;\nstatic_assert(sizeof(block_q6_K) == sizeof(ggml_half) + QK_K / 16 + 3*QK_K/4, \"wrong q6_K block size/padding\");\n\n// This is only used for intermediate quantization and dot products\ntypedef struct {\n    float   d;              // delta\n    int8_t  qs[QK_K];       // quants\n    int16_t bsums[QK_K/16]; // sum of quants in groups of 16\n} block_q8_K;\nstatic_assert(sizeof(block_q8_K) == sizeof(float) + QK_K + QK_K/16*sizeof(int16_t), \"wrong q8_K block size/padding\");\n\n// (Almost) \"true\" 2-bit quantization.\n// Due to the need to use blocks as per ggml design, it ends up using\n// 2.0625 bpw because of the 16-bit scale for each block of 256.\ntypedef struct {\n    ggml_half d;\n    uint16_t qs[QK_K/8];\n} block_iq2_xxs;\nstatic_assert(sizeof(block_iq2_xxs) == sizeof(ggml_half) + QK_K/8*sizeof(uint16_t), \"wrong iq2_xxs block size/padding\");\n\n// 2.3125 bpw quants\ntypedef struct {\n    ggml_half d;\n    uint16_t qs[QK_K/8];\n    uint8_t  scales[QK_K/32];\n} block_iq2_xs;\nstatic_assert(sizeof(block_iq2_xs) == sizeof(ggml_half) + QK_K/8*sizeof(uint16_t) + QK_K/32, \"wrong iq2_xs block size/padding\");\n\n// 2.5625 bpw quants\ntypedef struct {\n    ggml_half d;\n    uint8_t qs[QK_K/4];\n    uint8_t qh[QK_K/32];\n    uint8_t scales[QK_K/32];\n} block_iq2_s;\nstatic_assert(sizeof(block_iq2_s) == sizeof(ggml_half) + QK_K/4 + QK_K/16, \"wrong iq2_s block size/padding\");\n\n// (Almost) \"true\" 3-bit quantization.\n// Due to the need to use blocks as per ggml design, it ends up using\n// 3.0625 bpw because of the 16-bit scale for each block of 256.\ntypedef struct {\n    ggml_half d;\n    uint8_t qs[3*QK_K/8];\n} block_iq3_xxs;\nstatic_assert(sizeof(block_iq3_xxs) == sizeof(ggml_half) + 3*(QK_K/8), \"wrong iq3_xxs block size/padding\");\n\n// 3.4375 bpw\n#define IQ3S_N_SCALE QK_K/64\ntypedef struct {\n    ggml_half d;\n    uint8_t qs[QK_K/4];\n    uint8_t qh[QK_K/32];\n    uint8_t signs[QK_K/8];\n    uint8_t scales[IQ3S_N_SCALE];\n} block_iq3_s;\nstatic_assert(sizeof(block_iq3_s) == sizeof(ggml_half) + 13*(QK_K/32) + IQ3S_N_SCALE, \"wrong iq3_s block size/padding\");\n\n// 1.5625 bpw\ntypedef struct {\n    ggml_half d;\n    uint8_t  qs[QK_K/8];\n    uint16_t qh[QK_K/32];\n} block_iq1_s;\nstatic_assert(sizeof(block_iq1_s) == sizeof(ggml_half) + QK_K/8 + QK_K/16, \"wrong iq1_s block size/padding\");\n\n// 1.75 bpw\ntypedef struct {\n    uint8_t  qs[QK_K/8];      // grid index, low 8 bits\n    uint8_t  qh[QK_K/16];     // grid index, high 3 bits + grid shift bit (for two groups of 8)\n    uint8_t  scales[QK_K/32]; // 3-bit block scales (4-bit if QK_K == 64)\n} block_iq1_m;\nstatic_assert(sizeof(block_iq1_m) == QK_K/8 + QK_K/16 + QK_K/32, \"wrong iq1_m block size/padding\");\n\n// Used by IQ1_M quants\ntypedef union {\n    ggml_half f16;\n    uint16_t  u16;\n} iq1m_scale_t;\n\n// Non-linear quants\n#define QK4_NL 32\ntypedef struct {\n    ggml_half d;\n    uint8_t qs[QK4_NL/2];\n} block_iq4_nl;\nstatic_assert(sizeof(block_iq4_nl) == sizeof(ggml_half) + QK4_NL/2, \"wrong iq4_nl block size/padding\");\n\ntypedef struct {\n    ggml_half d;\n    uint16_t scales_h;\n    uint8_t  scales_l[QK_K/64];\n    uint8_t  qs[QK_K/2];\n} block_iq4_xs;\nstatic_assert(sizeof(block_iq4_xs) == sizeof(ggml_half) + sizeof(uint16_t) + QK_K/64 + QK_K/2, \"wrong iq4_xs block size/padding\");\n\n#endif // GGML_COMMON_DECL\n#endif // GGML_COMMON_DECL\n\n////////////////////////////////////////////////////////////////////////////////\n\n#ifndef GGML_COMMON_IMPL\n\n#if defined(GGML_COMMON_IMPL_C)\n#include <stdint.h>\n\n#define GGML_TABLE_BEGIN(type, name, size) static const type name[size] = {\n#define GGML_TABLE_END() };\n\n#define GGML_COMMON_IMPL\n#elif defined(GGML_COMMON_IMPL_METAL)\n#include <metal_stdlib>\n\n#define GGML_TABLE_BEGIN(type, name, size) static const constant type name[size] = {\n#define GGML_TABLE_END() };\n\n#define GGML_COMMON_IMPL\n#elif defined(GGML_COMMON_IMPL_CUDA) || defined(GGML_COMMON_IMPL_HIP) || defined(GGML_COMMON_IMPL_MUSA)\n#include <cstdint>\n\n#define GGML_TABLE_BEGIN(type, name, size) static const __device__ type name[size] = {\n#define GGML_TABLE_END() };\n\n#define GGML_COMMON_IMPL\n#elif defined(GGML_COMMON_IMPL_SYCL)\n\n#include <cstdint>\n\n#define GGML_TABLE_BEGIN(type, name, size) static const type name[size] = {\n#define GGML_TABLE_END() };\n\n#define GGML_COMMON_IMPL\n#endif\n\n#if defined(GGML_COMMON_IMPL)\n\nGGML_TABLE_BEGIN(uint8_t, kmask_iq2xs, 8)\n    1, 2, 4, 8, 16, 32, 64, 128\nGGML_TABLE_END()\n\nGGML_TABLE_BEGIN(uint8_t, ksigns_iq2xs, 128)\n      0, 129, 130,   3, 132,   5,   6, 135, 136,   9,  10, 139,  12, 141, 142,  15,\n    144,  17,  18, 147,  20, 149, 150,  23,  24, 153, 154,  27, 156,  29,  30, 159,\n    160,  33,  34, 163,  36, 165, 166,  39,  40, 169, 170,  43, 172,  45,  46, 175,\n     48, 177, 178,  51, 180,  53,  54, 183, 184,  57,  58, 187,  60, 189, 190,  63,\n    192,  65,  66, 195,  68, 197, 198,  71,  72, 201, 202,  75, 204,  77,  78, 207,\n     80, 209, 210,  83, 212,  85,  86, 215, 216,  89,  90, 219,  92, 221, 222,  95,\n     96, 225, 226,  99, 228, 101, 102, 231, 232, 105, 106, 235, 108, 237, 238, 111,\n    240, 113, 114, 243, 116, 245, 246, 119, 120, 249, 250, 123, 252, 125, 126, 255,\nGGML_TABLE_END()\n\n//#if __CUDA_ARCH__ >= MIN_CC_DP4A // lowest compute capability for integer intrinsics\nGGML_TABLE_BEGIN(uint64_t, ksigns64, 128)\n    0x0000000000000000, 0xff000000000000ff, 0xff0000000000ff00, 0x000000000000ffff,\n    0xff00000000ff0000, 0x0000000000ff00ff, 0x0000000000ffff00, 0xff00000000ffffff,\n    0xff000000ff000000, 0x00000000ff0000ff, 0x00000000ff00ff00, 0xff000000ff00ffff,\n    0x00000000ffff0000, 0xff000000ffff00ff, 0xff000000ffffff00, 0x00000000ffffffff,\n    0xff0000ff00000000, 0x000000ff000000ff, 0x000000ff0000ff00, 0xff0000ff0000ffff,\n    0x000000ff00ff0000, 0xff0000ff00ff00ff, 0xff0000ff00ffff00, 0x000000ff00ffffff,\n    0x000000ffff000000, 0xff0000ffff0000ff, 0xff0000ffff00ff00, 0x000000ffff00ffff,\n    0xff0000ffffff0000, 0x000000ffffff00ff, 0x000000ffffffff00, 0xff0000ffffffffff,\n    0xff00ff0000000000, 0x0000ff00000000ff, 0x0000ff000000ff00, 0xff00ff000000ffff,\n    0x0000ff0000ff0000, 0xff00ff0000ff00ff, 0xff00ff0000ffff00, 0x0000ff0000ffffff,\n    0x0000ff00ff000000, 0xff00ff00ff0000ff, 0xff00ff00ff00ff00, 0x0000ff00ff00ffff,\n    0xff00ff00ffff0000, 0x0000ff00ffff00ff, 0x0000ff00ffffff00, 0xff00ff00ffffffff,\n    0x0000ffff00000000, 0xff00ffff000000ff, 0xff00ffff0000ff00, 0x0000ffff0000ffff,\n    0xff00ffff00ff0000, 0x0000ffff00ff00ff, 0x0000ffff00ffff00, 0xff00ffff00ffffff,\n    0xff00ffffff000000, 0x0000ffffff0000ff, 0x0000ffffff00ff00, 0xff00ffffff00ffff,\n    0x0000ffffffff0000, 0xff00ffffffff00ff, 0xff00ffffffffff00, 0x0000ffffffffffff,\n    0xffff000000000000, 0x00ff0000000000ff, 0x00ff00000000ff00, 0xffff00000000ffff,\n    0x00ff000000ff0000, 0xffff000000ff00ff, 0xffff000000ffff00, 0x00ff000000ffffff,\n    0x00ff0000ff000000, 0xffff0000ff0000ff, 0xffff0000ff00ff00, 0x00ff0000ff00ffff,\n    0xffff0000ffff0000, 0x00ff0000ffff00ff, 0x00ff0000ffffff00, 0xffff0000ffffffff,\n    0x00ff00ff00000000, 0xffff00ff000000ff, 0xffff00ff0000ff00, 0x00ff00ff0000ffff,\n    0xffff00ff00ff0000, 0x00ff00ff00ff00ff, 0x00ff00ff00ffff00, 0xffff00ff00ffffff,\n    0xffff00ffff000000, 0x00ff00ffff0000ff, 0x00ff00ffff00ff00, 0xffff00ffff00ffff,\n    0x00ff00ffffff0000, 0xffff00ffffff00ff, 0xffff00ffffffff00, 0x00ff00ffffffffff,\n    0x00ffff0000000000, 0xffffff00000000ff, 0xffffff000000ff00, 0x00ffff000000ffff,\n    0xffffff0000ff0000, 0x00ffff0000ff00ff, 0x00ffff0000ffff00, 0xffffff0000ffffff,\n    0xffffff00ff000000, 0x00ffff00ff0000ff, 0x00ffff00ff00ff00, 0xffffff00ff00ffff,\n    0x00ffff00ffff0000, 0xffffff00ffff00ff, 0xffffff00ffffff00, 0x00ffff00ffffffff,\n    0xffffffff00000000, 0x00ffffff000000ff, 0x00ffffff0000ff00, 0xffffffff0000ffff,\n    0x00ffffff00ff0000, 0xffffffff00ff00ff, 0xffffffff00ffff00, 0x00ffffff00ffffff,\n    0x00ffffffff000000, 0xffffffffff0000ff, 0xffffffffff00ff00, 0x00ffffffff00ffff,\n    0xffffffffffff0000, 0x00ffffffffff00ff, 0x00ffffffffffff00, 0xffffffffffffffff,\nGGML_TABLE_END()\n//#endif\n\n\nGGML_TABLE_BEGIN(uint64_t, iq2xxs_grid, 256)\n    0x0808080808080808, 0x080808080808082b, 0x0808080808081919, 0x0808080808082b08,\n    0x0808080808082b2b, 0x0808080808190819, 0x0808080808191908, 0x08080808082b0808,\n    0x08080808082b082b, 0x08080808082b2b08, 0x08080808082b2b2b, 0x0808080819080819,\n    0x0808080819081908, 0x0808080819190808, 0x0808080819192b08, 0x08080808192b0819,\n    0x08080808192b1908, 0x080808082b080808, 0x080808082b08082b, 0x080808082b082b2b,\n    0x080808082b2b082b, 0x0808081908080819, 0x0808081908081908, 0x0808081908190808,\n    0x0808081908191919, 0x0808081919080808, 0x080808192b081908, 0x080808192b192b08,\n    0x0808082b08080808, 0x0808082b0808082b, 0x0808082b082b082b, 0x0808082b2b08082b,\n    0x0808190808080819, 0x0808190808081908, 0x0808190808190808, 0x08081908082b0819,\n    0x08081908082b1908, 0x0808190819080808, 0x080819081908082b, 0x0808190819082b08,\n    0x08081908192b0808, 0x080819082b080819, 0x080819082b081908, 0x080819082b190808,\n    0x080819082b2b1908, 0x0808191908080808, 0x080819190808082b, 0x0808191908082b08,\n    0x08081919082b0808, 0x080819191908192b, 0x08081919192b2b19, 0x080819192b080808,\n    0x080819192b190819, 0x0808192b08082b19, 0x0808192b08190808, 0x0808192b19080808,\n    0x0808192b2b081908, 0x0808192b2b2b1908, 0x08082b0808080808, 0x08082b0808081919,\n    0x08082b0808082b08, 0x08082b0808191908, 0x08082b08082b2b08, 0x08082b0819080819,\n    0x08082b0819081908, 0x08082b0819190808, 0x08082b081919082b, 0x08082b082b082b08,\n    0x08082b1908081908, 0x08082b1919080808, 0x08082b2b0808082b, 0x08082b2b08191908,\n    0x0819080808080819, 0x0819080808081908, 0x0819080808190808, 0x08190808082b0819,\n    0x0819080819080808, 0x08190808192b0808, 0x081908082b081908, 0x081908082b190808,\n    0x081908082b191919, 0x0819081908080808, 0x0819081908082b08, 0x08190819082b0808,\n    0x0819081919190808, 0x0819081919192b2b, 0x081908192b080808, 0x0819082b082b1908,\n    0x0819082b19081919, 0x0819190808080808, 0x0819190808082b08, 0x08191908082b0808,\n    0x08191908082b1919, 0x0819190819082b19, 0x081919082b080808, 0x0819191908192b08,\n    0x08191919192b082b, 0x0819192b08080808, 0x0819192b0819192b, 0x08192b0808080819,\n    0x08192b0808081908, 0x08192b0808190808, 0x08192b0819080808, 0x08192b082b080819,\n    0x08192b1908080808, 0x08192b1908081919, 0x08192b192b2b0808, 0x08192b2b19190819,\n    0x082b080808080808, 0x082b08080808082b, 0x082b080808082b2b, 0x082b080819081908,\n    0x082b0808192b0819, 0x082b08082b080808, 0x082b08082b08082b, 0x082b0819082b2b19,\n    0x082b081919082b08, 0x082b082b08080808, 0x082b082b0808082b, 0x082b190808080819,\n    0x082b190808081908, 0x082b190808190808, 0x082b190819080808, 0x082b19081919192b,\n    0x082b191908080808, 0x082b191919080819, 0x082b1919192b1908, 0x082b192b2b190808,\n    0x082b2b0808082b08, 0x082b2b08082b0808, 0x082b2b082b191908, 0x082b2b2b19081908,\n    0x1908080808080819, 0x1908080808081908, 0x1908080808190808, 0x1908080808192b08,\n    0x19080808082b0819, 0x19080808082b1908, 0x1908080819080808, 0x1908080819082b08,\n    0x190808081919192b, 0x19080808192b0808, 0x190808082b080819, 0x190808082b081908,\n    0x190808082b190808, 0x1908081908080808, 0x19080819082b0808, 0x19080819192b0819,\n    0x190808192b080808, 0x190808192b081919, 0x1908082b08080819, 0x1908082b08190808,\n    0x1908082b19082b08, 0x1908082b1919192b, 0x1908082b192b2b08, 0x1908190808080808,\n    0x1908190808082b08, 0x19081908082b0808, 0x190819082b080808, 0x190819082b192b19,\n    0x190819190819082b, 0x19081919082b1908, 0x1908192b08080808, 0x19082b0808080819,\n    0x19082b0808081908, 0x19082b0808190808, 0x19082b0819080808, 0x19082b0819081919,\n    0x19082b1908080808, 0x19082b1919192b08, 0x19082b19192b0819, 0x19082b192b08082b,\n    0x19082b2b19081919, 0x19082b2b2b190808, 0x1919080808080808, 0x1919080808082b08,\n    0x1919080808190819, 0x1919080808192b19, 0x19190808082b0808, 0x191908082b080808,\n    0x191908082b082b08, 0x1919081908081908, 0x191908191908082b, 0x191908192b2b1908,\n    0x1919082b2b190819, 0x191919082b190808, 0x191919082b19082b, 0x1919191908082b2b,\n    0x1919192b08080819, 0x1919192b19191908, 0x19192b0808080808, 0x19192b0808190819,\n    0x19192b0808192b19, 0x19192b08192b1908, 0x19192b1919080808, 0x19192b2b08082b08,\n    0x192b080808081908, 0x192b080808190808, 0x192b080819080808, 0x192b0808192b2b08,\n    0x192b081908080808, 0x192b081919191919, 0x192b082b08192b08, 0x192b082b192b0808,\n    0x192b190808080808, 0x192b190808081919, 0x192b191908190808, 0x192b19190819082b,\n    0x192b19192b081908, 0x192b2b081908082b, 0x2b08080808080808, 0x2b0808080808082b,\n    0x2b08080808082b2b, 0x2b08080819080819, 0x2b0808082b08082b, 0x2b08081908081908,\n    0x2b08081908192b08, 0x2b08081919080808, 0x2b08082b08190819, 0x2b08190808080819,\n    0x2b08190808081908, 0x2b08190808190808, 0x2b08190808191919, 0x2b08190819080808,\n    0x2b081908192b0808, 0x2b08191908080808, 0x2b0819191908192b, 0x2b0819192b191908,\n    0x2b08192b08082b19, 0x2b08192b19080808, 0x2b08192b192b0808, 0x2b082b080808082b,\n    0x2b082b1908081908, 0x2b082b2b08190819, 0x2b19080808081908, 0x2b19080808190808,\n    0x2b190808082b1908, 0x2b19080819080808, 0x2b1908082b2b0819, 0x2b1908190819192b,\n    0x2b1908192b080808, 0x2b19082b19081919, 0x2b19190808080808, 0x2b191908082b082b,\n    0x2b19190819081908, 0x2b19191919190819, 0x2b192b082b080819, 0x2b192b19082b0808,\n    0x2b2b08080808082b, 0x2b2b080819190808, 0x2b2b08082b081919, 0x2b2b081908082b19,\n    0x2b2b082b08080808, 0x2b2b190808192b08, 0x2b2b2b0819190808, 0x2b2b2b1908081908,\nGGML_TABLE_END()\n\nGGML_TABLE_BEGIN(uint64_t, iq2xs_grid, 512)\n    0x0808080808080808, 0x080808080808082b, 0x0808080808081919, 0x0808080808082b08,\n    0x0808080808082b2b, 0x0808080808190819, 0x0808080808191908, 0x080808080819192b,\n    0x0808080808192b19, 0x08080808082b0808, 0x08080808082b082b, 0x08080808082b1919,\n    0x08080808082b2b08, 0x0808080819080819, 0x0808080819081908, 0x080808081908192b,\n    0x0808080819082b19, 0x0808080819190808, 0x080808081919082b, 0x0808080819191919,\n    0x0808080819192b08, 0x08080808192b0819, 0x08080808192b1908, 0x080808082b080808,\n    0x080808082b08082b, 0x080808082b081919, 0x080808082b082b08, 0x080808082b190819,\n    0x080808082b191908, 0x080808082b192b19, 0x080808082b2b0808, 0x0808081908080819,\n    0x0808081908081908, 0x080808190808192b, 0x0808081908082b19, 0x0808081908190808,\n    0x080808190819082b, 0x0808081908191919, 0x0808081908192b08, 0x0808081908192b2b,\n    0x08080819082b0819, 0x08080819082b1908, 0x0808081919080808, 0x080808191908082b,\n    0x0808081919081919, 0x0808081919082b08, 0x0808081919190819, 0x0808081919191908,\n    0x08080819192b0808, 0x08080819192b2b08, 0x080808192b080819, 0x080808192b081908,\n    0x080808192b190808, 0x0808082b08080808, 0x0808082b0808082b, 0x0808082b08081919,\n    0x0808082b08082b08, 0x0808082b08190819, 0x0808082b08191908, 0x0808082b082b0808,\n    0x0808082b19080819, 0x0808082b19081908, 0x0808082b19190808, 0x0808082b19191919,\n    0x0808082b2b080808, 0x0808082b2b082b2b, 0x0808190808080819, 0x0808190808081908,\n    0x080819080808192b, 0x0808190808082b19, 0x0808190808190808, 0x080819080819082b,\n    0x0808190808191919, 0x0808190808192b08, 0x08081908082b0819, 0x08081908082b1908,\n    0x0808190819080808, 0x080819081908082b, 0x0808190819081919, 0x0808190819082b08,\n    0x0808190819190819, 0x0808190819191908, 0x080819081919192b, 0x08081908192b0808,\n    0x080819082b080819, 0x080819082b081908, 0x080819082b190808, 0x0808191908080808,\n    0x080819190808082b, 0x0808191908081919, 0x0808191908082b08, 0x0808191908190819,\n    0x0808191908191908, 0x08081919082b0808, 0x0808191919080819, 0x0808191919081908,\n    0x0808191919190808, 0x08081919192b0819, 0x080819192b080808, 0x0808192b08080819,\n    0x0808192b08081908, 0x0808192b08190808, 0x0808192b082b192b, 0x0808192b19080808,\n    0x0808192b1908082b, 0x0808192b2b081908, 0x08082b0808080808, 0x08082b080808082b,\n    0x08082b0808081919, 0x08082b0808082b08, 0x08082b0808082b2b, 0x08082b0808190819,\n    0x08082b0808191908, 0x08082b08082b0808, 0x08082b08082b1919, 0x08082b0819080819,\n    0x08082b0819081908, 0x08082b0819190808, 0x08082b0819192b08, 0x08082b082b080808,\n    0x08082b082b2b0808, 0x08082b082b2b2b2b, 0x08082b1908080819, 0x08082b1908081908,\n    0x08082b1908190808, 0x08082b1919080808, 0x08082b192b080819, 0x08082b192b082b19,\n    0x08082b2b08080808, 0x08082b2b082b0808, 0x08082b2b082b2b08, 0x08082b2b2b19192b,\n    0x08082b2b2b2b0808, 0x0819080808080819, 0x0819080808081908, 0x081908080808192b,\n    0x0819080808082b19, 0x0819080808190808, 0x081908080819082b, 0x0819080808191919,\n    0x0819080808192b08, 0x08190808082b0819, 0x08190808082b1908, 0x0819080819080808,\n    0x081908081908082b, 0x0819080819081919, 0x0819080819082b08, 0x0819080819190819,\n    0x0819080819191908, 0x08190808192b0808, 0x08190808192b2b2b, 0x081908082b080819,\n    0x081908082b081908, 0x081908082b190808, 0x0819081908080808, 0x081908190808082b,\n    0x0819081908081919, 0x0819081908082b08, 0x0819081908190819, 0x0819081908191908,\n    0x08190819082b0808, 0x0819081919080819, 0x0819081919081908, 0x0819081919190808,\n    0x081908192b080808, 0x081908192b191908, 0x081908192b19192b, 0x0819082b08080819,\n    0x0819082b08081908, 0x0819082b0808192b, 0x0819082b08190808, 0x0819082b19080808,\n    0x0819082b192b0808, 0x0819190808080808, 0x081919080808082b, 0x0819190808081919,\n    0x0819190808082b08, 0x0819190808190819, 0x0819190808191908, 0x08191908082b0808,\n    0x0819190819080819, 0x0819190819081908, 0x0819190819082b19, 0x0819190819190808,\n    0x08191908192b1908, 0x081919082b080808, 0x0819191908080819, 0x0819191908081908,\n    0x0819191908190808, 0x0819191919080808, 0x0819192b08080808, 0x0819192b08191908,\n    0x0819192b19082b19, 0x08192b0808080819, 0x08192b0808081908, 0x08192b0808190808,\n    0x08192b080819082b, 0x08192b0819080808, 0x08192b0819191908, 0x08192b082b08192b,\n    0x08192b1908080808, 0x08192b1908081919, 0x08192b19192b192b, 0x08192b2b19190819,\n    0x08192b2b2b2b2b19, 0x082b080808080808, 0x082b08080808082b, 0x082b080808081919,\n    0x082b080808082b08, 0x082b080808082b2b, 0x082b080808190819, 0x082b080808191908,\n    0x082b0808082b0808, 0x082b080819080819, 0x082b080819081908, 0x082b080819190808,\n    0x082b08082b080808, 0x082b08082b2b0808, 0x082b081908080819, 0x082b081908081908,\n    0x082b081908190808, 0x082b081919080808, 0x082b081919082b08, 0x082b0819192b1919,\n    0x082b082b08080808, 0x082b082b082b082b, 0x082b082b2b080808, 0x082b082b2b2b2b08,\n    0x082b190808080819, 0x082b190808081908, 0x082b190808190808, 0x082b1908082b2b19,\n    0x082b190819080808, 0x082b191908080808, 0x082b191919080819, 0x082b19191919082b,\n    0x082b19192b192b19, 0x082b192b08080819, 0x082b192b08192b2b, 0x082b192b2b2b192b,\n    0x082b2b0808080808, 0x082b2b0808082b08, 0x082b2b0808082b2b, 0x082b2b08082b0808,\n    0x082b2b0819191919, 0x082b2b082b082b08, 0x082b2b082b2b082b, 0x082b2b19192b2b08,\n    0x082b2b192b190808, 0x082b2b2b08082b08, 0x082b2b2b082b0808, 0x082b2b2b2b08082b,\n    0x082b2b2b2b082b08, 0x082b2b2b2b082b2b, 0x1908080808080819, 0x1908080808081908,\n    0x190808080808192b, 0x1908080808082b19, 0x1908080808190808, 0x190808080819082b,\n    0x1908080808191919, 0x1908080808192b08, 0x19080808082b0819, 0x19080808082b1908,\n    0x1908080819080808, 0x190808081908082b, 0x1908080819081919, 0x1908080819082b08,\n    0x1908080819082b2b, 0x1908080819190819, 0x1908080819191908, 0x19080808192b0808,\n    0x19080808192b1919, 0x190808082b080819, 0x190808082b081908, 0x190808082b190808,\n    0x1908081908080808, 0x190808190808082b, 0x1908081908081919, 0x1908081908082b08,\n    0x1908081908190819, 0x1908081908191908, 0x19080819082b0808, 0x1908081919080819,\n    0x1908081919081908, 0x1908081919190808, 0x190808192b080808, 0x190808192b081919,\n    0x190808192b2b082b, 0x1908082b08080819, 0x1908082b08081908, 0x1908082b08190808,\n    0x1908082b0819082b, 0x1908082b082b2b19, 0x1908082b19080808, 0x1908190808080808,\n    0x190819080808082b, 0x1908190808081919, 0x1908190808082b08, 0x1908190808190819,\n    0x1908190808191908, 0x1908190808192b19, 0x19081908082b0808, 0x1908190819080819,\n    0x1908190819081908, 0x1908190819190808, 0x190819082b080808, 0x190819082b191908,\n    0x1908191908080819, 0x1908191908081908, 0x1908191908190808, 0x19081919082b1908,\n    0x1908191919080808, 0x190819192b192b2b, 0x1908192b08080808, 0x1908192b08082b2b,\n    0x1908192b19081908, 0x1908192b19190808, 0x19082b0808080819, 0x19082b0808081908,\n    0x19082b0808190808, 0x19082b0819080808, 0x19082b0819081919, 0x19082b0819191908,\n    0x19082b08192b082b, 0x19082b1908080808, 0x19082b1908190819, 0x19082b1919081908,\n    0x19082b1919190808, 0x19082b19192b2b19, 0x19082b2b08081908, 0x1919080808080808,\n    0x191908080808082b, 0x1919080808081919, 0x1919080808082b08, 0x1919080808190819,\n    0x1919080808191908, 0x19190808082b0808, 0x19190808082b2b08, 0x1919080819080819,\n    0x1919080819081908, 0x1919080819190808, 0x191908082b080808, 0x1919081908080819,\n    0x1919081908081908, 0x1919081908190808, 0x1919081908191919, 0x1919081919080808,\n    0x191908191908082b, 0x1919082b08080808, 0x1919082b19081908, 0x1919082b2b2b2b2b,\n    0x1919190808080819, 0x1919190808081908, 0x1919190808190808, 0x19191908082b0819,\n    0x1919190819080808, 0x19191908192b0808, 0x191919082b080819, 0x191919082b2b0819,\n    0x1919191908080808, 0x1919191908082b08, 0x191919192b080808, 0x191919192b082b08,\n    0x1919192b082b0819, 0x1919192b192b2b08, 0x1919192b2b2b0819, 0x19192b0808080808,\n    0x19192b0808191908, 0x19192b0819080819, 0x19192b0819190808, 0x19192b082b192b19,\n    0x19192b1908192b2b, 0x19192b1919080808, 0x19192b191908082b, 0x19192b2b2b081919,\n    0x192b080808080819, 0x192b080808081908, 0x192b080808190808, 0x192b080819080808,\n    0x192b080819191908, 0x192b0808192b082b, 0x192b08082b08192b, 0x192b08082b2b2b19,\n    0x192b081908080808, 0x192b082b082b1908, 0x192b082b19082b2b, 0x192b082b2b19082b,\n    0x192b190808080808, 0x192b19080819192b, 0x192b191908190808, 0x192b191919080808,\n    0x192b191919081919, 0x192b19192b2b1908, 0x192b2b0808080819, 0x192b2b08192b2b2b,\n    0x192b2b19082b1919, 0x192b2b2b0808192b, 0x192b2b2b19191908, 0x192b2b2b192b082b,\n    0x2b08080808080808, 0x2b0808080808082b, 0x2b08080808081919, 0x2b08080808082b08,\n    0x2b08080808190819, 0x2b08080808191908, 0x2b080808082b0808, 0x2b080808082b2b2b,\n    0x2b08080819080819, 0x2b08080819081908, 0x2b08080819190808, 0x2b0808082b080808,\n    0x2b0808082b08082b, 0x2b0808082b2b2b08, 0x2b0808082b2b2b2b, 0x2b08081908080819,\n    0x2b08081908081908, 0x2b0808190808192b, 0x2b08081908190808, 0x2b08081919080808,\n    0x2b08081919190819, 0x2b08081919192b19, 0x2b08082b08080808, 0x2b08082b082b0808,\n    0x2b08082b2b080808, 0x2b08082b2b08082b, 0x2b08082b2b2b0808, 0x2b08082b2b2b2b08,\n    0x2b08190808080819, 0x2b08190808081908, 0x2b08190808190808, 0x2b0819080819082b,\n    0x2b08190808191919, 0x2b08190819080808, 0x2b081908192b0808, 0x2b0819082b082b19,\n    0x2b08191908080808, 0x2b08191919081908, 0x2b0819192b2b1919, 0x2b08192b08192b08,\n    0x2b08192b192b2b2b, 0x2b082b0808080808, 0x2b082b0808082b08, 0x2b082b08082b1919,\n    0x2b082b0819192b2b, 0x2b082b082b080808, 0x2b082b082b08082b, 0x2b082b082b2b2b08,\n    0x2b082b190808192b, 0x2b082b2b082b082b, 0x2b082b2b2b080808, 0x2b082b2b2b082b08,\n    0x2b082b2b2b19192b, 0x2b082b2b2b2b2b08, 0x2b19080808080819, 0x2b19080808081908,\n    0x2b19080808190808, 0x2b19080819080808, 0x2b1908081919192b, 0x2b1908082b081908,\n    0x2b19081908080808, 0x2b190819082b082b, 0x2b190819192b1908, 0x2b19082b1919192b,\n    0x2b19082b2b082b19, 0x2b19190808080808, 0x2b19190808081919, 0x2b19190819081908,\n    0x2b19190819190808, 0x2b19190819192b08, 0x2b191919082b2b19, 0x2b1919192b190808,\n    0x2b1919192b19082b, 0x2b19192b19080819, 0x2b192b0819190819, 0x2b192b082b2b192b,\n    0x2b192b1919082b19, 0x2b192b2b08191919, 0x2b192b2b192b0808, 0x2b2b080808080808,\n    0x2b2b08080808082b, 0x2b2b080808082b08, 0x2b2b080808082b2b, 0x2b2b0808082b0808,\n    0x2b2b0808082b2b2b, 0x2b2b08082b2b0808, 0x2b2b081919190819, 0x2b2b081919192b19,\n    0x2b2b08192b2b192b, 0x2b2b082b08080808, 0x2b2b082b0808082b, 0x2b2b082b08082b08,\n    0x2b2b082b082b2b2b, 0x2b2b082b2b080808, 0x2b2b082b2b2b0808, 0x2b2b190819080808,\n    0x2b2b19082b191919, 0x2b2b192b192b1919, 0x2b2b192b2b192b08, 0x2b2b2b0808082b2b,\n    0x2b2b2b08082b0808, 0x2b2b2b08082b082b, 0x2b2b2b08082b2b08, 0x2b2b2b082b2b0808,\n    0x2b2b2b082b2b2b08, 0x2b2b2b1908081908, 0x2b2b2b192b081908, 0x2b2b2b192b08192b,\n    0x2b2b2b2b082b2b08, 0x2b2b2b2b082b2b2b, 0x2b2b2b2b2b190819, 0x2b2b2b2b2b2b2b2b,\nGGML_TABLE_END()\n\nGGML_TABLE_BEGIN(uint64_t, iq2s_grid, 1024)\n    0x0808080808080808, 0x080808080808082b, 0x0808080808081919, 0x0808080808082b08,\n    0x0808080808082b2b, 0x0808080808190819, 0x0808080808191908, 0x080808080819192b,\n    0x0808080808192b19, 0x08080808082b0808, 0x08080808082b082b, 0x08080808082b1919,\n    0x08080808082b2b08, 0x0808080819080819, 0x0808080819081908, 0x080808081908192b,\n    0x0808080819082b19, 0x0808080819190808, 0x080808081919082b, 0x0808080819191919,\n    0x0808080819192b08, 0x08080808192b0819, 0x08080808192b1908, 0x08080808192b192b,\n    0x08080808192b2b19, 0x080808082b080808, 0x080808082b08082b, 0x080808082b081919,\n    0x080808082b082b08, 0x080808082b190819, 0x080808082b191908, 0x080808082b2b0808,\n    0x080808082b2b1919, 0x080808082b2b2b2b, 0x0808081908080819, 0x0808081908081908,\n    0x080808190808192b, 0x0808081908082b19, 0x0808081908190808, 0x080808190819082b,\n    0x0808081908191919, 0x0808081908192b08, 0x08080819082b0819, 0x08080819082b1908,\n    0x0808081919080808, 0x080808191908082b, 0x0808081919081919, 0x0808081919082b08,\n    0x0808081919190819, 0x0808081919191908, 0x080808191919192b, 0x0808081919192b19,\n    0x08080819192b0808, 0x08080819192b1919, 0x08080819192b2b08, 0x080808192b080819,\n    0x080808192b081908, 0x080808192b190808, 0x080808192b19082b, 0x080808192b191919,\n    0x080808192b2b0819, 0x080808192b2b1908, 0x0808082b08080808, 0x0808082b0808082b,\n    0x0808082b08081919, 0x0808082b08082b08, 0x0808082b08190819, 0x0808082b08191908,\n    0x0808082b082b0808, 0x0808082b082b2b2b, 0x0808082b19080819, 0x0808082b19081908,\n    0x0808082b1908192b, 0x0808082b19082b19, 0x0808082b19190808, 0x0808082b19191919,\n    0x0808082b2b080808, 0x0808082b2b081919, 0x0808082b2b082b2b, 0x0808082b2b191908,\n    0x0808082b2b2b082b, 0x0808190808080819, 0x0808190808081908, 0x080819080808192b,\n    0x0808190808082b19, 0x0808190808190808, 0x080819080819082b, 0x0808190808191919,\n    0x0808190808192b08, 0x08081908082b0819, 0x08081908082b1908, 0x08081908082b192b,\n    0x08081908082b2b19, 0x0808190819080808, 0x080819081908082b, 0x0808190819081919,\n    0x0808190819082b08, 0x0808190819082b2b, 0x0808190819190819, 0x0808190819191908,\n    0x080819081919192b, 0x0808190819192b19, 0x08081908192b0808, 0x08081908192b082b,\n    0x08081908192b1919, 0x080819082b080819, 0x080819082b081908, 0x080819082b08192b,\n    0x080819082b082b19, 0x080819082b190808, 0x080819082b191919, 0x080819082b192b08,\n    0x080819082b2b0819, 0x080819082b2b1908, 0x0808191908080808, 0x080819190808082b,\n    0x0808191908081919, 0x0808191908082b08, 0x0808191908082b2b, 0x0808191908190819,\n    0x0808191908191908, 0x080819190819192b, 0x0808191908192b19, 0x08081919082b0808,\n    0x08081919082b1919, 0x08081919082b2b08, 0x0808191919080819, 0x0808191919081908,\n    0x080819191908192b, 0x0808191919082b19, 0x0808191919190808, 0x080819191919082b,\n    0x0808191919191919, 0x0808191919192b08, 0x08081919192b0819, 0x08081919192b1908,\n    0x080819192b080808, 0x080819192b08082b, 0x080819192b081919, 0x080819192b082b08,\n    0x080819192b190819, 0x080819192b191908, 0x080819192b2b0808, 0x0808192b08080819,\n    0x0808192b08081908, 0x0808192b0808192b, 0x0808192b08082b19, 0x0808192b08190808,\n    0x0808192b08191919, 0x0808192b19080808, 0x0808192b19081919, 0x0808192b19082b08,\n    0x0808192b19190819, 0x0808192b19191908, 0x0808192b192b0808, 0x0808192b2b080819,\n    0x0808192b2b081908, 0x0808192b2b190808, 0x08082b0808080808, 0x08082b080808082b,\n    0x08082b0808081919, 0x08082b0808082b08, 0x08082b0808190819, 0x08082b0808191908,\n    0x08082b080819192b, 0x08082b0808192b19, 0x08082b08082b0808, 0x08082b08082b1919,\n    0x08082b08082b2b2b, 0x08082b0819080819, 0x08082b0819081908, 0x08082b081908192b,\n    0x08082b0819082b19, 0x08082b0819190808, 0x08082b081919082b, 0x08082b0819191919,\n    0x08082b0819192b08, 0x08082b08192b0819, 0x08082b08192b1908, 0x08082b082b080808,\n    0x08082b082b081919, 0x08082b082b191908, 0x08082b082b2b2b2b, 0x08082b1908080819,\n    0x08082b1908081908, 0x08082b1908190808, 0x08082b190819082b, 0x08082b1908191919,\n    0x08082b1908192b08, 0x08082b19082b0819, 0x08082b1919080808, 0x08082b1919081919,\n    0x08082b1919082b08, 0x08082b1919190819, 0x08082b1919191908, 0x08082b19192b0808,\n    0x08082b192b080819, 0x08082b192b190808, 0x08082b2b08080808, 0x08082b2b08190819,\n    0x08082b2b08191908, 0x08082b2b082b082b, 0x08082b2b082b2b08, 0x08082b2b082b2b2b,\n    0x08082b2b19190808, 0x08082b2b2b192b19, 0x0819080808080819, 0x0819080808081908,\n    0x081908080808192b, 0x0819080808082b19, 0x0819080808190808, 0x081908080819082b,\n    0x0819080808191919, 0x0819080808192b08, 0x08190808082b0819, 0x08190808082b1908,\n    0x08190808082b192b, 0x0819080819080808, 0x081908081908082b, 0x0819080819081919,\n    0x0819080819082b08, 0x0819080819190819, 0x0819080819191908, 0x081908081919192b,\n    0x0819080819192b19, 0x08190808192b0808, 0x08190808192b082b, 0x08190808192b1919,\n    0x08190808192b2b08, 0x081908082b080819, 0x081908082b081908, 0x081908082b08192b,\n    0x081908082b190808, 0x081908082b191919, 0x081908082b192b08, 0x081908082b2b0819,\n    0x081908082b2b1908, 0x0819081908080808, 0x081908190808082b, 0x0819081908081919,\n    0x0819081908082b08, 0x0819081908082b2b, 0x0819081908190819, 0x0819081908191908,\n    0x081908190819192b, 0x0819081908192b19, 0x08190819082b0808, 0x08190819082b082b,\n    0x08190819082b1919, 0x08190819082b2b08, 0x0819081919080819, 0x0819081919081908,\n    0x081908191908192b, 0x0819081919082b19, 0x0819081919190808, 0x081908191919082b,\n    0x0819081919191919, 0x0819081919192b08, 0x08190819192b0819, 0x08190819192b1908,\n    0x081908192b080808, 0x081908192b08082b, 0x081908192b081919, 0x081908192b082b08,\n    0x081908192b190819, 0x081908192b191908, 0x0819082b08080819, 0x0819082b08081908,\n    0x0819082b08082b19, 0x0819082b08190808, 0x0819082b08191919, 0x0819082b082b0819,\n    0x0819082b082b1908, 0x0819082b19080808, 0x0819082b19081919, 0x0819082b19190819,\n    0x0819082b19191908, 0x0819082b2b080819, 0x0819082b2b081908, 0x0819082b2b190808,\n    0x0819190808080808, 0x081919080808082b, 0x0819190808081919, 0x0819190808082b08,\n    0x0819190808190819, 0x0819190808191908, 0x081919080819192b, 0x0819190808192b19,\n    0x08191908082b0808, 0x08191908082b1919, 0x08191908082b2b08, 0x0819190819080819,\n    0x0819190819081908, 0x081919081908192b, 0x0819190819082b19, 0x0819190819190808,\n    0x081919081919082b, 0x0819190819191919, 0x0819190819192b08, 0x08191908192b0819,\n    0x08191908192b1908, 0x081919082b080808, 0x081919082b08082b, 0x081919082b081919,\n    0x081919082b082b08, 0x081919082b190819, 0x081919082b191908, 0x081919082b2b0808,\n    0x0819191908080819, 0x0819191908081908, 0x081919190808192b, 0x0819191908082b19,\n    0x0819191908190808, 0x081919190819082b, 0x0819191908191919, 0x0819191908192b08,\n    0x08191919082b0819, 0x08191919082b1908, 0x0819191919080808, 0x081919191908082b,\n    0x0819191919081919, 0x0819191919082b08, 0x0819191919190819, 0x0819191919191908,\n    0x08191919192b0808, 0x081919192b080819, 0x081919192b081908, 0x081919192b190808,\n    0x0819192b08080808, 0x0819192b08081919, 0x0819192b08082b08, 0x0819192b08190819,\n    0x0819192b08191908, 0x0819192b082b0808, 0x0819192b19080819, 0x0819192b19081908,\n    0x0819192b19190808, 0x0819192b2b080808, 0x0819192b2b2b2b2b, 0x08192b0808080819,\n    0x08192b0808081908, 0x08192b080808192b, 0x08192b0808082b19, 0x08192b0808190808,\n    0x08192b0808191919, 0x08192b0808192b08, 0x08192b08082b0819, 0x08192b0819080808,\n    0x08192b081908082b, 0x08192b0819081919, 0x08192b0819082b08, 0x08192b0819190819,\n    0x08192b0819191908, 0x08192b08192b0808, 0x08192b082b080819, 0x08192b082b081908,\n    0x08192b1908080808, 0x08192b190808082b, 0x08192b1908081919, 0x08192b1908082b08,\n    0x08192b1908190819, 0x08192b1908191908, 0x08192b19082b0808, 0x08192b1919080819,\n    0x08192b1919081908, 0x08192b1919190808, 0x08192b19192b2b19, 0x08192b192b2b082b,\n    0x08192b2b08081908, 0x08192b2b08190808, 0x08192b2b19080808, 0x08192b2b1919192b,\n    0x082b080808080808, 0x082b08080808082b, 0x082b080808081919, 0x082b080808082b08,\n    0x082b080808190819, 0x082b080808191908, 0x082b08080819192b, 0x082b080808192b19,\n    0x082b0808082b0808, 0x082b0808082b1919, 0x082b0808082b2b2b, 0x082b080819080819,\n    0x082b080819081908, 0x082b080819190808, 0x082b08081919082b, 0x082b080819191919,\n    0x082b0808192b1908, 0x082b08082b080808, 0x082b08082b082b2b, 0x082b08082b191908,\n    0x082b08082b2b2b2b, 0x082b081908080819, 0x082b081908081908, 0x082b081908190808,\n    0x082b08190819082b, 0x082b081908191919, 0x082b0819082b0819, 0x082b081919080808,\n    0x082b08191908082b, 0x082b081919081919, 0x082b081919190819, 0x082b081919191908,\n    0x082b0819192b0808, 0x082b08192b080819, 0x082b08192b081908, 0x082b08192b190808,\n    0x082b082b08080808, 0x082b082b08082b2b, 0x082b082b082b082b, 0x082b082b082b2b08,\n    0x082b082b082b2b2b, 0x082b082b19081908, 0x082b082b19190808, 0x082b082b2b082b08,\n    0x082b082b2b082b2b, 0x082b082b2b2b2b08, 0x082b190808080819, 0x082b190808081908,\n    0x082b19080808192b, 0x082b190808082b19, 0x082b190808190808, 0x082b190808191919,\n    0x082b190808192b08, 0x082b1908082b0819, 0x082b1908082b1908, 0x082b190819080808,\n    0x082b19081908082b, 0x082b190819081919, 0x082b190819082b08, 0x082b190819190819,\n    0x082b190819191908, 0x082b1908192b0808, 0x082b19082b080819, 0x082b19082b081908,\n    0x082b19082b190808, 0x082b191908080808, 0x082b191908081919, 0x082b191908082b08,\n    0x082b191908190819, 0x082b191908191908, 0x082b1919082b0808, 0x082b191919080819,\n    0x082b191919081908, 0x082b191919190808, 0x082b1919192b192b, 0x082b19192b080808,\n    0x082b192b08080819, 0x082b192b08081908, 0x082b192b08190808, 0x082b192b19080808,\n    0x082b192b19192b19, 0x082b2b0808080808, 0x082b2b0808081919, 0x082b2b0808190819,\n    0x082b2b0808191908, 0x082b2b0819080819, 0x082b2b0819081908, 0x082b2b0819190808,\n    0x082b2b082b082b2b, 0x082b2b082b2b2b2b, 0x082b2b1908080819, 0x082b2b1908081908,\n    0x082b2b1908190808, 0x082b2b192b191919, 0x082b2b2b08082b2b, 0x082b2b2b082b082b,\n    0x082b2b2b192b1908, 0x082b2b2b2b082b08, 0x082b2b2b2b082b2b, 0x1908080808080819,\n    0x1908080808081908, 0x190808080808192b, 0x1908080808082b19, 0x1908080808190808,\n    0x190808080819082b, 0x1908080808191919, 0x1908080808192b08, 0x1908080808192b2b,\n    0x19080808082b0819, 0x19080808082b1908, 0x19080808082b192b, 0x1908080819080808,\n    0x190808081908082b, 0x1908080819081919, 0x1908080819082b08, 0x1908080819082b2b,\n    0x1908080819190819, 0x1908080819191908, 0x190808081919192b, 0x1908080819192b19,\n    0x19080808192b0808, 0x19080808192b082b, 0x19080808192b1919, 0x190808082b080819,\n    0x190808082b081908, 0x190808082b190808, 0x190808082b191919, 0x190808082b192b08,\n    0x190808082b2b0819, 0x190808082b2b1908, 0x1908081908080808, 0x190808190808082b,\n    0x1908081908081919, 0x1908081908082b08, 0x1908081908190819, 0x1908081908191908,\n    0x190808190819192b, 0x1908081908192b19, 0x19080819082b0808, 0x19080819082b082b,\n    0x19080819082b1919, 0x1908081919080819, 0x1908081919081908, 0x190808191908192b,\n    0x1908081919082b19, 0x1908081919190808, 0x190808191919082b, 0x1908081919191919,\n    0x1908081919192b08, 0x19080819192b0819, 0x19080819192b1908, 0x190808192b080808,\n    0x190808192b08082b, 0x190808192b081919, 0x190808192b082b08, 0x190808192b190819,\n    0x190808192b191908, 0x190808192b2b0808, 0x1908082b08080819, 0x1908082b08081908,\n    0x1908082b08190808, 0x1908082b0819082b, 0x1908082b08191919, 0x1908082b08192b08,\n    0x1908082b082b1908, 0x1908082b19080808, 0x1908082b19081919, 0x1908082b19082b08,\n    0x1908082b19190819, 0x1908082b19191908, 0x1908082b192b0808, 0x1908082b2b080819,\n    0x1908082b2b081908, 0x1908190808080808, 0x190819080808082b, 0x1908190808081919,\n    0x1908190808082b08, 0x1908190808082b2b, 0x1908190808190819, 0x1908190808191908,\n    0x190819080819192b, 0x1908190808192b19, 0x19081908082b0808, 0x19081908082b082b,\n    0x19081908082b1919, 0x19081908082b2b08, 0x1908190819080819, 0x1908190819081908,\n    0x190819081908192b, 0x1908190819082b19, 0x1908190819190808, 0x190819081919082b,\n    0x1908190819191919, 0x1908190819192b08, 0x19081908192b0819, 0x19081908192b1908,\n    0x190819082b080808, 0x190819082b08082b, 0x190819082b081919, 0x190819082b082b08,\n    0x190819082b190819, 0x190819082b191908, 0x190819082b2b0808, 0x1908191908080819,\n    0x1908191908081908, 0x190819190808192b, 0x1908191908082b19, 0x1908191908190808,\n    0x190819190819082b, 0x1908191908191919, 0x1908191908192b08, 0x19081919082b0819,\n    0x19081919082b1908, 0x1908191919080808, 0x190819191908082b, 0x1908191919081919,\n    0x1908191919082b08, 0x1908191919190819, 0x1908191919191908, 0x19081919192b0808,\n    0x19081919192b2b2b, 0x190819192b080819, 0x190819192b081908, 0x190819192b190808,\n    0x1908192b08080808, 0x1908192b0808082b, 0x1908192b08081919, 0x1908192b08082b08,\n    0x1908192b08190819, 0x1908192b08191908, 0x1908192b082b0808, 0x1908192b19080819,\n    0x1908192b19081908, 0x1908192b19190808, 0x1908192b2b080808, 0x1908192b2b2b1919,\n    0x19082b0808080819, 0x19082b0808081908, 0x19082b0808082b19, 0x19082b0808190808,\n    0x19082b080819082b, 0x19082b0808191919, 0x19082b0808192b08, 0x19082b08082b0819,\n    0x19082b08082b1908, 0x19082b0819080808, 0x19082b081908082b, 0x19082b0819081919,\n    0x19082b0819082b08, 0x19082b0819190819, 0x19082b0819191908, 0x19082b08192b0808,\n    0x19082b082b081908, 0x19082b082b190808, 0x19082b1908080808, 0x19082b190808082b,\n    0x19082b1908081919, 0x19082b1908082b08, 0x19082b1908190819, 0x19082b1908191908,\n    0x19082b19082b0808, 0x19082b1919080819, 0x19082b1919081908, 0x19082b1919190808,\n    0x19082b192b080808, 0x19082b192b19192b, 0x19082b2b08080819, 0x19082b2b08081908,\n    0x19082b2b08190808, 0x19082b2b19080808, 0x1919080808080808, 0x191908080808082b,\n    0x1919080808081919, 0x1919080808082b08, 0x1919080808190819, 0x1919080808191908,\n    0x191908080819192b, 0x1919080808192b19, 0x19190808082b0808, 0x19190808082b082b,\n    0x19190808082b1919, 0x19190808082b2b08, 0x1919080819080819, 0x1919080819081908,\n    0x191908081908192b, 0x1919080819082b19, 0x1919080819190808, 0x191908081919082b,\n    0x1919080819191919, 0x1919080819192b08, 0x19190808192b0819, 0x19190808192b1908,\n    0x191908082b080808, 0x191908082b08082b, 0x191908082b081919, 0x191908082b082b08,\n    0x191908082b190819, 0x191908082b191908, 0x1919081908080819, 0x1919081908081908,\n    0x191908190808192b, 0x1919081908082b19, 0x1919081908190808, 0x191908190819082b,\n    0x1919081908191919, 0x1919081908192b08, 0x19190819082b0819, 0x19190819082b1908,\n    0x1919081919080808, 0x191908191908082b, 0x1919081919081919, 0x1919081919082b08,\n    0x1919081919190819, 0x1919081919191908, 0x19190819192b0808, 0x191908192b080819,\n    0x191908192b081908, 0x191908192b190808, 0x1919082b08080808, 0x1919082b08081919,\n    0x1919082b08082b08, 0x1919082b08190819, 0x1919082b08191908, 0x1919082b082b0808,\n    0x1919082b19080819, 0x1919082b19081908, 0x1919082b19190808, 0x1919082b192b2b19,\n    0x1919082b2b080808, 0x1919190808080819, 0x1919190808081908, 0x191919080808192b,\n    0x1919190808082b19, 0x1919190808190808, 0x191919080819082b, 0x1919190808191919,\n    0x1919190808192b08, 0x19191908082b0819, 0x19191908082b1908, 0x1919190819080808,\n    0x191919081908082b, 0x1919190819081919, 0x1919190819082b08, 0x1919190819190819,\n    0x1919190819191908, 0x19191908192b0808, 0x191919082b080819, 0x191919082b081908,\n    0x191919082b190808, 0x1919191908080808, 0x191919190808082b, 0x1919191908081919,\n    0x1919191908082b08, 0x1919191908190819, 0x1919191908191908, 0x19191919082b0808,\n    0x1919191919080819, 0x1919191919081908, 0x1919191919190808, 0x191919192b080808,\n    0x1919192b08080819, 0x1919192b08081908, 0x1919192b08190808, 0x1919192b082b192b,\n    0x1919192b19080808, 0x19192b0808080808, 0x19192b080808082b, 0x19192b0808081919,\n    0x19192b0808082b08, 0x19192b0808190819, 0x19192b0808191908, 0x19192b08082b0808,\n    0x19192b0819080819, 0x19192b0819081908, 0x19192b0819190808, 0x19192b0819192b2b,\n    0x19192b082b080808, 0x19192b1908080819, 0x19192b1908081908, 0x19192b1908190808,\n    0x19192b1919080808, 0x19192b2b08080808, 0x19192b2b08192b19, 0x19192b2b2b081919,\n    0x19192b2b2b2b2b08, 0x192b080808080819, 0x192b080808081908, 0x192b08080808192b,\n    0x192b080808190808, 0x192b08080819082b, 0x192b080808191919, 0x192b080808192b08,\n    0x192b0808082b0819, 0x192b0808082b1908, 0x192b080819080808, 0x192b080819081919,\n    0x192b080819082b08, 0x192b080819190819, 0x192b080819191908, 0x192b0808192b0808,\n    0x192b08082b081908, 0x192b08082b190808, 0x192b081908080808, 0x192b08190808082b,\n    0x192b081908081919, 0x192b081908082b08, 0x192b081908190819, 0x192b081908191908,\n    0x192b0819082b0808, 0x192b081919080819, 0x192b081919081908, 0x192b081919190808,\n    0x192b08192b080808, 0x192b08192b192b19, 0x192b082b08081908, 0x192b082b08190808,\n    0x192b082b19080808, 0x192b082b1919192b, 0x192b082b2b2b0819, 0x192b190808080808,\n    0x192b190808081919, 0x192b190808082b08, 0x192b190808190819, 0x192b190808191908,\n    0x192b1908082b0808, 0x192b190819080819, 0x192b190819081908, 0x192b190819190808,\n    0x192b19082b080808, 0x192b191908080819, 0x192b191908081908, 0x192b191908190808,\n    0x192b191919080808, 0x192b191919082b2b, 0x192b1919192b2b08, 0x192b19192b19082b,\n    0x192b192b08080808, 0x192b192b2b191908, 0x192b2b0808080819, 0x192b2b0808081908,\n    0x192b2b0808190808, 0x192b2b08192b1919, 0x192b2b082b192b08, 0x192b2b1908080808,\n    0x192b2b19082b2b2b, 0x192b2b2b1908082b, 0x192b2b2b2b2b0819, 0x2b08080808080808,\n    0x2b0808080808082b, 0x2b08080808081919, 0x2b08080808082b08, 0x2b08080808190819,\n    0x2b08080808191908, 0x2b08080808192b19, 0x2b080808082b0808, 0x2b080808082b1919,\n    0x2b08080819080819, 0x2b08080819081908, 0x2b08080819190808, 0x2b0808081919082b,\n    0x2b08080819191919, 0x2b08080819192b08, 0x2b080808192b0819, 0x2b0808082b080808,\n    0x2b0808082b081919, 0x2b0808082b190819, 0x2b0808082b191908, 0x2b08081908080819,\n    0x2b08081908081908, 0x2b08081908082b19, 0x2b08081908190808, 0x2b0808190819082b,\n    0x2b08081908191919, 0x2b08081908192b08, 0x2b080819082b0819, 0x2b080819082b1908,\n    0x2b08081919080808, 0x2b0808191908082b, 0x2b08081919081919, 0x2b08081919082b08,\n    0x2b08081919190819, 0x2b08081919191908, 0x2b0808192b080819, 0x2b0808192b081908,\n    0x2b0808192b190808, 0x2b0808192b2b2b19, 0x2b08082b08080808, 0x2b08082b08081919,\n    0x2b08082b08082b2b, 0x2b08082b08190819, 0x2b08082b08191908, 0x2b08082b19080819,\n    0x2b08082b19081908, 0x2b08082b19190808, 0x2b08190808080819, 0x2b08190808081908,\n    0x2b0819080808192b, 0x2b08190808082b19, 0x2b08190808190808, 0x2b0819080819082b,\n    0x2b08190808191919, 0x2b08190808192b08, 0x2b081908082b0819, 0x2b08190819080808,\n    0x2b0819081908082b, 0x2b08190819081919, 0x2b08190819082b08, 0x2b08190819190819,\n    0x2b08190819191908, 0x2b081908192b0808, 0x2b0819082b080819, 0x2b0819082b081908,\n    0x2b0819082b190808, 0x2b08191908080808, 0x2b0819190808082b, 0x2b08191908081919,\n    0x2b08191908082b08, 0x2b08191908190819, 0x2b08191908191908, 0x2b081919082b0808,\n    0x2b08191919080819, 0x2b08191919081908, 0x2b08191919190808, 0x2b0819192b080808,\n    0x2b0819192b082b2b, 0x2b08192b08080819, 0x2b08192b08081908, 0x2b08192b08190808,\n    0x2b08192b082b2b19, 0x2b08192b19080808, 0x2b082b0808080808, 0x2b082b0808081919,\n    0x2b082b0808190819, 0x2b082b0808191908, 0x2b082b0819080819, 0x2b082b0819081908,\n    0x2b082b0819190808, 0x2b082b082b2b082b, 0x2b082b1908080819, 0x2b082b1908081908,\n    0x2b082b1919080808, 0x2b082b19192b1919, 0x2b082b2b082b082b, 0x2b082b2b19192b08,\n    0x2b082b2b19192b2b, 0x2b082b2b2b08082b, 0x2b082b2b2b2b082b, 0x2b19080808080819,\n    0x2b19080808081908, 0x2b19080808082b19, 0x2b19080808190808, 0x2b1908080819082b,\n    0x2b19080808191919, 0x2b19080808192b08, 0x2b190808082b1908, 0x2b19080819080808,\n    0x2b1908081908082b, 0x2b19080819081919, 0x2b19080819082b08, 0x2b19080819190819,\n    0x2b19080819191908, 0x2b190808192b0808, 0x2b1908082b080819, 0x2b1908082b081908,\n    0x2b1908082b190808, 0x2b19081908080808, 0x2b19081908081919, 0x2b19081908190819,\n    0x2b19081908191908, 0x2b19081919080819, 0x2b19081919081908, 0x2b19081919190808,\n    0x2b19081919192b2b, 0x2b19082b08080819, 0x2b19082b08081908, 0x2b19082b08190808,\n    0x2b19082b19080808, 0x2b19082b2b2b192b, 0x2b19190808080808, 0x2b1919080808082b,\n    0x2b19190808081919, 0x2b19190808082b08, 0x2b19190808190819, 0x2b19190808191908,\n    0x2b191908082b0808, 0x2b19190819080819, 0x2b19190819081908, 0x2b19190819190808,\n    0x2b1919082b080808, 0x2b1919082b19192b, 0x2b19191908080819, 0x2b19191908081908,\n    0x2b19191908190808, 0x2b19191919080808, 0x2b1919192b192b08, 0x2b1919192b2b0819,\n    0x2b19192b08080808, 0x2b19192b1908192b, 0x2b19192b192b1908, 0x2b192b0808080819,\n    0x2b192b0808081908, 0x2b192b0808190808, 0x2b192b08082b192b, 0x2b192b0819080808,\n    0x2b192b082b2b2b19, 0x2b192b1908080808, 0x2b192b1919082b19, 0x2b192b191919082b,\n    0x2b192b2b2b190808, 0x2b2b080808080808, 0x2b2b080808081919, 0x2b2b080808082b2b,\n    0x2b2b080808191908, 0x2b2b0808082b082b, 0x2b2b0808082b2b2b, 0x2b2b080819080819,\n    0x2b2b080819081908, 0x2b2b080819190808, 0x2b2b08082b2b082b, 0x2b2b08082b2b2b2b,\n    0x2b2b081919080808, 0x2b2b0819192b1919, 0x2b2b082b0808082b, 0x2b2b082b08082b2b,\n    0x2b2b082b082b082b, 0x2b2b082b082b2b08, 0x2b2b082b082b2b2b, 0x2b2b082b2b08082b,\n    0x2b2b082b2b082b08, 0x2b2b082b2b082b2b, 0x2b2b082b2b2b2b08, 0x2b2b190808080819,\n    0x2b2b190808081908, 0x2b2b190808190808, 0x2b2b190819080808, 0x2b2b19082b082b19,\n    0x2b2b19082b2b1908, 0x2b2b191908080808, 0x2b2b191908192b19, 0x2b2b192b19190819,\n    0x2b2b2b0808082b2b, 0x2b2b2b08082b2b08, 0x2b2b2b082b2b082b, 0x2b2b2b1919191908,\n    0x2b2b2b192b08192b, 0x2b2b2b2b08082b08, 0x2b2b2b2b08082b2b, 0x2b2b2b2b082b0808,\n    0x2b2b2b2b082b082b, 0x2b2b2b2b082b2b08, 0x2b2b2b2b2b082b08, 0x2b2b2b2b2b2b2b2b,\nGGML_TABLE_END()\n\nGGML_TABLE_BEGIN(uint32_t, iq3xxs_grid, 256)\n    0x04040404, 0x04040414, 0x04040424, 0x04040c0c, 0x04040c1c, 0x04040c3e, 0x04041404, 0x04041414,\n    0x04041c0c, 0x04042414, 0x04043e1c, 0x04043e2c, 0x040c040c, 0x040c041c, 0x040c0c04, 0x040c0c14,\n    0x040c140c, 0x040c142c, 0x040c1c04, 0x040c1c14, 0x040c240c, 0x040c2c24, 0x040c3e04, 0x04140404,\n    0x04140414, 0x04140424, 0x04140c0c, 0x04141404, 0x04141414, 0x04141c0c, 0x04141c1c, 0x04141c3e,\n    0x04142c0c, 0x04142c3e, 0x04143e2c, 0x041c040c, 0x041c043e, 0x041c0c04, 0x041c0c14, 0x041c142c,\n    0x041c3e04, 0x04240c1c, 0x04241c3e, 0x04242424, 0x04242c3e, 0x04243e1c, 0x04243e2c, 0x042c040c,\n    0x042c043e, 0x042c1c14, 0x042c2c14, 0x04341c2c, 0x04343424, 0x043e0c04, 0x043e0c24, 0x043e0c34,\n    0x043e241c, 0x043e340c, 0x0c04040c, 0x0c04041c, 0x0c040c04, 0x0c040c14, 0x0c04140c, 0x0c04141c,\n    0x0c041c04, 0x0c041c14, 0x0c041c24, 0x0c04243e, 0x0c042c04, 0x0c0c0404, 0x0c0c0414, 0x0c0c0c0c,\n    0x0c0c1404, 0x0c0c1414, 0x0c14040c, 0x0c14041c, 0x0c140c04, 0x0c140c14, 0x0c14140c, 0x0c141c04,\n    0x0c143e14, 0x0c1c0404, 0x0c1c0414, 0x0c1c1404, 0x0c1c1c0c, 0x0c1c2434, 0x0c1c3434, 0x0c24040c,\n    0x0c24042c, 0x0c242c04, 0x0c2c1404, 0x0c2c1424, 0x0c2c2434, 0x0c2c3e0c, 0x0c34042c, 0x0c3e1414,\n    0x0c3e2404, 0x14040404, 0x14040414, 0x14040c0c, 0x14040c1c, 0x14041404, 0x14041414, 0x14041434,\n    0x14041c0c, 0x14042414, 0x140c040c, 0x140c041c, 0x140c042c, 0x140c0c04, 0x140c0c14, 0x140c140c,\n    0x140c1c04, 0x140c341c, 0x140c343e, 0x140c3e04, 0x14140404, 0x14140414, 0x14140c0c, 0x14140c3e,\n    0x14141404, 0x14141414, 0x14141c3e, 0x14142404, 0x14142c2c, 0x141c040c, 0x141c0c04, 0x141c0c24,\n    0x141c3e04, 0x141c3e24, 0x14241c2c, 0x14242c1c, 0x142c041c, 0x142c143e, 0x142c240c, 0x142c3e24,\n    0x143e040c, 0x143e041c, 0x143e0c34, 0x143e242c, 0x1c04040c, 0x1c040c04, 0x1c040c14, 0x1c04140c,\n    0x1c04141c, 0x1c042c04, 0x1c04342c, 0x1c043e14, 0x1c0c0404, 0x1c0c0414, 0x1c0c1404, 0x1c0c1c0c,\n    0x1c0c2424, 0x1c0c2434, 0x1c14040c, 0x1c14041c, 0x1c140c04, 0x1c14142c, 0x1c142c14, 0x1c143e14,\n    0x1c1c0c0c, 0x1c1c1c1c, 0x1c241c04, 0x1c24243e, 0x1c243e14, 0x1c2c0404, 0x1c2c0434, 0x1c2c1414,\n    0x1c2c2c2c, 0x1c340c24, 0x1c341c34, 0x1c34341c, 0x1c3e1c1c, 0x1c3e3404, 0x24040424, 0x24040c3e,\n    0x24041c2c, 0x24041c3e, 0x24042c1c, 0x24042c3e, 0x240c3e24, 0x24141404, 0x24141c3e, 0x24142404,\n    0x24143404, 0x24143434, 0x241c043e, 0x241c242c, 0x24240424, 0x24242c0c, 0x24243424, 0x242c142c,\n    0x242c241c, 0x242c3e04, 0x243e042c, 0x243e0c04, 0x243e0c14, 0x243e1c04, 0x2c040c14, 0x2c04240c,\n    0x2c043e04, 0x2c0c0404, 0x2c0c0434, 0x2c0c1434, 0x2c0c2c2c, 0x2c140c24, 0x2c141c14, 0x2c143e14,\n    0x2c1c0414, 0x2c1c2c1c, 0x2c240c04, 0x2c24141c, 0x2c24143e, 0x2c243e14, 0x2c2c0414, 0x2c2c1c0c,\n    0x2c342c04, 0x2c3e1424, 0x2c3e2414, 0x34041424, 0x34042424, 0x34042434, 0x34043424, 0x340c140c,\n    0x340c340c, 0x34140c3e, 0x34143424, 0x341c1c04, 0x341c1c34, 0x34242424, 0x342c042c, 0x342c2c14,\n    0x34341c1c, 0x343e041c, 0x343e140c, 0x3e04041c, 0x3e04042c, 0x3e04043e, 0x3e040c04, 0x3e041c14,\n    0x3e042c14, 0x3e0c1434, 0x3e0c2404, 0x3e140c14, 0x3e14242c, 0x3e142c14, 0x3e1c0404, 0x3e1c0c2c,\n    0x3e1c1c1c, 0x3e1c3404, 0x3e24140c, 0x3e24240c, 0x3e2c0404, 0x3e2c0414, 0x3e2c1424, 0x3e341c04,\nGGML_TABLE_END()\n\nGGML_TABLE_BEGIN(uint32_t, iq3s_grid, 512)\n    0x01010101, 0x01010103, 0x01010105, 0x0101010b, 0x0101010f, 0x01010301, 0x01010303, 0x01010305,\n    0x01010309, 0x0101030d, 0x01010501, 0x01010503, 0x0101050b, 0x01010707, 0x01010901, 0x01010905,\n    0x0101090b, 0x0101090f, 0x01010b03, 0x01010b07, 0x01010d01, 0x01010d05, 0x01010f03, 0x01010f09,\n    0x01010f0f, 0x01030101, 0x01030103, 0x01030105, 0x01030109, 0x01030301, 0x01030303, 0x0103030b,\n    0x01030501, 0x01030507, 0x0103050f, 0x01030703, 0x0103070b, 0x01030909, 0x01030d03, 0x01030d0b,\n    0x01030f05, 0x01050101, 0x01050103, 0x0105010b, 0x0105010f, 0x01050301, 0x01050307, 0x0105030d,\n    0x01050503, 0x0105050b, 0x01050701, 0x01050709, 0x01050905, 0x0105090b, 0x0105090f, 0x01050b03,\n    0x01050b07, 0x01050f01, 0x01050f07, 0x01070107, 0x01070303, 0x0107030b, 0x01070501, 0x01070505,\n    0x01070703, 0x01070707, 0x0107070d, 0x01070909, 0x01070b01, 0x01070b05, 0x01070d0f, 0x01070f03,\n    0x01070f0b, 0x01090101, 0x01090307, 0x0109030f, 0x01090503, 0x01090509, 0x01090705, 0x01090901,\n    0x01090907, 0x01090b03, 0x01090f01, 0x010b0105, 0x010b0109, 0x010b0501, 0x010b0505, 0x010b050d,\n    0x010b0707, 0x010b0903, 0x010b090b, 0x010b090f, 0x010b0d0d, 0x010b0f07, 0x010d010d, 0x010d0303,\n    0x010d0307, 0x010d0703, 0x010d0b05, 0x010d0f03, 0x010f0101, 0x010f0105, 0x010f0109, 0x010f0501,\n    0x010f0505, 0x010f050d, 0x010f0707, 0x010f0b01, 0x010f0b09, 0x03010101, 0x03010103, 0x03010105,\n    0x03010109, 0x03010301, 0x03010303, 0x03010307, 0x0301030b, 0x0301030f, 0x03010501, 0x03010505,\n    0x03010703, 0x03010709, 0x0301070d, 0x03010b09, 0x03010b0d, 0x03010d03, 0x03010f05, 0x03030101,\n    0x03030103, 0x03030107, 0x0303010d, 0x03030301, 0x03030309, 0x03030503, 0x03030701, 0x03030707,\n    0x03030903, 0x03030b01, 0x03030b05, 0x03030f01, 0x03030f0d, 0x03050101, 0x03050305, 0x0305030b,\n    0x0305030f, 0x03050501, 0x03050509, 0x03050705, 0x03050901, 0x03050907, 0x03050b0b, 0x03050d01,\n    0x03050f05, 0x03070103, 0x03070109, 0x0307010f, 0x03070301, 0x03070307, 0x03070503, 0x0307050f,\n    0x03070701, 0x03070709, 0x03070903, 0x03070d05, 0x03070f01, 0x03090107, 0x0309010b, 0x03090305,\n    0x03090309, 0x03090703, 0x03090707, 0x03090905, 0x0309090d, 0x03090b01, 0x03090b09, 0x030b0103,\n    0x030b0301, 0x030b0307, 0x030b0503, 0x030b0701, 0x030b0705, 0x030b0b03, 0x030d0501, 0x030d0509,\n    0x030d050f, 0x030d0909, 0x030d090d, 0x030f0103, 0x030f0107, 0x030f0301, 0x030f0305, 0x030f0503,\n    0x030f070b, 0x030f0903, 0x030f0d05, 0x030f0f01, 0x05010101, 0x05010103, 0x05010107, 0x0501010b,\n    0x0501010f, 0x05010301, 0x05010305, 0x05010309, 0x0501030d, 0x05010503, 0x05010507, 0x0501050f,\n    0x05010701, 0x05010705, 0x05010903, 0x05010907, 0x0501090b, 0x05010b01, 0x05010b05, 0x05010d0f,\n    0x05010f01, 0x05010f07, 0x05010f0b, 0x05030101, 0x05030105, 0x05030301, 0x05030307, 0x0503030f,\n    0x05030505, 0x0503050b, 0x05030703, 0x05030709, 0x05030905, 0x05030b03, 0x05050103, 0x05050109,\n    0x0505010f, 0x05050503, 0x05050507, 0x05050701, 0x0505070f, 0x05050903, 0x05050b07, 0x05050b0f,\n    0x05050f03, 0x05050f09, 0x05070101, 0x05070105, 0x0507010b, 0x05070303, 0x05070505, 0x05070509,\n    0x05070703, 0x05070707, 0x05070905, 0x05070b01, 0x05070d0d, 0x05090103, 0x0509010f, 0x05090501,\n    0x05090507, 0x05090705, 0x0509070b, 0x05090903, 0x05090f05, 0x05090f0b, 0x050b0109, 0x050b0303,\n    0x050b0505, 0x050b070f, 0x050b0901, 0x050b0b07, 0x050b0f01, 0x050d0101, 0x050d0105, 0x050d010f,\n    0x050d0503, 0x050d0b0b, 0x050d0d03, 0x050f010b, 0x050f0303, 0x050f050d, 0x050f0701, 0x050f0907,\n    0x050f0b01, 0x07010105, 0x07010303, 0x07010307, 0x0701030b, 0x0701030f, 0x07010505, 0x07010703,\n    0x07010707, 0x0701070b, 0x07010905, 0x07010909, 0x0701090f, 0x07010b03, 0x07010d07, 0x07010f03,\n    0x07030103, 0x07030107, 0x0703010b, 0x07030309, 0x07030503, 0x07030507, 0x07030901, 0x07030d01,\n    0x07030f05, 0x07030f0d, 0x07050101, 0x07050305, 0x07050501, 0x07050705, 0x07050709, 0x07050b01,\n    0x07070103, 0x07070301, 0x07070309, 0x07070503, 0x07070507, 0x0707050f, 0x07070701, 0x07070903,\n    0x07070907, 0x0707090f, 0x07070b0b, 0x07070f07, 0x07090107, 0x07090303, 0x0709030d, 0x07090505,\n    0x07090703, 0x07090b05, 0x07090d01, 0x07090d09, 0x070b0103, 0x070b0301, 0x070b0305, 0x070b050b,\n    0x070b0705, 0x070b0909, 0x070b0b0d, 0x070b0f07, 0x070d030d, 0x070d0903, 0x070f0103, 0x070f0107,\n    0x070f0501, 0x070f0505, 0x070f070b, 0x09010101, 0x09010109, 0x09010305, 0x09010501, 0x09010509,\n    0x0901050f, 0x09010705, 0x09010903, 0x09010b01, 0x09010f01, 0x09030105, 0x0903010f, 0x09030303,\n    0x09030307, 0x09030505, 0x09030701, 0x0903070b, 0x09030907, 0x09030b03, 0x09030b0b, 0x09050103,\n    0x09050107, 0x09050301, 0x0905030b, 0x09050503, 0x09050707, 0x09050901, 0x09050b0f, 0x09050d05,\n    0x09050f01, 0x09070109, 0x09070303, 0x09070307, 0x09070501, 0x09070505, 0x09070703, 0x0907070b,\n    0x09090101, 0x09090105, 0x09090509, 0x0909070f, 0x09090901, 0x09090f03, 0x090b010b, 0x090b010f,\n    0x090b0503, 0x090b0d05, 0x090d0307, 0x090d0709, 0x090d0d01, 0x090f0301, 0x090f030b, 0x090f0701,\n    0x090f0907, 0x090f0b03, 0x0b010105, 0x0b010301, 0x0b010309, 0x0b010505, 0x0b010901, 0x0b010909,\n    0x0b01090f, 0x0b010b05, 0x0b010d0d, 0x0b010f09, 0x0b030103, 0x0b030107, 0x0b03010b, 0x0b030305,\n    0x0b030503, 0x0b030705, 0x0b030f05, 0x0b050101, 0x0b050303, 0x0b050507, 0x0b050701, 0x0b05070d,\n    0x0b050b07, 0x0b070105, 0x0b07010f, 0x0b070301, 0x0b07050f, 0x0b070909, 0x0b070b03, 0x0b070d0b,\n    0x0b070f07, 0x0b090103, 0x0b090109, 0x0b090501, 0x0b090705, 0x0b09090d, 0x0b0b0305, 0x0b0b050d,\n    0x0b0b0b03, 0x0b0b0b07, 0x0b0d0905, 0x0b0f0105, 0x0b0f0109, 0x0b0f0505, 0x0d010303, 0x0d010307,\n    0x0d01030b, 0x0d010703, 0x0d010707, 0x0d010d01, 0x0d030101, 0x0d030501, 0x0d03050f, 0x0d030d09,\n    0x0d050305, 0x0d050709, 0x0d050905, 0x0d050b0b, 0x0d050d05, 0x0d050f01, 0x0d070101, 0x0d070309,\n    0x0d070503, 0x0d070901, 0x0d09050b, 0x0d090907, 0x0d090d05, 0x0d0b0101, 0x0d0b0107, 0x0d0b0709,\n    0x0d0b0d01, 0x0d0d010b, 0x0d0d0901, 0x0d0f0303, 0x0d0f0307, 0x0f010101, 0x0f010109, 0x0f01010f,\n    0x0f010501, 0x0f010505, 0x0f01070d, 0x0f010901, 0x0f010b09, 0x0f010d05, 0x0f030105, 0x0f030303,\n    0x0f030509, 0x0f030907, 0x0f03090b, 0x0f050103, 0x0f050109, 0x0f050301, 0x0f05030d, 0x0f050503,\n    0x0f050701, 0x0f050b03, 0x0f070105, 0x0f070705, 0x0f07070b, 0x0f070b07, 0x0f090103, 0x0f09010b,\n    0x0f090307, 0x0f090501, 0x0f090b01, 0x0f0b0505, 0x0f0b0905, 0x0f0d0105, 0x0f0d0703, 0x0f0f0101,\nGGML_TABLE_END()\n\n#define NGRID_IQ1S 2048\n#define IQ1S_DELTA 0.125f\n#define IQ1M_DELTA 0.125f\n#if defined(GGML_COMMON_IMPL_C)\nGGML_TABLE_BEGIN(uint64_t, iq1s_grid, NGRID_IQ1S)\n    0xffffffffffffffff, 0xffffffffffffff01, 0xffffffffffff0000, 0xffffffffffff01ff,\n    0xffffffffffff0101, 0xffffffffff00ff00, 0xffffffffff000000, 0xffffffffff01ffff,\n    0xffffffffff01ff01, 0xffffffffff0101ff, 0xffffffffff010101, 0xffffffff00ff0000,\n    0xffffffff0000ff00, 0xffffffff000000ff, 0xffffffff00000001, 0xffffffff00010000,\n    0xffffffff01ffffff, 0xffffffff01ffff01, 0xffffffff01ff01ff, 0xffffffff01ff0101,\n    0xffffffff01000000, 0xffffffff0101ffff, 0xffffffff0101ff01, 0xffffffff010101ff,\n    0xffffffff01010101, 0xffffff00ffff00ff, 0xffffff00ffff0000, 0xffffff00ff00ff00,\n    0xffffff00ff0000ff, 0xffffff00ff000001, 0xffffff00ff000100, 0xffffff00ff000101,\n    0xffffff00ff010000, 0xffffff0000ffff00, 0xffffff0000ff0001, 0xffffff0000ff0100,\n    0xffffff000000ff01, 0xffffff0000000000, 0xffffff0000000101, 0xffffff000001ff00,\n    0xffffff00000100ff, 0xffffff0000010001, 0xffffff00000101ff, 0xffffff0001ff0000,\n    0xffffff000100ff00, 0xffffff00010000ff, 0xffffff0001000001, 0xffffff0001010000,\n    0xffffff01ffffffff, 0xffffff01ffffff01, 0xffffff01ffff01ff, 0xffffff01ffff0101,\n    0xffffff01ff000000, 0xffffff01ff01ffff, 0xffffff01ff01ff01, 0xffffff01ff0101ff,\n    0xffffff01ff010101, 0xffffff0100ff0000, 0xffffff010000ff00, 0xffffff0100000100,\n    0xffffff01000100ff, 0xffffff0100010100, 0xffffff0101ffffff, 0xffffff0101ffff01,\n    0xffffff0101ff01ff, 0xffffff0101ff0101, 0xffffff010100ff00, 0xffffff0101000000,\n    0xffffff0101000100, 0xffffff010101ffff, 0xffffff010101ff01, 0xffffff01010101ff,\n    0xffffff0101010101, 0xffff00ffff00ff00, 0xffff00ffff0000ff, 0xffff00ffff000001,\n    0xffff00ffff010000, 0xffff00ff00ffff00, 0xffff00ff00ff0100, 0xffff00ff00000000,\n    0xffff00ff00000101, 0xffff00ff000100ff, 0xffff00ff00010000, 0xffff00ff0100ff00,\n    0xffff00ff01000100, 0xffff00ff01010000, 0xffff0000ffffff00, 0xffff0000ffff00ff,\n    0xffff0000ffff0000, 0xffff0000ffff0001, 0xffff0000ff000000, 0xffff0000ff0001ff,\n    0xffff0000ff000101, 0xffff0000ff010100, 0xffff000000ffffff, 0xffff000000ff0000,\n    0xffff000000ff0101, 0xffff00000000ffff, 0xffff00000000ff00, 0xffff0000000000ff,\n    0xffff000000000000, 0xffff000000000001, 0xffff000000000100, 0xffff00000001ffff,\n    0xffff00000001ff01, 0xffff000000010000, 0xffff0000000101ff, 0xffff000000010101,\n    0xffff000001ffff00, 0xffff00000100ff00, 0xffff000001000000, 0xffff0000010001ff,\n    0xffff000001000101, 0xffff00000101ff00, 0xffff0000010100ff, 0xffff000001010000,\n    0xffff000001010001, 0xffff000001010100, 0xffff0001ff0000ff, 0xffff0001ff000100,\n    0xffff000100ffff00, 0xffff000100ff00ff, 0xffff00010000ffff, 0xffff00010000ff01,\n    0xffff000100000000, 0xffff0001000001ff, 0xffff00010001ffff, 0xffff00010001ff00,\n    0xffff000100010001, 0xffff000100010100, 0xffff000101ff0000, 0xffff00010100ff00,\n    0xffff0001010000ff, 0xffff000101000100, 0xffff01ffffffffff, 0xffff01ffffffff01,\n    0xffff01ffffff01ff, 0xffff01ffffff0101, 0xffff01ffff000000, 0xffff01ffff01ffff,\n    0xffff01ffff01ff01, 0xffff01ffff0101ff, 0xffff01ffff010101, 0xffff01ff00ff0000,\n    0xffff01ff0000ff00, 0xffff01ff00000001, 0xffff01ff00010000, 0xffff01ff01ffffff,\n    0xffff01ff01ffff01, 0xffff01ff01ff01ff, 0xffff01ff01ff0101, 0xffff01ff01000000,\n    0xffff01ff0101ffff, 0xffff01ff0101ff01, 0xffff01ff010101ff, 0xffff01ff01010101,\n    0xffff0100ffff0000, 0xffff0100ff00ff00, 0xffff0100ff0000ff, 0xffff0100ff000100,\n    0xffff0100ff0100ff, 0xffff0100ff010000, 0xffff010000ffff00, 0xffff01000000ffff,\n    0xffff01000000ff00, 0xffff010000000000, 0xffff01000001ff00, 0xffff0100000100ff,\n    0xffff010000010100, 0xffff01000100ff00, 0xffff0100010000ff, 0xffff010001000001,\n    0xffff010001000100, 0xffff010001010000, 0xffff0101ffffffff, 0xffff0101ffffff01,\n    0xffff0101ffff01ff, 0xffff0101ffff0101, 0xffff0101ff000000, 0xffff0101ff01ffff,\n    0xffff0101ff01ff01, 0xffff0101ff0101ff, 0xffff0101ff010101, 0xffff010100ff0000,\n    0xffff01010000ff00, 0xffff010100000100, 0xffff01010001ff00, 0xffff010100010000,\n    0xffff010101ffffff, 0xffff010101ffff01, 0xffff010101ff0000, 0xffff010101ff01ff,\n    0xffff010101ff0101, 0xffff010101000000, 0xffff01010101ffff, 0xffff01010101ff01,\n    0xffff0101010101ff, 0xffff010101010101, 0xff00ffffff00ffff, 0xff00ffffff00ff00,\n    0xff00ffffff0000ff, 0xff00ffffff000100, 0xff00ffffff0100ff, 0xff00ffffff010000,\n    0xff00ffff00ffff00, 0xff00ffff00ff00ff, 0xff00ffff0000ffff, 0xff00ffff00000000,\n    0xff00ffff000001ff, 0xff00ffff0001ff00, 0xff00ffff000100ff, 0xff00ffff00010000,\n    0xff00ffff00010100, 0xff00ffff0100ff00, 0xff00ffff010000ff, 0xff00ffff01000001,\n    0xff00ffff0101ff00, 0xff00ffff01010000, 0xff00ff00ffffff00, 0xff00ff00ffff00ff,\n    0xff00ff00ffff0001, 0xff00ff00ffff0100, 0xff00ff00ff00ffff, 0xff00ff00ff00ff01,\n    0xff00ff00ff000000, 0xff00ff00ff0001ff, 0xff00ff00ff01ff00, 0xff00ff00ff0100ff,\n    0xff00ff00ff010100, 0xff00ff0000ff0000, 0xff00ff0000ff0101, 0xff00ff000000ffff,\n    0xff00ff000000ff00, 0xff00ff000000ff01, 0xff00ff00000000ff, 0xff00ff0000000000,\n    0xff00ff0000000001, 0xff00ff0000000100, 0xff00ff000001ffff, 0xff00ff0000010000,\n    0xff00ff0001ff00ff, 0xff00ff000100ff01, 0xff00ff0001000000, 0xff00ff000101ff00,\n    0xff00ff00010100ff, 0xff00ff01ff00ff00, 0xff00ff01ff0000ff, 0xff00ff01ff000001,\n    0xff00ff01ff010000, 0xff00ff0100ffffff, 0xff00ff0100ff0001, 0xff00ff0100ff0100,\n    0xff00ff010000ff01, 0xff00ff0100000000, 0xff00ff01000001ff, 0xff00ff0100000101,\n    0xff00ff01000100ff, 0xff00ff0100010001, 0xff00ff0101ff0000, 0xff00ff010100ff00,\n    0xff00ff01010000ff, 0xff00ff0101000001, 0xff00ff0101010000, 0xff0000ffffffff00,\n    0xff0000ffffff0001, 0xff0000ffffff0100, 0xff0000ffff0000ff, 0xff0000ffff000000,\n    0xff0000ffff0001ff, 0xff0000ffff000100, 0xff0000ffff01ff00, 0xff0000ffff010001,\n    0xff0000ff00ffff00, 0xff0000ff00ff0000, 0xff0000ff00ff0001, 0xff0000ff00ff01ff,\n    0xff0000ff00ff0101, 0xff0000ff0000ff00, 0xff0000ff000000ff, 0xff0000ff00000000,\n    0xff0000ff00000001, 0xff0000ff00000100, 0xff0000ff0001ff01, 0xff0000ff00010000,\n    0xff0000ff000101ff, 0xff0000ff01ff00ff, 0xff0000ff01ff0100, 0xff0000ff0100ffff,\n    0xff0000ff010000ff, 0xff0000ff01000000, 0xff0000ff010001ff, 0xff0000ff01000100,\n    0xff0000ff01000101, 0xff0000ff0101ff00, 0xff0000ff010100ff, 0xff0000ff01010000,\n    0xff0000ff01010100, 0xff000000ffffff01, 0xff000000ffff0000, 0xff000000ffff0101,\n    0xff000000ff00ff00, 0xff000000ff0000ff, 0xff000000ff000000, 0xff000000ff000001,\n    0xff000000ff000100, 0xff000000ff01ffff, 0xff000000ff01ff01, 0xff000000ff010000,\n    0xff000000ff0101ff, 0xff000000ff010101, 0xff00000000ffff00, 0xff00000000ff00ff,\n    0xff00000000ff0000, 0xff00000000ff0001, 0xff0000000000ff00, 0xff0000000000ff01,\n    0xff000000000000ff, 0xff00000000000000, 0xff00000000000001, 0xff00000000000100,\n    0xff00000000000101, 0xff0000000001ff00, 0xff000000000100ff, 0xff00000000010000,\n    0xff00000000010001, 0xff00000000010100, 0xff00000001ffffff, 0xff00000001ffff01,\n    0xff00000001ff00ff, 0xff00000001ff0000, 0xff00000001ff01ff, 0xff00000001ff0101,\n    0xff0000000100ffff, 0xff0000000100ff00, 0xff000000010000ff, 0xff00000001000000,\n    0xff00000001000001, 0xff00000001000100, 0xff00000001000101, 0xff0000000101ffff,\n    0xff0000000101ff01, 0xff00000001010000, 0xff000001ffffff00, 0xff000001ffff00ff,\n    0xff000001ffff0000, 0xff000001ffff0001, 0xff000001ff000000, 0xff000001ff000001,\n    0xff000001ff0001ff, 0xff000001ff000101, 0xff000001ff01ff00, 0xff000001ff010001,\n    0xff00000100ffffff, 0xff00000100ffff01, 0xff00000100ff00ff, 0xff00000100ff0000,\n    0xff00000100ff01ff, 0xff00000100ff0101, 0xff0000010000ff00, 0xff00000100000000,\n    0xff00000100000001, 0xff000001000001ff, 0xff00000100000100, 0xff0000010001ff00,\n    0xff000001000100ff, 0xff00000100010000, 0xff000001000101ff, 0xff00000100010100,\n    0xff00000100010101, 0xff00000101ff0001, 0xff00000101ff0101, 0xff0000010100ff01,\n    0xff00000101000000, 0xff000001010100ff, 0xff00000101010100, 0xff0001ffff00ff00,\n    0xff0001ffff000001, 0xff0001ffff010000, 0xff0001ff00ffff00, 0xff0001ff00ff00ff,\n    0xff0001ff00ff0001, 0xff0001ff00ff0100, 0xff0001ff0000ffff, 0xff0001ff00000000,\n    0xff0001ff000001ff, 0xff0001ff00000101, 0xff0001ff0001ffff, 0xff0001ff0001ff00,\n    0xff0001ff000100ff, 0xff0001ff00010001, 0xff0001ff00010100, 0xff0001ff01ff0000,\n    0xff0001ff0100ff00, 0xff0001ff010000ff, 0xff0001ff01010000, 0xff000100ff00ffff,\n    0xff000100ff00ff01, 0xff000100ff000000, 0xff000100ff000101, 0xff000100ff01ff00,\n    0xff000100ff010000, 0xff00010000ffff01, 0xff00010000ff00ff, 0xff00010000ff0000,\n    0xff00010000ff01ff, 0xff0001000000ff00, 0xff000100000000ff, 0xff00010000000000,\n    0xff00010000000001, 0xff00010000000100, 0xff00010000000101, 0xff0001000001ffff,\n    0xff00010000010000, 0xff00010000010101, 0xff00010001ff0100, 0xff0001000100ff00,\n    0xff0001000100ff01, 0xff00010001000000, 0xff000100010001ff, 0xff0001000101ff00,\n    0xff00010001010001, 0xff00010001010100, 0xff000101ffff0100, 0xff000101ff000001,\n    0xff000101ff0100ff, 0xff000101ff010001, 0xff00010100ff00ff, 0xff00010100ff0001,\n    0xff00010100ff0100, 0xff0001010000ffff, 0xff0001010000ff01, 0xff00010100000000,\n    0xff000101000001ff, 0xff0001010001ff00, 0xff00010100010001, 0xff00010100010100,\n    0xff00010101ff0000, 0xff0001010100ff00, 0xff00010101000001, 0xff00010101000101,\n    0xff01ffffffffffff, 0xff01ffffffffff01, 0xff01ffffffff01ff, 0xff01ffffffff0101,\n    0xff01ffffff000000, 0xff01ffffff01ffff, 0xff01ffffff01ff01, 0xff01ffffff010000,\n    0xff01ffffff0101ff, 0xff01ffffff010101, 0xff01ffff00ff0000, 0xff01ffff0000ff00,\n    0xff01ffff00000100, 0xff01ffff0001ff00, 0xff01ffff00010000, 0xff01ffff01ffffff,\n    0xff01ffff01ffff01, 0xff01ffff01ff01ff, 0xff01ffff01ff0101, 0xff01ffff01000000,\n    0xff01ffff0101ffff, 0xff01ffff0101ff01, 0xff01ffff01010000, 0xff01ffff010101ff,\n    0xff01ffff01010101, 0xff01ff00ffff0000, 0xff01ff00ff00ff00, 0xff01ff00ff0000ff,\n    0xff01ff00ff000100, 0xff01ff00ff010000, 0xff01ff0000ffff01, 0xff01ff0000ff00ff,\n    0xff01ff0000ff0100, 0xff01ff0000000000, 0xff01ff00000001ff, 0xff01ff0000000101,\n    0xff01ff000001ff00, 0xff01ff00000100ff, 0xff01ff0000010000, 0xff01ff0000010001,\n    0xff01ff0001ff0000, 0xff01ff000100ffff, 0xff01ff0001000001, 0xff01ff0001000100,\n    0xff01ff0001010000, 0xff01ff01ffffff00, 0xff01ff01ffff01ff, 0xff01ff01ffff0101,\n    0xff01ff01ff00ff00, 0xff01ff01ff000000, 0xff01ff01ff01ffff, 0xff01ff01ff01ff01,\n    0xff01ff01ff0101ff, 0xff01ff01ff010101, 0xff01ff0100ff0000, 0xff01ff010000ff00,\n    0xff01ff0100000001, 0xff01ff0100000100, 0xff01ff0100010000, 0xff01ff0101ffff00,\n    0xff01ff0101ff01ff, 0xff01ff0101ff0101, 0xff01ff010100ff00, 0xff01ff0101000000,\n    0xff01ff010101ffff, 0xff01ff010101ff01, 0xff01ff01010101ff, 0xff01ff0101010101,\n    0xff0100ffffff0000, 0xff0100ffff0000ff, 0xff0100ffff000001, 0xff0100ffff000100,\n    0xff0100ffff010000, 0xff0100ff00ff00ff, 0xff0100ff00ff0000, 0xff0100ff00ff0001,\n    0xff0100ff00ff0100, 0xff0100ff0000ff01, 0xff0100ff00000000, 0xff0100ff000001ff,\n    0xff0100ff00000101, 0xff0100ff00010001, 0xff0100ff01ff0000, 0xff0100ff0100ff00,\n    0xff0100ff010000ff, 0xff0100ff01000100, 0xff0100ff0101ff00, 0xff0100ff01010000,\n    0xff010000ffff0100, 0xff010000ff000000, 0xff010000ff01ff00, 0xff010000ff010100,\n    0xff01000000ffffff, 0xff01000000ff0000, 0xff01000000ff01ff, 0xff0100000000ff00,\n    0xff010000000000ff, 0xff01000000000000, 0xff01000000000100, 0xff0100000001ff01,\n    0xff01000000010000, 0xff010000000101ff, 0xff01000001ff0100, 0xff0100000100ffff,\n    0xff010000010000ff, 0xff01000001000000, 0xff010000010001ff, 0xff01000001000101,\n    0xff0100000101ff00, 0xff010000010100ff, 0xff01000001010001, 0xff01000001010100,\n    0xff010001ffff0000, 0xff010001ff00ffff, 0xff010001ff00ff01, 0xff010001ff000100,\n    0xff010001ff010000, 0xff01000100ffff00, 0xff01000100ff0100, 0xff01000100000000,\n    0xff0100010001ffff, 0xff0100010001ff00, 0xff01000100010100, 0xff01000101ff00ff,\n    0xff01000101ff0001, 0xff0100010100ffff, 0xff01000101000101, 0xff0101ffffffffff,\n    0xff0101ffffffff01, 0xff0101ffffff01ff, 0xff0101ffffff0101, 0xff0101ffff000000,\n    0xff0101ffff01ffff, 0xff0101ffff01ff01, 0xff0101ffff0101ff, 0xff0101ffff010101,\n    0xff0101ff00ff0000, 0xff0101ff0000ff00, 0xff0101ff000000ff, 0xff0101ff00010000,\n    0xff0101ff01ffffff, 0xff0101ff01ffff01, 0xff0101ff01ff01ff, 0xff0101ff01ff0101,\n    0xff0101ff0101ffff, 0xff0101ff0101ff01, 0xff0101ff010101ff, 0xff0101ff01010101,\n    0xff010100ffff0100, 0xff010100ff00ff00, 0xff010100ff0000ff, 0xff010100ff000100,\n    0xff010100ff010000, 0xff01010000ff0001, 0xff01010000ff0100, 0xff0101000000ff01,\n    0xff01010000000000, 0xff0101000001ff00, 0xff010100000100ff, 0xff01010000010001,\n    0xff01010000010100, 0xff01010001ff0000, 0xff0101000100ffff, 0xff01010001000001,\n    0xff01010001000100, 0xff010100010100ff, 0xff01010001010000, 0xff010101ffffffff,\n    0xff010101ffffff01, 0xff010101ffff01ff, 0xff010101ffff0101, 0xff010101ff01ffff,\n    0xff010101ff01ff01, 0xff010101ff0101ff, 0xff010101ff010101, 0xff01010100ff0000,\n    0xff0101010000ff00, 0xff01010100000001, 0xff01010100000100, 0xff01010100010000,\n    0xff01010101ffffff, 0xff01010101ffff01, 0xff01010101ff01ff, 0xff01010101ff0101,\n    0xff01010101000000, 0xff0101010101ffff, 0xff0101010101ff01, 0xff010101010101ff,\n    0xff01010101010101, 0x00ffffffffff0000, 0x00ffffffff00ff00, 0x00ffffffff000001,\n    0x00ffffffff010000, 0x00ffffff00ff0100, 0x00ffffff0000ff01, 0x00ffffff00000000,\n    0x00ffffff000001ff, 0x00ffffff00000101, 0x00ffffff0001ff00, 0x00ffffff000100ff,\n    0x00ffffff00010001, 0x00ffffff010000ff, 0x00ffffff01000100, 0x00ffffff0101ff00,\n    0x00ffffff01010001, 0x00ffff00ffffffff, 0x00ffff00ffffff00, 0x00ffff00ffff00ff,\n    0x00ffff00ffff0001, 0x00ffff00ffff0100, 0x00ffff00ff00ff01, 0x00ffff00ff000000,\n    0x00ffff00ff000001, 0x00ffff00ff0001ff, 0x00ffff00ff000101, 0x00ffff00ff01ff00,\n    0x00ffff00ff010001, 0x00ffff00ff010100, 0x00ffff0000ff0000, 0x00ffff0000ff01ff,\n    0x00ffff0000ff0101, 0x00ffff000000ff00, 0x00ffff00000000ff, 0x00ffff0000000000,\n    0x00ffff0000000001, 0x00ffff0000000100, 0x00ffff0000000101, 0x00ffff0000010000,\n    0x00ffff00000101ff, 0x00ffff0000010101, 0x00ffff0001ffff00, 0x00ffff0001ff00ff,\n    0x00ffff0001ff0001, 0x00ffff000100ffff, 0x00ffff000100ff01, 0x00ffff0001000000,\n    0x00ffff000101ffff, 0x00ffff000101ff00, 0x00ffff000101ff01, 0x00ffff01ffff0000,\n    0x00ffff01ff00ff00, 0x00ffff01ff0000ff, 0x00ffff01ff000001, 0x00ffff01ff010000,\n    0x00ffff0100ffff00, 0x00ffff010000ff01, 0x00ffff0100000000, 0x00ffff0100000101,\n    0x00ffff01000100ff, 0x00ffff0100010100, 0x00ffff0101ff0100, 0x00ffff01010000ff,\n    0x00ffff0101010000, 0x00ff00ffffffff00, 0x00ff00ffff000000, 0x00ff00ffff000100,\n    0x00ff00ffff010100, 0x00ff00ff00ff0000, 0x00ff00ff00ff01ff, 0x00ff00ff00ff0101,\n    0x00ff00ff0000ff00, 0x00ff00ff000000ff, 0x00ff00ff00000000, 0x00ff00ff00000001,\n    0x00ff00ff0001ff00, 0x00ff00ff0001ff01, 0x00ff00ff00010000, 0x00ff00ff000101ff,\n    0x00ff00ff00010101, 0x00ff00ff01ffff00, 0x00ff00ff01ff0001, 0x00ff00ff01ff0100,\n    0x00ff00ff0100ffff, 0x00ff00ff0100ff01, 0x00ff00ff01000000, 0x00ff00ff0101ffff,\n    0x00ff00ff0101ff00, 0x00ff00ff01010100, 0x00ff0000ffffff00, 0x00ff0000ffffff01,\n    0x00ff0000ffff0000, 0x00ff0000ffff0101, 0x00ff0000ff00ff00, 0x00ff0000ff0000ff,\n    0x00ff0000ff000000, 0x00ff0000ff000001, 0x00ff0000ff000100, 0x00ff0000ff01ffff,\n    0x00ff0000ff010000, 0x00ff0000ff010101, 0x00ff000000ffff00, 0x00ff000000ff00ff,\n    0x00ff000000ff0000, 0x00ff000000ff0001, 0x00ff000000ff0100, 0x00ff00000000ffff,\n    0x00ff00000000ff00, 0x00ff0000000000ff, 0x00ff000000000000, 0x00ff000000000001,\n    0x00ff0000000001ff, 0x00ff000000000100, 0x00ff00000001ff00, 0x00ff0000000100ff,\n    0x00ff000000010000, 0x00ff000000010001, 0x00ff000000010100, 0x00ff000001ffff01,\n    0x00ff000001ff00ff, 0x00ff000001ff0000, 0x00ff000001ff01ff, 0x00ff00000100ff00,\n    0x00ff0000010000ff, 0x00ff000001000000, 0x00ff000001000001, 0x00ff000001000100,\n    0x00ff000001000101, 0x00ff000001010000, 0x00ff0000010101ff, 0x00ff000001010101,\n    0x00ff0001ffffff00, 0x00ff0001ffff0000, 0x00ff0001ffff0100, 0x00ff0001ff0000ff,\n    0x00ff0001ff000000, 0x00ff0001ff0001ff, 0x00ff0001ff000101, 0x00ff0001ff01ff00,\n    0x00ff0001ff0100ff, 0x00ff0001ff010100, 0x00ff000100ffffff, 0x00ff000100ffff01,\n    0x00ff000100ff0000, 0x00ff000100ff01ff, 0x00ff00010000ffff, 0x00ff00010000ff00,\n    0x00ff00010000ff01, 0x00ff000100000000, 0x00ff000100000001, 0x00ff000100000100,\n    0x00ff00010001ff01, 0x00ff000100010000, 0x00ff0001000101ff, 0x00ff000101ffff00,\n    0x00ff000101ff0000, 0x00ff000101ff0101, 0x00ff0001010000ff, 0x00ff000101000000,\n    0x00ff00010101ff00, 0x00ff0001010100ff, 0x00ff000101010001, 0x00ff01ffffff0000,\n    0x00ff01ffff00ff00, 0x00ff01ffff000000, 0x00ff01ffff000101, 0x00ff01ffff010000,\n    0x00ff01ff00ffff01, 0x00ff01ff00ff0100, 0x00ff01ff0000ffff, 0x00ff01ff00000000,\n    0x00ff01ff000001ff, 0x00ff01ff0001ff00, 0x00ff01ff000100ff, 0x00ff01ff00010001,\n    0x00ff01ff00010100, 0x00ff01ff01ff0000, 0x00ff01ff0100ff00, 0x00ff01ff010000ff,\n    0x00ff01ff01000001, 0x00ff01ff01000100, 0x00ff01ff01010000, 0x00ff0100ffffff00,\n    0x00ff0100ffff0000, 0x00ff0100ffff0001, 0x00ff0100ffff0101, 0x00ff0100ff00ffff,\n    0x00ff0100ff0000ff, 0x00ff0100ff000000, 0x00ff0100ff0001ff, 0x00ff0100ff01ff00,\n    0x00ff0100ff0100ff, 0x00ff0100ff010001, 0x00ff010000ffffff, 0x00ff010000ff0000,\n    0x00ff010000ff0101, 0x00ff01000000ff00, 0x00ff01000000ff01, 0x00ff0100000000ff,\n    0x00ff010000000000, 0x00ff010000000001, 0x00ff010000000100, 0x00ff01000001ffff,\n    0x00ff01000001ff01, 0x00ff010000010000, 0x00ff010000010001, 0x00ff010000010101,\n    0x00ff010001ff0001, 0x00ff010001ff0100, 0x00ff01000100ff01, 0x00ff010001000000,\n    0x00ff010001000001, 0x00ff0100010001ff, 0x00ff01000101ff00, 0x00ff0100010100ff,\n    0x00ff010001010001, 0x00ff010001010100, 0x00ff0101ff000001, 0x00ff010100ff00ff,\n    0x00ff010100ff0001, 0x00ff010100ff0100, 0x00ff010100000000, 0x00ff0101000001ff,\n    0x00ff010100000101, 0x00ff0101000100ff, 0x00ff010100010100, 0x00ff0101010000ff,\n    0x00ff010101010000, 0x0000ffffffffff00, 0x0000ffffffff00ff, 0x0000ffffffff0000,\n    0x0000ffffffff0001, 0x0000ffffffff0100, 0x0000ffffff00ff01, 0x0000ffffff000000,\n    0x0000ffffff000101, 0x0000ffffff01ff00, 0x0000ffffff0100ff, 0x0000ffffff010100,\n    0x0000ffff00ffffff, 0x0000ffff00ff0000, 0x0000ffff00ff01ff, 0x0000ffff0000ff00,\n    0x0000ffff000000ff, 0x0000ffff00000000, 0x0000ffff00000001, 0x0000ffff00000100,\n    0x0000ffff00010000, 0x0000ffff000101ff, 0x0000ffff01ff0001, 0x0000ffff01ff0100,\n    0x0000ffff01000000, 0x0000ffff010001ff, 0x0000ffff0101ffff, 0x0000ffff0101ff00,\n    0x0000ffff01010001, 0x0000ffff01010100, 0x0000ff00ffff0000, 0x0000ff00ffff01ff,\n    0x0000ff00ffff0100, 0x0000ff00ffff0101, 0x0000ff00ff00ff00, 0x0000ff00ff0000ff,\n    0x0000ff00ff000000, 0x0000ff00ff000001, 0x0000ff00ff0001ff, 0x0000ff00ff000100,\n    0x0000ff00ff01ffff, 0x0000ff00ff010000, 0x0000ff00ff010001, 0x0000ff00ff0101ff,\n    0x0000ff00ff010101, 0x0000ff0000ffff00, 0x0000ff0000ff00ff, 0x0000ff0000ff0000,\n    0x0000ff0000ff0001, 0x0000ff0000ff0100, 0x0000ff000000ffff, 0x0000ff000000ff00,\n    0x0000ff000000ff01, 0x0000ff00000000ff, 0x0000ff0000000000, 0x0000ff0000000001,\n    0x0000ff00000001ff, 0x0000ff0000000100, 0x0000ff0000000101, 0x0000ff000001ff00,\n    0x0000ff00000100ff, 0x0000ff0000010000, 0x0000ff0000010001, 0x0000ff0000010100,\n    0x0000ff0001ffff01, 0x0000ff0001ff0000, 0x0000ff000100ff00, 0x0000ff00010000ff,\n    0x0000ff0001000000, 0x0000ff0001000001, 0x0000ff0001000100, 0x0000ff000101ffff,\n    0x0000ff0001010000, 0x0000ff0001010101, 0x0000ff01ffffff00, 0x0000ff01ffff0001,\n    0x0000ff01ff00ff01, 0x0000ff01ff000000, 0x0000ff01ff000101, 0x0000ff01ff01ff00,\n    0x0000ff01ff0100ff, 0x0000ff0100ffff01, 0x0000ff0100ff0000, 0x0000ff0100ff0101,\n    0x0000ff010000ff00, 0x0000ff01000000ff, 0x0000ff0100000000, 0x0000ff0100000001,\n    0x0000ff0100000100, 0x0000ff010001ff01, 0x0000ff0100010000, 0x0000ff0101ff0000,\n    0x0000ff010100ffff, 0x0000ff010100ff01, 0x0000ff0101000000, 0x0000ff0101000100,\n    0x0000ff0101000101, 0x0000ff01010100ff, 0x000000ffffff00ff, 0x000000ffffff0000,\n    0x000000ffff00ff00, 0x000000ffff0000ff, 0x000000ffff000000, 0x000000ffff000001,\n    0x000000ffff0001ff, 0x000000ffff000100, 0x000000ffff01ff00, 0x000000ffff010000,\n    0x000000ffff0101ff, 0x000000ffff010101, 0x000000ff00ffff00, 0x000000ff00ff00ff,\n    0x000000ff00ff0000, 0x000000ff00ff0001, 0x000000ff00ff0100, 0x000000ff00ff0101,\n    0x000000ff0000ffff, 0x000000ff0000ff00, 0x000000ff000000ff, 0x000000ff00000000,\n    0x000000ff00000001, 0x000000ff000001ff, 0x000000ff00000100, 0x000000ff00000101,\n    0x000000ff0001ff00, 0x000000ff0001ff01, 0x000000ff000100ff, 0x000000ff00010000,\n    0x000000ff00010001, 0x000000ff00010100, 0x000000ff01ffffff, 0x000000ff01ff01ff,\n    0x000000ff01ff0101, 0x000000ff0100ff00, 0x000000ff010000ff, 0x000000ff01000000,\n    0x000000ff01000001, 0x000000ff01000100, 0x000000ff0101ff00, 0x000000ff010100ff,\n    0x000000ff01010000, 0x000000ff01010101, 0x00000000ffffff00, 0x00000000ffffff01,\n    0x00000000ffff00ff, 0x00000000ffff0000, 0x00000000ffff0001, 0x00000000ffff0100,\n    0x00000000ff00ffff, 0x00000000ff00ff00, 0x00000000ff00ff01, 0x00000000ff0000ff,\n    0x00000000ff000000, 0x00000000ff000001, 0x00000000ff000100, 0x00000000ff000101,\n    0x00000000ff01ff00, 0x00000000ff0100ff, 0x00000000ff010000, 0x00000000ff010001,\n    0x00000000ff010100, 0x0000000000ffffff, 0x0000000000ffff00, 0x0000000000ffff01,\n    0x0000000000ff00ff, 0x0000000000ff0000, 0x0000000000ff0001, 0x0000000000ff01ff,\n    0x0000000000ff0100, 0x000000000000ffff, 0x000000000000ff00, 0x000000000000ff01,\n    0x00000000000000ff, 0x0000000000000000, 0x0000000000000001, 0x00000000000001ff,\n    0x0000000000000100, 0x0000000000000101, 0x000000000001ffff, 0x000000000001ff00,\n    0x00000000000100ff, 0x0000000000010000, 0x0000000000010001, 0x00000000000101ff,\n    0x0000000000010100, 0x0000000000010101, 0x0000000001ffff00, 0x0000000001ff00ff,\n    0x0000000001ff0000, 0x0000000001ff0100, 0x0000000001ff0101, 0x000000000100ffff,\n    0x000000000100ff00, 0x00000000010000ff, 0x0000000001000000, 0x0000000001000001,\n    0x00000000010001ff, 0x0000000001000100, 0x000000000101ff00, 0x00000000010100ff,\n    0x0000000001010000, 0x0000000001010001, 0x0000000001010100, 0x00000001ffffffff,\n    0x00000001ffffff00, 0x00000001ffffff01, 0x00000001ffff00ff, 0x00000001ffff0001,\n    0x00000001ffff01ff, 0x00000001ffff0100, 0x00000001ff00ff00, 0x00000001ff0000ff,\n    0x00000001ff000000, 0x00000001ff0001ff, 0x00000001ff000100, 0x00000001ff01ffff,\n    0x00000001ff01ff00, 0x00000001ff01ff01, 0x00000001ff0100ff, 0x00000001ff010000,\n    0x00000001ff010001, 0x00000001ff0101ff, 0x00000001ff010100, 0x0000000100ffff00,\n    0x0000000100ff0000, 0x0000000100ff0001, 0x0000000100ff01ff, 0x0000000100ff0100,\n    0x0000000100ff0101, 0x000000010000ffff, 0x000000010000ff00, 0x000000010000ff01,\n    0x00000001000000ff, 0x0000000100000000, 0x0000000100000001, 0x00000001000001ff,\n    0x0000000100000100, 0x0000000100000101, 0x000000010001ff00, 0x00000001000100ff,\n    0x0000000100010000, 0x0000000100010100, 0x0000000101ffff01, 0x0000000101ff0000,\n    0x0000000101ff0001, 0x0000000101ff01ff, 0x0000000101ff0100, 0x0000000101ff0101,\n    0x000000010100ff00, 0x0000000101000000, 0x0000000101000101, 0x000000010101ff01,\n    0x0000000101010000, 0x0000000101010001, 0x00000001010101ff, 0x0000000101010100,\n    0x000001ffffff00ff, 0x000001ffffff0000, 0x000001ffffff0001, 0x000001ffffff0100,\n    0x000001ffff00ffff, 0x000001ffff000000, 0x000001ffff0001ff, 0x000001ffff01ff00,\n    0x000001ffff010101, 0x000001ff00ff0000, 0x000001ff00ff01ff, 0x000001ff00ff0101,\n    0x000001ff0000ff00, 0x000001ff000000ff, 0x000001ff00000000, 0x000001ff00000001,\n    0x000001ff000001ff, 0x000001ff00000100, 0x000001ff0001ffff, 0x000001ff0001ff01,\n    0x000001ff000100ff, 0x000001ff00010000, 0x000001ff01ffff01, 0x000001ff01ff0100,\n    0x000001ff0100ffff, 0x000001ff0100ff01, 0x000001ff01000000, 0x000001ff010001ff,\n    0x000001ff0101ff00, 0x000001ff01010100, 0x00000100ffffff00, 0x00000100ffffff01,\n    0x00000100ffff0000, 0x00000100ffff0101, 0x00000100ff00ff00, 0x00000100ff0000ff,\n    0x00000100ff000000, 0x00000100ff000001, 0x00000100ff000100, 0x00000100ff010000,\n    0x0000010000ffff00, 0x0000010000ff00ff, 0x0000010000ff0000, 0x0000010000ff0001,\n    0x0000010000ff0100, 0x000001000000ffff, 0x000001000000ff00, 0x000001000000ff01,\n    0x00000100000000ff, 0x0000010000000000, 0x0000010000000001, 0x00000100000001ff,\n    0x0000010000000100, 0x0000010000000101, 0x000001000001ff00, 0x00000100000100ff,\n    0x0000010000010000, 0x0000010000010001, 0x0000010000010100, 0x0000010001ffff00,\n    0x0000010001ff0000, 0x0000010001ff0100, 0x000001000100ff00, 0x00000100010000ff,\n    0x0000010001000000, 0x0000010001000001, 0x00000100010001ff, 0x0000010001000100,\n    0x0000010001010000, 0x00000101ffff00ff, 0x00000101ffff01ff, 0x00000101ff000000,\n    0x00000101ff000101, 0x00000101ff01ffff, 0x00000101ff010000, 0x00000101ff010001,\n    0x00000101ff010100, 0x0000010100ff0000, 0x0000010100ff01ff, 0x0000010100ff0100,\n    0x000001010000ff00, 0x0000010100000000, 0x0000010100000001, 0x00000101000001ff,\n    0x0000010100000100, 0x000001010001ff01, 0x0000010100010000, 0x00000101000101ff,\n    0x0000010100010101, 0x0000010101ffff00, 0x0000010101ff0101, 0x000001010100ff01,\n    0x0000010101000000, 0x0000010101000001, 0x00000101010001ff, 0x0000010101000101,\n    0x000001010101ff00, 0x0001ffffffff0000, 0x0001ffffff0000ff, 0x0001ffffff000001,\n    0x0001ffffff000100, 0x0001ffffff010000, 0x0001ffff00ff00ff, 0x0001ffff0000ffff,\n    0x0001ffff00000000, 0x0001ffff00000001, 0x0001ffff000001ff, 0x0001ffff00000101,\n    0x0001ffff0001ff00, 0x0001ffff000100ff, 0x0001ffff00010001, 0x0001ffff00010100,\n    0x0001ffff01ffff00, 0x0001ffff01000001, 0x0001ffff01010000, 0x0001ff00ffffff00,\n    0x0001ff00ffff00ff, 0x0001ff00ffff0001, 0x0001ff00ffff0100, 0x0001ff00ff00ff01,\n    0x0001ff00ff000000, 0x0001ff00ff01ff00, 0x0001ff00ff01ff01, 0x0001ff00ff010001,\n    0x0001ff00ff010100, 0x0001ff0000ff0000, 0x0001ff0000ff0100, 0x0001ff000000ff00,\n    0x0001ff0000000000, 0x0001ff0000000001, 0x0001ff0000000100, 0x0001ff0000010000,\n    0x0001ff0000010001, 0x0001ff0000010101, 0x0001ff0001ff00ff, 0x0001ff0001ff0101,\n    0x0001ff000100ff01, 0x0001ff0001000000, 0x0001ff000101ff00, 0x0001ff0001010001,\n    0x0001ff0001010100, 0x0001ff01ff00ff00, 0x0001ff01ff000001, 0x0001ff01ff000100,\n    0x0001ff0100ffffff, 0x0001ff0100ffff00, 0x0001ff0100ff0001, 0x0001ff0100000000,\n    0x0001ff0100000001, 0x0001ff01000001ff, 0x0001ff010001ffff, 0x0001ff0101ff0000,\n    0x0001ff010100ff00, 0x0001ff0101000001, 0x0001ff0101010000, 0x000100ffff00ff00,\n    0x000100ffff00ff01, 0x000100ffff000000, 0x000100ffff000001, 0x000100ffff000101,\n    0x000100ffff01ff00, 0x000100ffff010001, 0x000100ffff010100, 0x000100ff00ffffff,\n    0x000100ff00ffff01, 0x000100ff00ff0000, 0x000100ff00ff01ff, 0x000100ff00ff0101,\n    0x000100ff0000ff00, 0x000100ff000000ff, 0x000100ff00000000, 0x000100ff00000001,\n    0x000100ff00000100, 0x000100ff00000101, 0x000100ff0001ffff, 0x000100ff0001ff01,\n    0x000100ff00010000, 0x000100ff01ff00ff, 0x000100ff01ff0000, 0x000100ff01ff0100,\n    0x000100ff0100ffff, 0x000100ff0100ff01, 0x000100ff010000ff, 0x000100ff01000000,\n    0x000100ff01000001, 0x000100ff010001ff, 0x000100ff01000101, 0x000100ff0101ff00,\n    0x000100ff010100ff, 0x000100ff01010100, 0x00010000ffff0000, 0x00010000ffff01ff,\n    0x00010000ffff0101, 0x00010000ff00ff00, 0x00010000ff000000, 0x00010000ff000001,\n    0x00010000ff000100, 0x0001000000ff00ff, 0x0001000000ff0000, 0x0001000000ff0001,\n    0x0001000000ff0100, 0x000100000000ffff, 0x000100000000ff00, 0x00010000000000ff,\n    0x0001000000000000, 0x0001000000000001, 0x0001000000000100, 0x000100000001ff00,\n    0x00010000000100ff, 0x0001000000010000, 0x0001000000010001, 0x0001000000010100,\n    0x0001000001ff0001, 0x0001000001ff0100, 0x0001000001ff0101, 0x000100000100ff00,\n    0x0001000001000000, 0x0001000001000001, 0x0001000001000100, 0x0001000001000101,\n    0x000100000101ff01, 0x0001000001010000, 0x0001000001010001, 0x00010000010101ff,\n    0x00010001ffffff01, 0x00010001ffff0100, 0x00010001ff000000, 0x00010001ff01ffff,\n    0x00010001ff010001, 0x00010001ff0101ff, 0x00010001ff010100, 0x0001000100ffffff,\n    0x0001000100ff0000, 0x0001000100ff01ff, 0x0001000100ff0101, 0x000100010000ff00,\n    0x00010001000000ff, 0x0001000100000000, 0x0001000100000001, 0x00010001000001ff,\n    0x0001000100000101, 0x000100010001ffff, 0x0001000100010000, 0x00010001000101ff,\n    0x0001000101ffffff, 0x0001000101ffff01, 0x0001000101ff0000, 0x0001000101ff0101,\n    0x00010001010000ff, 0x0001000101000001, 0x00010001010001ff, 0x0001000101000100,\n    0x000100010101ffff, 0x00010001010100ff, 0x0001000101010001, 0x0001000101010101,\n    0x000101ffff000001, 0x000101ffff000100, 0x000101ffff010000, 0x000101ff00ffff00,\n    0x000101ff0000ff01, 0x000101ff00000000, 0x000101ff00000101, 0x000101ff0001ff00,\n    0x000101ff00010100, 0x000101ff01ff0000, 0x000101ff0100ff00, 0x000101ff010001ff,\n    0x000101ff01010001, 0x00010100ffffff00, 0x00010100ffff00ff, 0x00010100ff00ffff,\n    0x00010100ff000000, 0x00010100ff01ff00, 0x00010100ff0100ff, 0x00010100ff010001,\n    0x00010100ff010100, 0x0001010000ffffff, 0x0001010000ffff00, 0x0001010000ff0000,\n    0x0001010000ff0001, 0x0001010000ff01ff, 0x000101000000ff00, 0x00010100000000ff,\n    0x0001010000000000, 0x0001010000000001, 0x0001010000000100, 0x000101000001ffff,\n    0x0001010000010000, 0x0001010000010101, 0x0001010001ffff01, 0x0001010001ff00ff,\n    0x0001010001ff0101, 0x0001010001000000, 0x000101000101ff00, 0x00010100010100ff,\n    0x0001010001010000, 0x0001010001010100, 0x00010101ff00ff00, 0x00010101ff000001,\n    0x00010101ff0001ff, 0x0001010100ffff00, 0x0001010100ff00ff, 0x0001010100ff0100,\n    0x000101010000ffff, 0x0001010100000000, 0x00010101000001ff, 0x0001010100000101,\n    0x00010101000100ff, 0x0001010100010000, 0x0001010100010100, 0x0001010101ff0001,\n    0x00010101010000ff, 0x00010101010001ff, 0x0001010101000101, 0x0001010101010001,\n    0x01ffffffffffffff, 0x01ffffffffffff01, 0x01ffffffffff01ff, 0x01ffffffffff0101,\n    0x01ffffffff01ffff, 0x01ffffffff01ff01, 0x01ffffffff0101ff, 0x01ffffffff010101,\n    0x01ffffff00ff0000, 0x01ffffff0000ffff, 0x01ffffff0000ff00, 0x01ffffff000000ff,\n    0x01ffffff00000001, 0x01ffffff00000100, 0x01ffffff00010000, 0x01ffffff01ffffff,\n    0x01ffffff01ffff01, 0x01ffffff01ff01ff, 0x01ffffff01ff0101, 0x01ffffff01000000,\n    0x01ffffff0101ffff, 0x01ffffff0101ff01, 0x01ffffff010101ff, 0x01ffffff01010101,\n    0x01ffff00ffff0000, 0x01ffff00ff00ff00, 0x01ffff00ff0000ff, 0x01ffff00ff000001,\n    0x01ffff00ff000100, 0x01ffff00ff010000, 0x01ffff0000ffff00, 0x01ffff0000ff00ff,\n    0x01ffff0000ff0100, 0x01ffff000000ffff, 0x01ffff000000ff01, 0x01ffff0000000000,\n    0x01ffff0000000001, 0x01ffff00000001ff, 0x01ffff0000000100, 0x01ffff00000100ff,\n    0x01ffff0000010001, 0x01ffff0000010100, 0x01ffff0001ff0000, 0x01ffff0001ff0100,\n    0x01ffff00010000ff, 0x01ffff0001000001, 0x01ffff0001000100, 0x01ffff0001010000,\n    0x01ffff01ffffffff, 0x01ffff01ffffff01, 0x01ffff01ffff01ff, 0x01ffff01ffff0101,\n    0x01ffff01ff000000, 0x01ffff01ff01ffff, 0x01ffff01ff01ff01, 0x01ffff01ff0101ff,\n    0x01ffff01ff010101, 0x01ffff010000ff00, 0x01ffff01000000ff, 0x01ffff0100000100,\n    0x01ffff0100010000, 0x01ffff0101ffffff, 0x01ffff0101ffff01, 0x01ffff0101ff01ff,\n    0x01ffff0101ff0101, 0x01ffff0101000000, 0x01ffff010101ffff, 0x01ffff010101ff01,\n    0x01ffff01010101ff, 0x01ffff0101010101, 0x01ff00ffff0000ff, 0x01ff00ffff000100,\n    0x01ff00ff00ffff00, 0x01ff00ff00ff00ff, 0x01ff00ff0000ff00, 0x01ff00ff00000000,\n    0x01ff00ff00000101, 0x01ff00ff0001ff00, 0x01ff00ff000100ff, 0x01ff00ff00010100,\n    0x01ff00ff010000ff, 0x01ff00ff01000100, 0x01ff0000ffffff00, 0x01ff0000ffff0100,\n    0x01ff0000ff00ff01, 0x01ff0000ff000000, 0x01ff0000ff000101, 0x01ff0000ff010001,\n    0x01ff0000ff010100, 0x01ff000000ffffff, 0x01ff000000ffff00, 0x01ff000000ff0000,\n    0x01ff000000ff01ff, 0x01ff00000000ff00, 0x01ff0000000000ff, 0x01ff000000000000,\n    0x01ff000000000001, 0x01ff000000000100, 0x01ff000000000101, 0x01ff000000010000,\n    0x01ff000000010001, 0x01ff0000000101ff, 0x01ff000000010101, 0x01ff000001ffff00,\n    0x01ff000001ff00ff, 0x01ff000001ff0001, 0x01ff000001ff0100, 0x01ff00000100ffff,\n    0x01ff00000100ff01, 0x01ff000001000000, 0x01ff0000010001ff, 0x01ff000001010001,\n    0x01ff0001ff00ff00, 0x01ff0001ff000001, 0x01ff0001ff000100, 0x01ff0001ff010000,\n    0x01ff000100ffff00, 0x01ff000100ff00ff, 0x01ff000100ff0100, 0x01ff000100ff0101,\n    0x01ff00010000ffff, 0x01ff000100000000, 0x01ff000100000100, 0x01ff000100000101,\n    0x01ff00010001ff00, 0x01ff000100010001, 0x01ff000100010101, 0x01ff000101ff0000,\n    0x01ff00010100ff00, 0x01ff000101000101, 0x01ff0001010100ff, 0x01ff01ffffffffff,\n    0x01ff01ffffffff01, 0x01ff01ffffff01ff, 0x01ff01ffffff0101, 0x01ff01ffff000000,\n    0x01ff01ffff01ffff, 0x01ff01ffff01ff01, 0x01ff01ffff0101ff, 0x01ff01ffff010101,\n    0x01ff01ff00ffff00, 0x01ff01ff00ff0000, 0x01ff01ff0000ff00, 0x01ff01ff000000ff,\n    0x01ff01ff00000100, 0x01ff01ff00010000, 0x01ff01ff00010100, 0x01ff01ff01ffffff,\n    0x01ff01ff01ffff01, 0x01ff01ff01ff01ff, 0x01ff01ff01ff0101, 0x01ff01ff01000000,\n    0x01ff01ff0101ffff, 0x01ff01ff0101ff01, 0x01ff01ff010101ff, 0x01ff01ff01010101,\n    0x01ff0100ffff0000, 0x01ff0100ffff0001, 0x01ff0100ff00ff00, 0x01ff0100ff0000ff,\n    0x01ff0100ff000001, 0x01ff0100ff010000, 0x01ff010000ffff00, 0x01ff010000ff00ff,\n    0x01ff010000ff0001, 0x01ff010000ff0100, 0x01ff01000000ffff, 0x01ff01000000ff01,\n    0x01ff010000000000, 0x01ff010000000101, 0x01ff01000001ff00, 0x01ff0100000100ff,\n    0x01ff010001ff0000, 0x01ff010001000001, 0x01ff010001000100, 0x01ff010001010000,\n    0x01ff0101ffffffff, 0x01ff0101ffffff01, 0x01ff0101ffff01ff, 0x01ff0101ffff0101,\n    0x01ff0101ff000000, 0x01ff0101ff01ffff, 0x01ff0101ff01ff01, 0x01ff0101ff0101ff,\n    0x01ff0101ff010101, 0x01ff010100ff0000, 0x01ff01010000ff00, 0x01ff0101000000ff,\n    0x01ff010100000001, 0x01ff010101ffffff, 0x01ff010101ffff01, 0x01ff010101ff01ff,\n    0x01ff010101ff0101, 0x01ff010101000000, 0x01ff01010101ffff, 0x01ff01010101ff01,\n    0x01ff0101010101ff, 0x01ff010101010101, 0x0100ffffffff0000, 0x0100ffffff00ff00,\n    0x0100ffffff000001, 0x0100ffffff0001ff, 0x0100ffffff000100, 0x0100ffffff010000,\n    0x0100ffff00ffff00, 0x0100ffff00ff0001, 0x0100ffff00ff0100, 0x0100ffff00000000,\n    0x0100ffff000001ff, 0x0100ffff00000101, 0x0100ffff00010100, 0x0100ffff00010101,\n    0x0100ffff01ff0000, 0x0100ffff0100ff00, 0x0100ffff010000ff, 0x0100ffff01000001,\n    0x0100ffff01000100, 0x0100ffff01010000, 0x0100ff00ffffff00, 0x0100ff00ffff00ff,\n    0x0100ff00ffff0001, 0x0100ff00ffff0100, 0x0100ff00ff00ffff, 0x0100ff00ff000000,\n    0x0100ff00ff0001ff, 0x0100ff00ff000101, 0x0100ff00ff01ff00, 0x0100ff00ff0100ff,\n    0x0100ff00ff010001, 0x0100ff00ff010100, 0x0100ff0000ffffff, 0x0100ff0000ff0000,\n    0x0100ff000000ffff, 0x0100ff000000ff00, 0x0100ff00000000ff, 0x0100ff0000000000,\n    0x0100ff0000000001, 0x0100ff0000000100, 0x0100ff000001ff01, 0x0100ff0000010000,\n    0x0100ff0001ff00ff, 0x0100ff0001ff0001, 0x0100ff000100ff01, 0x0100ff0001000000,\n    0x0100ff00010001ff, 0x0100ff000101ff00, 0x0100ff00010100ff, 0x0100ff0001010001,\n    0x0100ff0001010100, 0x0100ff01ffff0000, 0x0100ff01ff00ff00, 0x0100ff01ff0000ff,\n    0x0100ff01ff000100, 0x0100ff01ff010000, 0x0100ff0100ff00ff, 0x0100ff0100ff0001,\n    0x0100ff0100ff0100, 0x0100ff010000ffff, 0x0100ff010000ff01, 0x0100ff0100000000,\n    0x0100ff01000001ff, 0x0100ff0100010001, 0x0100ff0100010100, 0x0100ff0101ff0000,\n    0x0100ff01010000ff, 0x0100ff0101000001, 0x0100ff0101010100, 0x010000ffffffff00,\n    0x010000ffffff00ff, 0x010000ffffff0001, 0x010000ffff00ffff, 0x010000ffff000000,\n    0x010000ffff0001ff, 0x010000ffff010001, 0x010000ff00ffffff, 0x010000ff00ff0101,\n    0x010000ff0000ff00, 0x010000ff000000ff, 0x010000ff00000000, 0x010000ff00000001,\n    0x010000ff000001ff, 0x010000ff00000100, 0x010000ff0001ffff, 0x010000ff0001ff00,\n    0x010000ff0001ff01, 0x010000ff00010000, 0x010000ff01ff00ff, 0x010000ff01ff0001,\n    0x010000ff0100ff01, 0x010000ff010000ff, 0x010000ff01000000, 0x010000ff010001ff,\n    0x010000ff0101ff00, 0x010000ff01010100, 0x01000000ffffffff, 0x01000000ffff0000,\n    0x01000000ffff01ff, 0x01000000ffff0101, 0x01000000ff00ffff, 0x01000000ff00ff00,\n    0x01000000ff0000ff, 0x01000000ff000000, 0x01000000ff000001, 0x01000000ff000100,\n    0x01000000ff01ff00, 0x01000000ff010000, 0x01000000ff010100, 0x01000000ff010101,\n    0x0100000000ffff00, 0x0100000000ff00ff, 0x0100000000ff0000, 0x0100000000ff0001,\n    0x0100000000ff0100, 0x010000000000ffff, 0x010000000000ff00, 0x010000000000ff01,\n    0x01000000000000ff, 0x0100000000000000, 0x0100000000000001, 0x01000000000001ff,\n    0x0100000000000100, 0x0100000000000101, 0x010000000001ff00, 0x01000000000100ff,\n    0x0100000000010000, 0x0100000000010001, 0x0100000000010100, 0x0100000001ffff00,\n    0x0100000001ff0000, 0x0100000001ff01ff, 0x010000000100ff00, 0x010000000100ff01,\n    0x01000000010000ff, 0x0100000001000000, 0x0100000001000001, 0x0100000001000100,\n    0x0100000001000101, 0x010000000101ffff, 0x010000000101ff01, 0x0100000001010000,\n    0x01000000010101ff, 0x0100000001010101, 0x01000001ffffff00, 0x01000001ffff00ff,\n    0x01000001ff00ffff, 0x01000001ff000000, 0x01000001ff000100, 0x01000001ff01ffff,\n    0x01000001ff010001, 0x01000001ff010100, 0x0100000100ff0000, 0x0100000100ff01ff,\n    0x0100000100ff0100, 0x010000010000ff00, 0x010000010000ff01, 0x0100000100000000,\n    0x0100000100000001, 0x0100000100000100, 0x0100000100010000, 0x01000001000101ff,\n    0x0100000101ffff01, 0x0100000101ff00ff, 0x0100000101ff0100, 0x0100000101ff0101,\n    0x010000010100ff01, 0x01000001010000ff, 0x0100000101000000, 0x01000001010100ff,\n    0x0100000101010001, 0x0100000101010100, 0x010001ffffff0000, 0x010001ffff000001,\n    0x010001ffff000100, 0x010001ffff010000, 0x010001ff00ffff00, 0x010001ff00ff0001,\n    0x010001ff0000ffff, 0x010001ff0000ff01, 0x010001ff00000000, 0x010001ff00000001,\n    0x010001ff00000101, 0x010001ff000100ff, 0x010001ff00010000, 0x010001ff01ff0000,\n    0x010001ff0100ff00, 0x010001ff01000001, 0x010001ff01000100, 0x010001ff01010000,\n    0x01000100ffff00ff, 0x01000100ffff0001, 0x01000100ffff0100, 0x01000100ff00ffff,\n    0x01000100ff00ff01, 0x01000100ff000000, 0x01000100ff0001ff, 0x01000100ff000101,\n    0x01000100ff01ffff, 0x01000100ff01ff00, 0x01000100ff0100ff, 0x01000100ff010001,\n    0x0100010000ffffff, 0x0100010000ffff01, 0x0100010000ff0000, 0x0100010000ff01ff,\n    0x0100010000ff0101, 0x010001000000ff00, 0x01000100000000ff, 0x0100010000000000,\n    0x0100010000000001, 0x0100010000000100, 0x010001000001ff01, 0x0100010000010000,\n    0x0100010000010001, 0x0100010000010101, 0x0100010001ffff00, 0x0100010001ff00ff,\n    0x010001000100ffff, 0x010001000100ff01, 0x0100010001000000, 0x0100010001000101,\n    0x010001000101ff00, 0x0100010001010001, 0x01000101ffff0000, 0x01000101ff000000,\n    0x01000101ff010000, 0x0100010100ff00ff, 0x0100010100ff0001, 0x0100010100ff0100,\n    0x010001010000ffff, 0x0100010100000000, 0x01000101000001ff, 0x010001010001ff00,\n    0x0100010101ff0000, 0x010001010100ff00, 0x01000101010000ff, 0x0100010101000000,\n    0x0100010101000001, 0x0101ffffffffffff, 0x0101ffffffffff01, 0x0101ffffffff01ff,\n    0x0101ffffffff0101, 0x0101ffffff000000, 0x0101ffffff01ffff, 0x0101ffffff01ff01,\n    0x0101ffffff0101ff, 0x0101ffffff010101, 0x0101ffff00ff0000, 0x0101ffff0000ff00,\n    0x0101ffff000000ff, 0x0101ffff00000001, 0x0101ffff00000100, 0x0101ffff01ffffff,\n    0x0101ffff01ffff01, 0x0101ffff01ff01ff, 0x0101ffff01ff0101, 0x0101ffff01000000,\n    0x0101ffff0101ffff, 0x0101ffff0101ff01, 0x0101ffff010101ff, 0x0101ffff01010101,\n    0x0101ff00ffff0000, 0x0101ff00ffff0100, 0x0101ff00ff00ff00, 0x0101ff00ff0000ff,\n    0x0101ff00ff000001, 0x0101ff00ff000100, 0x0101ff00ff000101, 0x0101ff0000ff0001,\n    0x0101ff0000ff0100, 0x0101ff000000ff00, 0x0101ff0000000000, 0x0101ff00000001ff,\n    0x0101ff0000000101, 0x0101ff000001ff00, 0x0101ff00000100ff, 0x0101ff0001ff0000,\n    0x0101ff000100ffff, 0x0101ff000100ff01, 0x0101ff0001000001, 0x0101ff0001000100,\n    0x0101ff01ffffff01, 0x0101ff01ffff01ff, 0x0101ff01ffff0101, 0x0101ff01ff00ffff,\n    0x0101ff01ff000100, 0x0101ff01ff01ff01, 0x0101ff01ff0101ff, 0x0101ff01ff010101,\n    0x0101ff0100ff0000, 0x0101ff010000ff00, 0x0101ff0100000001, 0x0101ff0100000100,\n    0x0101ff0100010000, 0x0101ff0101ffffff, 0x0101ff0101ffff01, 0x0101ff0101ff01ff,\n    0x0101ff0101ff0101, 0x0101ff0101000000, 0x0101ff010101ffff, 0x0101ff010101ff01,\n    0x0101ff01010101ff, 0x0101ff0101010101, 0x010100ffff000100, 0x010100ffff010000,\n    0x010100ff00ffff00, 0x010100ff00ff00ff, 0x010100ff0000ffff, 0x010100ff000000ff,\n    0x010100ff00000000, 0x010100ff000001ff, 0x010100ff00000101, 0x010100ff0001ff00,\n    0x010100ff00010000, 0x010100ff00010001, 0x010100ff000101ff, 0x010100ff00010100,\n    0x010100ff01ff0000, 0x01010000ffff0001, 0x01010000ffff0100, 0x01010000ff00ffff,\n    0x01010000ff00ff01, 0x01010000ff000000, 0x01010000ff0001ff, 0x01010000ff010001,\n    0x01010000ff010100, 0x0101000000ffff01, 0x0101000000ff0000, 0x010100000000ff00,\n    0x01010000000000ff, 0x0101000000000000, 0x0101000000000001, 0x0101000000000100,\n    0x0101000000010000, 0x0101000000010101, 0x0101000001ffff00, 0x0101000001ff00ff,\n    0x0101000001ff0000, 0x0101000001ff0001, 0x0101000001ff0100, 0x010100000100ff01,\n    0x0101000001000000, 0x01010000010001ff, 0x01010001ffff0000, 0x01010001ff00ff00,\n    0x01010001ff000001, 0x01010001ff000101, 0x01010001ff01ff00, 0x01010001ff010000,\n    0x0101000100ff00ff, 0x0101000100ff0001, 0x0101000100ff0101, 0x010100010000ff01,\n    0x0101000100000000, 0x0101000100000001, 0x01010001000001ff, 0x010100010001ffff,\n    0x010100010001ff01, 0x0101000101ff0001, 0x010100010100ffff, 0x0101000101000000,\n    0x0101000101000001, 0x0101000101000100, 0x010100010101ff00, 0x01010001010100ff,\n    0x0101000101010001, 0x010101ffffffffff, 0x010101ffffffff01, 0x010101ffffff01ff,\n    0x010101ffffff0101, 0x010101ffff01ffff, 0x010101ffff01ff01, 0x010101ffff0101ff,\n    0x010101ffff010101, 0x010101ff0000ff00, 0x010101ff000000ff, 0x010101ff00000001,\n    0x010101ff00000100, 0x010101ff01ffffff, 0x010101ff01ffff01, 0x010101ff01ff01ff,\n    0x010101ff01ff0101, 0x010101ff01000000, 0x010101ff0101ffff, 0x010101ff0101ff01,\n    0x010101ff010101ff, 0x010101ff01010101, 0x01010100ffff0000, 0x01010100ff0000ff,\n    0x01010100ff000100, 0x01010100ff01ff00, 0x01010100ff010000, 0x0101010000ffff00,\n    0x010101000000ffff, 0x0101010000000000, 0x0101010000000101, 0x010101000001ff00,\n    0x0101010000010001, 0x0101010000010100, 0x010101000100ffff, 0x0101010001000001,\n    0x01010101ffffffff, 0x01010101ffffff01, 0x01010101ffff01ff, 0x01010101ffff0101,\n    0x01010101ff01ffff, 0x01010101ff01ff01, 0x01010101ff0101ff, 0x01010101ff010101,\n    0x010101010000ff00, 0x01010101000000ff, 0x0101010100000001, 0x0101010101ffffff,\n    0x0101010101ffff01, 0x0101010101ff01ff, 0x0101010101ff0101, 0x0101010101000000,\n    0x010101010101ffff, 0x010101010101ff01, 0x01010101010101ff, 0x0101010101010101,\nGGML_TABLE_END()\n#else\nGGML_TABLE_BEGIN(uint32_t, iq1s_grid_gpu, NGRID_IQ1S)\n    0x00000000, 0x00000002, 0x00000101, 0x00000200, 0x00000202, 0x00010001, 0x00010101, 0x00020000,\n    0x00020002, 0x00020200, 0x00020202, 0x01000101, 0x01010001, 0x01010100, 0x01010102, 0x01020101,\n    0x02000000, 0x02000002, 0x02000200, 0x02000202, 0x02010101, 0x02020000, 0x02020002, 0x02020200,\n    0x02020202, 0x00000110, 0x00000111, 0x00010011, 0x00010110, 0x00010112, 0x00010211, 0x00010212,\n    0x00020111, 0x01000011, 0x01000112, 0x01000211, 0x01010012, 0x01010111, 0x01010212, 0x01020011,\n    0x01020110, 0x01020112, 0x01020210, 0x02000111, 0x02010011, 0x02010110, 0x02010112, 0x02020111,\n    0x00000020, 0x00000022, 0x00000220, 0x00000222, 0x00010121, 0x00020020, 0x00020022, 0x00020220,\n    0x00020222, 0x01000121, 0x01010021, 0x01010221, 0x01020120, 0x01020221, 0x02000020, 0x02000022,\n    0x02000220, 0x02000222, 0x02010021, 0x02010121, 0x02010221, 0x02020020, 0x02020022, 0x02020220,\n    0x02020222, 0x00011001, 0x00011100, 0x00011102, 0x00021101, 0x01001001, 0x01001201, 0x01011101,\n    0x01011202, 0x01021100, 0x01021101, 0x02011001, 0x02011201, 0x02021101, 0x00001011, 0x00001110,\n    0x00001111, 0x00001112, 0x00011111, 0x00011210, 0x00011212, 0x00021211, 0x01001010, 0x01001111,\n    0x01001212, 0x01011010, 0x01011011, 0x01011110, 0x01011111, 0x01011112, 0x01011211, 0x01021010,\n    0x01021012, 0x01021111, 0x01021210, 0x01021212, 0x02001011, 0x02011011, 0x02011111, 0x02011210,\n    0x02011212, 0x02021011, 0x02021110, 0x02021111, 0x02021112, 0x02021211, 0x00011120, 0x00011221,\n    0x01001021, 0x01001120, 0x01011020, 0x01011022, 0x01011121, 0x01011220, 0x01021020, 0x01021021,\n    0x01021122, 0x01021221, 0x02001121, 0x02011021, 0x02011120, 0x02011221, 0x00002000, 0x00002002,\n    0x00002200, 0x00002202, 0x00012101, 0x00022000, 0x00022002, 0x00022200, 0x00022202, 0x01002101,\n    0x01012001, 0x01012102, 0x01022101, 0x02002000, 0x02002002, 0x02002200, 0x02002202, 0x02012101,\n    0x02022000, 0x02022002, 0x02022200, 0x02022202, 0x00002111, 0x00012011, 0x00012110, 0x00012211,\n    0x00022110, 0x00022111, 0x01002011, 0x01012010, 0x01012011, 0x01012111, 0x01022011, 0x01022110,\n    0x01022211, 0x02012011, 0x02012110, 0x02012112, 0x02012211, 0x02022111, 0x00002020, 0x00002022,\n    0x00002220, 0x00002222, 0x00012121, 0x00022020, 0x00022022, 0x00022220, 0x00022222, 0x01002121,\n    0x01012021, 0x01012221, 0x01022021, 0x01022121, 0x02002020, 0x02002022, 0x02002121, 0x02002220,\n    0x02002222, 0x02012121, 0x02022020, 0x02022022, 0x02022220, 0x02022222, 0x00110000, 0x00110001,\n    0x00110100, 0x00110201, 0x00120100, 0x00120101, 0x01100001, 0x01100100, 0x01110000, 0x01110101,\n    0x01110200, 0x01120001, 0x01120100, 0x01120101, 0x01120201, 0x02110001, 0x02110100, 0x02110102,\n    0x02120001, 0x02120101, 0x00100011, 0x00100110, 0x00100112, 0x00100211, 0x00110010, 0x00110012,\n    0x00110111, 0x00110210, 0x00120011, 0x00120110, 0x00120211, 0x01100111, 0x01100212, 0x01110010,\n    0x01110011, 0x01110012, 0x01110110, 0x01110111, 0x01110112, 0x01110211, 0x01120010, 0x01120111,\n    0x02100110, 0x02110012, 0x02110111, 0x02120011, 0x02120110, 0x00110021, 0x00110120, 0x00110122,\n    0x00120121, 0x01100020, 0x01100122, 0x01100221, 0x01110022, 0x01110121, 0x01110220, 0x01110222,\n    0x01120120, 0x01120122, 0x02100121, 0x02110021, 0x02110120, 0x02110122, 0x02120121, 0x00101001,\n    0x00101102, 0x00101201, 0x00111100, 0x00111101, 0x00111200, 0x00111201, 0x00121001, 0x00121102,\n    0x01101001, 0x01101101, 0x01101102, 0x01101200, 0x01101202, 0x01111001, 0x01111100, 0x01111101,\n    0x01111102, 0x01111201, 0x01121002, 0x01121101, 0x01121200, 0x02101100, 0x02101201, 0x02111000,\n    0x02111100, 0x02111101, 0x02111200, 0x02111201, 0x02111202, 0x02121001, 0x02121100, 0x02121101,\n    0x02121201, 0x00101012, 0x00101111, 0x00101212, 0x00111011, 0x00111110, 0x00111111, 0x00111112,\n    0x00111211, 0x00121010, 0x00121012, 0x00121111, 0x00121210, 0x00121212, 0x01101011, 0x01101110,\n    0x01101111, 0x01101112, 0x01111011, 0x01111012, 0x01111110, 0x01111111, 0x01111112, 0x01111211,\n    0x01111212, 0x01121011, 0x01121110, 0x01121111, 0x01121112, 0x01121211, 0x02101010, 0x02101012,\n    0x02101110, 0x02101111, 0x02101210, 0x02101212, 0x02111010, 0x02111011, 0x02111110, 0x02111111,\n    0x02111112, 0x02111211, 0x02111212, 0x02121010, 0x02121012, 0x02121111, 0x00101021, 0x00101120,\n    0x00101121, 0x00101122, 0x00111121, 0x00111122, 0x00111220, 0x00111222, 0x00121021, 0x00121122,\n    0x01101020, 0x01101022, 0x01101120, 0x01101121, 0x01101220, 0x01101222, 0x01111021, 0x01111121,\n    0x01111122, 0x01111220, 0x01111221, 0x01121021, 0x01121120, 0x01121121, 0x01121220, 0x01121221,\n    0x01121222, 0x02101122, 0x02101222, 0x02111022, 0x02111121, 0x02121120, 0x02121221, 0x00112001,\n    0x00112102, 0x00122101, 0x01102001, 0x01102100, 0x01102102, 0x01102201, 0x01112000, 0x01112101,\n    0x01112200, 0x01112202, 0x01122000, 0x01122001, 0x01122100, 0x01122102, 0x01122201, 0x02102101,\n    0x02112001, 0x02112100, 0x02122101, 0x00112010, 0x00112012, 0x00112111, 0x00112212, 0x00122011,\n    0x00122111, 0x01102012, 0x01102110, 0x01102111, 0x01102210, 0x01112011, 0x01112110, 0x01112111,\n    0x01112112, 0x01112211, 0x01112212, 0x01122010, 0x01122111, 0x01122212, 0x02102211, 0x02112011,\n    0x02112012, 0x02112111, 0x02112210, 0x02122011, 0x02122112, 0x02122211, 0x00102221, 0x00112122,\n    0x00122120, 0x00122122, 0x01102120, 0x01102122, 0x01102221, 0x01112020, 0x01112022, 0x01112121,\n    0x01112220, 0x01122021, 0x01122122, 0x01122221, 0x02102121, 0x02112021, 0x02112122, 0x02112222,\n    0x00200000, 0x00200002, 0x00200200, 0x00200202, 0x00210101, 0x00220000, 0x00220002, 0x00220101,\n    0x00220200, 0x00220202, 0x01200101, 0x01210001, 0x01210201, 0x01220001, 0x01220101, 0x02200000,\n    0x02200002, 0x02200200, 0x02200202, 0x02210101, 0x02220000, 0x02220002, 0x02220101, 0x02220200,\n    0x02220202, 0x00200111, 0x00210011, 0x00210110, 0x00210211, 0x00220111, 0x01200012, 0x01200110,\n    0x01200211, 0x01210111, 0x01210210, 0x01210212, 0x01220011, 0x01220110, 0x01220111, 0x01220112,\n    0x02200111, 0x02210010, 0x02210112, 0x02210211, 0x02220111, 0x00200021, 0x00200220, 0x00200222,\n    0x00210021, 0x00210121, 0x00220020, 0x00220022, 0x00220220, 0x00220222, 0x01200121, 0x01210021,\n    0x01210122, 0x01210221, 0x01220121, 0x02200021, 0x02200220, 0x02200222, 0x02210021, 0x02210121,\n    0x02220020, 0x02220022, 0x02220220, 0x02220222, 0x00201101, 0x00211100, 0x00211102, 0x00211201,\n    0x00221101, 0x01201100, 0x01201101, 0x01201102, 0x01201201, 0x01211002, 0x01211101, 0x01211200,\n    0x01211202, 0x01221102, 0x02201101, 0x02211001, 0x02211100, 0x02211201, 0x02221001, 0x02221101,\n    0x00201211, 0x00211111, 0x00221011, 0x00221211, 0x01201010, 0x01201111, 0x01201210, 0x01211011,\n    0x01211110, 0x01211111, 0x01211211, 0x01221012, 0x01221111, 0x01221210, 0x02201211, 0x02211010,\n    0x02211110, 0x02211111, 0x02211210, 0x02211212, 0x02221011, 0x02221110, 0x02221112, 0x02221211,\n    0x00201121, 0x00211020, 0x00211022, 0x00211221, 0x00221121, 0x01201021, 0x01201221, 0x01211121,\n    0x01221020, 0x01221021, 0x01221221, 0x02201120, 0x02201122, 0x02211020, 0x02211222, 0x00202000,\n    0x00202002, 0x00202200, 0x00202202, 0x00212101, 0x00222000, 0x00222002, 0x00222200, 0x00222202,\n    0x01202101, 0x01212001, 0x01212100, 0x01222101, 0x02202000, 0x02202002, 0x02202200, 0x02202202,\n    0x02222000, 0x02222002, 0x02222200, 0x02222202, 0x00202211, 0x00212011, 0x00212110, 0x00212211,\n    0x00222111, 0x01202112, 0x01202211, 0x01212012, 0x01212111, 0x01222011, 0x01222110, 0x01222112,\n    0x01222211, 0x02202111, 0x02212010, 0x02212112, 0x02212211, 0x02222110, 0x02222111, 0x00202020,\n    0x00202022, 0x00202220, 0x00202222, 0x00222020, 0x00222022, 0x00222220, 0x00222222, 0x01202121,\n    0x01212021, 0x01212122, 0x01212221, 0x01222121, 0x02202020, 0x02202022, 0x02202220, 0x02202222,\n    0x02212121, 0x02222020, 0x02222022, 0x02222220, 0x02222222, 0x10000101, 0x10010001, 0x10010102,\n    0x10020101, 0x11000201, 0x11010002, 0x11010101, 0x11010200, 0x11010202, 0x11020001, 0x11020100,\n    0x11020102, 0x12010100, 0x12010201, 0x12020001, 0x12020102, 0x10000010, 0x10000011, 0x10000110,\n    0x10000112, 0x10000211, 0x10010012, 0x10010111, 0x10010112, 0x10010210, 0x10010212, 0x10020011,\n    0x10020112, 0x10020211, 0x11000111, 0x11000210, 0x11000212, 0x11010011, 0x11010110, 0x11010111,\n    0x11010112, 0x11010211, 0x11010212, 0x11020111, 0x11020210, 0x11020212, 0x12000011, 0x12000110,\n    0x12000112, 0x12010010, 0x12010012, 0x12010111, 0x12020010, 0x12020011, 0x12020012, 0x10000121,\n    0x10010021, 0x10010120, 0x10010122, 0x10020121, 0x11000021, 0x11010022, 0x11010121, 0x11010222,\n    0x11020120, 0x11020221, 0x12000221, 0x12010120, 0x12020121, 0x10001001, 0x10011101, 0x10011201,\n    0x10021201, 0x11001101, 0x11001200, 0x11001202, 0x11011001, 0x11011100, 0x11011101, 0x11011102,\n    0x11021001, 0x11021002, 0x11021101, 0x11021200, 0x11021202, 0x12001001, 0x12001102, 0x12001201,\n    0x12011000, 0x12011002, 0x12011101, 0x12021000, 0x12021001, 0x12021201, 0x10001011, 0x10001012,\n    0x10001111, 0x10001212, 0x10011011, 0x10011110, 0x10011111, 0x10011112, 0x10011211, 0x10021010,\n    0x10021111, 0x10021212, 0x11001011, 0x11001110, 0x11001111, 0x11001112, 0x11001211, 0x11011010,\n    0x11011011, 0x11011110, 0x11011111, 0x11011112, 0x11011210, 0x11011211, 0x11021011, 0x11021110,\n    0x11021111, 0x11021112, 0x11021211, 0x12001012, 0x12001110, 0x12001111, 0x12001210, 0x12011011,\n    0x12011110, 0x12011111, 0x12011112, 0x12011211, 0x12011212, 0x12021111, 0x12021210, 0x12021212,\n    0x10001021, 0x10001121, 0x10001221, 0x10011120, 0x10011121, 0x10011220, 0x10011222, 0x10021021,\n    0x10021120, 0x10021221, 0x11001020, 0x11001022, 0x11001121, 0x11001220, 0x11011020, 0x11011021,\n    0x11011022, 0x11011121, 0x11011122, 0x11011221, 0x11021022, 0x11021121, 0x11021220, 0x12001021,\n    0x12001121, 0x12001222, 0x12011120, 0x12011121, 0x12021021, 0x12021120, 0x12021122, 0x10002101,\n    0x10012001, 0x10012101, 0x10012202, 0x10022101, 0x11002002, 0x11002201, 0x11012000, 0x11012101,\n    0x11012200, 0x11022001, 0x11022100, 0x11022102, 0x11022201, 0x12002101, 0x12012001, 0x12012100,\n    0x12012102, 0x12012201, 0x12022101, 0x10002011, 0x10002111, 0x10002112, 0x10002212, 0x10012010,\n    0x10012110, 0x10012111, 0x10012210, 0x10022011, 0x10022110, 0x10022112, 0x11002010, 0x11002111,\n    0x11002212, 0x11012011, 0x11012012, 0x11012110, 0x11012111, 0x11012112, 0x11012211, 0x11022010,\n    0x11022012, 0x11022111, 0x11022112, 0x11022212, 0x12002112, 0x12002211, 0x12012012, 0x12012111,\n    0x12012112, 0x12012210, 0x12022011, 0x12022110, 0x12022112, 0x12022211, 0x10012122, 0x11002120,\n    0x11002122, 0x11002221, 0x11012121, 0x11012220, 0x11012222, 0x11022120, 0x11022221, 0x12012120,\n    0x12022121, 0x10100001, 0x10100100, 0x10100101, 0x10100102, 0x10100201, 0x10110002, 0x10110101,\n    0x10110202, 0x10120001, 0x10120100, 0x10120201, 0x11100000, 0x11100101, 0x11100200, 0x11110001,\n    0x11110100, 0x11110101, 0x11110102, 0x11110201, 0x11120101, 0x11120200, 0x12100102, 0x12100201,\n    0x12110101, 0x12110200, 0x12120000, 0x12120001, 0x12120102, 0x12120201, 0x10100111, 0x10100210,\n    0x10100211, 0x10100212, 0x10110011, 0x10110110, 0x10110111, 0x10110112, 0x10110210, 0x10110211,\n    0x10120010, 0x10120111, 0x10120112, 0x10120210, 0x10120212, 0x11100011, 0x11100110, 0x11100111,\n    0x11100112, 0x11100211, 0x11110010, 0x11110011, 0x11110012, 0x11110110, 0x11110111, 0x11110112,\n    0x11110210, 0x11110211, 0x11110212, 0x11120011, 0x11120110, 0x11120111, 0x11120112, 0x11120211,\n    0x12100012, 0x12100111, 0x12110011, 0x12110110, 0x12110111, 0x12110112, 0x12110211, 0x12120010,\n    0x12120111, 0x12120212, 0x10100021, 0x10100122, 0x10110022, 0x10110121, 0x10110222, 0x10120021,\n    0x10120120, 0x11100022, 0x11100121, 0x11100222, 0x11110021, 0x11110120, 0x11110121, 0x11110122,\n    0x11110221, 0x11120022, 0x11120121, 0x12100121, 0x12110020, 0x12110022, 0x12110121, 0x12110221,\n    0x12110222, 0x12120120, 0x10101100, 0x10101101, 0x10111001, 0x10111100, 0x10111101, 0x10111102,\n    0x10111200, 0x10111201, 0x10121001, 0x10121101, 0x10121200, 0x10121202, 0x11101001, 0x11101100,\n    0x11101101, 0x11101102, 0x11101201, 0x11101202, 0x11111000, 0x11111001, 0x11111100, 0x11111101,\n    0x11111102, 0x11111200, 0x11111201, 0x11111202, 0x11121001, 0x11121002, 0x11121100, 0x11121101,\n    0x11121102, 0x11121201, 0x12101000, 0x12101200, 0x12101202, 0x12111001, 0x12111100, 0x12111101,\n    0x12111102, 0x12111201, 0x12121001, 0x12121100, 0x12121101, 0x12121202, 0x10101011, 0x10101012,\n    0x10101110, 0x10101111, 0x10101112, 0x10101211, 0x10111010, 0x10111011, 0x10111012, 0x10111110,\n    0x10111111, 0x10111112, 0x10111211, 0x10111212, 0x10121011, 0x10121110, 0x10121111, 0x10121112,\n    0x10121211, 0x11101010, 0x11101011, 0x11101012, 0x11101110, 0x11101111, 0x11101112, 0x11101210,\n    0x11101211, 0x11111010, 0x11111011, 0x11111012, 0x11111110, 0x11111111, 0x11111112, 0x11111210,\n    0x11111211, 0x11111212, 0x11121010, 0x11121011, 0x11121110, 0x11121111, 0x11121112, 0x11121210,\n    0x11121211, 0x11121212, 0x12101011, 0x12101110, 0x12101111, 0x12101211, 0x12101212, 0x12111010,\n    0x12111011, 0x12111110, 0x12111111, 0x12111112, 0x12111210, 0x12111211, 0x12121011, 0x12121110,\n    0x12121111, 0x12121112, 0x12121211, 0x10101020, 0x10101021, 0x10101022, 0x10101120, 0x10101122,\n    0x10101220, 0x10101221, 0x10111021, 0x10111120, 0x10111121, 0x10111220, 0x10111221, 0x10121020,\n    0x10121021, 0x10121022, 0x10121120, 0x10121121, 0x10121122, 0x10121220, 0x10121221, 0x11101021,\n    0x11101121, 0x11101122, 0x11101220, 0x11101221, 0x11101222, 0x11111020, 0x11111021, 0x11111022,\n    0x11111120, 0x11111121, 0x11111122, 0x11111220, 0x11111221, 0x11111222, 0x11121021, 0x11121120,\n    0x11121121, 0x11121221, 0x12101022, 0x12101121, 0x12101122, 0x12101220, 0x12101221, 0x12101222,\n    0x12111021, 0x12111121, 0x12111222, 0x12121022, 0x12121121, 0x12121122, 0x12121220, 0x12121221,\n    0x10102100, 0x10102101, 0x10102102, 0x10102201, 0x10112000, 0x10112101, 0x10112200, 0x10122001,\n    0x10122202, 0x11102101, 0x11102200, 0x11102202, 0x11112001, 0x11112100, 0x11112101, 0x11112102,\n    0x11112200, 0x11112201, 0x11122000, 0x11122002, 0x11122100, 0x11122101, 0x12102002, 0x12102201,\n    0x12112000, 0x12112002, 0x12112101, 0x12112200, 0x12122001, 0x12122201, 0x10102011, 0x10102012,\n    0x10102111, 0x10102212, 0x10112011, 0x10112110, 0x10112111, 0x10112112, 0x10112211, 0x10122111,\n    0x11102011, 0x11102110, 0x11102111, 0x11102112, 0x11102211, 0x11112010, 0x11112011, 0x11112012,\n    0x11112110, 0x11112111, 0x11112112, 0x11112210, 0x11112211, 0x11112212, 0x11122011, 0x11122110,\n    0x11122111, 0x11122112, 0x11122211, 0x12102011, 0x12102111, 0x12102211, 0x12112011, 0x12112110,\n    0x12112111, 0x12112112, 0x12112210, 0x12112211, 0x12122111, 0x10102120, 0x10102220, 0x10112121,\n    0x10112222, 0x10122020, 0x10122121, 0x10122122, 0x10122221, 0x11102121, 0x11102220, 0x11102221,\n    0x11112021, 0x11112121, 0x11112122, 0x11112220, 0x11112221, 0x11122022, 0x11122121, 0x11122220,\n    0x11122222, 0x12102021, 0x12102222, 0x12112022, 0x12112121, 0x12112122, 0x12112220, 0x12112222,\n    0x12122021, 0x10200101, 0x10210100, 0x10210102, 0x10210201, 0x10220101, 0x11200100, 0x11210000,\n    0x11210101, 0x11210102, 0x11210200, 0x11210202, 0x11220001, 0x11220100, 0x11220102, 0x11220201,\n    0x12200001, 0x12210102, 0x12220101, 0x10200011, 0x10200110, 0x10200112, 0x10200211, 0x10210012,\n    0x10210111, 0x10220011, 0x10220012, 0x10220112, 0x10220211, 0x11200111, 0x11200211, 0x11210011,\n    0x11210111, 0x11210112, 0x11210211, 0x11220111, 0x11220112, 0x11220212, 0x12200110, 0x12200212,\n    0x12210012, 0x12210111, 0x12220011, 0x12220112, 0x12220211, 0x10210021, 0x10210122, 0x10210221,\n    0x11200020, 0x11200021, 0x11200122, 0x11210121, 0x11210122, 0x11210220, 0x11220020, 0x12200121,\n    0x12210021, 0x12210122, 0x12220121, 0x10211001, 0x10211002, 0x10211101, 0x10211102, 0x10211202,\n    0x10221001, 0x10221102, 0x10221201, 0x11201000, 0x11201002, 0x11201101, 0x11201200, 0x11201202,\n    0x11211001, 0x11211100, 0x11211101, 0x11211102, 0x11211201, 0x11211202, 0x11221000, 0x11221002,\n    0x11221101, 0x12201100, 0x12201101, 0x12201201, 0x12211000, 0x12211002, 0x12211100, 0x12211101,\n    0x12211102, 0x12211200, 0x12211202, 0x12221001, 0x12221100, 0x12221201, 0x10201111, 0x10201210,\n    0x10201212, 0x10211011, 0x10211111, 0x10211112, 0x10211211, 0x11201110, 0x11201111, 0x11201112,\n    0x11201211, 0x11211010, 0x11211011, 0x11211110, 0x11211111, 0x11211112, 0x11211211, 0x11221011,\n    0x11221110, 0x11221111, 0x11221112, 0x11221211, 0x12201112, 0x12201211, 0x12201212, 0x12211011,\n    0x12211111, 0x12211112, 0x12211211, 0x12211212, 0x12221012, 0x12221111, 0x12221112, 0x12221210,\n    0x10201022, 0x10201221, 0x10211121, 0x10221020, 0x10221122, 0x10221220, 0x10221221, 0x11201020,\n    0x11201121, 0x11201220, 0x11201222, 0x11211021, 0x11211120, 0x11211121, 0x11211122, 0x11211220,\n    0x11211222, 0x11221020, 0x11221121, 0x11221220, 0x12201020, 0x12201022, 0x12201121, 0x12201222,\n    0x12211120, 0x12211122, 0x12211220, 0x12211221, 0x12221020, 0x12221120, 0x12221122, 0x12221222,\n    0x10212102, 0x10212201, 0x10222101, 0x11202001, 0x11212002, 0x11212101, 0x11212202, 0x11222001,\n    0x11222201, 0x12202101, 0x12212001, 0x12212200, 0x12222102, 0x10202011, 0x10202110, 0x10212010,\n    0x10212111, 0x10222011, 0x10222110, 0x10222112, 0x10222211, 0x11202010, 0x11202011, 0x11202111,\n    0x11202112, 0x11202210, 0x11212011, 0x11212110, 0x11212111, 0x11212112, 0x11212211, 0x11222010,\n    0x11222111, 0x11222212, 0x12202012, 0x12202110, 0x12202212, 0x12212111, 0x12222011, 0x12222110,\n    0x12222111, 0x12222211, 0x10212021, 0x10212122, 0x10212220, 0x11202021, 0x11202120, 0x11202221,\n    0x11212020, 0x11212121, 0x11212220, 0x11212222, 0x11222120, 0x11222121, 0x11222221, 0x12202122,\n    0x12212120, 0x12212220, 0x12212222, 0x12222122, 0x20000000, 0x20000002, 0x20000200, 0x20000202,\n    0x20020000, 0x20020002, 0x20020200, 0x20020202, 0x21000101, 0x21010000, 0x21010001, 0x21010100,\n    0x21010102, 0x21010201, 0x21020101, 0x22000000, 0x22000002, 0x22000200, 0x22000202, 0x22010101,\n    0x22020000, 0x22020002, 0x22020200, 0x22020202, 0x20000111, 0x20010011, 0x20010110, 0x20010112,\n    0x20010211, 0x20020111, 0x21000011, 0x21000110, 0x21000211, 0x21010010, 0x21010012, 0x21010111,\n    0x21010112, 0x21010210, 0x21010211, 0x21020110, 0x21020112, 0x21020211, 0x22000111, 0x22000211,\n    0x22010110, 0x22010112, 0x22010211, 0x22020111, 0x20000020, 0x20000022, 0x20000220, 0x20000222,\n    0x20010121, 0x20020020, 0x20020022, 0x20020220, 0x20020222, 0x21010021, 0x21010120, 0x21010221,\n    0x21020121, 0x22000020, 0x22000022, 0x22000220, 0x22000222, 0x22010121, 0x22020020, 0x22020022,\n    0x22020220, 0x22020222, 0x20011100, 0x20011201, 0x21001001, 0x21001100, 0x21011001, 0x21011101,\n    0x21011202, 0x21021001, 0x21021100, 0x21021201, 0x22011100, 0x22011201, 0x20001011, 0x20001211,\n    0x20011012, 0x20011111, 0x20011212, 0x20021112, 0x20021211, 0x21001010, 0x21001011, 0x21001111,\n    0x21001210, 0x21011011, 0x21011110, 0x21011111, 0x21011112, 0x21011211, 0x21011212, 0x21021111,\n    0x21021112, 0x21021210, 0x21021212, 0x22001011, 0x22001110, 0x22001112, 0x22001211, 0x22011010,\n    0x22011012, 0x22011111, 0x22011210, 0x22021112, 0x20011021, 0x20011122, 0x20011221, 0x20021121,\n    0x21001021, 0x21001120, 0x21001221, 0x21001222, 0x21011020, 0x21011121, 0x21011221, 0x21011222,\n    0x21021021, 0x21021122, 0x21021222, 0x22001121, 0x22011021, 0x22011222, 0x22021120, 0x20002000,\n    0x20002002, 0x20002200, 0x20002202, 0x20012101, 0x20022000, 0x20022002, 0x20022200, 0x20022202,\n    0x21002001, 0x21002101, 0x21012001, 0x21012100, 0x21012201, 0x21022101, 0x21022201, 0x22002000,\n    0x22002002, 0x22002200, 0x22002202, 0x22012101, 0x22022000, 0x22022002, 0x22022200, 0x22022202,\n    0x20002111, 0x20002112, 0x20012011, 0x20012110, 0x20012112, 0x20022111, 0x21002011, 0x21002110,\n    0x21002112, 0x21002211, 0x21012010, 0x21012012, 0x21012111, 0x21012212, 0x21022011, 0x21022110,\n    0x22002111, 0x22012112, 0x22012211, 0x22022111, 0x20002020, 0x20002022, 0x20002220, 0x20002222,\n    0x20012121, 0x20022020, 0x20022022, 0x20022220, 0x20022222, 0x21002121, 0x21012021, 0x21012120,\n    0x21012122, 0x22002020, 0x22002022, 0x22002220, 0x22002222, 0x22012121, 0x22022020, 0x22022022,\n    0x22022220, 0x22022222, 0x20100101, 0x20110001, 0x20110102, 0x20110200, 0x20110201, 0x20120101,\n    0x21100001, 0x21100102, 0x21100201, 0x21110101, 0x21110200, 0x21110202, 0x21120201, 0x21120202,\n    0x22100101, 0x22110001, 0x22110100, 0x22110102, 0x22110201, 0x22120101, 0x20100011, 0x20100110,\n    0x20100112, 0x20100211, 0x20110010, 0x20110111, 0x20110210, 0x20110212, 0x20120011, 0x20120110,\n    0x20120112, 0x20120211, 0x21100010, 0x21100111, 0x21110010, 0x21110011, 0x21110110, 0x21110111,\n    0x21110112, 0x21110211, 0x21120012, 0x21120111, 0x22100110, 0x22100112, 0x22110012, 0x22110111,\n    0x22110210, 0x22120011, 0x22120110, 0x22120112, 0x22120211, 0x20100121, 0x20110021, 0x20110120,\n    0x20110221, 0x20120121, 0x21100120, 0x21100122, 0x21100221, 0x21110020, 0x21110022, 0x21110121,\n    0x21110220, 0x21120122, 0x21120221, 0x22100121, 0x22110120, 0x22110122, 0x22120221, 0x20101001,\n    0x20101100, 0x20101102, 0x20111000, 0x20111101, 0x20111200, 0x20121102, 0x21101000, 0x21101202,\n    0x21111001, 0x21111100, 0x21111101, 0x21111102, 0x21111200, 0x21111201, 0x21121000, 0x21121001,\n    0x21121002, 0x21121101, 0x22101100, 0x22101102, 0x22111002, 0x22111100, 0x22111101, 0x22111200,\n    0x22121001, 0x22121201, 0x20101010, 0x20101111, 0x20101210, 0x20101212, 0x20111010, 0x20111011,\n    0x20111110, 0x20111111, 0x20111112, 0x20111211, 0x20121011, 0x20121111, 0x20121211, 0x20121212,\n    0x21101011, 0x21101110, 0x21101111, 0x21101112, 0x21101211, 0x21111010, 0x21111011, 0x21111012,\n    0x21111110, 0x21111111, 0x21111112, 0x21111210, 0x21111211, 0x21111212, 0x21121011, 0x21121110,\n    0x21121111, 0x21121112, 0x21121211, 0x22101011, 0x22101111, 0x22101210, 0x22111011, 0x22111012,\n    0x22111110, 0x22111111, 0x22111112, 0x22111211, 0x22111212, 0x22121010, 0x22121012, 0x22121111,\n    0x22121210, 0x22121212, 0x20101021, 0x20101120, 0x20111020, 0x20111121, 0x20111221, 0x20121020,\n    0x20121122, 0x20121221, 0x21101121, 0x21101220, 0x21101221, 0x21111021, 0x21111022, 0x21111121,\n    0x21111122, 0x21111221, 0x21121121, 0x21121220, 0x22101022, 0x22101120, 0x22101221, 0x22101222,\n    0x22111022, 0x22111120, 0x22111121, 0x22121120, 0x22121122, 0x22121221, 0x20102101, 0x20112102,\n    0x20112201, 0x20122101, 0x21102001, 0x21102102, 0x21112000, 0x21112002, 0x21112101, 0x21112102,\n    0x21112202, 0x21122100, 0x21122101, 0x22102101, 0x22112001, 0x22112102, 0x22112201, 0x22122101,\n    0x20102110, 0x20102112, 0x20102211, 0x20112010, 0x20112012, 0x20112111, 0x20112210, 0x20112212,\n    0x20122010, 0x20122011, 0x20122110, 0x20122112, 0x21102010, 0x21102012, 0x21102111, 0x21102210,\n    0x21102212, 0x21112011, 0x21112110, 0x21112111, 0x21112112, 0x21112211, 0x21122012, 0x21122111,\n    0x21122112, 0x21122212, 0x22102011, 0x22102110, 0x22112010, 0x22112012, 0x22112111, 0x22112212,\n    0x22122011, 0x22122112, 0x20102121, 0x20112121, 0x20122121, 0x21102120, 0x21102122, 0x21102221,\n    0x21112020, 0x21112121, 0x21112220, 0x21122021, 0x22102121, 0x22112021, 0x22112120, 0x22112121,\n    0x22112122, 0x20200000, 0x20200002, 0x20200200, 0x20200202, 0x20210101, 0x20220000, 0x20220002,\n    0x20220200, 0x20220202, 0x21200101, 0x21210001, 0x21210100, 0x21210102, 0x21210201, 0x22200000,\n    0x22200002, 0x22200200, 0x22200202, 0x22210101, 0x22220000, 0x22220002, 0x22220200, 0x22220202,\n    0x20200111, 0x20200211, 0x20210011, 0x20210110, 0x20210112, 0x20210211, 0x20210212, 0x21200112,\n    0x21200211, 0x21210011, 0x21210111, 0x21210210, 0x21210212, 0x21220011, 0x21220110, 0x22200111,\n    0x22210010, 0x22210012, 0x22210112, 0x22210211, 0x20200022, 0x20200220, 0x20200222, 0x20210020,\n    0x20210221, 0x20220022, 0x20220220, 0x20220222, 0x21200121, 0x21210021, 0x21210122, 0x21210221,\n    0x21220121, 0x22200020, 0x22200022, 0x22200220, 0x22200222, 0x22210121, 0x22220020, 0x22220022,\n    0x22220220, 0x22220222, 0x20211201, 0x20221101, 0x21201001, 0x21201100, 0x21211000, 0x21211100,\n    0x21211101, 0x21211200, 0x21211202, 0x21221001, 0x21221101, 0x21221102, 0x21221200, 0x21221201,\n    0x22201101, 0x20201112, 0x20201211, 0x20211010, 0x20211012, 0x20211111, 0x20211210, 0x20221112,\n    0x20221211, 0x21201012, 0x21201111, 0x21211011, 0x21211110, 0x21211111, 0x21211112, 0x21211211,\n    0x21221111, 0x21221212, 0x22201011, 0x22201110, 0x22201111, 0x22201112, 0x22201211, 0x22211012,\n    0x22211111, 0x22211210, 0x20201121, 0x20211021, 0x20211122, 0x20211222, 0x20221021, 0x20221121,\n    0x21201120, 0x21201122, 0x21201222, 0x21211022, 0x21211121, 0x21211122, 0x21211220, 0x21221020,\n    0x21221022, 0x22201122, 0x22211020, 0x22211121, 0x22211122, 0x22211221, 0x22221021, 0x22221120,\n    0x22221122, 0x20202000, 0x20202002, 0x20202200, 0x20202202, 0x20222000, 0x20222002, 0x20222200,\n    0x20222202, 0x21212001, 0x21212100, 0x21212102, 0x21212201, 0x22202000, 0x22202002, 0x22202200,\n    0x22202202, 0x22212101, 0x22222000, 0x22222002, 0x22222200, 0x22222202, 0x20202111, 0x20212110,\n    0x20212211, 0x20222011, 0x20222111, 0x21202011, 0x21212010, 0x21212111, 0x21212212, 0x21222011,\n    0x21222112, 0x21222211, 0x22212010, 0x22212112, 0x20202020, 0x20202022, 0x20202220, 0x20202222,\n    0x20222020, 0x20222022, 0x20222220, 0x20222222, 0x21212021, 0x21212120, 0x21212122, 0x22202020,\n    0x22202022, 0x22202220, 0x22202222, 0x22212121, 0x22222020, 0x22222022, 0x22222220, 0x22222222,\nGGML_TABLE_END()\n#endif\n\n#endif // GGML_COMMON_IMPL\n#endif // GGML_COMMON_IMPL\n` was unexpected", "path": "llama/ggml-common.h", "type": "Syntax error"}, {"code": 2, "level": "warn", "message": "Timeout when running cpp.lang.security.strings.wide-to-narrow-string-mismatch.wide-to-narrow-string-mismatch on llama/clip.cpp:\n ", "path": "llama/clip.cpp", "rule_id": "cpp.lang.security.strings.wide-to-narrow-string-mismatch.wide-to-narrow-string-mismatch", "type": "Timeout"}, {"code": 2, "level": "warn", "message": "Timeout when running cpp.lang.security.use-after-free.local-variable-malloc-free.local-variable-malloc-free on llama/clip.cpp:\n ", "path": "llama/clip.cpp", "rule_id": "cpp.lang.security.use-after-free.local-variable-malloc-free.local-variable-malloc-free", "type": "Timeout"}, {"code": 2, "level": "warn", "message": "Timeout when running cpp.lang.security.use-after-free.local-variable-new-delete.local-variable-new-delete on llama/clip.cpp:\n ", "path": "llama/clip.cpp", "rule_id": "cpp.lang.security.use-after-free.local-variable-new-delete.local-variable-new-delete", "type": "Timeout"}, {"code": 3, "level": "warn", "message": "Syntax error at line llama/ggml.h:359:\n `void` was unexpected", "path": "llama/ggml.h", "spans": [{"end": {"col": 18, "line": 359, "offset": 4}, "file": "llama/ggml.h", "start": {"col": 14, "line": 359, "offset": 0}}, {"end": {"col": 34, "line": 369, "offset": 20}, "file": "llama/ggml.h", "start": {"col": 14, "line": 369, "offset": 0}}, {"end": {"col": 19, "line": 374, "offset": 5}, "file": "llama/ggml.h", "start": {"col": 14, "line": 374, "offset": 0}}, {"end": {"col": 18, "line": 376, "offset": 4}, "file": "llama/ggml.h", "start": {"col": 14, "line": 376, "offset": 0}}, {"end": {"col": 18, "line": 377, "offset": 4}, "file": "llama/ggml.h", "start": {"col": 14, "line": 377, "offset": 0}}, {"end": {"col": 19, "line": 382, "offset": 5}, "file": "llama/ggml.h", "start": {"col": 14, "line": 382, "offset": 0}}, {"end": {"col": 18, "line": 383, "offset": 4}, "file": "llama/ggml.h", "start": {"col": 14, "line": 383, "offset": 0}}, {"end": {"col": 18, "line": 384, "offset": 4}, "file": "llama/ggml.h", "start": {"col": 14, "line": 384, "offset": 0}}, {"end": {"col": 18, "line": 385, "offset": 4}, "file": "llama/ggml.h", "start": {"col": 14, "line": 385, "offset": 0}}, {"end": {"col": 56, "line": 617, "offset": 106}, "file": "llama/ggml.h", "start": {"col": 5, "line": 614, "offset": 0}}, {"end": {"col": 122, "line": 617, "offset": 1}, "file": "llama/ggml.h", "start": {"col": 121, "line": 617, "offset": 0}}, {"end": {"col": 18, "line": 727, "offset": 4}, "file": "llama/ggml.h", "start": {"col": 14, "line": 727, "offset": 0}}, {"end": {"col": 18, "line": 731, "offset": 4}, "file": "llama/ggml.h", "start": {"col": 14, "line": 731, "offset": 0}}, {"end": {"col": 21, "line": 732, "offset": 7}, "file": "llama/ggml.h", "start": {"col": 14, "line": 732, "offset": 0}}, {"end": {"col": 21, "line": 733, "offset": 7}, "file": "llama/ggml.h", "start": {"col": 14, "line": 733, "offset": 0}}, {"end": {"col": 21, "line": 734, "offset": 7}, "file": "llama/ggml.h", "start": {"col": 14, "line": 734, "offset": 0}}, {"end": {"col": 21, "line": 735, "offset": 7}, "file": "llama/ggml.h", "start": {"col": 14, "line": 735, "offset": 0}}, {"end": {"col": 18, "line": 738, "offset": 4}, "file": "llama/ggml.h", "start": {"col": 14, "line": 738, "offset": 0}}, {"end": {"col": 18, "line": 740, "offset": 4}, "file": "llama/ggml.h", "start": {"col": 14, "line": 740, "offset": 0}}, {"end": {"col": 18, "line": 741, "offset": 4}, "file": "llama/ggml.h", "start": {"col": 14, "line": 741, "offset": 0}}, {"end": {"col": 18, "line": 743, "offset": 4}, "file": "llama/ggml.h", "start": {"col": 14, "line": 743, "offset": 0}}, {"end": {"col": 18, "line": 744, "offset": 4}, "file": "llama/ggml.h", "start": {"col": 14, "line": 744, "offset": 0}}, {"end": {"col": 31, "line": 746, "offset": 17}, "file": "llama/ggml.h", "start": {"col": 14, "line": 746, "offset": 0}}, {"end": {"col": 31, "line": 747, "offset": 17}, "file": "llama/ggml.h", "start": {"col": 14, "line": 747, "offset": 0}}, {"end": {"col": 30, "line": 748, "offset": 16}, "file": "llama/ggml.h", "start": {"col": 14, "line": 748, "offset": 0}}, {"end": {"col": 30, "line": 749, "offset": 6}, "file": "llama/ggml.h", "start": {"col": 24, "line": 749, "offset": 0}}, {"end": {"col": 31, "line": 751, "offset": 17}, "file": "llama/ggml.h", "start": {"col": 14, "line": 751, "offset": 0}}, {"end": {"col": 30, "line": 752, "offset": 16}, "file": "llama/ggml.h", "start": {"col": 14, "line": 752, "offset": 0}}, {"end": {"col": 30, "line": 753, "offset": 16}, "file": "llama/ggml.h", "start": {"col": 14, "line": 753, "offset": 0}}, {"end": {"col": 58, "line": 756, "offset": 74}, "file": "llama/ggml.h", "start": {"col": 5, "line": 755, "offset": 0}}, {"end": {"col": 35, "line": 757, "offset": 1}, "file": "llama/ggml.h", "start": {"col": 34, "line": 757, "offset": 0}}, {"end": {"col": 34, "line": 759, "offset": 20}, "file": "llama/ggml.h", "start": {"col": 14, "line": 759, "offset": 0}}, {"end": {"col": 34, "line": 760, "offset": 20}, "file": "llama/ggml.h", "start": {"col": 14, "line": 760, "offset": 0}}, {"end": {"col": 34, "line": 761, "offset": 4}, "file": "llama/ggml.h", "start": {"col": 30, "line": 761, "offset": 0}}, {"end": {"col": 34, "line": 763, "offset": 4}, "file": "llama/ggml.h", "start": {"col": 30, "line": 763, "offset": 0}}, {"end": {"col": 34, "line": 764, "offset": 20}, "file": "llama/ggml.h", "start": {"col": 14, "line": 764, "offset": 0}}, {"end": {"col": 30, "line": 766, "offset": 16}, "file": "llama/ggml.h", "start": {"col": 14, "line": 766, "offset": 0}}, {"end": {"col": 28, "line": 768, "offset": 14}, "file": "llama/ggml.h", "start": {"col": 14, "line": 768, "offset": 0}}, {"end": {"col": 28, "line": 771, "offset": 14}, "file": "llama/ggml.h", "start": {"col": 14, "line": 771, "offset": 0}}, {"end": {"col": 28, "line": 773, "offset": 14}, "file": "llama/ggml.h", "start": {"col": 14, "line": 773, "offset": 0}}, {"end": {"col": 28, "line": 774, "offset": 14}, "file": "llama/ggml.h", "start": {"col": 14, "line": 774, "offset": 0}}, {"end": {"col": 28, "line": 775, "offset": 14}, "file": "llama/ggml.h", "start": {"col": 14, "line": 775, "offset": 0}}, {"end": {"col": 28, "line": 776, "offset": 4}, "file": "llama/ggml.h", "start": {"col": 24, "line": 776, "offset": 0}}, {"end": {"col": 28, "line": 777, "offset": 4}, "file": "llama/ggml.h", "start": {"col": 24, "line": 777, "offset": 0}}, {"end": {"col": 28, "line": 778, "offset": 4}, "file": "llama/ggml.h", "start": {"col": 24, "line": 778, "offset": 0}}, {"end": {"col": 28, "line": 779, "offset": 4}, "file": "llama/ggml.h", "start": {"col": 24, "line": 779, "offset": 0}}, {"end": {"col": 27, "line": 780, "offset": 3}, "file": "llama/ggml.h", "start": {"col": 24, "line": 780, "offset": 0}}, {"end": {"col": 28, "line": 782, "offset": 14}, "file": "llama/ggml.h", "start": {"col": 14, "line": 782, "offset": 0}}, {"end": {"col": 28, "line": 783, "offset": 14}, "file": "llama/ggml.h", "start": {"col": 14, "line": 783, "offset": 0}}, {"end": {"col": 28, "line": 784, "offset": 14}, "file": "llama/ggml.h", "start": {"col": 14, "line": 784, "offset": 0}}, {"end": {"col": 28, "line": 785, "offset": 14}, "file": "llama/ggml.h", "start": {"col": 14, "line": 785, "offset": 0}}, {"end": {"col": 18, "line": 787, "offset": 4}, "file": "llama/ggml.h", "start": {"col": 14, "line": 787, "offset": 0}}, {"end": {"col": 18, "line": 788, "offset": 4}, "file": "llama/ggml.h", "start": {"col": 14, "line": 788, "offset": 0}}, {"end": {"col": 18, "line": 790, "offset": 4}, "file": "llama/ggml.h", "start": {"col": 14, "line": 790, "offset": 0}}, {"end": {"col": 20, "line": 793, "offset": 6}, "file": "llama/ggml.h", "start": {"col": 14, "line": 793, "offset": 0}}, {"end": {"col": 18, "line": 795, "offset": 4}, "file": "llama/ggml.h", "start": {"col": 14, "line": 795, "offset": 0}}, {"end": {"col": 33, "line": 799, "offset": 19}, "file": "llama/ggml.h", "start": {"col": 14, "line": 799, "offset": 0}}, {"end": {"col": 18, "line": 800, "offset": 4}, "file": "llama/ggml.h", "start": {"col": 14, "line": 800, "offset": 0}}, {"end": {"col": 20, "line": 802, "offset": 6}, "file": "llama/ggml.h", "start": {"col": 14, "line": 802, "offset": 0}}, {"end": {"col": 20, "line": 804, "offset": 6}, "file": "llama/ggml.h", "start": {"col": 14, "line": 804, "offset": 0}}, {"end": {"col": 18, "line": 805, "offset": 4}, "file": "llama/ggml.h", "start": {"col": 14, "line": 805, "offset": 0}}, {"end": {"col": 18, "line": 806, "offset": 4}, "file": "llama/ggml.h", "start": {"col": 14, "line": 806, "offset": 0}}, {"end": {"col": 18, "line": 808, "offset": 4}, "file": "llama/ggml.h", "start": {"col": 14, "line": 808, "offset": 0}}, {"end": {"col": 20, "line": 809, "offset": 6}, "file": "llama/ggml.h", "start": {"col": 14, "line": 809, "offset": 0}}, {"end": {"col": 20, "line": 810, "offset": 6}, "file": "llama/ggml.h", "start": {"col": 14, "line": 810, "offset": 0}}, {"end": {"col": 32, "line": 812, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 812, "offset": 0}}, {"end": {"col": 32, "line": 818, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 818, "offset": 0}}, {"end": {"col": 32, "line": 823, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 823, "offset": 0}}, {"end": {"col": 32, "line": 829, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 829, "offset": 0}}, {"end": {"col": 32, "line": 836, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 836, "offset": 0}}, {"end": {"col": 32, "line": 844, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 844, "offset": 0}}, {"end": {"col": 32, "line": 845, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 845, "offset": 0}}, {"end": {"col": 32, "line": 847, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 847, "offset": 0}}, {"end": {"col": 32, "line": 848, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 848, "offset": 0}}, {"end": {"col": 32, "line": 851, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 851, "offset": 0}}, {"end": {"col": 32, "line": 852, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 852, "offset": 0}}, {"end": {"col": 32, "line": 853, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 853, "offset": 0}}, {"end": {"col": 32, "line": 855, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 855, "offset": 0}}, {"end": {"col": 32, "line": 856, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 856, "offset": 0}}, {"end": {"col": 32, "line": 857, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 857, "offset": 0}}, {"end": {"col": 18, "line": 860, "offset": 4}, "file": "llama/ggml.h", "start": {"col": 14, "line": 860, "offset": 0}}, {"end": {"col": 21, "line": 862, "offset": 7}, "file": "llama/ggml.h", "start": {"col": 14, "line": 862, "offset": 0}}, {"end": {"col": 18, "line": 863, "offset": 4}, "file": "llama/ggml.h", "start": {"col": 14, "line": 863, "offset": 0}}, {"end": {"col": 21, "line": 865, "offset": 7}, "file": "llama/ggml.h", "start": {"col": 14, "line": 865, "offset": 0}}, {"end": {"col": 18, "line": 866, "offset": 4}, "file": "llama/ggml.h", "start": {"col": 14, "line": 866, "offset": 0}}, {"end": {"col": 19, "line": 868, "offset": 5}, "file": "llama/ggml.h", "start": {"col": 14, "line": 868, "offset": 0}}, {"end": {"col": 18, "line": 869, "offset": 4}, "file": "llama/ggml.h", "start": {"col": 14, "line": 869, "offset": 0}}, {"end": {"col": 19, "line": 871, "offset": 5}, "file": "llama/ggml.h", "start": {"col": 14, "line": 871, "offset": 0}}, {"end": {"col": 18, "line": 872, "offset": 4}, "file": "llama/ggml.h", "start": {"col": 14, "line": 872, "offset": 0}}, {"end": {"col": 18, "line": 874, "offset": 4}, "file": "llama/ggml.h", "start": {"col": 14, "line": 874, "offset": 0}}, {"end": {"col": 19, "line": 875, "offset": 5}, "file": "llama/ggml.h", "start": {"col": 14, "line": 875, "offset": 0}}, {"end": {"col": 42, "line": 877, "offset": 28}, "file": "llama/ggml.h", "start": {"col": 14, "line": 877, "offset": 0}}, {"end": {"col": 24, "line": 879, "offset": 4}, "file": "llama/ggml.h", "start": {"col": 20, "line": 879, "offset": 0}}, {"end": {"col": 32, "line": 880, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 880, "offset": 0}}, {"end": {"col": 32, "line": 882, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 882, "offset": 0}}, {"end": {"col": 32, "line": 888, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 888, "offset": 0}}, {"end": {"col": 32, "line": 893, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 893, "offset": 0}}, {"end": {"col": 32, "line": 897, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 897, "offset": 0}}, {"end": {"col": 32, "line": 902, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 902, "offset": 0}}, {"end": {"col": 32, "line": 907, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 907, "offset": 0}}, {"end": {"col": 32, "line": 913, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 913, "offset": 0}}, {"end": {"col": 32, "line": 918, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 918, "offset": 0}}, {"end": {"col": 32, "line": 926, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 926, "offset": 0}}, {"end": {"col": 32, "line": 935, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 935, "offset": 0}}, {"end": {"col": 32, "line": 944, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 944, "offset": 0}}, {"end": {"col": 32, "line": 949, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 949, "offset": 0}}, {"end": {"col": 32, "line": 954, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 954, "offset": 0}}, {"end": {"col": 32, "line": 959, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 959, "offset": 0}}, {"end": {"col": 32, "line": 964, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 964, "offset": 0}}, {"end": {"col": 32, "line": 969, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 969, "offset": 0}}, {"end": {"col": 32, "line": 974, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 974, "offset": 0}}, {"end": {"col": 32, "line": 978, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 978, "offset": 0}}, {"end": {"col": 32, "line": 982, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 982, "offset": 0}}, {"end": {"col": 32, "line": 986, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 986, "offset": 0}}, {"end": {"col": 32, "line": 990, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 990, "offset": 0}}, {"end": {"col": 32, "line": 994, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 994, "offset": 0}}, {"end": {"col": 32, "line": 998, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 998, "offset": 0}}, {"end": {"col": 32, "line": 1002, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1002, "offset": 0}}, {"end": {"col": 32, "line": 1006, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1006, "offset": 0}}, {"end": {"col": 32, "line": 1010, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1010, "offset": 0}}, {"end": {"col": 32, "line": 1015, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1015, "offset": 0}}, {"end": {"col": 32, "line": 1020, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1020, "offset": 0}}, {"end": {"col": 32, "line": 1025, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1025, "offset": 0}}, {"end": {"col": 32, "line": 1030, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1030, "offset": 0}}, {"end": {"col": 32, "line": 1036, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1036, "offset": 0}}, {"end": {"col": 32, "line": 1042, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1042, "offset": 0}}, {"end": {"col": 32, "line": 1049, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1049, "offset": 0}}, {"end": {"col": 32, "line": 1055, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1055, "offset": 0}}, {"end": {"col": 32, "line": 1059, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1059, "offset": 0}}, {"end": {"col": 32, "line": 1063, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1063, "offset": 0}}, {"end": {"col": 32, "line": 1067, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1067, "offset": 0}}, {"end": {"col": 32, "line": 1071, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1071, "offset": 0}}, {"end": {"col": 32, "line": 1075, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1075, "offset": 0}}, {"end": {"col": 32, "line": 1079, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1079, "offset": 0}}, {"end": {"col": 32, "line": 1083, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1083, "offset": 0}}, {"end": {"col": 32, "line": 1087, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1087, "offset": 0}}, {"end": {"col": 32, "line": 1091, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1091, "offset": 0}}, {"end": {"col": 32, "line": 1095, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1095, "offset": 0}}, {"end": {"col": 32, "line": 1099, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1099, "offset": 0}}, {"end": {"col": 32, "line": 1103, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1103, "offset": 0}}, {"end": {"col": 32, "line": 1107, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1107, "offset": 0}}, {"end": {"col": 32, "line": 1111, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1111, "offset": 0}}, {"end": {"col": 32, "line": 1115, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1115, "offset": 0}}, {"end": {"col": 32, "line": 1119, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1119, "offset": 0}}, {"end": {"col": 32, "line": 1123, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1123, "offset": 0}}, {"end": {"col": 32, "line": 1127, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1127, "offset": 0}}, {"end": {"col": 32, "line": 1131, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1131, "offset": 0}}, {"end": {"col": 32, "line": 1135, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1135, "offset": 0}}, {"end": {"col": 32, "line": 1139, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1139, "offset": 0}}, {"end": {"col": 32, "line": 1143, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1143, "offset": 0}}, {"end": {"col": 32, "line": 1149, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1149, "offset": 0}}, {"end": {"col": 32, "line": 1155, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1155, "offset": 0}}, {"end": {"col": 32, "line": 1160, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1160, "offset": 0}}, {"end": {"col": 32, "line": 1164, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1164, "offset": 0}}, {"end": {"col": 32, "line": 1168, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1168, "offset": 0}}, {"end": {"col": 32, "line": 1173, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1173, "offset": 0}}, {"end": {"col": 32, "line": 1178, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1178, "offset": 0}}, {"end": {"col": 32, "line": 1183, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1183, "offset": 0}}, {"end": {"col": 32, "line": 1188, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1188, "offset": 0}}, {"end": {"col": 32, "line": 1195, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1195, "offset": 0}}, {"end": {"col": 32, "line": 1201, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1201, "offset": 0}}, {"end": {"col": 32, "line": 1209, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1209, "offset": 0}}, {"end": {"col": 32, "line": 1218, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1218, "offset": 0}}, {"end": {"col": 18, "line": 1225, "offset": 4}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1225, "offset": 0}}, {"end": {"col": 32, "line": 1230, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1230, "offset": 0}}, {"end": {"col": 32, "line": 1239, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1239, "offset": 0}}, {"end": {"col": 32, "line": 1248, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1248, "offset": 0}}, {"end": {"col": 32, "line": 1254, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1254, "offset": 0}}, {"end": {"col": 32, "line": 1260, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1260, "offset": 0}}, {"end": {"col": 32, "line": 1270, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1270, "offset": 0}}, {"end": {"col": 32, "line": 1279, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1279, "offset": 0}}, {"end": {"col": 32, "line": 1285, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1285, "offset": 0}}, {"end": {"col": 32, "line": 1292, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1292, "offset": 0}}, {"end": {"col": 32, "line": 1300, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1300, "offset": 0}}, {"end": {"col": 32, "line": 1308, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1308, "offset": 0}}, {"end": {"col": 32, "line": 1313, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1313, "offset": 0}}, {"end": {"col": 32, "line": 1319, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1319, "offset": 0}}, {"end": {"col": 32, "line": 1324, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1324, "offset": 0}}, {"end": {"col": 32, "line": 1329, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1329, "offset": 0}}, {"end": {"col": 32, "line": 1335, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1335, "offset": 0}}, {"end": {"col": 32, "line": 1342, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1342, "offset": 0}}, {"end": {"col": 32, "line": 1352, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1352, "offset": 0}}, {"end": {"col": 32, "line": 1359, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1359, "offset": 0}}, {"end": {"col": 32, "line": 1364, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1364, "offset": 0}}, {"end": {"col": 32, "line": 1372, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1372, "offset": 0}}, {"end": {"col": 32, "line": 1379, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1379, "offset": 0}}, {"end": {"col": 32, "line": 1388, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1388, "offset": 0}}, {"end": {"col": 32, "line": 1394, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1394, "offset": 0}}, {"end": {"col": 32, "line": 1402, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1402, "offset": 0}}, {"end": {"col": 32, "line": 1412, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1412, "offset": 0}}, {"end": {"col": 32, "line": 1424, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1424, "offset": 0}}, {"end": {"col": 32, "line": 1433, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1433, "offset": 0}}, {"end": {"col": 32, "line": 1438, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1438, "offset": 0}}, {"end": {"col": 32, "line": 1443, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1443, "offset": 0}}, {"end": {"col": 32, "line": 1449, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1449, "offset": 0}}, {"end": {"col": 32, "line": 1454, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1454, "offset": 0}}, {"end": {"col": 32, "line": 1460, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1460, "offset": 0}}, {"end": {"col": 32, "line": 1466, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1466, "offset": 0}}, {"end": {"col": 32, "line": 1472, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1472, "offset": 0}}, {"end": {"col": 32, "line": 1477, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1477, "offset": 0}}, {"end": {"col": 32, "line": 1482, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1482, "offset": 0}}, {"end": {"col": 32, "line": 1489, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1489, "offset": 0}}, {"end": {"col": 32, "line": 1496, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1496, "offset": 0}}, {"end": {"col": 32, "line": 1502, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1502, "offset": 0}}, {"end": {"col": 32, "line": 1512, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1512, "offset": 0}}, {"end": {"col": 32, "line": 1520, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1520, "offset": 0}}, {"end": {"col": 32, "line": 1529, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1529, "offset": 0}}, {"end": {"col": 32, "line": 1545, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1545, "offset": 0}}, {"end": {"col": 48, "line": 1560, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 30, "line": 1560, "offset": 0}}, {"end": {"col": 38, "line": 1573, "offset": 29}, "file": "llama/ggml.h", "start": {"col": 9, "line": 1573, "offset": 0}}, {"end": {"col": 48, "line": 1575, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 30, "line": 1575, "offset": 0}}, {"end": {"col": 46, "line": 1588, "offset": 37}, "file": "llama/ggml.h", "start": {"col": 9, "line": 1588, "offset": 0}}, {"end": {"col": 103, "line": 1592, "offset": 133}, "file": "llama/ggml.h", "start": {"col": 15, "line": 1591, "offset": 0}}, {"end": {"col": 40, "line": 1617, "offset": 908}, "file": "llama/ggml.h", "start": {"col": 5, "line": 1596, "offset": 0}}, {"end": {"col": 39, "line": 1664, "offset": 2189}, "file": "llama/ggml.h", "start": {"col": 5, "line": 1621, "offset": 0}}, {"end": {"col": 38, "line": 1673, "offset": 276}, "file": "llama/ggml.h", "start": {"col": 5, "line": 1668, "offset": 0}}, {"end": {"col": 39, "line": 1681, "offset": 338}, "file": "llama/ggml.h", "start": {"col": 5, "line": 1675, "offset": 0}}, {"end": {"col": 39, "line": 1692, "offset": 538}, "file": "llama/ggml.h", "start": {"col": 5, "line": 1683, "offset": 0}}, {"end": {"col": 38, "line": 1706, "offset": 163}, "file": "llama/ggml.h", "start": {"col": 5, "line": 1703, "offset": 0}}, {"end": {"col": 24, "line": 1727, "offset": 406}, "file": "llama/ggml.h", "start": {"col": 5, "line": 1716, "offset": 0}}, {"end": {"col": 7, "line": 1731, "offset": 2}, "file": "llama/ggml.h", "start": {"col": 5, "line": 1731, "offset": 0}}, {"end": {"col": 39, "line": 1739, "offset": 288}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1733, "offset": 0}}, {"end": {"col": 39, "line": 1764, "offset": 855}, "file": "llama/ggml.h", "start": {"col": 5, "line": 1743, "offset": 0}}, {"end": {"col": 49, "line": 1772, "offset": 168}, "file": "llama/ggml.h", "start": {"col": 5, "line": 1769, "offset": 0}}, {"end": {"col": 40, "line": 1783, "offset": 280}, "file": "llama/ggml.h", "start": {"col": 5, "line": 1777, "offset": 0}}, {"end": {"col": 38, "line": 1792, "offset": 264}, "file": "llama/ggml.h", "start": {"col": 5, "line": 1786, "offset": 0}}, {"end": {"col": 38, "line": 1801, "offset": 266}, "file": "llama/ggml.h", "start": {"col": 5, "line": 1795, "offset": 0}}, {"end": {"col": 27, "line": 1813, "offset": 269}, "file": "llama/ggml.h", "start": {"col": 5, "line": 1806, "offset": 0}}, {"end": {"col": 7, "line": 1816, "offset": 2}, "file": "llama/ggml.h", "start": {"col": 5, "line": 1816, "offset": 0}}, {"end": {"col": 41, "line": 1827, "offset": 361}, "file": "llama/ggml.h", "start": {"col": 14, "line": 1818, "offset": 0}}, {"end": {"col": 28, "line": 1835, "offset": 184}, "file": "llama/ggml.h", "start": {"col": 5, "line": 1830, "offset": 0}}, {"end": {"col": 40, "line": 1854, "offset": 500}, "file": "llama/ggml.h", "start": {"col": 5, "line": 1842, "offset": 0}}, {"end": {"col": 38, "line": 1877, "offset": 753}, "file": "llama/ggml.h", "start": {"col": 5, "line": 1857, "offset": 0}}, {"end": {"col": 38, "line": 1888, "offset": 158}, "file": "llama/ggml.h", "start": {"col": 5, "line": 1885, "offset": 0}}, {"end": {"col": 32, "line": 1907, "offset": 551}, "file": "llama/ggml.h", "start": {"col": 5, "line": 1892, "offset": 0}}, {"end": {"col": 39, "line": 1914, "offset": 200}, "file": "llama/ggml.h", "start": {"col": 5, "line": 1910, "offset": 0}}, {"end": {"col": 48, "line": 1947, "offset": 1340}, "file": "llama/ggml.h", "start": {"col": 5, "line": 1917, "offset": 0}}, {"end": {"col": 41, "line": 1951, "offset": 32}, "file": "llama/ggml.h", "start": {"col": 9, "line": 1951, "offset": 0}}, {"end": {"col": 48, "line": 1953, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 30, "line": 1953, "offset": 0}}, {"end": {"col": 49, "line": 1957, "offset": 40}, "file": "llama/ggml.h", "start": {"col": 9, "line": 1957, "offset": 0}}, {"end": {"col": 48, "line": 1966, "offset": 326}, "file": "llama/ggml.h", "start": {"col": 20, "line": 1959, "offset": 0}}, {"end": {"col": 49, "line": 1971, "offset": 40}, "file": "llama/ggml.h", "start": {"col": 9, "line": 1971, "offset": 0}}, {"end": {"col": 41, "line": 2005, "offset": 1480}, "file": "llama/ggml.h", "start": {"col": 20, "line": 1973, "offset": 0}}, {"end": {"col": 48, "line": 2007, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 30, "line": 2007, "offset": 0}}, {"end": {"col": 10, "line": 2013, "offset": 1}, "file": "llama/ggml.h", "start": {"col": 9, "line": 2013, "offset": 0}}, {"end": {"col": 47, "line": 2013, "offset": 8}, "file": "llama/ggml.h", "start": {"col": 39, "line": 2013, "offset": 0}}, {"end": {"col": 17, "line": 2017, "offset": 47}, "file": "llama/ggml.h", "start": {"col": 48, "line": 2013, "offset": 0}}, {"end": {"col": 20, "line": 2017, "offset": 1}, "file": "llama/ggml.h", "start": {"col": 19, "line": 2017, "offset": 0}}, {"end": {"col": 17, "line": 2018, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 130, "line": 2017, "offset": 0}}, {"end": {"col": 20, "line": 2018, "offset": 1}, "file": "llama/ggml.h", "start": {"col": 19, "line": 2018, "offset": 0}}, {"end": {"col": 17, "line": 2019, "offset": 18}, "file": "llama/ggml.h", "start": {"col": 160, "line": 2018, "offset": 0}}, {"end": {"col": 20, "line": 2019, "offset": 1}, "file": "llama/ggml.h", "start": {"col": 19, "line": 2019, "offset": 0}}, {"end": {"col": 25, "line": 2021, "offset": 27}, "file": "llama/ggml.h", "start": {"col": 190, "line": 2019, "offset": 0}}, {"end": {"col": 29, "line": 2021, "offset": 2}, "file": "llama/ggml.h", "start": {"col": 27, "line": 2021, "offset": 0}}, {"end": {"col": 40, "line": 2025, "offset": 87}, "file": "llama/ggml.h", "start": {"col": 5, "line": 2024, "offset": 0}}, {"end": {"col": 40, "line": 2032, "offset": 102}, "file": "llama/ggml.h", "start": {"col": 46, "line": 2029, "offset": 0}}, {"end": {"col": 40, "line": 2039, "offset": 94}, "file": "llama/ggml.h", "start": {"col": 46, "line": 2036, "offset": 0}}, {"end": {"col": 44, "line": 2105, "offset": 2304}, "file": "llama/ggml.h", "start": {"col": 46, "line": 2044, "offset": 0}}, {"end": {"col": 49, "line": 2119, "offset": 601}, "file": "llama/ggml.h", "start": {"col": 103, "line": 2105, "offset": 0}}, {"end": {"col": 49, "line": 2121, "offset": 208}, "file": "llama/ggml.h", "start": {"col": 83, "line": 2119, "offset": 0}}, {"end": {"col": 49, "line": 2122, "offset": 50}, "file": "llama/ggml.h", "start": {"col": 112, "line": 2121, "offset": 0}}, {"end": {"col": 51, "line": 2123, "offset": 52}, "file": "llama/ggml.h", "start": {"col": 108, "line": 2122, "offset": 0}}, {"end": {"col": 51, "line": 2124, "offset": 118}, "file": "llama/ggml.h", "start": {"col": 85, "line": 2123, "offset": 0}}, {"end": {"col": 51, "line": 2126, "offset": 53}, "file": "llama/ggml.h", "start": {"col": 85, "line": 2124, "offset": 0}}, {"end": {"col": 51, "line": 2127, "offset": 52}, "file": "llama/ggml.h", "start": {"col": 83, "line": 2126, "offset": 0}}, {"end": {"col": 52, "line": 2128, "offset": 93}, "file": "llama/ggml.h", "start": {"col": 90, "line": 2127, "offset": 0}}, {"end": {"col": 71, "line": 2137, "offset": 468}, "file": "llama/ggml.h", "start": {"col": 83, "line": 2128, "offset": 0}}, {"end": {"col": 72, "line": 2138, "offset": 73}, "file": "llama/ggml.h", "start": {"col": 124, "line": 2137, "offset": 0}}, {"end": {"col": 63, "line": 2139, "offset": 64}, "file": "llama/ggml.h", "start": {"col": 158, "line": 2138, "offset": 0}}, {"end": {"col": 64, "line": 2140, "offset": 65}, "file": "llama/ggml.h", "start": {"col": 114, "line": 2139, "offset": 0}}, {"end": {"col": 65, "line": 2142, "offset": 177}, "file": "llama/ggml.h", "start": {"col": 110, "line": 2140, "offset": 0}}, {"end": {"col": 66, "line": 2143, "offset": 67}, "file": "llama/ggml.h", "start": {"col": 110, "line": 2142, "offset": 0}}, {"end": {"col": 23, "line": 2183, "offset": 2172}, "file": "llama/ggml.h", "start": {"col": 110, "line": 2143, "offset": 0}}, {"end": {"col": 6, "line": 2186, "offset": 7}, "file": "llama/ggml.h", "start": {"col": 28, "line": 2185, "offset": 0}}, {"end": {"col": 36, "line": 2323, "offset": 22}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2323, "offset": 0}}, {"end": {"col": 34, "line": 2326, "offset": 20}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2326, "offset": 0}}, {"end": {"col": 18, "line": 2332, "offset": 4}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2332, "offset": 0}}, {"end": {"col": 34, "line": 2339, "offset": 20}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2339, "offset": 0}}, {"end": {"col": 34, "line": 2345, "offset": 20}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2345, "offset": 0}}, {"end": {"col": 18, "line": 2357, "offset": 4}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2357, "offset": 0}}, {"end": {"col": 18, "line": 2358, "offset": 4}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2358, "offset": 0}}, {"end": {"col": 18, "line": 2373, "offset": 4}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2373, "offset": 0}}, {"end": {"col": 18, "line": 2374, "offset": 4}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2374, "offset": 0}}, {"end": {"col": 18, "line": 2377, "offset": 4}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2377, "offset": 0}}, {"end": {"col": 20, "line": 2380, "offset": 6}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2380, "offset": 0}}, {"end": {"col": 33, "line": 2419, "offset": 19}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2419, "offset": 0}}, {"end": {"col": 33, "line": 2420, "offset": 19}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2420, "offset": 0}}, {"end": {"col": 18, "line": 2423, "offset": 4}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2423, "offset": 0}}, {"end": {"col": 24, "line": 2425, "offset": 4}, "file": "llama/ggml.h", "start": {"col": 20, "line": 2425, "offset": 0}}, {"end": {"col": 17, "line": 2427, "offset": 3}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2427, "offset": 0}}, {"end": {"col": 20, "line": 2428, "offset": 6}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2428, "offset": 0}}, {"end": {"col": 20, "line": 2429, "offset": 6}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2429, "offset": 0}}, {"end": {"col": 18, "line": 2430, "offset": 4}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2430, "offset": 0}}, {"end": {"col": 17, "line": 2432, "offset": 3}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2432, "offset": 0}}, {"end": {"col": 17, "line": 2433, "offset": 3}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2433, "offset": 0}}, {"end": {"col": 24, "line": 2434, "offset": 4}, "file": "llama/ggml.h", "start": {"col": 20, "line": 2434, "offset": 0}}, {"end": {"col": 28, "line": 2436, "offset": 14}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2436, "offset": 0}}, {"end": {"col": 28, "line": 2437, "offset": 14}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2437, "offset": 0}}, {"end": {"col": 21, "line": 2440, "offset": 7}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2440, "offset": 0}}, {"end": {"col": 20, "line": 2441, "offset": 6}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2441, "offset": 0}}, {"end": {"col": 22, "line": 2442, "offset": 8}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2442, "offset": 0}}, {"end": {"col": 21, "line": 2443, "offset": 7}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2443, "offset": 0}}, {"end": {"col": 22, "line": 2444, "offset": 8}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2444, "offset": 0}}, {"end": {"col": 21, "line": 2445, "offset": 7}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2445, "offset": 0}}, {"end": {"col": 19, "line": 2446, "offset": 5}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2446, "offset": 0}}, {"end": {"col": 22, "line": 2447, "offset": 8}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2447, "offset": 0}}, {"end": {"col": 21, "line": 2448, "offset": 7}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2448, "offset": 0}}, {"end": {"col": 20, "line": 2449, "offset": 6}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2449, "offset": 0}}, {"end": {"col": 18, "line": 2450, "offset": 4}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2450, "offset": 0}}, {"end": {"col": 24, "line": 2451, "offset": 4}, "file": "llama/ggml.h", "start": {"col": 20, "line": 2451, "offset": 0}}, {"end": {"col": 24, "line": 2452, "offset": 4}, "file": "llama/ggml.h", "start": {"col": 20, "line": 2452, "offset": 0}}, {"end": {"col": 17, "line": 2453, "offset": 3}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2453, "offset": 0}}, {"end": {"col": 24, "line": 2454, "offset": 4}, "file": "llama/ggml.h", "start": {"col": 20, "line": 2454, "offset": 0}}, {"end": {"col": 24, "line": 2455, "offset": 4}, "file": "llama/ggml.h", "start": {"col": 20, "line": 2455, "offset": 0}}, {"end": {"col": 17, "line": 2457, "offset": 3}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2457, "offset": 0}}, {"end": {"col": 17, "line": 2458, "offset": 3}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2458, "offset": 0}}, {"end": {"col": 20, "line": 2459, "offset": 6}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2459, "offset": 0}}, {"end": {"col": 18, "line": 2460, "offset": 4}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2460, "offset": 0}}, {"end": {"col": 28, "line": 2461, "offset": 14}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2461, "offset": 0}}, {"end": {"col": 18, "line": 2464, "offset": 4}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2464, "offset": 0}}, {"end": {"col": 18, "line": 2467, "offset": 4}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2467, "offset": 0}}, {"end": {"col": 18, "line": 2468, "offset": 4}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2468, "offset": 0}}, {"end": {"col": 18, "line": 2469, "offset": 4}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2469, "offset": 0}}, {"end": {"col": 18, "line": 2470, "offset": 4}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2470, "offset": 0}}, {"end": {"col": 18, "line": 2471, "offset": 4}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2471, "offset": 0}}, {"end": {"col": 18, "line": 2472, "offset": 4}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2472, "offset": 0}}, {"end": {"col": 18, "line": 2473, "offset": 4}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2473, "offset": 0}}, {"end": {"col": 18, "line": 2474, "offset": 4}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2474, "offset": 0}}, {"end": {"col": 18, "line": 2475, "offset": 4}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2475, "offset": 0}}, {"end": {"col": 18, "line": 2476, "offset": 4}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2476, "offset": 0}}, {"end": {"col": 18, "line": 2477, "offset": 4}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2477, "offset": 0}}, {"end": {"col": 18, "line": 2478, "offset": 4}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2478, "offset": 0}}, {"end": {"col": 18, "line": 2479, "offset": 4}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2479, "offset": 0}}, {"end": {"col": 18, "line": 2480, "offset": 4}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2480, "offset": 0}}, {"end": {"col": 18, "line": 2483, "offset": 4}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2483, "offset": 0}}, {"end": {"col": 18, "line": 2486, "offset": 4}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2486, "offset": 0}}, {"end": {"col": 18, "line": 2487, "offset": 4}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2487, "offset": 0}}, {"end": {"col": 18, "line": 2488, "offset": 4}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2488, "offset": 0}}, {"end": {"col": 18, "line": 2509, "offset": 4}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2509, "offset": 0}}, {"end": {"col": 20, "line": 2512, "offset": 6}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2512, "offset": 0}}, {"end": {"col": 18, "line": 2513, "offset": 4}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2513, "offset": 0}}, {"end": {"col": 17, "line": 2519, "offset": 3}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2519, "offset": 0}}, {"end": {"col": 17, "line": 2520, "offset": 3}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2520, "offset": 0}}, {"end": {"col": 17, "line": 2521, "offset": 3}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2521, "offset": 0}}, {"end": {"col": 17, "line": 2522, "offset": 3}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2522, "offset": 0}}, {"end": {"col": 17, "line": 2523, "offset": 3}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2523, "offset": 0}}, {"end": {"col": 17, "line": 2524, "offset": 3}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2524, "offset": 0}}, {"end": {"col": 17, "line": 2525, "offset": 3}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2525, "offset": 0}}, {"end": {"col": 17, "line": 2526, "offset": 3}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2526, "offset": 0}}, {"end": {"col": 17, "line": 2527, "offset": 3}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2527, "offset": 0}}, {"end": {"col": 17, "line": 2528, "offset": 3}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2528, "offset": 0}}, {"end": {"col": 17, "line": 2529, "offset": 3}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2529, "offset": 0}}, {"end": {"col": 17, "line": 2530, "offset": 3}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2530, "offset": 0}}, {"end": {"col": 17, "line": 2531, "offset": 3}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2531, "offset": 0}}, {"end": {"col": 17, "line": 2532, "offset": 3}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2532, "offset": 0}}, {"end": {"col": 17, "line": 2533, "offset": 3}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2533, "offset": 0}}, {"end": {"col": 17, "line": 2534, "offset": 3}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2534, "offset": 0}}, {"end": {"col": 17, "line": 2535, "offset": 3}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2535, "offset": 0}}, {"end": {"col": 17, "line": 2536, "offset": 3}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2536, "offset": 0}}, {"end": {"col": 17, "line": 2537, "offset": 3}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2537, "offset": 0}}, {"end": {"col": 17, "line": 2538, "offset": 3}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2538, "offset": 0}}, {"end": {"col": 17, "line": 2539, "offset": 3}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2539, "offset": 0}}, {"end": {"col": 17, "line": 2540, "offset": 3}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2540, "offset": 0}}, {"end": {"col": 17, "line": 2541, "offset": 3}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2541, "offset": 0}}, {"end": {"col": 17, "line": 2542, "offset": 3}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2542, "offset": 0}}, {"end": {"col": 17, "line": 2543, "offset": 3}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2543, "offset": 0}}, {"end": {"col": 17, "line": 2544, "offset": 3}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2544, "offset": 0}}, {"end": {"col": 17, "line": 2545, "offset": 3}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2545, "offset": 0}}, {"end": {"col": 17, "line": 2546, "offset": 3}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2546, "offset": 0}}, {"end": {"col": 17, "line": 2547, "offset": 3}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2547, "offset": 0}}, {"end": {"col": 17, "line": 2550, "offset": 3}, "file": "llama/ggml.h", "start": {"col": 14, "line": 2550, "offset": 0}}, {"end": {"col": 68, "line": 2562, "offset": 1}, "file": "llama/ggml.h", "start": {"col": 67, "line": 2562, "offset": 0}}, {"end": {"col": 93, "line": 2562, "offset": 1}, "file": "llama/ggml.h", "start": {"col": 92, "line": 2562, "offset": 0}}, {"end": {"col": 68, "line": 2563, "offset": 1}, "file": "llama/ggml.h", "start": {"col": 67, "line": 2563, "offset": 0}}, {"end": {"col": 93, "line": 2563, "offset": 1}, "file": "llama/ggml.h", "start": {"col": 92, "line": 2563, "offset": 0}}, {"end": {"col": 68, "line": 2565, "offset": 1}, "file": "llama/ggml.h", "start": {"col": 67, "line": 2565, "offset": 0}}, {"end": {"col": 92, "line": 2565, "offset": 1}, "file": "llama/ggml.h", "start": {"col": 91, "line": 2565, "offset": 0}}, {"end": {"col": 68, "line": 2566, "offset": 1}, "file": "llama/ggml.h", "start": {"col": 67, "line": 2566, "offset": 0}}, {"end": {"col": 109, "line": 2566, "offset": 1}, "file": "llama/ggml.h", "start": {"col": 108, "line": 2566, "offset": 0}}, {"end": {"col": 68, "line": 2567, "offset": 1}, "file": "llama/ggml.h", "start": {"col": 67, "line": 2567, "offset": 0}}, {"end": {"col": 68, "line": 2568, "offset": 1}, "file": "llama/ggml.h", "start": {"col": 67, "line": 2568, "offset": 0}}, {"end": {"col": 109, "line": 2568, "offset": 1}, "file": "llama/ggml.h", "start": {"col": 108, "line": 2568, "offset": 0}}, {"end": {"col": 68, "line": 2569, "offset": 1}, "file": "llama/ggml.h", "start": {"col": 67, "line": 2569, "offset": 0}}, {"end": {"col": 68, "line": 2570, "offset": 1}, "file": "llama/ggml.h", "start": {"col": 67, "line": 2570, "offset": 0}}, {"end": {"col": 109, "line": 2570, "offset": 1}, "file": "llama/ggml.h", "start": {"col": 108, "line": 2570, "offset": 0}}, {"end": {"col": 68, "line": 2571, "offset": 1}, "file": "llama/ggml.h", "start": {"col": 67, "line": 2571, "offset": 0}}], "type": ["PartialParsing", [{"end": {"col": 18, "line": 359, "offset": 4}, "path": "llama/ggml.h", "start": {"col": 14, "line": 359, "offset": 0}}, {"end": {"col": 34, "line": 369, "offset": 20}, "path": "llama/ggml.h", "start": {"col": 14, "line": 369, "offset": 0}}, {"end": {"col": 19, "line": 374, "offset": 5}, "path": "llama/ggml.h", "start": {"col": 14, "line": 374, "offset": 0}}, {"end": {"col": 18, "line": 376, "offset": 4}, "path": "llama/ggml.h", "start": {"col": 14, "line": 376, "offset": 0}}, {"end": {"col": 18, "line": 377, "offset": 4}, "path": "llama/ggml.h", "start": {"col": 14, "line": 377, "offset": 0}}, {"end": {"col": 19, "line": 382, "offset": 5}, "path": "llama/ggml.h", "start": {"col": 14, "line": 382, "offset": 0}}, {"end": {"col": 18, "line": 383, "offset": 4}, "path": "llama/ggml.h", "start": {"col": 14, "line": 383, "offset": 0}}, {"end": {"col": 18, "line": 384, "offset": 4}, "path": "llama/ggml.h", "start": {"col": 14, "line": 384, "offset": 0}}, {"end": {"col": 18, "line": 385, "offset": 4}, "path": "llama/ggml.h", "start": {"col": 14, "line": 385, "offset": 0}}, {"end": {"col": 56, "line": 617, "offset": 106}, "path": "llama/ggml.h", "start": {"col": 5, "line": 614, "offset": 0}}, {"end": {"col": 122, "line": 617, "offset": 1}, "path": "llama/ggml.h", "start": {"col": 121, "line": 617, "offset": 0}}, {"end": {"col": 18, "line": 727, "offset": 4}, "path": "llama/ggml.h", "start": {"col": 14, "line": 727, "offset": 0}}, {"end": {"col": 18, "line": 731, "offset": 4}, "path": "llama/ggml.h", "start": {"col": 14, "line": 731, "offset": 0}}, {"end": {"col": 21, "line": 732, "offset": 7}, "path": "llama/ggml.h", "start": {"col": 14, "line": 732, "offset": 0}}, {"end": {"col": 21, "line": 733, "offset": 7}, "path": "llama/ggml.h", "start": {"col": 14, "line": 733, "offset": 0}}, {"end": {"col": 21, "line": 734, "offset": 7}, "path": "llama/ggml.h", "start": {"col": 14, "line": 734, "offset": 0}}, {"end": {"col": 21, "line": 735, "offset": 7}, "path": "llama/ggml.h", "start": {"col": 14, "line": 735, "offset": 0}}, {"end": {"col": 18, "line": 738, "offset": 4}, "path": "llama/ggml.h", "start": {"col": 14, "line": 738, "offset": 0}}, {"end": {"col": 18, "line": 740, "offset": 4}, "path": "llama/ggml.h", "start": {"col": 14, "line": 740, "offset": 0}}, {"end": {"col": 18, "line": 741, "offset": 4}, "path": "llama/ggml.h", "start": {"col": 14, "line": 741, "offset": 0}}, {"end": {"col": 18, "line": 743, "offset": 4}, "path": "llama/ggml.h", "start": {"col": 14, "line": 743, "offset": 0}}, {"end": {"col": 18, "line": 744, "offset": 4}, "path": "llama/ggml.h", "start": {"col": 14, "line": 744, "offset": 0}}, {"end": {"col": 31, "line": 746, "offset": 17}, "path": "llama/ggml.h", "start": {"col": 14, "line": 746, "offset": 0}}, {"end": {"col": 31, "line": 747, "offset": 17}, "path": "llama/ggml.h", "start": {"col": 14, "line": 747, "offset": 0}}, {"end": {"col": 30, "line": 748, "offset": 16}, "path": "llama/ggml.h", "start": {"col": 14, "line": 748, "offset": 0}}, {"end": {"col": 30, "line": 749, "offset": 6}, "path": "llama/ggml.h", "start": {"col": 24, "line": 749, "offset": 0}}, {"end": {"col": 31, "line": 751, "offset": 17}, "path": "llama/ggml.h", "start": {"col": 14, "line": 751, "offset": 0}}, {"end": {"col": 30, "line": 752, "offset": 16}, "path": "llama/ggml.h", "start": {"col": 14, "line": 752, "offset": 0}}, {"end": {"col": 30, "line": 753, "offset": 16}, "path": "llama/ggml.h", "start": {"col": 14, "line": 753, "offset": 0}}, {"end": {"col": 58, "line": 756, "offset": 74}, "path": "llama/ggml.h", "start": {"col": 5, "line": 755, "offset": 0}}, {"end": {"col": 35, "line": 757, "offset": 1}, "path": "llama/ggml.h", "start": {"col": 34, "line": 757, "offset": 0}}, {"end": {"col": 34, "line": 759, "offset": 20}, "path": "llama/ggml.h", "start": {"col": 14, "line": 759, "offset": 0}}, {"end": {"col": 34, "line": 760, "offset": 20}, "path": "llama/ggml.h", "start": {"col": 14, "line": 760, "offset": 0}}, {"end": {"col": 34, "line": 761, "offset": 4}, "path": "llama/ggml.h", "start": {"col": 30, "line": 761, "offset": 0}}, {"end": {"col": 34, "line": 763, "offset": 4}, "path": "llama/ggml.h", "start": {"col": 30, "line": 763, "offset": 0}}, {"end": {"col": 34, "line": 764, "offset": 20}, "path": "llama/ggml.h", "start": {"col": 14, "line": 764, "offset": 0}}, {"end": {"col": 30, "line": 766, "offset": 16}, "path": "llama/ggml.h", "start": {"col": 14, "line": 766, "offset": 0}}, {"end": {"col": 28, "line": 768, "offset": 14}, "path": "llama/ggml.h", "start": {"col": 14, "line": 768, "offset": 0}}, {"end": {"col": 28, "line": 771, "offset": 14}, "path": "llama/ggml.h", "start": {"col": 14, "line": 771, "offset": 0}}, {"end": {"col": 28, "line": 773, "offset": 14}, "path": "llama/ggml.h", "start": {"col": 14, "line": 773, "offset": 0}}, {"end": {"col": 28, "line": 774, "offset": 14}, "path": "llama/ggml.h", "start": {"col": 14, "line": 774, "offset": 0}}, {"end": {"col": 28, "line": 775, "offset": 14}, "path": "llama/ggml.h", "start": {"col": 14, "line": 775, "offset": 0}}, {"end": {"col": 28, "line": 776, "offset": 4}, "path": "llama/ggml.h", "start": {"col": 24, "line": 776, "offset": 0}}, {"end": {"col": 28, "line": 777, "offset": 4}, "path": "llama/ggml.h", "start": {"col": 24, "line": 777, "offset": 0}}, {"end": {"col": 28, "line": 778, "offset": 4}, "path": "llama/ggml.h", "start": {"col": 24, "line": 778, "offset": 0}}, {"end": {"col": 28, "line": 779, "offset": 4}, "path": "llama/ggml.h", "start": {"col": 24, "line": 779, "offset": 0}}, {"end": {"col": 27, "line": 780, "offset": 3}, "path": "llama/ggml.h", "start": {"col": 24, "line": 780, "offset": 0}}, {"end": {"col": 28, "line": 782, "offset": 14}, "path": "llama/ggml.h", "start": {"col": 14, "line": 782, "offset": 0}}, {"end": {"col": 28, "line": 783, "offset": 14}, "path": "llama/ggml.h", "start": {"col": 14, "line": 783, "offset": 0}}, {"end": {"col": 28, "line": 784, "offset": 14}, "path": "llama/ggml.h", "start": {"col": 14, "line": 784, "offset": 0}}, {"end": {"col": 28, "line": 785, "offset": 14}, "path": "llama/ggml.h", "start": {"col": 14, "line": 785, "offset": 0}}, {"end": {"col": 18, "line": 787, "offset": 4}, "path": "llama/ggml.h", "start": {"col": 14, "line": 787, "offset": 0}}, {"end": {"col": 18, "line": 788, "offset": 4}, "path": "llama/ggml.h", "start": {"col": 14, "line": 788, "offset": 0}}, {"end": {"col": 18, "line": 790, "offset": 4}, "path": "llama/ggml.h", "start": {"col": 14, "line": 790, "offset": 0}}, {"end": {"col": 20, "line": 793, "offset": 6}, "path": "llama/ggml.h", "start": {"col": 14, "line": 793, "offset": 0}}, {"end": {"col": 18, "line": 795, "offset": 4}, "path": "llama/ggml.h", "start": {"col": 14, "line": 795, "offset": 0}}, {"end": {"col": 33, "line": 799, "offset": 19}, "path": "llama/ggml.h", "start": {"col": 14, "line": 799, "offset": 0}}, {"end": {"col": 18, "line": 800, "offset": 4}, "path": "llama/ggml.h", "start": {"col": 14, "line": 800, "offset": 0}}, {"end": {"col": 20, "line": 802, "offset": 6}, "path": "llama/ggml.h", "start": {"col": 14, "line": 802, "offset": 0}}, {"end": {"col": 20, "line": 804, "offset": 6}, "path": "llama/ggml.h", "start": {"col": 14, "line": 804, "offset": 0}}, {"end": {"col": 18, "line": 805, "offset": 4}, "path": "llama/ggml.h", "start": {"col": 14, "line": 805, "offset": 0}}, {"end": {"col": 18, "line": 806, "offset": 4}, "path": "llama/ggml.h", "start": {"col": 14, "line": 806, "offset": 0}}, {"end": {"col": 18, "line": 808, "offset": 4}, "path": "llama/ggml.h", "start": {"col": 14, "line": 808, "offset": 0}}, {"end": {"col": 20, "line": 809, "offset": 6}, "path": "llama/ggml.h", "start": {"col": 14, "line": 809, "offset": 0}}, {"end": {"col": 20, "line": 810, "offset": 6}, "path": "llama/ggml.h", "start": {"col": 14, "line": 810, "offset": 0}}, {"end": {"col": 32, "line": 812, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 812, "offset": 0}}, {"end": {"col": 32, "line": 818, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 818, "offset": 0}}, {"end": {"col": 32, "line": 823, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 823, "offset": 0}}, {"end": {"col": 32, "line": 829, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 829, "offset": 0}}, {"end": {"col": 32, "line": 836, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 836, "offset": 0}}, {"end": {"col": 32, "line": 844, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 844, "offset": 0}}, {"end": {"col": 32, "line": 845, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 845, "offset": 0}}, {"end": {"col": 32, "line": 847, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 847, "offset": 0}}, {"end": {"col": 32, "line": 848, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 848, "offset": 0}}, {"end": {"col": 32, "line": 851, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 851, "offset": 0}}, {"end": {"col": 32, "line": 852, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 852, "offset": 0}}, {"end": {"col": 32, "line": 853, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 853, "offset": 0}}, {"end": {"col": 32, "line": 855, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 855, "offset": 0}}, {"end": {"col": 32, "line": 856, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 856, "offset": 0}}, {"end": {"col": 32, "line": 857, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 857, "offset": 0}}, {"end": {"col": 18, "line": 860, "offset": 4}, "path": "llama/ggml.h", "start": {"col": 14, "line": 860, "offset": 0}}, {"end": {"col": 21, "line": 862, "offset": 7}, "path": "llama/ggml.h", "start": {"col": 14, "line": 862, "offset": 0}}, {"end": {"col": 18, "line": 863, "offset": 4}, "path": "llama/ggml.h", "start": {"col": 14, "line": 863, "offset": 0}}, {"end": {"col": 21, "line": 865, "offset": 7}, "path": "llama/ggml.h", "start": {"col": 14, "line": 865, "offset": 0}}, {"end": {"col": 18, "line": 866, "offset": 4}, "path": "llama/ggml.h", "start": {"col": 14, "line": 866, "offset": 0}}, {"end": {"col": 19, "line": 868, "offset": 5}, "path": "llama/ggml.h", "start": {"col": 14, "line": 868, "offset": 0}}, {"end": {"col": 18, "line": 869, "offset": 4}, "path": "llama/ggml.h", "start": {"col": 14, "line": 869, "offset": 0}}, {"end": {"col": 19, "line": 871, "offset": 5}, "path": "llama/ggml.h", "start": {"col": 14, "line": 871, "offset": 0}}, {"end": {"col": 18, "line": 872, "offset": 4}, "path": "llama/ggml.h", "start": {"col": 14, "line": 872, "offset": 0}}, {"end": {"col": 18, "line": 874, "offset": 4}, "path": "llama/ggml.h", "start": {"col": 14, "line": 874, "offset": 0}}, {"end": {"col": 19, "line": 875, "offset": 5}, "path": "llama/ggml.h", "start": {"col": 14, "line": 875, "offset": 0}}, {"end": {"col": 42, "line": 877, "offset": 28}, "path": "llama/ggml.h", "start": {"col": 14, "line": 877, "offset": 0}}, {"end": {"col": 24, "line": 879, "offset": 4}, "path": "llama/ggml.h", "start": {"col": 20, "line": 879, "offset": 0}}, {"end": {"col": 32, "line": 880, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 880, "offset": 0}}, {"end": {"col": 32, "line": 882, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 882, "offset": 0}}, {"end": {"col": 32, "line": 888, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 888, "offset": 0}}, {"end": {"col": 32, "line": 893, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 893, "offset": 0}}, {"end": {"col": 32, "line": 897, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 897, "offset": 0}}, {"end": {"col": 32, "line": 902, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 902, "offset": 0}}, {"end": {"col": 32, "line": 907, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 907, "offset": 0}}, {"end": {"col": 32, "line": 913, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 913, "offset": 0}}, {"end": {"col": 32, "line": 918, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 918, "offset": 0}}, {"end": {"col": 32, "line": 926, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 926, "offset": 0}}, {"end": {"col": 32, "line": 935, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 935, "offset": 0}}, {"end": {"col": 32, "line": 944, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 944, "offset": 0}}, {"end": {"col": 32, "line": 949, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 949, "offset": 0}}, {"end": {"col": 32, "line": 954, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 954, "offset": 0}}, {"end": {"col": 32, "line": 959, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 959, "offset": 0}}, {"end": {"col": 32, "line": 964, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 964, "offset": 0}}, {"end": {"col": 32, "line": 969, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 969, "offset": 0}}, {"end": {"col": 32, "line": 974, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 974, "offset": 0}}, {"end": {"col": 32, "line": 978, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 978, "offset": 0}}, {"end": {"col": 32, "line": 982, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 982, "offset": 0}}, {"end": {"col": 32, "line": 986, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 986, "offset": 0}}, {"end": {"col": 32, "line": 990, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 990, "offset": 0}}, {"end": {"col": 32, "line": 994, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 994, "offset": 0}}, {"end": {"col": 32, "line": 998, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 998, "offset": 0}}, {"end": {"col": 32, "line": 1002, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1002, "offset": 0}}, {"end": {"col": 32, "line": 1006, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1006, "offset": 0}}, {"end": {"col": 32, "line": 1010, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1010, "offset": 0}}, {"end": {"col": 32, "line": 1015, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1015, "offset": 0}}, {"end": {"col": 32, "line": 1020, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1020, "offset": 0}}, {"end": {"col": 32, "line": 1025, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1025, "offset": 0}}, {"end": {"col": 32, "line": 1030, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1030, "offset": 0}}, {"end": {"col": 32, "line": 1036, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1036, "offset": 0}}, {"end": {"col": 32, "line": 1042, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1042, "offset": 0}}, {"end": {"col": 32, "line": 1049, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1049, "offset": 0}}, {"end": {"col": 32, "line": 1055, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1055, "offset": 0}}, {"end": {"col": 32, "line": 1059, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1059, "offset": 0}}, {"end": {"col": 32, "line": 1063, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1063, "offset": 0}}, {"end": {"col": 32, "line": 1067, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1067, "offset": 0}}, {"end": {"col": 32, "line": 1071, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1071, "offset": 0}}, {"end": {"col": 32, "line": 1075, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1075, "offset": 0}}, {"end": {"col": 32, "line": 1079, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1079, "offset": 0}}, {"end": {"col": 32, "line": 1083, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1083, "offset": 0}}, {"end": {"col": 32, "line": 1087, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1087, "offset": 0}}, {"end": {"col": 32, "line": 1091, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1091, "offset": 0}}, {"end": {"col": 32, "line": 1095, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1095, "offset": 0}}, {"end": {"col": 32, "line": 1099, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1099, "offset": 0}}, {"end": {"col": 32, "line": 1103, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1103, "offset": 0}}, {"end": {"col": 32, "line": 1107, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1107, "offset": 0}}, {"end": {"col": 32, "line": 1111, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1111, "offset": 0}}, {"end": {"col": 32, "line": 1115, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1115, "offset": 0}}, {"end": {"col": 32, "line": 1119, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1119, "offset": 0}}, {"end": {"col": 32, "line": 1123, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1123, "offset": 0}}, {"end": {"col": 32, "line": 1127, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1127, "offset": 0}}, {"end": {"col": 32, "line": 1131, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1131, "offset": 0}}, {"end": {"col": 32, "line": 1135, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1135, "offset": 0}}, {"end": {"col": 32, "line": 1139, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1139, "offset": 0}}, {"end": {"col": 32, "line": 1143, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1143, "offset": 0}}, {"end": {"col": 32, "line": 1149, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1149, "offset": 0}}, {"end": {"col": 32, "line": 1155, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1155, "offset": 0}}, {"end": {"col": 32, "line": 1160, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1160, "offset": 0}}, {"end": {"col": 32, "line": 1164, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1164, "offset": 0}}, {"end": {"col": 32, "line": 1168, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1168, "offset": 0}}, {"end": {"col": 32, "line": 1173, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1173, "offset": 0}}, {"end": {"col": 32, "line": 1178, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1178, "offset": 0}}, {"end": {"col": 32, "line": 1183, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1183, "offset": 0}}, {"end": {"col": 32, "line": 1188, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1188, "offset": 0}}, {"end": {"col": 32, "line": 1195, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1195, "offset": 0}}, {"end": {"col": 32, "line": 1201, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1201, "offset": 0}}, {"end": {"col": 32, "line": 1209, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1209, "offset": 0}}, {"end": {"col": 32, "line": 1218, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1218, "offset": 0}}, {"end": {"col": 18, "line": 1225, "offset": 4}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1225, "offset": 0}}, {"end": {"col": 32, "line": 1230, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1230, "offset": 0}}, {"end": {"col": 32, "line": 1239, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1239, "offset": 0}}, {"end": {"col": 32, "line": 1248, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1248, "offset": 0}}, {"end": {"col": 32, "line": 1254, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1254, "offset": 0}}, {"end": {"col": 32, "line": 1260, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1260, "offset": 0}}, {"end": {"col": 32, "line": 1270, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1270, "offset": 0}}, {"end": {"col": 32, "line": 1279, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1279, "offset": 0}}, {"end": {"col": 32, "line": 1285, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1285, "offset": 0}}, {"end": {"col": 32, "line": 1292, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1292, "offset": 0}}, {"end": {"col": 32, "line": 1300, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1300, "offset": 0}}, {"end": {"col": 32, "line": 1308, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1308, "offset": 0}}, {"end": {"col": 32, "line": 1313, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1313, "offset": 0}}, {"end": {"col": 32, "line": 1319, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1319, "offset": 0}}, {"end": {"col": 32, "line": 1324, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1324, "offset": 0}}, {"end": {"col": 32, "line": 1329, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1329, "offset": 0}}, {"end": {"col": 32, "line": 1335, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1335, "offset": 0}}, {"end": {"col": 32, "line": 1342, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1342, "offset": 0}}, {"end": {"col": 32, "line": 1352, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1352, "offset": 0}}, {"end": {"col": 32, "line": 1359, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1359, "offset": 0}}, {"end": {"col": 32, "line": 1364, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1364, "offset": 0}}, {"end": {"col": 32, "line": 1372, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1372, "offset": 0}}, {"end": {"col": 32, "line": 1379, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1379, "offset": 0}}, {"end": {"col": 32, "line": 1388, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1388, "offset": 0}}, {"end": {"col": 32, "line": 1394, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1394, "offset": 0}}, {"end": {"col": 32, "line": 1402, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1402, "offset": 0}}, {"end": {"col": 32, "line": 1412, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1412, "offset": 0}}, {"end": {"col": 32, "line": 1424, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1424, "offset": 0}}, {"end": {"col": 32, "line": 1433, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1433, "offset": 0}}, {"end": {"col": 32, "line": 1438, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1438, "offset": 0}}, {"end": {"col": 32, "line": 1443, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1443, "offset": 0}}, {"end": {"col": 32, "line": 1449, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1449, "offset": 0}}, {"end": {"col": 32, "line": 1454, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1454, "offset": 0}}, {"end": {"col": 32, "line": 1460, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1460, "offset": 0}}, {"end": {"col": 32, "line": 1466, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1466, "offset": 0}}, {"end": {"col": 32, "line": 1472, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1472, "offset": 0}}, {"end": {"col": 32, "line": 1477, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1477, "offset": 0}}, {"end": {"col": 32, "line": 1482, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1482, "offset": 0}}, {"end": {"col": 32, "line": 1489, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1489, "offset": 0}}, {"end": {"col": 32, "line": 1496, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1496, "offset": 0}}, {"end": {"col": 32, "line": 1502, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1502, "offset": 0}}, {"end": {"col": 32, "line": 1512, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1512, "offset": 0}}, {"end": {"col": 32, "line": 1520, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1520, "offset": 0}}, {"end": {"col": 32, "line": 1529, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1529, "offset": 0}}, {"end": {"col": 32, "line": 1545, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1545, "offset": 0}}, {"end": {"col": 48, "line": 1560, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 30, "line": 1560, "offset": 0}}, {"end": {"col": 38, "line": 1573, "offset": 29}, "path": "llama/ggml.h", "start": {"col": 9, "line": 1573, "offset": 0}}, {"end": {"col": 48, "line": 1575, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 30, "line": 1575, "offset": 0}}, {"end": {"col": 46, "line": 1588, "offset": 37}, "path": "llama/ggml.h", "start": {"col": 9, "line": 1588, "offset": 0}}, {"end": {"col": 103, "line": 1592, "offset": 133}, "path": "llama/ggml.h", "start": {"col": 15, "line": 1591, "offset": 0}}, {"end": {"col": 40, "line": 1617, "offset": 908}, "path": "llama/ggml.h", "start": {"col": 5, "line": 1596, "offset": 0}}, {"end": {"col": 39, "line": 1664, "offset": 2189}, "path": "llama/ggml.h", "start": {"col": 5, "line": 1621, "offset": 0}}, {"end": {"col": 38, "line": 1673, "offset": 276}, "path": "llama/ggml.h", "start": {"col": 5, "line": 1668, "offset": 0}}, {"end": {"col": 39, "line": 1681, "offset": 338}, "path": "llama/ggml.h", "start": {"col": 5, "line": 1675, "offset": 0}}, {"end": {"col": 39, "line": 1692, "offset": 538}, "path": "llama/ggml.h", "start": {"col": 5, "line": 1683, "offset": 0}}, {"end": {"col": 38, "line": 1706, "offset": 163}, "path": "llama/ggml.h", "start": {"col": 5, "line": 1703, "offset": 0}}, {"end": {"col": 24, "line": 1727, "offset": 406}, "path": "llama/ggml.h", "start": {"col": 5, "line": 1716, "offset": 0}}, {"end": {"col": 7, "line": 1731, "offset": 2}, "path": "llama/ggml.h", "start": {"col": 5, "line": 1731, "offset": 0}}, {"end": {"col": 39, "line": 1739, "offset": 288}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1733, "offset": 0}}, {"end": {"col": 39, "line": 1764, "offset": 855}, "path": "llama/ggml.h", "start": {"col": 5, "line": 1743, "offset": 0}}, {"end": {"col": 49, "line": 1772, "offset": 168}, "path": "llama/ggml.h", "start": {"col": 5, "line": 1769, "offset": 0}}, {"end": {"col": 40, "line": 1783, "offset": 280}, "path": "llama/ggml.h", "start": {"col": 5, "line": 1777, "offset": 0}}, {"end": {"col": 38, "line": 1792, "offset": 264}, "path": "llama/ggml.h", "start": {"col": 5, "line": 1786, "offset": 0}}, {"end": {"col": 38, "line": 1801, "offset": 266}, "path": "llama/ggml.h", "start": {"col": 5, "line": 1795, "offset": 0}}, {"end": {"col": 27, "line": 1813, "offset": 269}, "path": "llama/ggml.h", "start": {"col": 5, "line": 1806, "offset": 0}}, {"end": {"col": 7, "line": 1816, "offset": 2}, "path": "llama/ggml.h", "start": {"col": 5, "line": 1816, "offset": 0}}, {"end": {"col": 41, "line": 1827, "offset": 361}, "path": "llama/ggml.h", "start": {"col": 14, "line": 1818, "offset": 0}}, {"end": {"col": 28, "line": 1835, "offset": 184}, "path": "llama/ggml.h", "start": {"col": 5, "line": 1830, "offset": 0}}, {"end": {"col": 40, "line": 1854, "offset": 500}, "path": "llama/ggml.h", "start": {"col": 5, "line": 1842, "offset": 0}}, {"end": {"col": 38, "line": 1877, "offset": 753}, "path": "llama/ggml.h", "start": {"col": 5, "line": 1857, "offset": 0}}, {"end": {"col": 38, "line": 1888, "offset": 158}, "path": "llama/ggml.h", "start": {"col": 5, "line": 1885, "offset": 0}}, {"end": {"col": 32, "line": 1907, "offset": 551}, "path": "llama/ggml.h", "start": {"col": 5, "line": 1892, "offset": 0}}, {"end": {"col": 39, "line": 1914, "offset": 200}, "path": "llama/ggml.h", "start": {"col": 5, "line": 1910, "offset": 0}}, {"end": {"col": 48, "line": 1947, "offset": 1340}, "path": "llama/ggml.h", "start": {"col": 5, "line": 1917, "offset": 0}}, {"end": {"col": 41, "line": 1951, "offset": 32}, "path": "llama/ggml.h", "start": {"col": 9, "line": 1951, "offset": 0}}, {"end": {"col": 48, "line": 1953, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 30, "line": 1953, "offset": 0}}, {"end": {"col": 49, "line": 1957, "offset": 40}, "path": "llama/ggml.h", "start": {"col": 9, "line": 1957, "offset": 0}}, {"end": {"col": 48, "line": 1966, "offset": 326}, "path": "llama/ggml.h", "start": {"col": 20, "line": 1959, "offset": 0}}, {"end": {"col": 49, "line": 1971, "offset": 40}, "path": "llama/ggml.h", "start": {"col": 9, "line": 1971, "offset": 0}}, {"end": {"col": 41, "line": 2005, "offset": 1480}, "path": "llama/ggml.h", "start": {"col": 20, "line": 1973, "offset": 0}}, {"end": {"col": 48, "line": 2007, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 30, "line": 2007, "offset": 0}}, {"end": {"col": 10, "line": 2013, "offset": 1}, "path": "llama/ggml.h", "start": {"col": 9, "line": 2013, "offset": 0}}, {"end": {"col": 47, "line": 2013, "offset": 8}, "path": "llama/ggml.h", "start": {"col": 39, "line": 2013, "offset": 0}}, {"end": {"col": 17, "line": 2017, "offset": 47}, "path": "llama/ggml.h", "start": {"col": 48, "line": 2013, "offset": 0}}, {"end": {"col": 20, "line": 2017, "offset": 1}, "path": "llama/ggml.h", "start": {"col": 19, "line": 2017, "offset": 0}}, {"end": {"col": 17, "line": 2018, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 130, "line": 2017, "offset": 0}}, {"end": {"col": 20, "line": 2018, "offset": 1}, "path": "llama/ggml.h", "start": {"col": 19, "line": 2018, "offset": 0}}, {"end": {"col": 17, "line": 2019, "offset": 18}, "path": "llama/ggml.h", "start": {"col": 160, "line": 2018, "offset": 0}}, {"end": {"col": 20, "line": 2019, "offset": 1}, "path": "llama/ggml.h", "start": {"col": 19, "line": 2019, "offset": 0}}, {"end": {"col": 25, "line": 2021, "offset": 27}, "path": "llama/ggml.h", "start": {"col": 190, "line": 2019, "offset": 0}}, {"end": {"col": 29, "line": 2021, "offset": 2}, "path": "llama/ggml.h", "start": {"col": 27, "line": 2021, "offset": 0}}, {"end": {"col": 40, "line": 2025, "offset": 87}, "path": "llama/ggml.h", "start": {"col": 5, "line": 2024, "offset": 0}}, {"end": {"col": 40, "line": 2032, "offset": 102}, "path": "llama/ggml.h", "start": {"col": 46, "line": 2029, "offset": 0}}, {"end": {"col": 40, "line": 2039, "offset": 94}, "path": "llama/ggml.h", "start": {"col": 46, "line": 2036, "offset": 0}}, {"end": {"col": 44, "line": 2105, "offset": 2304}, "path": "llama/ggml.h", "start": {"col": 46, "line": 2044, "offset": 0}}, {"end": {"col": 49, "line": 2119, "offset": 601}, "path": "llama/ggml.h", "start": {"col": 103, "line": 2105, "offset": 0}}, {"end": {"col": 49, "line": 2121, "offset": 208}, "path": "llama/ggml.h", "start": {"col": 83, "line": 2119, "offset": 0}}, {"end": {"col": 49, "line": 2122, "offset": 50}, "path": "llama/ggml.h", "start": {"col": 112, "line": 2121, "offset": 0}}, {"end": {"col": 51, "line": 2123, "offset": 52}, "path": "llama/ggml.h", "start": {"col": 108, "line": 2122, "offset": 0}}, {"end": {"col": 51, "line": 2124, "offset": 118}, "path": "llama/ggml.h", "start": {"col": 85, "line": 2123, "offset": 0}}, {"end": {"col": 51, "line": 2126, "offset": 53}, "path": "llama/ggml.h", "start": {"col": 85, "line": 2124, "offset": 0}}, {"end": {"col": 51, "line": 2127, "offset": 52}, "path": "llama/ggml.h", "start": {"col": 83, "line": 2126, "offset": 0}}, {"end": {"col": 52, "line": 2128, "offset": 93}, "path": "llama/ggml.h", "start": {"col": 90, "line": 2127, "offset": 0}}, {"end": {"col": 71, "line": 2137, "offset": 468}, "path": "llama/ggml.h", "start": {"col": 83, "line": 2128, "offset": 0}}, {"end": {"col": 72, "line": 2138, "offset": 73}, "path": "llama/ggml.h", "start": {"col": 124, "line": 2137, "offset": 0}}, {"end": {"col": 63, "line": 2139, "offset": 64}, "path": "llama/ggml.h", "start": {"col": 158, "line": 2138, "offset": 0}}, {"end": {"col": 64, "line": 2140, "offset": 65}, "path": "llama/ggml.h", "start": {"col": 114, "line": 2139, "offset": 0}}, {"end": {"col": 65, "line": 2142, "offset": 177}, "path": "llama/ggml.h", "start": {"col": 110, "line": 2140, "offset": 0}}, {"end": {"col": 66, "line": 2143, "offset": 67}, "path": "llama/ggml.h", "start": {"col": 110, "line": 2142, "offset": 0}}, {"end": {"col": 23, "line": 2183, "offset": 2172}, "path": "llama/ggml.h", "start": {"col": 110, "line": 2143, "offset": 0}}, {"end": {"col": 6, "line": 2186, "offset": 7}, "path": "llama/ggml.h", "start": {"col": 28, "line": 2185, "offset": 0}}, {"end": {"col": 36, "line": 2323, "offset": 22}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2323, "offset": 0}}, {"end": {"col": 34, "line": 2326, "offset": 20}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2326, "offset": 0}}, {"end": {"col": 18, "line": 2332, "offset": 4}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2332, "offset": 0}}, {"end": {"col": 34, "line": 2339, "offset": 20}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2339, "offset": 0}}, {"end": {"col": 34, "line": 2345, "offset": 20}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2345, "offset": 0}}, {"end": {"col": 18, "line": 2357, "offset": 4}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2357, "offset": 0}}, {"end": {"col": 18, "line": 2358, "offset": 4}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2358, "offset": 0}}, {"end": {"col": 18, "line": 2373, "offset": 4}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2373, "offset": 0}}, {"end": {"col": 18, "line": 2374, "offset": 4}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2374, "offset": 0}}, {"end": {"col": 18, "line": 2377, "offset": 4}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2377, "offset": 0}}, {"end": {"col": 20, "line": 2380, "offset": 6}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2380, "offset": 0}}, {"end": {"col": 33, "line": 2419, "offset": 19}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2419, "offset": 0}}, {"end": {"col": 33, "line": 2420, "offset": 19}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2420, "offset": 0}}, {"end": {"col": 18, "line": 2423, "offset": 4}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2423, "offset": 0}}, {"end": {"col": 24, "line": 2425, "offset": 4}, "path": "llama/ggml.h", "start": {"col": 20, "line": 2425, "offset": 0}}, {"end": {"col": 17, "line": 2427, "offset": 3}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2427, "offset": 0}}, {"end": {"col": 20, "line": 2428, "offset": 6}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2428, "offset": 0}}, {"end": {"col": 20, "line": 2429, "offset": 6}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2429, "offset": 0}}, {"end": {"col": 18, "line": 2430, "offset": 4}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2430, "offset": 0}}, {"end": {"col": 17, "line": 2432, "offset": 3}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2432, "offset": 0}}, {"end": {"col": 17, "line": 2433, "offset": 3}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2433, "offset": 0}}, {"end": {"col": 24, "line": 2434, "offset": 4}, "path": "llama/ggml.h", "start": {"col": 20, "line": 2434, "offset": 0}}, {"end": {"col": 28, "line": 2436, "offset": 14}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2436, "offset": 0}}, {"end": {"col": 28, "line": 2437, "offset": 14}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2437, "offset": 0}}, {"end": {"col": 21, "line": 2440, "offset": 7}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2440, "offset": 0}}, {"end": {"col": 20, "line": 2441, "offset": 6}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2441, "offset": 0}}, {"end": {"col": 22, "line": 2442, "offset": 8}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2442, "offset": 0}}, {"end": {"col": 21, "line": 2443, "offset": 7}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2443, "offset": 0}}, {"end": {"col": 22, "line": 2444, "offset": 8}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2444, "offset": 0}}, {"end": {"col": 21, "line": 2445, "offset": 7}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2445, "offset": 0}}, {"end": {"col": 19, "line": 2446, "offset": 5}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2446, "offset": 0}}, {"end": {"col": 22, "line": 2447, "offset": 8}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2447, "offset": 0}}, {"end": {"col": 21, "line": 2448, "offset": 7}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2448, "offset": 0}}, {"end": {"col": 20, "line": 2449, "offset": 6}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2449, "offset": 0}}, {"end": {"col": 18, "line": 2450, "offset": 4}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2450, "offset": 0}}, {"end": {"col": 24, "line": 2451, "offset": 4}, "path": "llama/ggml.h", "start": {"col": 20, "line": 2451, "offset": 0}}, {"end": {"col": 24, "line": 2452, "offset": 4}, "path": "llama/ggml.h", "start": {"col": 20, "line": 2452, "offset": 0}}, {"end": {"col": 17, "line": 2453, "offset": 3}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2453, "offset": 0}}, {"end": {"col": 24, "line": 2454, "offset": 4}, "path": "llama/ggml.h", "start": {"col": 20, "line": 2454, "offset": 0}}, {"end": {"col": 24, "line": 2455, "offset": 4}, "path": "llama/ggml.h", "start": {"col": 20, "line": 2455, "offset": 0}}, {"end": {"col": 17, "line": 2457, "offset": 3}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2457, "offset": 0}}, {"end": {"col": 17, "line": 2458, "offset": 3}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2458, "offset": 0}}, {"end": {"col": 20, "line": 2459, "offset": 6}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2459, "offset": 0}}, {"end": {"col": 18, "line": 2460, "offset": 4}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2460, "offset": 0}}, {"end": {"col": 28, "line": 2461, "offset": 14}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2461, "offset": 0}}, {"end": {"col": 18, "line": 2464, "offset": 4}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2464, "offset": 0}}, {"end": {"col": 18, "line": 2467, "offset": 4}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2467, "offset": 0}}, {"end": {"col": 18, "line": 2468, "offset": 4}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2468, "offset": 0}}, {"end": {"col": 18, "line": 2469, "offset": 4}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2469, "offset": 0}}, {"end": {"col": 18, "line": 2470, "offset": 4}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2470, "offset": 0}}, {"end": {"col": 18, "line": 2471, "offset": 4}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2471, "offset": 0}}, {"end": {"col": 18, "line": 2472, "offset": 4}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2472, "offset": 0}}, {"end": {"col": 18, "line": 2473, "offset": 4}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2473, "offset": 0}}, {"end": {"col": 18, "line": 2474, "offset": 4}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2474, "offset": 0}}, {"end": {"col": 18, "line": 2475, "offset": 4}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2475, "offset": 0}}, {"end": {"col": 18, "line": 2476, "offset": 4}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2476, "offset": 0}}, {"end": {"col": 18, "line": 2477, "offset": 4}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2477, "offset": 0}}, {"end": {"col": 18, "line": 2478, "offset": 4}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2478, "offset": 0}}, {"end": {"col": 18, "line": 2479, "offset": 4}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2479, "offset": 0}}, {"end": {"col": 18, "line": 2480, "offset": 4}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2480, "offset": 0}}, {"end": {"col": 18, "line": 2483, "offset": 4}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2483, "offset": 0}}, {"end": {"col": 18, "line": 2486, "offset": 4}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2486, "offset": 0}}, {"end": {"col": 18, "line": 2487, "offset": 4}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2487, "offset": 0}}, {"end": {"col": 18, "line": 2488, "offset": 4}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2488, "offset": 0}}, {"end": {"col": 18, "line": 2509, "offset": 4}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2509, "offset": 0}}, {"end": {"col": 20, "line": 2512, "offset": 6}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2512, "offset": 0}}, {"end": {"col": 18, "line": 2513, "offset": 4}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2513, "offset": 0}}, {"end": {"col": 17, "line": 2519, "offset": 3}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2519, "offset": 0}}, {"end": {"col": 17, "line": 2520, "offset": 3}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2520, "offset": 0}}, {"end": {"col": 17, "line": 2521, "offset": 3}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2521, "offset": 0}}, {"end": {"col": 17, "line": 2522, "offset": 3}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2522, "offset": 0}}, {"end": {"col": 17, "line": 2523, "offset": 3}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2523, "offset": 0}}, {"end": {"col": 17, "line": 2524, "offset": 3}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2524, "offset": 0}}, {"end": {"col": 17, "line": 2525, "offset": 3}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2525, "offset": 0}}, {"end": {"col": 17, "line": 2526, "offset": 3}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2526, "offset": 0}}, {"end": {"col": 17, "line": 2527, "offset": 3}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2527, "offset": 0}}, {"end": {"col": 17, "line": 2528, "offset": 3}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2528, "offset": 0}}, {"end": {"col": 17, "line": 2529, "offset": 3}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2529, "offset": 0}}, {"end": {"col": 17, "line": 2530, "offset": 3}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2530, "offset": 0}}, {"end": {"col": 17, "line": 2531, "offset": 3}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2531, "offset": 0}}, {"end": {"col": 17, "line": 2532, "offset": 3}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2532, "offset": 0}}, {"end": {"col": 17, "line": 2533, "offset": 3}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2533, "offset": 0}}, {"end": {"col": 17, "line": 2534, "offset": 3}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2534, "offset": 0}}, {"end": {"col": 17, "line": 2535, "offset": 3}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2535, "offset": 0}}, {"end": {"col": 17, "line": 2536, "offset": 3}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2536, "offset": 0}}, {"end": {"col": 17, "line": 2537, "offset": 3}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2537, "offset": 0}}, {"end": {"col": 17, "line": 2538, "offset": 3}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2538, "offset": 0}}, {"end": {"col": 17, "line": 2539, "offset": 3}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2539, "offset": 0}}, {"end": {"col": 17, "line": 2540, "offset": 3}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2540, "offset": 0}}, {"end": {"col": 17, "line": 2541, "offset": 3}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2541, "offset": 0}}, {"end": {"col": 17, "line": 2542, "offset": 3}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2542, "offset": 0}}, {"end": {"col": 17, "line": 2543, "offset": 3}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2543, "offset": 0}}, {"end": {"col": 17, "line": 2544, "offset": 3}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2544, "offset": 0}}, {"end": {"col": 17, "line": 2545, "offset": 3}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2545, "offset": 0}}, {"end": {"col": 17, "line": 2546, "offset": 3}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2546, "offset": 0}}, {"end": {"col": 17, "line": 2547, "offset": 3}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2547, "offset": 0}}, {"end": {"col": 17, "line": 2550, "offset": 3}, "path": "llama/ggml.h", "start": {"col": 14, "line": 2550, "offset": 0}}, {"end": {"col": 68, "line": 2562, "offset": 1}, "path": "llama/ggml.h", "start": {"col": 67, "line": 2562, "offset": 0}}, {"end": {"col": 93, "line": 2562, "offset": 1}, "path": "llama/ggml.h", "start": {"col": 92, "line": 2562, "offset": 0}}, {"end": {"col": 68, "line": 2563, "offset": 1}, "path": "llama/ggml.h", "start": {"col": 67, "line": 2563, "offset": 0}}, {"end": {"col": 93, "line": 2563, "offset": 1}, "path": "llama/ggml.h", "start": {"col": 92, "line": 2563, "offset": 0}}, {"end": {"col": 68, "line": 2565, "offset": 1}, "path": "llama/ggml.h", "start": {"col": 67, "line": 2565, "offset": 0}}, {"end": {"col": 92, "line": 2565, "offset": 1}, "path": "llama/ggml.h", "start": {"col": 91, "line": 2565, "offset": 0}}, {"end": {"col": 68, "line": 2566, "offset": 1}, "path": "llama/ggml.h", "start": {"col": 67, "line": 2566, "offset": 0}}, {"end": {"col": 109, "line": 2566, "offset": 1}, "path": "llama/ggml.h", "start": {"col": 108, "line": 2566, "offset": 0}}, {"end": {"col": 68, "line": 2567, "offset": 1}, "path": "llama/ggml.h", "start": {"col": 67, "line": 2567, "offset": 0}}, {"end": {"col": 68, "line": 2568, "offset": 1}, "path": "llama/ggml.h", "start": {"col": 67, "line": 2568, "offset": 0}}, {"end": {"col": 109, "line": 2568, "offset": 1}, "path": "llama/ggml.h", "start": {"col": 108, "line": 2568, "offset": 0}}, {"end": {"col": 68, "line": 2569, "offset": 1}, "path": "llama/ggml.h", "start": {"col": 67, "line": 2569, "offset": 0}}, {"end": {"col": 68, "line": 2570, "offset": 1}, "path": "llama/ggml.h", "start": {"col": 67, "line": 2570, "offset": 0}}, {"end": {"col": 109, "line": 2570, "offset": 1}, "path": "llama/ggml.h", "start": {"col": 108, "line": 2570, "offset": 0}}, {"end": {"col": 68, "line": 2571, "offset": 1}, "path": "llama/ggml.h", "start": {"col": 67, "line": 2571, "offset": 0}}]]}, {"code": 2, "level": "warn", "message": "Timeout when running cpp.lang.security.strings.narrow-to-wide-string-mismatch.narrow-to-wide-string-mismatch on llama/ggml-backend.c:\n ", "path": "llama/ggml-backend.c", "rule_id": "cpp.lang.security.strings.narrow-to-wide-string-mismatch.narrow-to-wide-string-mismatch", "type": "Timeout"}, {"code": 2, "level": "warn", "message": "Timeout when running cpp.lang.security.strings.wide-to-narrow-string-mismatch.wide-to-narrow-string-mismatch on llama/ggml-backend.c:\n ", "path": "llama/ggml-backend.c", "rule_id": "cpp.lang.security.strings.wide-to-narrow-string-mismatch.wide-to-narrow-string-mismatch", "type": "Timeout"}, {"code": 3, "level": "warn", "message": "Syntax error at line llama/ggml-backend.c:63:\n `size_t` was unexpected", "path": "llama/ggml-backend.c", "spans": [{"end": {"col": 17, "line": 63, "offset": 6}, "file": "llama/ggml-backend.c", "start": {"col": 11, "line": 63, "offset": 0}}, {"end": {"col": 15, "line": 132, "offset": 4}, "file": "llama/ggml-backend.c", "start": {"col": 11, "line": 132, "offset": 0}}, {"end": {"col": 15, "line": 252, "offset": 4}, "file": "llama/ggml-backend.c", "start": {"col": 11, "line": 252, "offset": 0}}, {"end": {"col": 15, "line": 266, "offset": 4}, "file": "llama/ggml-backend.c", "start": {"col": 11, "line": 266, "offset": 0}}, {"end": {"col": 24, "line": 280, "offset": 14}, "file": "llama/ggml-backend.c", "start": {"col": 10, "line": 280, "offset": 0}}, {"end": {"col": 22, "line": 457, "offset": 4}, "file": "llama/ggml-backend.c", "start": {"col": 18, "line": 457, "offset": 0}}, {"end": {"col": 26, "line": 470, "offset": 4}, "file": "llama/ggml-backend.c", "start": {"col": 22, "line": 470, "offset": 0}}, {"end": {"col": 25, "line": 486, "offset": 3}, "file": "llama/ggml-backend.c", "start": {"col": 22, "line": 486, "offset": 0}}, {"end": {"col": 26, "line": 491, "offset": 4}, "file": "llama/ggml-backend.c", "start": {"col": 22, "line": 491, "offset": 0}}, {"end": {"col": 25, "line": 496, "offset": 3}, "file": "llama/ggml-backend.c", "start": {"col": 22, "line": 496, "offset": 0}}, {"end": {"col": 15, "line": 501, "offset": 4}, "file": "llama/ggml-backend.c", "start": {"col": 11, "line": 501, "offset": 0}}, {"end": {"col": 28, "line": 598, "offset": 4}, "file": "llama/ggml-backend.c", "start": {"col": 24, "line": 598, "offset": 0}}, {"end": {"col": 22, "line": 604, "offset": 4}, "file": "llama/ggml-backend.c", "start": {"col": 18, "line": 604, "offset": 0}}, {"end": {"col": 22, "line": 615, "offset": 4}, "file": "llama/ggml-backend.c", "start": {"col": 18, "line": 615, "offset": 0}}, {"end": {"col": 22, "line": 619, "offset": 4}, "file": "llama/ggml-backend.c", "start": {"col": 18, "line": 619, "offset": 0}}, {"end": {"col": 22, "line": 625, "offset": 4}, "file": "llama/ggml-backend.c", "start": {"col": 18, "line": 625, "offset": 0}}, {"end": {"col": 22, "line": 631, "offset": 4}, "file": "llama/ggml-backend.c", "start": {"col": 18, "line": 631, "offset": 0}}, {"end": {"col": 22, "line": 637, "offset": 4}, "file": "llama/ggml-backend.c", "start": {"col": 18, "line": 637, "offset": 0}}, {"end": {"col": 22, "line": 647, "offset": 4}, "file": "llama/ggml-backend.c", "start": {"col": 18, "line": 647, "offset": 0}}, {"end": {"col": 28, "line": 678, "offset": 4}, "file": "llama/ggml-backend.c", "start": {"col": 24, "line": 678, "offset": 0}}, {"end": {"col": 24, "line": 695, "offset": 6}, "file": "llama/ggml-backend.c", "start": {"col": 18, "line": 695, "offset": 0}}, {"end": {"col": 22, "line": 701, "offset": 4}, "file": "llama/ggml-backend.c", "start": {"col": 18, "line": 701, "offset": 0}}, {"end": {"col": 28, "line": 729, "offset": 4}, "file": "llama/ggml-backend.c", "start": {"col": 24, "line": 729, "offset": 0}}, {"end": {"col": 28, "line": 735, "offset": 4}, "file": "llama/ggml-backend.c", "start": {"col": 24, "line": 735, "offset": 0}}, {"end": {"col": 22, "line": 741, "offset": 4}, "file": "llama/ggml-backend.c", "start": {"col": 18, "line": 741, "offset": 0}}, {"end": {"col": 28, "line": 790, "offset": 4}, "file": "llama/ggml-backend.c", "start": {"col": 24, "line": 790, "offset": 0}}, {"end": {"col": 22, "line": 796, "offset": 4}, "file": "llama/ggml-backend.c", "start": {"col": 18, "line": 796, "offset": 0}}, {"end": {"col": 22, "line": 836, "offset": 4}, "file": "llama/ggml-backend.c", "start": {"col": 18, "line": 836, "offset": 0}}, {"end": {"col": 34, "line": 845, "offset": 16}, "file": "llama/ggml-backend.c", "start": {"col": 18, "line": 845, "offset": 0}}, {"end": {"col": 34, "line": 853, "offset": 16}, "file": "llama/ggml-backend.c", "start": {"col": 18, "line": 853, "offset": 0}}, {"end": {"col": 22, "line": 875, "offset": 4}, "file": "llama/ggml-backend.c", "start": {"col": 18, "line": 875, "offset": 0}}, {"end": {"col": 22, "line": 896, "offset": 4}, "file": "llama/ggml-backend.c", "start": {"col": 18, "line": 896, "offset": 0}}, {"end": {"col": 15, "line": 957, "offset": 4}, "file": "llama/ggml-backend.c", "start": {"col": 11, "line": 957, "offset": 0}}, {"end": {"col": 28, "line": 1009, "offset": 4}, "file": "llama/ggml-backend.c", "start": {"col": 24, "line": 1009, "offset": 0}}, {"end": {"col": 22, "line": 1015, "offset": 4}, "file": "llama/ggml-backend.c", "start": {"col": 18, "line": 1015, "offset": 0}}, {"end": {"col": 22, "line": 1025, "offset": 4}, "file": "llama/ggml-backend.c", "start": {"col": 18, "line": 1025, "offset": 0}}, {"end": {"col": 15, "line": 1065, "offset": 4}, "file": "llama/ggml-backend.c", "start": {"col": 11, "line": 1065, "offset": 0}}, {"end": {"col": 15, "line": 1069, "offset": 4}, "file": "llama/ggml-backend.c", "start": {"col": 11, "line": 1069, "offset": 0}}], "type": ["PartialParsing", [{"end": {"col": 17, "line": 63, "offset": 6}, "path": "llama/ggml-backend.c", "start": {"col": 11, "line": 63, "offset": 0}}, {"end": {"col": 15, "line": 132, "offset": 4}, "path": "llama/ggml-backend.c", "start": {"col": 11, "line": 132, "offset": 0}}, {"end": {"col": 15, "line": 252, "offset": 4}, "path": "llama/ggml-backend.c", "start": {"col": 11, "line": 252, "offset": 0}}, {"end": {"col": 15, "line": 266, "offset": 4}, "path": "llama/ggml-backend.c", "start": {"col": 11, "line": 266, "offset": 0}}, {"end": {"col": 24, "line": 280, "offset": 14}, "path": "llama/ggml-backend.c", "start": {"col": 10, "line": 280, "offset": 0}}, {"end": {"col": 22, "line": 457, "offset": 4}, "path": "llama/ggml-backend.c", "start": {"col": 18, "line": 457, "offset": 0}}, {"end": {"col": 26, "line": 470, "offset": 4}, "path": "llama/ggml-backend.c", "start": {"col": 22, "line": 470, "offset": 0}}, {"end": {"col": 25, "line": 486, "offset": 3}, "path": "llama/ggml-backend.c", "start": {"col": 22, "line": 486, "offset": 0}}, {"end": {"col": 26, "line": 491, "offset": 4}, "path": "llama/ggml-backend.c", "start": {"col": 22, "line": 491, "offset": 0}}, {"end": {"col": 25, "line": 496, "offset": 3}, "path": "llama/ggml-backend.c", "start": {"col": 22, "line": 496, "offset": 0}}, {"end": {"col": 15, "line": 501, "offset": 4}, "path": "llama/ggml-backend.c", "start": {"col": 11, "line": 501, "offset": 0}}, {"end": {"col": 28, "line": 598, "offset": 4}, "path": "llama/ggml-backend.c", "start": {"col": 24, "line": 598, "offset": 0}}, {"end": {"col": 22, "line": 604, "offset": 4}, "path": "llama/ggml-backend.c", "start": {"col": 18, "line": 604, "offset": 0}}, {"end": {"col": 22, "line": 615, "offset": 4}, "path": "llama/ggml-backend.c", "start": {"col": 18, "line": 615, "offset": 0}}, {"end": {"col": 22, "line": 619, "offset": 4}, "path": "llama/ggml-backend.c", "start": {"col": 18, "line": 619, "offset": 0}}, {"end": {"col": 22, "line": 625, "offset": 4}, "path": "llama/ggml-backend.c", "start": {"col": 18, "line": 625, "offset": 0}}, {"end": {"col": 22, "line": 631, "offset": 4}, "path": "llama/ggml-backend.c", "start": {"col": 18, "line": 631, "offset": 0}}, {"end": {"col": 22, "line": 637, "offset": 4}, "path": "llama/ggml-backend.c", "start": {"col": 18, "line": 637, "offset": 0}}, {"end": {"col": 22, "line": 647, "offset": 4}, "path": "llama/ggml-backend.c", "start": {"col": 18, "line": 647, "offset": 0}}, {"end": {"col": 28, "line": 678, "offset": 4}, "path": "llama/ggml-backend.c", "start": {"col": 24, "line": 678, "offset": 0}}, {"end": {"col": 24, "line": 695, "offset": 6}, "path": "llama/ggml-backend.c", "start": {"col": 18, "line": 695, "offset": 0}}, {"end": {"col": 22, "line": 701, "offset": 4}, "path": "llama/ggml-backend.c", "start": {"col": 18, "line": 701, "offset": 0}}, {"end": {"col": 28, "line": 729, "offset": 4}, "path": "llama/ggml-backend.c", "start": {"col": 24, "line": 729, "offset": 0}}, {"end": {"col": 28, "line": 735, "offset": 4}, "path": "llama/ggml-backend.c", "start": {"col": 24, "line": 735, "offset": 0}}, {"end": {"col": 22, "line": 741, "offset": 4}, "path": "llama/ggml-backend.c", "start": {"col": 18, "line": 741, "offset": 0}}, {"end": {"col": 28, "line": 790, "offset": 4}, "path": "llama/ggml-backend.c", "start": {"col": 24, "line": 790, "offset": 0}}, {"end": {"col": 22, "line": 796, "offset": 4}, "path": "llama/ggml-backend.c", "start": {"col": 18, "line": 796, "offset": 0}}, {"end": {"col": 22, "line": 836, "offset": 4}, "path": "llama/ggml-backend.c", "start": {"col": 18, "line": 836, "offset": 0}}, {"end": {"col": 34, "line": 845, "offset": 16}, "path": "llama/ggml-backend.c", "start": {"col": 18, "line": 845, "offset": 0}}, {"end": {"col": 34, "line": 853, "offset": 16}, "path": "llama/ggml-backend.c", "start": {"col": 18, "line": 853, "offset": 0}}, {"end": {"col": 22, "line": 875, "offset": 4}, "path": "llama/ggml-backend.c", "start": {"col": 18, "line": 875, "offset": 0}}, {"end": {"col": 22, "line": 896, "offset": 4}, "path": "llama/ggml-backend.c", "start": {"col": 18, "line": 896, "offset": 0}}, {"end": {"col": 15, "line": 957, "offset": 4}, "path": "llama/ggml-backend.c", "start": {"col": 11, "line": 957, "offset": 0}}, {"end": {"col": 28, "line": 1009, "offset": 4}, "path": "llama/ggml-backend.c", "start": {"col": 24, "line": 1009, "offset": 0}}, {"end": {"col": 22, "line": 1015, "offset": 4}, "path": "llama/ggml-backend.c", "start": {"col": 18, "line": 1015, "offset": 0}}, {"end": {"col": 22, "line": 1025, "offset": 4}, "path": "llama/ggml-backend.c", "start": {"col": 18, "line": 1025, "offset": 0}}, {"end": {"col": 15, "line": 1065, "offset": 4}, "path": "llama/ggml-backend.c", "start": {"col": 11, "line": 1065, "offset": 0}}, {"end": {"col": 15, "line": 1069, "offset": 4}, "path": "llama/ggml-backend.c", "start": {"col": 11, "line": 1069, "offset": 0}}]]}, {"code": 2, "level": "warn", "message": "Timeout when running cpp.lang.security.strings.narrow-to-wide-string-mismatch.narrow-to-wide-string-mismatch on llama/llama-vocab.cpp:\n ", "path": "llama/llama-vocab.cpp", "rule_id": "cpp.lang.security.strings.narrow-to-wide-string-mismatch.narrow-to-wide-string-mismatch", "type": "Timeout"}, {"code": 2, "level": "warn", "message": "Timeout when running cpp.lang.security.strings.narrow-to-wide-string-mismatch.narrow-to-wide-string-mismatch on llama/common.cpp:\n ", "path": "llama/common.cpp", "rule_id": "cpp.lang.security.strings.narrow-to-wide-string-mismatch.narrow-to-wide-string-mismatch", "type": "Timeout"}, {"code": 2, "level": "warn", "message": "Timeout when running cpp.lang.security.strings.wide-to-narrow-string-mismatch.wide-to-narrow-string-mismatch on llama/common.cpp:\n ", "path": "llama/common.cpp", "rule_id": "cpp.lang.security.strings.wide-to-narrow-string-mismatch.wide-to-narrow-string-mismatch", "type": "Timeout"}, {"code": 3, "level": "warn", "message": "Syntax error at line llama/common.cpp:173:\n `*` was unexpected", "path": "llama/common.cpp", "spans": [{"end": {"col": 21, "line": 173, "offset": 1}, "file": "llama/common.cpp", "start": {"col": 20, "line": 173, "offset": 0}}, {"end": {"col": 33, "line": 173, "offset": 1}, "file": "llama/common.cpp", "start": {"col": 32, "line": 173, "offset": 0}}, {"end": {"col": 45, "line": 173, "offset": 1}, "file": "llama/common.cpp", "start": {"col": 44, "line": 173, "offset": 0}}, {"end": {"col": 57, "line": 173, "offset": 1}, "file": "llama/common.cpp", "start": {"col": 56, "line": 173, "offset": 0}}, {"end": {"col": 37, "line": 465, "offset": 5}, "file": "llama/common.cpp", "start": {"col": 32, "line": 465, "offset": 0}}], "type": ["PartialParsing", [{"end": {"col": 21, "line": 173, "offset": 1}, "path": "llama/common.cpp", "start": {"col": 20, "line": 173, "offset": 0}}, {"end": {"col": 33, "line": 173, "offset": 1}, "path": "llama/common.cpp", "start": {"col": 32, "line": 173, "offset": 0}}, {"end": {"col": 45, "line": 173, "offset": 1}, "path": "llama/common.cpp", "start": {"col": 44, "line": 173, "offset": 0}}, {"end": {"col": 57, "line": 173, "offset": 1}, "path": "llama/common.cpp", "start": {"col": 56, "line": 173, "offset": 0}}, {"end": {"col": 37, "line": 465, "offset": 5}, "path": "llama/common.cpp", "start": {"col": 32, "line": 465, "offset": 0}}]]}, {"code": 3, "level": "warn", "message": "Syntax error at line llama/llama.h:419:\n `struct llama_model_params` was unexpected", "path": "llama/llama.h", "spans": [{"end": {"col": 40, "line": 419, "offset": 25}, "file": "llama/llama.h", "start": {"col": 15, "line": 419, "offset": 0}}, {"end": {"col": 42, "line": 420, "offset": 27}, "file": "llama/llama.h", "start": {"col": 15, "line": 420, "offset": 0}}, {"end": {"col": 48, "line": 421, "offset": 33}, "file": "llama/llama.h", "start": {"col": 15, "line": 421, "offset": 0}}, {"end": {"col": 49, "line": 422, "offset": 34}, "file": "llama/llama.h", "start": {"col": 15, "line": 422, "offset": 0}}, {"end": {"col": 19, "line": 427, "offset": 4}, "file": "llama/llama.h", "start": {"col": 15, "line": 427, "offset": 0}}, {"end": {"col": 19, "line": 430, "offset": 4}, "file": "llama/llama.h", "start": {"col": 15, "line": 430, "offset": 0}}, {"end": {"col": 19, "line": 433, "offset": 4}, "file": "llama/llama.h", "start": {"col": 15, "line": 433, "offset": 0}}, {"end": {"col": 19, "line": 437, "offset": 4}, "file": "llama/llama.h", "start": {"col": 15, "line": 437, "offset": 0}}, {"end": {"col": 19, "line": 440, "offset": 4}, "file": "llama/llama.h", "start": {"col": 15, "line": 440, "offset": 0}}, {"end": {"col": 33, "line": 442, "offset": 18}, "file": "llama/llama.h", "start": {"col": 15, "line": 442, "offset": 0}}, {"end": {"col": 19, "line": 446, "offset": 4}, "file": "llama/llama.h", "start": {"col": 15, "line": 446, "offset": 0}}, {"end": {"col": 35, "line": 449, "offset": 20}, "file": "llama/llama.h", "start": {"col": 15, "line": 449, "offset": 0}}, {"end": {"col": 19, "line": 455, "offset": 4}, "file": "llama/llama.h", "start": {"col": 15, "line": 455, "offset": 0}}, {"end": {"col": 19, "line": 458, "offset": 4}, "file": "llama/llama.h", "start": {"col": 15, "line": 458, "offset": 0}}, {"end": {"col": 22, "line": 460, "offset": 7}, "file": "llama/llama.h", "start": {"col": 15, "line": 460, "offset": 0}}, {"end": {"col": 21, "line": 462, "offset": 6}, "file": "llama/llama.h", "start": {"col": 15, "line": 462, "offset": 0}}, {"end": {"col": 19, "line": 464, "offset": 4}, "file": "llama/llama.h", "start": {"col": 15, "line": 464, "offset": 0}}, {"end": {"col": 19, "line": 465, "offset": 4}, "file": "llama/llama.h", "start": {"col": 15, "line": 465, "offset": 0}}, {"end": {"col": 19, "line": 466, "offset": 4}, "file": "llama/llama.h", "start": {"col": 15, "line": 466, "offset": 0}}, {"end": {"col": 23, "line": 468, "offset": 8}, "file": "llama/llama.h", "start": {"col": 15, "line": 468, "offset": 0}}, {"end": {"col": 23, "line": 469, "offset": 8}, "file": "llama/llama.h", "start": {"col": 15, "line": 469, "offset": 0}}, {"end": {"col": 23, "line": 470, "offset": 8}, "file": "llama/llama.h", "start": {"col": 15, "line": 470, "offset": 0}}, {"end": {"col": 23, "line": 471, "offset": 8}, "file": "llama/llama.h", "start": {"col": 15, "line": 471, "offset": 0}}, {"end": {"col": 22, "line": 473, "offset": 7}, "file": "llama/llama.h", "start": {"col": 15, "line": 473, "offset": 0}}, {"end": {"col": 22, "line": 474, "offset": 7}, "file": "llama/llama.h", "start": {"col": 15, "line": 474, "offset": 0}}, {"end": {"col": 22, "line": 475, "offset": 7}, "file": "llama/llama.h", "start": {"col": 15, "line": 475, "offset": 0}}, {"end": {"col": 22, "line": 476, "offset": 7}, "file": "llama/llama.h", "start": {"col": 15, "line": 476, "offset": 0}}, {"end": {"col": 22, "line": 477, "offset": 7}, "file": "llama/llama.h", "start": {"col": 15, "line": 477, "offset": 0}}, {"end": {"col": 39, "line": 479, "offset": 18}, "file": "llama/llama.h", "start": {"col": 21, "line": 479, "offset": 0}}, {"end": {"col": 38, "line": 481, "offset": 23}, "file": "llama/llama.h", "start": {"col": 15, "line": 481, "offset": 0}}, {"end": {"col": 36, "line": 482, "offset": 21}, "file": "llama/llama.h", "start": {"col": 15, "line": 482, "offset": 0}}, {"end": {"col": 35, "line": 483, "offset": 20}, "file": "llama/llama.h", "start": {"col": 15, "line": 483, "offset": 0}}, {"end": {"col": 20, "line": 486, "offset": 5}, "file": "llama/llama.h", "start": {"col": 15, "line": 486, "offset": 0}}, {"end": {"col": 22, "line": 494, "offset": 7}, "file": "llama/llama.h", "start": {"col": 15, "line": 494, "offset": 0}}, {"end": {"col": 22, "line": 497, "offset": 7}, "file": "llama/llama.h", "start": {"col": 15, "line": 497, "offset": 0}}, {"end": {"col": 22, "line": 500, "offset": 7}, "file": "llama/llama.h", "start": {"col": 15, "line": 500, "offset": 0}}, {"end": {"col": 22, "line": 503, "offset": 7}, "file": "llama/llama.h", "start": {"col": 15, "line": 503, "offset": 0}}, {"end": {"col": 22, "line": 506, "offset": 7}, "file": "llama/llama.h", "start": {"col": 15, "line": 506, "offset": 0}}, {"end": {"col": 23, "line": 509, "offset": 8}, "file": "llama/llama.h", "start": {"col": 15, "line": 509, "offset": 0}}, {"end": {"col": 23, "line": 512, "offset": 8}, "file": "llama/llama.h", "start": {"col": 15, "line": 512, "offset": 0}}, {"end": {"col": 33, "line": 515, "offset": 18}, "file": "llama/llama.h", "start": {"col": 15, "line": 515, "offset": 0}}, {"end": {"col": 19, "line": 518, "offset": 4}, "file": "llama/llama.h", "start": {"col": 15, "line": 518, "offset": 0}}, {"end": {"col": 19, "line": 521, "offset": 4}, "file": "llama/llama.h", "start": {"col": 15, "line": 521, "offset": 0}}, {"end": {"col": 19, "line": 528, "offset": 4}, "file": "llama/llama.h", "start": {"col": 15, "line": 528, "offset": 0}}, {"end": {"col": 23, "line": 531, "offset": 8}, "file": "llama/llama.h", "start": {"col": 15, "line": 531, "offset": 0}}, {"end": {"col": 40, "line": 538, "offset": 25}, "file": "llama/llama.h", "start": {"col": 15, "line": 538, "offset": 0}}, {"end": {"col": 22, "line": 544, "offset": 7}, "file": "llama/llama.h", "start": {"col": 15, "line": 544, "offset": 0}}, {"end": {"col": 22, "line": 551, "offset": 7}, "file": "llama/llama.h", "start": {"col": 15, "line": 551, "offset": 0}}, {"end": {"col": 19, "line": 556, "offset": 4}, "file": "llama/llama.h", "start": {"col": 15, "line": 556, "offset": 0}}, {"end": {"col": 19, "line": 561, "offset": 4}, "file": "llama/llama.h", "start": {"col": 15, "line": 561, "offset": 0}}, {"end": {"col": 22, "line": 569, "offset": 7}, "file": "llama/llama.h", "start": {"col": 15, "line": 569, "offset": 0}}, {"end": {"col": 41, "line": 621, "offset": 26}, "file": "llama/llama.h", "start": {"col": 15, "line": 621, "offset": 0}}, {"end": {"col": 19, "line": 624, "offset": 4}, "file": "llama/llama.h", "start": {"col": 15, "line": 624, "offset": 0}}, {"end": {"col": 19, "line": 627, "offset": 4}, "file": "llama/llama.h", "start": {"col": 15, "line": 627, "offset": 0}}, {"end": {"col": 22, "line": 631, "offset": 7}, "file": "llama/llama.h", "start": {"col": 15, "line": 631, "offset": 0}}, {"end": {"col": 22, "line": 634, "offset": 7}, "file": "llama/llama.h", "start": {"col": 15, "line": 634, "offset": 0}}, {"end": {"col": 19, "line": 637, "offset": 4}, "file": "llama/llama.h", "start": {"col": 15, "line": 637, "offset": 0}}, {"end": {"col": 19, "line": 645, "offset": 4}, "file": "llama/llama.h", "start": {"col": 15, "line": 645, "offset": 0}}, {"end": {"col": 19, "line": 655, "offset": 4}, "file": "llama/llama.h", "start": {"col": 15, "line": 655, "offset": 0}}, {"end": {"col": 19, "line": 663, "offset": 4}, "file": "llama/llama.h", "start": {"col": 15, "line": 663, "offset": 0}}, {"end": {"col": 19, "line": 673, "offset": 4}, "file": "llama/llama.h", "start": {"col": 15, "line": 673, "offset": 0}}, {"end": {"col": 19, "line": 686, "offset": 4}, "file": "llama/llama.h", "start": {"col": 15, "line": 686, "offset": 0}}, {"end": {"col": 24, "line": 694, "offset": 9}, "file": "llama/llama.h", "start": {"col": 15, "line": 694, "offset": 0}}, {"end": {"col": 19, "line": 702, "offset": 4}, "file": "llama/llama.h", "start": {"col": 15, "line": 702, "offset": 0}}, {"end": {"col": 19, "line": 705, "offset": 4}, "file": "llama/llama.h", "start": {"col": 15, "line": 705, "offset": 0}}, {"end": {"col": 21, "line": 714, "offset": 6}, "file": "llama/llama.h", "start": {"col": 15, "line": 714, "offset": 0}}, {"end": {"col": 82, "line": 715, "offset": 56}, "file": "llama/llama.h", "start": {"col": 26, "line": 715, "offset": 0}}, {"end": {"col": 21, "line": 721, "offset": 6}, "file": "llama/llama.h", "start": {"col": 15, "line": 721, "offset": 0}}, {"end": {"col": 41, "line": 727, "offset": 110}, "file": "llama/llama.h", "start": {"col": 26, "line": 725, "offset": 0}}, {"end": {"col": 21, "line": 732, "offset": 6}, "file": "llama/llama.h", "start": {"col": 15, "line": 732, "offset": 0}}, {"end": {"col": 41, "line": 738, "offset": 109}, "file": "llama/llama.h", "start": {"col": 26, "line": 736, "offset": 0}}, {"end": {"col": 19, "line": 742, "offset": 4}, "file": "llama/llama.h", "start": {"col": 15, "line": 742, "offset": 0}}, {"end": {"col": 55, "line": 753, "offset": 273}, "file": "llama/llama.h", "start": {"col": 26, "line": 748, "offset": 0}}, {"end": {"col": 19, "line": 756, "offset": 4}, "file": "llama/llama.h", "start": {"col": 15, "line": 756, "offset": 0}}, {"end": {"col": 51, "line": 765, "offset": 212}, "file": "llama/llama.h", "start": {"col": 26, "line": 761, "offset": 0}}, {"end": {"col": 21, "line": 769, "offset": 6}, "file": "llama/llama.h", "start": {"col": 15, "line": 769, "offset": 0}}, {"end": {"col": 21, "line": 774, "offset": 6}, "file": "llama/llama.h", "start": {"col": 15, "line": 774, "offset": 0}}, {"end": {"col": 21, "line": 784, "offset": 6}, "file": "llama/llama.h", "start": {"col": 15, "line": 784, "offset": 0}}, {"end": {"col": 21, "line": 790, "offset": 6}, "file": "llama/llama.h", "start": {"col": 15, "line": 790, "offset": 0}}, {"end": {"col": 21, "line": 797, "offset": 6}, "file": "llama/llama.h", "start": {"col": 15, "line": 797, "offset": 0}}, {"end": {"col": 33, "line": 813, "offset": 18}, "file": "llama/llama.h", "start": {"col": 15, "line": 813, "offset": 0}}, {"end": {"col": 33, "line": 826, "offset": 18}, "file": "llama/llama.h", "start": {"col": 15, "line": 826, "offset": 0}}, {"end": {"col": 19, "line": 832, "offset": 4}, "file": "llama/llama.h", "start": {"col": 15, "line": 832, "offset": 0}}, {"end": {"col": 22, "line": 838, "offset": 7}, "file": "llama/llama.h", "start": {"col": 15, "line": 838, "offset": 0}}, {"end": {"col": 22, "line": 846, "offset": 7}, "file": "llama/llama.h", "start": {"col": 15, "line": 846, "offset": 0}}, {"end": {"col": 19, "line": 853, "offset": 4}, "file": "llama/llama.h", "start": {"col": 15, "line": 853, "offset": 0}}, {"end": {"col": 22, "line": 856, "offset": 7}, "file": "llama/llama.h", "start": {"col": 15, "line": 856, "offset": 0}}, {"end": {"col": 22, "line": 859, "offset": 7}, "file": "llama/llama.h", "start": {"col": 15, "line": 859, "offset": 0}}, {"end": {"col": 19, "line": 863, "offset": 4}, "file": "llama/llama.h", "start": {"col": 15, "line": 863, "offset": 0}}, {"end": {"col": 19, "line": 867, "offset": 4}, "file": "llama/llama.h", "start": {"col": 15, "line": 867, "offset": 0}}, {"end": {"col": 19, "line": 870, "offset": 4}, "file": "llama/llama.h", "start": {"col": 15, "line": 870, "offset": 0}}, {"end": {"col": 19, "line": 875, "offset": 4}, "file": "llama/llama.h", "start": {"col": 15, "line": 875, "offset": 0}}, {"end": {"col": 20, "line": 882, "offset": 5}, "file": "llama/llama.h", "start": {"col": 15, "line": 882, "offset": 0}}, {"end": {"col": 20, "line": 888, "offset": 5}, "file": "llama/llama.h", "start": {"col": 15, "line": 888, "offset": 0}}, {"end": {"col": 20, "line": 896, "offset": 5}, "file": "llama/llama.h", "start": {"col": 15, "line": 896, "offset": 0}}, {"end": {"col": 20, "line": 903, "offset": 5}, "file": "llama/llama.h", "start": {"col": 15, "line": 903, "offset": 0}}, {"end": {"col": 20, "line": 909, "offset": 5}, "file": "llama/llama.h", "start": {"col": 15, "line": 909, "offset": 0}}, {"end": {"col": 25, "line": 915, "offset": 4}, "file": "llama/llama.h", "start": {"col": 21, "line": 915, "offset": 0}}, {"end": {"col": 20, "line": 917, "offset": 5}, "file": "llama/llama.h", "start": {"col": 15, "line": 917, "offset": 0}}, {"end": {"col": 36, "line": 919, "offset": 21}, "file": "llama/llama.h", "start": {"col": 15, "line": 919, "offset": 0}}, {"end": {"col": 19, "line": 922, "offset": 4}, "file": "llama/llama.h", "start": {"col": 15, "line": 922, "offset": 0}}, {"end": {"col": 19, "line": 925, "offset": 4}, "file": "llama/llama.h", "start": {"col": 15, "line": 925, "offset": 0}}, {"end": {"col": 19, "line": 935, "offset": 4}, "file": "llama/llama.h", "start": {"col": 15, "line": 935, "offset": 0}}, {"end": {"col": 19, "line": 936, "offset": 4}, "file": "llama/llama.h", "start": {"col": 15, "line": 936, "offset": 0}}, {"end": {"col": 22, "line": 957, "offset": 7}, "file": "llama/llama.h", "start": {"col": 15, "line": 957, "offset": 0}}, {"end": {"col": 22, "line": 971, "offset": 7}, "file": "llama/llama.h", "start": {"col": 15, "line": 971, "offset": 0}}, {"end": {"col": 22, "line": 985, "offset": 7}, "file": "llama/llama.h", "start": {"col": 15, "line": 985, "offset": 0}}, {"end": {"col": 22, "line": 1008, "offset": 7}, "file": "llama/llama.h", "start": {"col": 15, "line": 1008, "offset": 0}}, {"end": {"col": 25, "line": 1078, "offset": 4}, "file": "llama/llama.h", "start": {"col": 21, "line": 1078, "offset": 0}}, {"end": {"col": 19, "line": 1079, "offset": 4}, "file": "llama/llama.h", "start": {"col": 15, "line": 1079, "offset": 0}}, {"end": {"col": 19, "line": 1080, "offset": 4}, "file": "llama/llama.h", "start": {"col": 15, "line": 1080, "offset": 0}}, {"end": {"col": 19, "line": 1081, "offset": 4}, "file": "llama/llama.h", "start": {"col": 15, "line": 1081, "offset": 0}}, {"end": {"col": 35, "line": 1082, "offset": 20}, "file": "llama/llama.h", "start": {"col": 15, "line": 1082, "offset": 0}}, {"end": {"col": 19, "line": 1084, "offset": 4}, "file": "llama/llama.h", "start": {"col": 15, "line": 1084, "offset": 0}}, {"end": {"col": 35, "line": 1089, "offset": 20}, "file": "llama/llama.h", "start": {"col": 15, "line": 1089, "offset": 0}}, {"end": {"col": 19, "line": 1092, "offset": 4}, "file": "llama/llama.h", "start": {"col": 15, "line": 1092, "offset": 0}}, {"end": {"col": 35, "line": 1093, "offset": 20}, "file": "llama/llama.h", "start": {"col": 15, "line": 1093, "offset": 0}}, {"end": {"col": 18, "line": 1094, "offset": 3}, "file": "llama/llama.h", "start": {"col": 15, "line": 1094, "offset": 0}}, {"end": {"col": 35, "line": 1097, "offset": 20}, "file": "llama/llama.h", "start": {"col": 15, "line": 1097, "offset": 0}}, {"end": {"col": 35, "line": 1101, "offset": 20}, "file": "llama/llama.h", "start": {"col": 15, "line": 1101, "offset": 0}}, {"end": {"col": 35, "line": 1102, "offset": 20}, "file": "llama/llama.h", "start": {"col": 15, "line": 1102, "offset": 0}}, {"end": {"col": 35, "line": 1106, "offset": 20}, "file": "llama/llama.h", "start": {"col": 15, "line": 1106, "offset": 0}}, {"end": {"col": 35, "line": 1109, "offset": 20}, "file": "llama/llama.h", "start": {"col": 15, "line": 1109, "offset": 0}}, {"end": {"col": 35, "line": 1112, "offset": 20}, "file": "llama/llama.h", "start": {"col": 15, "line": 1112, "offset": 0}}, {"end": {"col": 35, "line": 1115, "offset": 20}, "file": "llama/llama.h", "start": {"col": 15, "line": 1115, "offset": 0}}, {"end": {"col": 35, "line": 1118, "offset": 20}, "file": "llama/llama.h", "start": {"col": 15, "line": 1118, "offset": 0}}, {"end": {"col": 35, "line": 1121, "offset": 20}, "file": "llama/llama.h", "start": {"col": 15, "line": 1121, "offset": 0}}, {"end": {"col": 35, "line": 1122, "offset": 20}, "file": "llama/llama.h", "start": {"col": 15, "line": 1122, "offset": 0}}, {"end": {"col": 35, "line": 1125, "offset": 20}, "file": "llama/llama.h", "start": {"col": 15, "line": 1125, "offset": 0}}, {"end": {"col": 35, "line": 1133, "offset": 20}, "file": "llama/llama.h", "start": {"col": 15, "line": 1133, "offset": 0}}, {"end": {"col": 35, "line": 1145, "offset": 20}, "file": "llama/llama.h", "start": {"col": 15, "line": 1145, "offset": 0}}, {"end": {"col": 35, "line": 1150, "offset": 20}, "file": "llama/llama.h", "start": {"col": 15, "line": 1150, "offset": 0}}, {"end": {"col": 35, "line": 1155, "offset": 20}, "file": "llama/llama.h", "start": {"col": 15, "line": 1155, "offset": 0}}, {"end": {"col": 35, "line": 1166, "offset": 20}, "file": "llama/llama.h", "start": {"col": 15, "line": 1166, "offset": 0}}, {"end": {"col": 23, "line": 1173, "offset": 8}, "file": "llama/llama.h", "start": {"col": 15, "line": 1173, "offset": 0}}, {"end": {"col": 18, "line": 1197, "offset": 3}, "file": "llama/llama.h", "start": {"col": 15, "line": 1197, "offset": 0}}, {"end": {"col": 18, "line": 1202, "offset": 3}, "file": "llama/llama.h", "start": {"col": 15, "line": 1202, "offset": 0}}, {"end": {"col": 25, "line": 1205, "offset": 4}, "file": "llama/llama.h", "start": {"col": 21, "line": 1205, "offset": 0}}, {"end": {"col": 19, "line": 1209, "offset": 4}, "file": "llama/llama.h", "start": {"col": 15, "line": 1209, "offset": 0}}, {"end": {"col": 45, "line": 1233, "offset": 30}, "file": "llama/llama.h", "start": {"col": 15, "line": 1233, "offset": 0}}, {"end": {"col": 19, "line": 1234, "offset": 4}, "file": "llama/llama.h", "start": {"col": 15, "line": 1234, "offset": 0}}, {"end": {"col": 19, "line": 1235, "offset": 4}, "file": "llama/llama.h", "start": {"col": 15, "line": 1235, "offset": 0}}, {"end": {"col": 45, "line": 1238, "offset": 30}, "file": "llama/llama.h", "start": {"col": 15, "line": 1238, "offset": 0}}, {"end": {"col": 19, "line": 1239, "offset": 4}, "file": "llama/llama.h", "start": {"col": 15, "line": 1239, "offset": 0}}, {"end": {"col": 19, "line": 1240, "offset": 4}, "file": "llama/llama.h", "start": {"col": 15, "line": 1240, "offset": 0}}, {"end": {"col": 19, "line": 1242, "offset": 4}, "file": "llama/llama.h", "start": {"col": 15, "line": 1242, "offset": 0}}], "type": ["PartialParsing", [{"end": {"col": 40, "line": 419, "offset": 25}, "path": "llama/llama.h", "start": {"col": 15, "line": 419, "offset": 0}}, {"end": {"col": 42, "line": 420, "offset": 27}, "path": "llama/llama.h", "start": {"col": 15, "line": 420, "offset": 0}}, {"end": {"col": 48, "line": 421, "offset": 33}, "path": "llama/llama.h", "start": {"col": 15, "line": 421, "offset": 0}}, {"end": {"col": 49, "line": 422, "offset": 34}, "path": "llama/llama.h", "start": {"col": 15, "line": 422, "offset": 0}}, {"end": {"col": 19, "line": 427, "offset": 4}, "path": "llama/llama.h", "start": {"col": 15, "line": 427, "offset": 0}}, {"end": {"col": 19, "line": 430, "offset": 4}, "path": "llama/llama.h", "start": {"col": 15, "line": 430, "offset": 0}}, {"end": {"col": 19, "line": 433, "offset": 4}, "path": "llama/llama.h", "start": {"col": 15, "line": 433, "offset": 0}}, {"end": {"col": 19, "line": 437, "offset": 4}, "path": "llama/llama.h", "start": {"col": 15, "line": 437, "offset": 0}}, {"end": {"col": 19, "line": 440, "offset": 4}, "path": "llama/llama.h", "start": {"col": 15, "line": 440, "offset": 0}}, {"end": {"col": 33, "line": 442, "offset": 18}, "path": "llama/llama.h", "start": {"col": 15, "line": 442, "offset": 0}}, {"end": {"col": 19, "line": 446, "offset": 4}, "path": "llama/llama.h", "start": {"col": 15, "line": 446, "offset": 0}}, {"end": {"col": 35, "line": 449, "offset": 20}, "path": "llama/llama.h", "start": {"col": 15, "line": 449, "offset": 0}}, {"end": {"col": 19, "line": 455, "offset": 4}, "path": "llama/llama.h", "start": {"col": 15, "line": 455, "offset": 0}}, {"end": {"col": 19, "line": 458, "offset": 4}, "path": "llama/llama.h", "start": {"col": 15, "line": 458, "offset": 0}}, {"end": {"col": 22, "line": 460, "offset": 7}, "path": "llama/llama.h", "start": {"col": 15, "line": 460, "offset": 0}}, {"end": {"col": 21, "line": 462, "offset": 6}, "path": "llama/llama.h", "start": {"col": 15, "line": 462, "offset": 0}}, {"end": {"col": 19, "line": 464, "offset": 4}, "path": "llama/llama.h", "start": {"col": 15, "line": 464, "offset": 0}}, {"end": {"col": 19, "line": 465, "offset": 4}, "path": "llama/llama.h", "start": {"col": 15, "line": 465, "offset": 0}}, {"end": {"col": 19, "line": 466, "offset": 4}, "path": "llama/llama.h", "start": {"col": 15, "line": 466, "offset": 0}}, {"end": {"col": 23, "line": 468, "offset": 8}, "path": "llama/llama.h", "start": {"col": 15, "line": 468, "offset": 0}}, {"end": {"col": 23, "line": 469, "offset": 8}, "path": "llama/llama.h", "start": {"col": 15, "line": 469, "offset": 0}}, {"end": {"col": 23, "line": 470, "offset": 8}, "path": "llama/llama.h", "start": {"col": 15, "line": 470, "offset": 0}}, {"end": {"col": 23, "line": 471, "offset": 8}, "path": "llama/llama.h", "start": {"col": 15, "line": 471, "offset": 0}}, {"end": {"col": 22, "line": 473, "offset": 7}, "path": "llama/llama.h", "start": {"col": 15, "line": 473, "offset": 0}}, {"end": {"col": 22, "line": 474, "offset": 7}, "path": "llama/llama.h", "start": {"col": 15, "line": 474, "offset": 0}}, {"end": {"col": 22, "line": 475, "offset": 7}, "path": "llama/llama.h", "start": {"col": 15, "line": 475, "offset": 0}}, {"end": {"col": 22, "line": 476, "offset": 7}, "path": "llama/llama.h", "start": {"col": 15, "line": 476, "offset": 0}}, {"end": {"col": 22, "line": 477, "offset": 7}, "path": "llama/llama.h", "start": {"col": 15, "line": 477, "offset": 0}}, {"end": {"col": 39, "line": 479, "offset": 18}, "path": "llama/llama.h", "start": {"col": 21, "line": 479, "offset": 0}}, {"end": {"col": 38, "line": 481, "offset": 23}, "path": "llama/llama.h", "start": {"col": 15, "line": 481, "offset": 0}}, {"end": {"col": 36, "line": 482, "offset": 21}, "path": "llama/llama.h", "start": {"col": 15, "line": 482, "offset": 0}}, {"end": {"col": 35, "line": 483, "offset": 20}, "path": "llama/llama.h", "start": {"col": 15, "line": 483, "offset": 0}}, {"end": {"col": 20, "line": 486, "offset": 5}, "path": "llama/llama.h", "start": {"col": 15, "line": 486, "offset": 0}}, {"end": {"col": 22, "line": 494, "offset": 7}, "path": "llama/llama.h", "start": {"col": 15, "line": 494, "offset": 0}}, {"end": {"col": 22, "line": 497, "offset": 7}, "path": "llama/llama.h", "start": {"col": 15, "line": 497, "offset": 0}}, {"end": {"col": 22, "line": 500, "offset": 7}, "path": "llama/llama.h", "start": {"col": 15, "line": 500, "offset": 0}}, {"end": {"col": 22, "line": 503, "offset": 7}, "path": "llama/llama.h", "start": {"col": 15, "line": 503, "offset": 0}}, {"end": {"col": 22, "line": 506, "offset": 7}, "path": "llama/llama.h", "start": {"col": 15, "line": 506, "offset": 0}}, {"end": {"col": 23, "line": 509, "offset": 8}, "path": "llama/llama.h", "start": {"col": 15, "line": 509, "offset": 0}}, {"end": {"col": 23, "line": 512, "offset": 8}, "path": "llama/llama.h", "start": {"col": 15, "line": 512, "offset": 0}}, {"end": {"col": 33, "line": 515, "offset": 18}, "path": "llama/llama.h", "start": {"col": 15, "line": 515, "offset": 0}}, {"end": {"col": 19, "line": 518, "offset": 4}, "path": "llama/llama.h", "start": {"col": 15, "line": 518, "offset": 0}}, {"end": {"col": 19, "line": 521, "offset": 4}, "path": "llama/llama.h", "start": {"col": 15, "line": 521, "offset": 0}}, {"end": {"col": 19, "line": 528, "offset": 4}, "path": "llama/llama.h", "start": {"col": 15, "line": 528, "offset": 0}}, {"end": {"col": 23, "line": 531, "offset": 8}, "path": "llama/llama.h", "start": {"col": 15, "line": 531, "offset": 0}}, {"end": {"col": 40, "line": 538, "offset": 25}, "path": "llama/llama.h", "start": {"col": 15, "line": 538, "offset": 0}}, {"end": {"col": 22, "line": 544, "offset": 7}, "path": "llama/llama.h", "start": {"col": 15, "line": 544, "offset": 0}}, {"end": {"col": 22, "line": 551, "offset": 7}, "path": "llama/llama.h", "start": {"col": 15, "line": 551, "offset": 0}}, {"end": {"col": 19, "line": 556, "offset": 4}, "path": "llama/llama.h", "start": {"col": 15, "line": 556, "offset": 0}}, {"end": {"col": 19, "line": 561, "offset": 4}, "path": "llama/llama.h", "start": {"col": 15, "line": 561, "offset": 0}}, {"end": {"col": 22, "line": 569, "offset": 7}, "path": "llama/llama.h", "start": {"col": 15, "line": 569, "offset": 0}}, {"end": {"col": 41, "line": 621, "offset": 26}, "path": "llama/llama.h", "start": {"col": 15, "line": 621, "offset": 0}}, {"end": {"col": 19, "line": 624, "offset": 4}, "path": "llama/llama.h", "start": {"col": 15, "line": 624, "offset": 0}}, {"end": {"col": 19, "line": 627, "offset": 4}, "path": "llama/llama.h", "start": {"col": 15, "line": 627, "offset": 0}}, {"end": {"col": 22, "line": 631, "offset": 7}, "path": "llama/llama.h", "start": {"col": 15, "line": 631, "offset": 0}}, {"end": {"col": 22, "line": 634, "offset": 7}, "path": "llama/llama.h", "start": {"col": 15, "line": 634, "offset": 0}}, {"end": {"col": 19, "line": 637, "offset": 4}, "path": "llama/llama.h", "start": {"col": 15, "line": 637, "offset": 0}}, {"end": {"col": 19, "line": 645, "offset": 4}, "path": "llama/llama.h", "start": {"col": 15, "line": 645, "offset": 0}}, {"end": {"col": 19, "line": 655, "offset": 4}, "path": "llama/llama.h", "start": {"col": 15, "line": 655, "offset": 0}}, {"end": {"col": 19, "line": 663, "offset": 4}, "path": "llama/llama.h", "start": {"col": 15, "line": 663, "offset": 0}}, {"end": {"col": 19, "line": 673, "offset": 4}, "path": "llama/llama.h", "start": {"col": 15, "line": 673, "offset": 0}}, {"end": {"col": 19, "line": 686, "offset": 4}, "path": "llama/llama.h", "start": {"col": 15, "line": 686, "offset": 0}}, {"end": {"col": 24, "line": 694, "offset": 9}, "path": "llama/llama.h", "start": {"col": 15, "line": 694, "offset": 0}}, {"end": {"col": 19, "line": 702, "offset": 4}, "path": "llama/llama.h", "start": {"col": 15, "line": 702, "offset": 0}}, {"end": {"col": 19, "line": 705, "offset": 4}, "path": "llama/llama.h", "start": {"col": 15, "line": 705, "offset": 0}}, {"end": {"col": 21, "line": 714, "offset": 6}, "path": "llama/llama.h", "start": {"col": 15, "line": 714, "offset": 0}}, {"end": {"col": 82, "line": 715, "offset": 56}, "path": "llama/llama.h", "start": {"col": 26, "line": 715, "offset": 0}}, {"end": {"col": 21, "line": 721, "offset": 6}, "path": "llama/llama.h", "start": {"col": 15, "line": 721, "offset": 0}}, {"end": {"col": 41, "line": 727, "offset": 110}, "path": "llama/llama.h", "start": {"col": 26, "line": 725, "offset": 0}}, {"end": {"col": 21, "line": 732, "offset": 6}, "path": "llama/llama.h", "start": {"col": 15, "line": 732, "offset": 0}}, {"end": {"col": 41, "line": 738, "offset": 109}, "path": "llama/llama.h", "start": {"col": 26, "line": 736, "offset": 0}}, {"end": {"col": 19, "line": 742, "offset": 4}, "path": "llama/llama.h", "start": {"col": 15, "line": 742, "offset": 0}}, {"end": {"col": 55, "line": 753, "offset": 273}, "path": "llama/llama.h", "start": {"col": 26, "line": 748, "offset": 0}}, {"end": {"col": 19, "line": 756, "offset": 4}, "path": "llama/llama.h", "start": {"col": 15, "line": 756, "offset": 0}}, {"end": {"col": 51, "line": 765, "offset": 212}, "path": "llama/llama.h", "start": {"col": 26, "line": 761, "offset": 0}}, {"end": {"col": 21, "line": 769, "offset": 6}, "path": "llama/llama.h", "start": {"col": 15, "line": 769, "offset": 0}}, {"end": {"col": 21, "line": 774, "offset": 6}, "path": "llama/llama.h", "start": {"col": 15, "line": 774, "offset": 0}}, {"end": {"col": 21, "line": 784, "offset": 6}, "path": "llama/llama.h", "start": {"col": 15, "line": 784, "offset": 0}}, {"end": {"col": 21, "line": 790, "offset": 6}, "path": "llama/llama.h", "start": {"col": 15, "line": 790, "offset": 0}}, {"end": {"col": 21, "line": 797, "offset": 6}, "path": "llama/llama.h", "start": {"col": 15, "line": 797, "offset": 0}}, {"end": {"col": 33, "line": 813, "offset": 18}, "path": "llama/llama.h", "start": {"col": 15, "line": 813, "offset": 0}}, {"end": {"col": 33, "line": 826, "offset": 18}, "path": "llama/llama.h", "start": {"col": 15, "line": 826, "offset": 0}}, {"end": {"col": 19, "line": 832, "offset": 4}, "path": "llama/llama.h", "start": {"col": 15, "line": 832, "offset": 0}}, {"end": {"col": 22, "line": 838, "offset": 7}, "path": "llama/llama.h", "start": {"col": 15, "line": 838, "offset": 0}}, {"end": {"col": 22, "line": 846, "offset": 7}, "path": "llama/llama.h", "start": {"col": 15, "line": 846, "offset": 0}}, {"end": {"col": 19, "line": 853, "offset": 4}, "path": "llama/llama.h", "start": {"col": 15, "line": 853, "offset": 0}}, {"end": {"col": 22, "line": 856, "offset": 7}, "path": "llama/llama.h", "start": {"col": 15, "line": 856, "offset": 0}}, {"end": {"col": 22, "line": 859, "offset": 7}, "path": "llama/llama.h", "start": {"col": 15, "line": 859, "offset": 0}}, {"end": {"col": 19, "line": 863, "offset": 4}, "path": "llama/llama.h", "start": {"col": 15, "line": 863, "offset": 0}}, {"end": {"col": 19, "line": 867, "offset": 4}, "path": "llama/llama.h", "start": {"col": 15, "line": 867, "offset": 0}}, {"end": {"col": 19, "line": 870, "offset": 4}, "path": "llama/llama.h", "start": {"col": 15, "line": 870, "offset": 0}}, {"end": {"col": 19, "line": 875, "offset": 4}, "path": "llama/llama.h", "start": {"col": 15, "line": 875, "offset": 0}}, {"end": {"col": 20, "line": 882, "offset": 5}, "path": "llama/llama.h", "start": {"col": 15, "line": 882, "offset": 0}}, {"end": {"col": 20, "line": 888, "offset": 5}, "path": "llama/llama.h", "start": {"col": 15, "line": 888, "offset": 0}}, {"end": {"col": 20, "line": 896, "offset": 5}, "path": "llama/llama.h", "start": {"col": 15, "line": 896, "offset": 0}}, {"end": {"col": 20, "line": 903, "offset": 5}, "path": "llama/llama.h", "start": {"col": 15, "line": 903, "offset": 0}}, {"end": {"col": 20, "line": 909, "offset": 5}, "path": "llama/llama.h", "start": {"col": 15, "line": 909, "offset": 0}}, {"end": {"col": 25, "line": 915, "offset": 4}, "path": "llama/llama.h", "start": {"col": 21, "line": 915, "offset": 0}}, {"end": {"col": 20, "line": 917, "offset": 5}, "path": "llama/llama.h", "start": {"col": 15, "line": 917, "offset": 0}}, {"end": {"col": 36, "line": 919, "offset": 21}, "path": "llama/llama.h", "start": {"col": 15, "line": 919, "offset": 0}}, {"end": {"col": 19, "line": 922, "offset": 4}, "path": "llama/llama.h", "start": {"col": 15, "line": 922, "offset": 0}}, {"end": {"col": 19, "line": 925, "offset": 4}, "path": "llama/llama.h", "start": {"col": 15, "line": 925, "offset": 0}}, {"end": {"col": 19, "line": 935, "offset": 4}, "path": "llama/llama.h", "start": {"col": 15, "line": 935, "offset": 0}}, {"end": {"col": 19, "line": 936, "offset": 4}, "path": "llama/llama.h", "start": {"col": 15, "line": 936, "offset": 0}}, {"end": {"col": 22, "line": 957, "offset": 7}, "path": "llama/llama.h", "start": {"col": 15, "line": 957, "offset": 0}}, {"end": {"col": 22, "line": 971, "offset": 7}, "path": "llama/llama.h", "start": {"col": 15, "line": 971, "offset": 0}}, {"end": {"col": 22, "line": 985, "offset": 7}, "path": "llama/llama.h", "start": {"col": 15, "line": 985, "offset": 0}}, {"end": {"col": 22, "line": 1008, "offset": 7}, "path": "llama/llama.h", "start": {"col": 15, "line": 1008, "offset": 0}}, {"end": {"col": 25, "line": 1078, "offset": 4}, "path": "llama/llama.h", "start": {"col": 21, "line": 1078, "offset": 0}}, {"end": {"col": 19, "line": 1079, "offset": 4}, "path": "llama/llama.h", "start": {"col": 15, "line": 1079, "offset": 0}}, {"end": {"col": 19, "line": 1080, "offset": 4}, "path": "llama/llama.h", "start": {"col": 15, "line": 1080, "offset": 0}}, {"end": {"col": 19, "line": 1081, "offset": 4}, "path": "llama/llama.h", "start": {"col": 15, "line": 1081, "offset": 0}}, {"end": {"col": 35, "line": 1082, "offset": 20}, "path": "llama/llama.h", "start": {"col": 15, "line": 1082, "offset": 0}}, {"end": {"col": 19, "line": 1084, "offset": 4}, "path": "llama/llama.h", "start": {"col": 15, "line": 1084, "offset": 0}}, {"end": {"col": 35, "line": 1089, "offset": 20}, "path": "llama/llama.h", "start": {"col": 15, "line": 1089, "offset": 0}}, {"end": {"col": 19, "line": 1092, "offset": 4}, "path": "llama/llama.h", "start": {"col": 15, "line": 1092, "offset": 0}}, {"end": {"col": 35, "line": 1093, "offset": 20}, "path": "llama/llama.h", "start": {"col": 15, "line": 1093, "offset": 0}}, {"end": {"col": 18, "line": 1094, "offset": 3}, "path": "llama/llama.h", "start": {"col": 15, "line": 1094, "offset": 0}}, {"end": {"col": 35, "line": 1097, "offset": 20}, "path": "llama/llama.h", "start": {"col": 15, "line": 1097, "offset": 0}}, {"end": {"col": 35, "line": 1101, "offset": 20}, "path": "llama/llama.h", "start": {"col": 15, "line": 1101, "offset": 0}}, {"end": {"col": 35, "line": 1102, "offset": 20}, "path": "llama/llama.h", "start": {"col": 15, "line": 1102, "offset": 0}}, {"end": {"col": 35, "line": 1106, "offset": 20}, "path": "llama/llama.h", "start": {"col": 15, "line": 1106, "offset": 0}}, {"end": {"col": 35, "line": 1109, "offset": 20}, "path": "llama/llama.h", "start": {"col": 15, "line": 1109, "offset": 0}}, {"end": {"col": 35, "line": 1112, "offset": 20}, "path": "llama/llama.h", "start": {"col": 15, "line": 1112, "offset": 0}}, {"end": {"col": 35, "line": 1115, "offset": 20}, "path": "llama/llama.h", "start": {"col": 15, "line": 1115, "offset": 0}}, {"end": {"col": 35, "line": 1118, "offset": 20}, "path": "llama/llama.h", "start": {"col": 15, "line": 1118, "offset": 0}}, {"end": {"col": 35, "line": 1121, "offset": 20}, "path": "llama/llama.h", "start": {"col": 15, "line": 1121, "offset": 0}}, {"end": {"col": 35, "line": 1122, "offset": 20}, "path": "llama/llama.h", "start": {"col": 15, "line": 1122, "offset": 0}}, {"end": {"col": 35, "line": 1125, "offset": 20}, "path": "llama/llama.h", "start": {"col": 15, "line": 1125, "offset": 0}}, {"end": {"col": 35, "line": 1133, "offset": 20}, "path": "llama/llama.h", "start": {"col": 15, "line": 1133, "offset": 0}}, {"end": {"col": 35, "line": 1145, "offset": 20}, "path": "llama/llama.h", "start": {"col": 15, "line": 1145, "offset": 0}}, {"end": {"col": 35, "line": 1150, "offset": 20}, "path": "llama/llama.h", "start": {"col": 15, "line": 1150, "offset": 0}}, {"end": {"col": 35, "line": 1155, "offset": 20}, "path": "llama/llama.h", "start": {"col": 15, "line": 1155, "offset": 0}}, {"end": {"col": 35, "line": 1166, "offset": 20}, "path": "llama/llama.h", "start": {"col": 15, "line": 1166, "offset": 0}}, {"end": {"col": 23, "line": 1173, "offset": 8}, "path": "llama/llama.h", "start": {"col": 15, "line": 1173, "offset": 0}}, {"end": {"col": 18, "line": 1197, "offset": 3}, "path": "llama/llama.h", "start": {"col": 15, "line": 1197, "offset": 0}}, {"end": {"col": 18, "line": 1202, "offset": 3}, "path": "llama/llama.h", "start": {"col": 15, "line": 1202, "offset": 0}}, {"end": {"col": 25, "line": 1205, "offset": 4}, "path": "llama/llama.h", "start": {"col": 21, "line": 1205, "offset": 0}}, {"end": {"col": 19, "line": 1209, "offset": 4}, "path": "llama/llama.h", "start": {"col": 15, "line": 1209, "offset": 0}}, {"end": {"col": 45, "line": 1233, "offset": 30}, "path": "llama/llama.h", "start": {"col": 15, "line": 1233, "offset": 0}}, {"end": {"col": 19, "line": 1234, "offset": 4}, "path": "llama/llama.h", "start": {"col": 15, "line": 1234, "offset": 0}}, {"end": {"col": 19, "line": 1235, "offset": 4}, "path": "llama/llama.h", "start": {"col": 15, "line": 1235, "offset": 0}}, {"end": {"col": 45, "line": 1238, "offset": 30}, "path": "llama/llama.h", "start": {"col": 15, "line": 1238, "offset": 0}}, {"end": {"col": 19, "line": 1239, "offset": 4}, "path": "llama/llama.h", "start": {"col": 15, "line": 1239, "offset": 0}}, {"end": {"col": 19, "line": 1240, "offset": 4}, "path": "llama/llama.h", "start": {"col": 15, "line": 1240, "offset": 0}}, {"end": {"col": 19, "line": 1242, "offset": 4}, "path": "llama/llama.h", "start": {"col": 15, "line": 1242, "offset": 0}}]]}, {"code": 3, "level": "warn", "message": "Syntax error at line llama/llama-sampling.cpp:55:\n `&` was unexpected", "path": "llama/llama-sampling.cpp", "spans": [{"end": {"col": 24, "line": 55, "offset": 1}, "file": "llama/llama-sampling.cpp", "start": {"col": 23, "line": 55, "offset": 0}}], "type": ["PartialParsing", [{"end": {"col": 24, "line": 55, "offset": 1}, "path": "llama/llama-sampling.cpp", "start": {"col": 23, "line": 55, "offset": 0}}]]}, {"code": 3, "level": "warn", "message": "Syntax error at line llama/sgemm.cpp:266:\n `void` was unexpected", "path": "llama/sgemm.cpp", "spans": [{"end": {"col": 18, "line": 266, "offset": 4}, "file": "llama/sgemm.cpp", "start": {"col": 14, "line": 266, "offset": 0}}, {"end": {"col": 18, "line": 418, "offset": 4}, "file": "llama/sgemm.cpp", "start": {"col": 14, "line": 418, "offset": 0}}, {"end": {"col": 18, "line": 474, "offset": 4}, "file": "llama/sgemm.cpp", "start": {"col": 14, "line": 474, "offset": 0}}, {"end": {"col": 18, "line": 532, "offset": 4}, "file": "llama/sgemm.cpp", "start": {"col": 14, "line": 532, "offset": 0}}, {"end": {"col": 18, "line": 759, "offset": 4}, "file": "llama/sgemm.cpp", "start": {"col": 14, "line": 759, "offset": 0}}, {"end": {"col": 18, "line": 813, "offset": 4}, "file": "llama/sgemm.cpp", "start": {"col": 14, "line": 813, "offset": 0}}, {"end": {"col": 18, "line": 870, "offset": 4}, "file": "llama/sgemm.cpp", "start": {"col": 14, "line": 870, "offset": 0}}], "type": ["PartialParsing", [{"end": {"col": 18, "line": 266, "offset": 4}, "path": "llama/sgemm.cpp", "start": {"col": 14, "line": 266, "offset": 0}}, {"end": {"col": 18, "line": 418, "offset": 4}, "path": "llama/sgemm.cpp", "start": {"col": 14, "line": 418, "offset": 0}}, {"end": {"col": 18, "line": 474, "offset": 4}, "path": "llama/sgemm.cpp", "start": {"col": 14, "line": 474, "offset": 0}}, {"end": {"col": 18, "line": 532, "offset": 4}, "path": "llama/sgemm.cpp", "start": {"col": 14, "line": 532, "offset": 0}}, {"end": {"col": 18, "line": 759, "offset": 4}, "path": "llama/sgemm.cpp", "start": {"col": 14, "line": 759, "offset": 0}}, {"end": {"col": 18, "line": 813, "offset": 4}, "path": "llama/sgemm.cpp", "start": {"col": 14, "line": 813, "offset": 0}}, {"end": {"col": 18, "line": 870, "offset": 4}, "path": "llama/sgemm.cpp", "start": {"col": 14, "line": 870, "offset": 0}}]]}, {"code": 3, "level": "warn", "message": "Syntax error at line llama/ggml-alloc.c:339:\n `#ifdef` was unexpected", "path": "llama/ggml-alloc.c", "spans": [{"end": {"col": 7, "line": 339, "offset": 6}, "file": "llama/ggml-alloc.c", "start": {"col": 1, "line": 339, "offset": 0}}, {"end": {"col": 7, "line": 341, "offset": 6}, "file": "llama/ggml-alloc.c", "start": {"col": 1, "line": 341, "offset": 0}}], "type": ["PartialParsing", [{"end": {"col": 7, "line": 339, "offset": 6}, "path": "llama/ggml-alloc.c", "start": {"col": 1, "line": 339, "offset": 0}}, {"end": {"col": 7, "line": 341, "offset": 6}, "path": "llama/ggml-alloc.c", "start": {"col": 1, "line": 341, "offset": 0}}]]}, {"code": 2, "level": "warn", "message": "Timeout when running go.gorilla.ssrf.gorilla-tainted-url-host.gorilla-tainted-url-host on server/routes.go:\n ", "path": "server/routes.go", "rule_id": "go.gorilla.ssrf.gorilla-tainted-url-host.gorilla-tainted-url-host", "type": "Timeout"}, {"code": 2, "level": "warn", "message": "Internal matching error when running yaml.github-actions.security.curl-eval.curl-eval on .github/workflows/release.yaml:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/returntocorp/semgrep\n\nrule yaml.github-actions.security.curl-eval.curl-eval: metavariable-pattern failed when parsing $SHELL's content as Bash: import-module 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\Common7\\Tools\\Microsoft.VisualStudio.DevShell.dll'\nEnter-VsDevShell -vsinstallpath 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise' -skipautomaticlocation -DevCmdArguments '-arch=x64 -no_logo'\n$env:OLLAMA_SKIP_GENERATE=\"1\"\n$env:ARCH=\"amd64\"\nif (!(gcc --version | select-string -quiet clang)) { throw \"wrong gcc compiler detected - must be clang\" }\n& .\\scripts\\build_windows.ps1\n", "path": ".github/workflows/release.yaml", "rule_id": "yaml.github-actions.security.curl-eval.curl-eval", "type": "Internal matching error"}, {"code": 3, "level": "warn", "message": "Syntax error at line .github/workflows/release.yaml:78:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `-NoNewWindow -Wait` was unexpected", "path": ".github/workflows/release.yaml", "spans": [{"end": {"col": 184, "line": 78, "offset": 3052}, "file": ".github/workflows/release.yaml", "start": {"col": 166, "line": 78, "offset": 3034}}], "type": ["PartialParsing", [{"end": {"col": 184, "line": 78, "offset": 3052}, "path": ".github/workflows/release.yaml", "start": {"col": 166, "line": 78, "offset": 3034}}]]}, {"code": 3, "level": "warn", "message": "Syntax error at line .github/workflows/release.yaml:84:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `import-module 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\Common7\\Tools\\Microsoft.VisualStudio.DevShell.dll'\nEnter-VsDevShell -vsinstallpath 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise' -skipautomaticlocation -DevCmdArguments '-arch=x64 -no_logo'\nif (!(gcc --version | select-string -quiet clang)) { throw \"wrong gcc compiler detected - must be clang\" }\nmake\n` was unexpected", "path": ".github/workflows/release.yaml", "spans": [{"end": {"col": 6, "line": 87, "offset": 3732}, "file": ".github/workflows/release.yaml", "start": {"col": 15, "line": 84, "offset": 3333}}], "type": ["PartialParsing", [{"end": {"col": 6, "line": 87, "offset": 3732}, "path": ".github/workflows/release.yaml", "start": {"col": 15, "line": 84, "offset": 3333}}]]}, {"code": 3, "level": "warn", "message": "Syntax error at line .github/workflows/release.yaml:116:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `-NoNewWindow -Wait` was unexpected", "path": ".github/workflows/release.yaml", "spans": [{"end": {"col": 184, "line": 116, "offset": 4790}, "file": ".github/workflows/release.yaml", "start": {"col": 166, "line": 116, "offset": 4772}}], "type": ["PartialParsing", [{"end": {"col": 184, "line": 116, "offset": 4790}, "path": ".github/workflows/release.yaml", "start": {"col": 166, "line": 116, "offset": 4772}}]]}, {"code": 3, "level": "warn", "message": "Syntax error at line .github/workflows/release.yaml:139:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `select -first` was unexpected", "path": ".github/workflows/release.yaml", "spans": [{"end": {"col": 116, "line": 139, "offset": 5701}, "file": ".github/workflows/release.yaml", "start": {"col": 103, "line": 139, "offset": 5688}}], "type": ["PartialParsing", [{"end": {"col": 116, "line": 139, "offset": 5701}, "path": ".github/workflows/release.yaml", "start": {"col": 103, "line": 139, "offset": 5688}}]]}, {"code": 3, "level": "warn", "message": "Syntax error at line .github/workflows/release.yaml:142:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `import-module 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\Common7\\Tools\\Microsoft.VisualStudio.DevShell.dll'\nEnter-VsDevShell -vsinstallpath 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise' -skipautomaticlocation -DevCmdArguments '-arch=x64 -no_logo'\nif (!(gcc --version | select-string -quiet clang)) { throw \"wrong gcc compiler detected - must be clang\" }\nmake -C llama print-HIP_PATH print-HIP_LIB_DIR\nmake rocm\n` was unexpected", "path": ".github/workflows/release.yaml", "spans": [{"end": {"col": 11, "line": 146, "offset": 6441}, "file": ".github/workflows/release.yaml", "start": {"col": 15, "line": 142, "offset": 5990}}], "type": ["PartialParsing", [{"end": {"col": 11, "line": 146, "offset": 6441}, "path": ".github/workflows/release.yaml", "start": {"col": 15, "line": 142, "offset": 5990}}]]}, {"code": 3, "level": "warn", "message": "Syntax error at line .github/workflows/release.yaml:181:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `(\"in\", \"--confirm-command\", \"--accept-messages\", \"--root\", \"C:/msys64\") -NoNewWindow -Wait` was unexpected", "path": ".github/workflows/release.yaml", "spans": [{"end": {"col": 151, "line": 181, "offset": 7659}, "file": ".github/workflows/release.yaml", "start": {"col": 61, "line": 181, "offset": 7569}}], "type": ["PartialParsing", [{"end": {"col": 151, "line": 181, "offset": 7659}, "path": ".github/workflows/release.yaml", "start": {"col": 61, "line": 181, "offset": 7569}}]]}, {"code": 3, "level": "warn", "message": "Syntax error at line .github/workflows/release.yaml:185:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `(\"-S\", \"--noconfirm\", \"mingw-w64-clang-x86_64-gcc-compat\", \"mingw-w64-clang-x86_64-clang\", \"make\") -NoNewWindow -Wait` was unexpected", "path": ".github/workflows/release.yaml", "spans": [{"end": {"col": 192, "line": 185, "offset": 8280}, "file": ".github/workflows/release.yaml", "start": {"col": 75, "line": 185, "offset": 8163}}], "type": ["PartialParsing", [{"end": {"col": 192, "line": 185, "offset": 8280}, "path": ".github/workflows/release.yaml", "start": {"col": 75, "line": 185, "offset": 8163}}]]}, {"code": 3, "level": "warn", "message": "Syntax error at line .github/workflows/release.yaml:208:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `{ matrix.cuda.url` was unexpected", "path": ".github/workflows/release.yaml", "spans": [{"end": {"col": 44, "line": 208, "offset": 9040}, "file": ".github/workflows/release.yaml", "start": {"col": 27, "line": 208, "offset": 9023}}], "type": ["PartialParsing", [{"end": {"col": 44, "line": 208, "offset": 9040}, "path": ".github/workflows/release.yaml", "start": {"col": 27, "line": 208, "offset": 9023}}]]}, {"code": 3, "level": "warn", "message": "Syntax error at line .github/workflows/release.yaml:211:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `{ matrix.cuda.version` was unexpected", "path": ".github/workflows/release.yaml", "spans": [{"end": {"col": 121, "line": 211, "offset": 9216}, "file": ".github/workflows/release.yaml", "start": {"col": 100, "line": 211, "offset": 9195}}, {"end": {"col": 58, "line": 212, "offset": 9205}, "file": ".github/workflows/release.yaml", "start": {"col": 48, "line": 212, "offset": 9195}}, {"end": {"col": 91, "line": 212, "offset": 9215}, "file": ".github/workflows/release.yaml", "start": {"col": 71, "line": 212, "offset": 9195}}], "type": ["PartialParsing", [{"end": {"col": 121, "line": 211, "offset": 9216}, "path": ".github/workflows/release.yaml", "start": {"col": 100, "line": 211, "offset": 9195}}, {"end": {"col": 58, "line": 212, "offset": 9205}, "path": ".github/workflows/release.yaml", "start": {"col": 48, "line": 212, "offset": 9195}}, {"end": {"col": 91, "line": 212, "offset": 9215}, "path": ".github/workflows/release.yaml", "start": {"col": 71, "line": 212, "offset": 9195}}]]}, {"code": 3, "level": "warn", "message": "Syntax error at line .github/workflows/release.yaml:216:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `$cudaPath=(` was unexpected", "path": ".github/workflows/release.yaml", "spans": [{"end": {"col": 12, "line": 216, "offset": 9472}, "file": ".github/workflows/release.yaml", "start": {"col": 1, "line": 216, "offset": 9461}}, {"end": {"col": 82, "line": 216, "offset": 9466}, "file": ".github/workflows/release.yaml", "start": {"col": 77, "line": 216, "offset": 9461}}, {"end": {"col": 109, "line": 216, "offset": 9462}, "file": ".github/workflows/release.yaml", "start": {"col": 108, "line": 216, "offset": 9461}}, {"end": {"col": 50, "line": 217, "offset": 9501}, "file": ".github/workflows/release.yaml", "start": {"col": 10, "line": 217, "offset": 9461}}], "type": ["PartialParsing", [{"end": {"col": 12, "line": 216, "offset": 9472}, "path": ".github/workflows/release.yaml", "start": {"col": 1, "line": 216, "offset": 9461}}, {"end": {"col": 82, "line": 216, "offset": 9466}, "path": ".github/workflows/release.yaml", "start": {"col": 77, "line": 216, "offset": 9461}}, {"end": {"col": 109, "line": 216, "offset": 9462}, "path": ".github/workflows/release.yaml", "start": {"col": 108, "line": 216, "offset": 9461}}, {"end": {"col": 50, "line": 217, "offset": 9501}, "path": ".github/workflows/release.yaml", "start": {"col": 10, "line": 217, "offset": 9461}}]]}, {"code": 3, "level": "warn", "message": "Syntax error at line .github/workflows/release.yaml:225:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `import-module 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\Common7\\Tools\\Microsoft.VisualStudio.DevShell.dll'\nEnter-VsDevShell -vsinstallpath 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise' -skipautomaticlocation -DevCmdArguments '-arch=x64 -no_logo'\nif (!(gcc --version | select-string -quiet clang)) { throw \"wrong gcc compiler detected - must be clang\" }\nmake cuda_v$(($env:CUDA_PATH | split-path -leaf) -replace 'v(\\d+).*', '$1')\n` was unexpected", "path": ".github/workflows/release.yaml", "spans": [{"end": {"col": 77, "line": 228, "offset": 10682}, "file": ".github/workflows/release.yaml", "start": {"col": 15, "line": 225, "offset": 10212}}], "type": ["PartialParsing", [{"end": {"col": 77, "line": 228, "offset": 10682}, "path": ".github/workflows/release.yaml", "start": {"col": 15, "line": 225, "offset": 10212}}]]}, {"code": 3, "level": "warn", "message": "Syntax error at line .github/workflows/release.yaml:249:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `[System.Net.ServicePointManager]` was unexpected", "path": ".github/workflows/release.yaml", "spans": [{"end": {"col": 33, "line": 249, "offset": 11391}, "file": ".github/workflows/release.yaml", "start": {"col": 1, "line": 249, "offset": 11359}}, {"end": {"col": 7, "line": 250, "offset": 11361}, "file": ".github/workflows/release.yaml", "start": {"col": 5, "line": 250, "offset": 11359}}, {"end": {"col": 39, "line": 250, "offset": 11360}, "file": ".github/workflows/release.yaml", "start": {"col": 38, "line": 250, "offset": 11359}}, {"end": {"col": 103, "line": 250, "offset": 11408}, "file": ".github/workflows/release.yaml", "start": {"col": 54, "line": 250, "offset": 11359}}], "type": ["PartialParsing", [{"end": {"col": 33, "line": 249, "offset": 11391}, "path": ".github/workflows/release.yaml", "start": {"col": 1, "line": 249, "offset": 11359}}, {"end": {"col": 7, "line": 250, "offset": 11361}, "path": ".github/workflows/release.yaml", "start": {"col": 5, "line": 250, "offset": 11359}}, {"end": {"col": 39, "line": 250, "offset": 11360}, "path": ".github/workflows/release.yaml", "start": {"col": 38, "line": 250, "offset": 11359}}, {"end": {"col": 103, "line": 250, "offset": 11408}, "path": ".github/workflows/release.yaml", "start": {"col": 54, "line": 250, "offset": 11359}}]]}, {"code": 3, "level": "warn", "message": "Syntax error at line .github/workflows/release.yaml:262:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `(\n    '-y', '-oC:\\'\n    ) -NoNewWindow -Wait` was unexpected", "path": ".github/workflows/release.yaml", "spans": [{"end": {"col": 25, "line": 264, "offset": 12207}, "file": ".github/workflows/release.yaml", "start": {"col": 61, "line": 262, "offset": 12163}}], "type": ["PartialParsing", [{"end": {"col": 25, "line": 264, "offset": 12207}, "path": ".github/workflows/release.yaml", "start": {"col": 61, "line": 262, "offset": 12163}}]]}, {"code": 3, "level": "warn", "message": "Syntax error at line .github/workflows/release.yaml:309:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `()\n  }` was unexpected", "path": ".github/workflows/release.yaml", "spans": [{"end": {"col": 4, "line": 310, "offset": 13288}, "file": ".github/workflows/release.yaml", "start": {"col": 24, "line": 309, "offset": 13282}}], "type": ["PartialParsing", [{"end": {"col": 4, "line": 310, "offset": 13288}, "path": ".github/workflows/release.yaml", "start": {"col": 24, "line": 309, "offset": 13282}}]]}, {"code": 3, "level": "warn", "message": "Syntax error at line .github/workflows/release.yaml:351:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `(\"/q\") -NoNewWindow -Wait` was unexpected", "path": ".github/workflows/release.yaml", "spans": [{"end": {"col": 89, "line": 351, "offset": 17088}, "file": ".github/workflows/release.yaml", "start": {"col": 64, "line": 351, "offset": 17063}}], "type": ["PartialParsing", [{"end": {"col": 89, "line": 351, "offset": 17088}, "path": ".github/workflows/release.yaml", "start": {"col": 64, "line": 351, "offset": 17063}}]]}, {"code": 3, "level": "warn", "message": "Syntax error at line .github/workflows/release.yaml:361:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `&` was unexpected", "path": ".github/workflows/release.yaml", "spans": [{"end": {"col": 2, "line": 361, "offset": 17549}, "file": ".github/workflows/release.yaml", "start": {"col": 1, "line": 361, "offset": 17548}}], "type": ["PartialParsing", [{"end": {"col": 2, "line": 361, "offset": 17549}, "path": ".github/workflows/release.yaml", "start": {"col": 1, "line": 361, "offset": 17548}}]]}, {"code": 3, "level": "warn", "message": "Syntax error at line .github/workflows/release.yaml:369:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `$gopath=(get-command go).source | split-path -parent\n$gccpath=(get-command gcc)` was unexpected", "path": ".github/workflows/release.yaml", "spans": [{"end": {"col": 27, "line": 370, "offset": 18292}, "file": ".github/workflows/release.yaml", "start": {"col": 15, "line": 369, "offset": 18213}}], "type": ["PartialParsing", [{"end": {"col": 27, "line": 370, "offset": 18292}, "path": ".github/workflows/release.yaml", "start": {"col": 15, "line": 369, "offset": 18213}}]]}, {"code": 3, "level": "warn", "message": "Syntax error at line .github/workflows/release.yaml:414:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `(\"/q\") -NoNewWindow -Wait` was unexpected", "path": ".github/workflows/release.yaml", "spans": [{"end": {"col": 89, "line": 414, "offset": 19910}, "file": ".github/workflows/release.yaml", "start": {"col": 64, "line": 414, "offset": 19885}}], "type": ["PartialParsing", [{"end": {"col": 89, "line": 414, "offset": 19910}, "path": ".github/workflows/release.yaml", "start": {"col": 64, "line": 414, "offset": 19885}}]]}, {"code": 3, "level": "warn", "message": "Syntax error at line .github/workflows/release.yaml:424:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `&` was unexpected", "path": ".github/workflows/release.yaml", "spans": [{"end": {"col": 2, "line": 424, "offset": 20371}, "file": ".github/workflows/release.yaml", "start": {"col": 1, "line": 424, "offset": 20370}}], "type": ["PartialParsing", [{"end": {"col": 2, "line": 424, "offset": 20371}, "path": ".github/workflows/release.yaml", "start": {"col": 1, "line": 424, "offset": 20370}}]]}, {"code": 3, "level": "warn", "message": "Syntax error at line .github/workflows/release.yaml:432:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `(\"in\", \"--confirm-command\", \"--accept-messages\", \"--root\", \"C:/msys64\") -NoNewWindow -Wait` was unexpected", "path": ".github/workflows/release.yaml", "spans": [{"end": {"col": 151, "line": 432, "offset": 21023}, "file": ".github/workflows/release.yaml", "start": {"col": 61, "line": 432, "offset": 20933}}], "type": ["PartialParsing", [{"end": {"col": 151, "line": 432, "offset": 21023}, "path": ".github/workflows/release.yaml", "start": {"col": 61, "line": 432, "offset": 20933}}]]}, {"code": 3, "level": "warn", "message": "Syntax error at line .github/workflows/release.yaml:436:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `(\"-S\", \"--noconfirm\", \"mingw-w64-clang-x86_64-gcc-compat\", \"mingw-w64-clang-x86_64-clang\", \"make\") -NoNewWindow -Wait` was unexpected", "path": ".github/workflows/release.yaml", "spans": [{"end": {"col": 192, "line": 436, "offset": 21644}, "file": ".github/workflows/release.yaml", "start": {"col": 75, "line": 436, "offset": 21527}}], "type": ["PartialParsing", [{"end": {"col": 192, "line": 436, "offset": 21644}, "path": ".github/workflows/release.yaml", "start": {"col": 75, "line": 436, "offset": 21527}}]]}, {"code": 3, "level": "warn", "message": "Syntax error at line .github/workflows/release.yaml:595:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `{ env.DOCKER_METADATA_OUTPUT_VERSION` was unexpected", "path": ".github/workflows/release.yaml", "spans": [{"end": {"col": 115, "line": 595, "offset": 27219}, "file": ".github/workflows/release.yaml", "start": {"col": 79, "line": 595, "offset": 27183}}], "type": ["PartialParsing", [{"end": {"col": 115, "line": 595, "offset": 27219}, "path": ".github/workflows/release.yaml", "start": {"col": 79, "line": 595, "offset": 27183}}]]}, {"code": 3, "level": "warn", "message": "Syntax error at line .github/workflows/release.yaml:615:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `{ steps.build.outputs.digest` was unexpected", "path": ".github/workflows/release.yaml", "spans": [{"end": {"col": 39, "line": 615, "offset": 28282}, "file": ".github/workflows/release.yaml", "start": {"col": 11, "line": 615, "offset": 28254}}], "type": ["PartialParsing", [{"end": {"col": 39, "line": 615, "offset": 28282}, "path": ".github/workflows/release.yaml", "start": {"col": 11, "line": 615, "offset": 28254}}]]}, {"code": 3, "level": "warn", "message": "Syntax error at line .github/workflows/release.yaml:661:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `{ env.DOCKER_METADATA_OUTPUT_VERSION` was unexpected", "path": ".github/workflows/release.yaml", "spans": [{"end": {"col": 115, "line": 661, "offset": 29528}, "file": ".github/workflows/release.yaml", "start": {"col": 79, "line": 661, "offset": 29492}}], "type": ["PartialParsing", [{"end": {"col": 115, "line": 661, "offset": 29528}, "path": ".github/workflows/release.yaml", "start": {"col": 79, "line": 661, "offset": 29492}}]]}, {"code": 3, "level": "warn", "message": "Syntax error at line .github/workflows/release.yaml:674:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `${{` was unexpected", "path": ".github/workflows/release.yaml", "spans": [{"end": {"col": 79, "line": 674, "offset": 30441}, "file": ".github/workflows/release.yaml", "start": {"col": 76, "line": 674, "offset": 30438}}], "type": ["PartialParsing", [{"end": {"col": 79, "line": 674, "offset": 30441}, "path": ".github/workflows/release.yaml", "start": {"col": 76, "line": 674, "offset": 30438}}]]}, {"code": 3, "level": "warn", "message": "Syntax error at line .github/workflows/release.yaml:699:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `{ env.DOCKER_METADATA_OUTPUT_VERSION` was unexpected", "path": ".github/workflows/release.yaml", "spans": [{"end": {"col": 129, "line": 699, "offset": 31242}, "file": ".github/workflows/release.yaml", "start": {"col": 93, "line": 699, "offset": 31206}}], "type": ["PartialParsing", [{"end": {"col": 129, "line": 699, "offset": 31242}, "path": ".github/workflows/release.yaml", "start": {"col": 93, "line": 699, "offset": 31206}}]]}, {"code": 3, "level": "warn", "message": "Syntax error at line .github/workflows/release.yaml:751:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `{ env.RELEASE_VERSION` was unexpected", "path": ".github/workflows/release.yaml", "spans": [{"end": {"col": 77, "line": 751, "offset": 32964}, "file": ".github/workflows/release.yaml", "start": {"col": 56, "line": 751, "offset": 32943}}, {"end": {"col": 101, "line": 752, "offset": 32964}, "file": ".github/workflows/release.yaml", "start": {"col": 80, "line": 752, "offset": 32943}}, {"end": {"col": 49, "line": 754, "offset": 32964}, "file": ".github/workflows/release.yaml", "start": {"col": 28, "line": 754, "offset": 32943}}, {"end": {"col": 53, "line": 757, "offset": 32964}, "file": ".github/workflows/release.yaml", "start": {"col": 32, "line": 757, "offset": 32943}}, {"end": {"col": 16, "line": 759, "offset": 32946}, "file": ".github/workflows/release.yaml", "start": {"col": 13, "line": 759, "offset": 32943}}], "type": ["PartialParsing", [{"end": {"col": 77, "line": 751, "offset": 32964}, "path": ".github/workflows/release.yaml", "start": {"col": 56, "line": 751, "offset": 32943}}, {"end": {"col": 101, "line": 752, "offset": 32964}, "path": ".github/workflows/release.yaml", "start": {"col": 80, "line": 752, "offset": 32943}}, {"end": {"col": 49, "line": 754, "offset": 32964}, "path": ".github/workflows/release.yaml", "start": {"col": 28, "line": 754, "offset": 32943}}, {"end": {"col": 53, "line": 757, "offset": 32964}, "path": ".github/workflows/release.yaml", "start": {"col": 32, "line": 757, "offset": 32943}}, {"end": {"col": 16, "line": 759, "offset": 32946}, "path": ".github/workflows/release.yaml", "start": {"col": 13, "line": 759, "offset": 32943}}]]}, {"code": 3, "level": "warn", "message": "Syntax error at line llama/ggml-backend.h:47:\n `char` was unexpected", "path": "llama/ggml-backend.h", "spans": [{"end": {"col": 34, "line": 47, "offset": 4}, "file": "llama/ggml-backend.h", "start": {"col": 30, "line": 47, "offset": 0}}, {"end": {"col": 45, "line": 48, "offset": 31}, "file": "llama/ggml-backend.h", "start": {"col": 14, "line": 48, "offset": 0}}, {"end": {"col": 30, "line": 49, "offset": 6}, "file": "llama/ggml-backend.h", "start": {"col": 24, "line": 49, "offset": 0}}, {"end": {"col": 30, "line": 50, "offset": 6}, "file": "llama/ggml-backend.h", "start": {"col": 24, "line": 50, "offset": 0}}, {"end": {"col": 30, "line": 51, "offset": 16}, "file": "llama/ggml-backend.h", "start": {"col": 14, "line": 51, "offset": 0}}, {"end": {"col": 28, "line": 52, "offset": 4}, "file": "llama/ggml-backend.h", "start": {"col": 24, "line": 52, "offset": 0}}, {"end": {"col": 34, "line": 61, "offset": 4}, "file": "llama/ggml-backend.h", "start": {"col": 30, "line": 61, "offset": 0}}, {"end": {"col": 28, "line": 62, "offset": 4}, "file": "llama/ggml-backend.h", "start": {"col": 24, "line": 62, "offset": 0}}, {"end": {"col": 28, "line": 63, "offset": 4}, "file": "llama/ggml-backend.h", "start": {"col": 24, "line": 63, "offset": 0}}, {"end": {"col": 30, "line": 64, "offset": 6}, "file": "llama/ggml-backend.h", "start": {"col": 24, "line": 64, "offset": 0}}, {"end": {"col": 28, "line": 65, "offset": 14}, "file": "llama/ggml-backend.h", "start": {"col": 14, "line": 65, "offset": 0}}, {"end": {"col": 30, "line": 66, "offset": 6}, "file": "llama/ggml-backend.h", "start": {"col": 24, "line": 66, "offset": 0}}, {"end": {"col": 30, "line": 67, "offset": 6}, "file": "llama/ggml-backend.h", "start": {"col": 24, "line": 67, "offset": 0}}, {"end": {"col": 30, "line": 68, "offset": 6}, "file": "llama/ggml-backend.h", "start": {"col": 24, "line": 68, "offset": 0}}, {"end": {"col": 28, "line": 69, "offset": 4}, "file": "llama/ggml-backend.h", "start": {"col": 24, "line": 69, "offset": 0}}, {"end": {"col": 28, "line": 70, "offset": 4}, "file": "llama/ggml-backend.h", "start": {"col": 24, "line": 70, "offset": 0}}, {"end": {"col": 28, "line": 71, "offset": 4}, "file": "llama/ggml-backend.h", "start": {"col": 24, "line": 71, "offset": 0}}, {"end": {"col": 54, "line": 72, "offset": 30}, "file": "llama/ggml-backend.h", "start": {"col": 24, "line": 72, "offset": 0}}, {"end": {"col": 28, "line": 74, "offset": 4}, "file": "llama/ggml-backend.h", "start": {"col": 24, "line": 74, "offset": 0}}, {"end": {"col": 24, "line": 81, "offset": 4}, "file": "llama/ggml-backend.h", "start": {"col": 20, "line": 81, "offset": 0}}, {"end": {"col": 18, "line": 82, "offset": 4}, "file": "llama/ggml-backend.h", "start": {"col": 14, "line": 82, "offset": 0}}, {"end": {"col": 20, "line": 86, "offset": 6}, "file": "llama/ggml-backend.h", "start": {"col": 14, "line": 86, "offset": 0}}, {"end": {"col": 20, "line": 87, "offset": 6}, "file": "llama/ggml-backend.h", "start": {"col": 14, "line": 87, "offset": 0}}, {"end": {"col": 18, "line": 89, "offset": 4}, "file": "llama/ggml-backend.h", "start": {"col": 14, "line": 89, "offset": 0}}, {"end": {"col": 18, "line": 90, "offset": 4}, "file": "llama/ggml-backend.h", "start": {"col": 14, "line": 90, "offset": 0}}, {"end": {"col": 28, "line": 93, "offset": 14}, "file": "llama/ggml-backend.h", "start": {"col": 14, "line": 93, "offset": 0}}, {"end": {"col": 28, "line": 94, "offset": 14}, "file": "llama/ggml-backend.h", "start": {"col": 14, "line": 94, "offset": 0}}, {"end": {"col": 28, "line": 95, "offset": 14}, "file": "llama/ggml-backend.h", "start": {"col": 14, "line": 95, "offset": 0}}, {"end": {"col": 18, "line": 97, "offset": 4}, "file": "llama/ggml-backend.h", "start": {"col": 14, "line": 97, "offset": 0}}, {"end": {"col": 18, "line": 100, "offset": 4}, "file": "llama/ggml-backend.h", "start": {"col": 14, "line": 100, "offset": 0}}, {"end": {"col": 30, "line": 102, "offset": 16}, "file": "llama/ggml-backend.h", "start": {"col": 14, "line": 102, "offset": 0}}, {"end": {"col": 30, "line": 103, "offset": 16}, "file": "llama/ggml-backend.h", "start": {"col": 14, "line": 103, "offset": 0}}, {"end": {"col": 30, "line": 104, "offset": 16}, "file": "llama/ggml-backend.h", "start": {"col": 14, "line": 104, "offset": 0}}, {"end": {"col": 18, "line": 105, "offset": 4}, "file": "llama/ggml-backend.h", "start": {"col": 14, "line": 105, "offset": 0}}, {"end": {"col": 18, "line": 106, "offset": 4}, "file": "llama/ggml-backend.h", "start": {"col": 14, "line": 106, "offset": 0}}, {"end": {"col": 18, "line": 107, "offset": 4}, "file": "llama/ggml-backend.h", "start": {"col": 14, "line": 107, "offset": 0}}, {"end": {"col": 18, "line": 110, "offset": 4}, "file": "llama/ggml-backend.h", "start": {"col": 14, "line": 110, "offset": 0}}, {"end": {"col": 18, "line": 116, "offset": 4}, "file": "llama/ggml-backend.h", "start": {"col": 14, "line": 116, "offset": 0}}, {"end": {"col": 18, "line": 120, "offset": 4}, "file": "llama/ggml-backend.h", "start": {"col": 14, "line": 120, "offset": 0}}, {"end": {"col": 18, "line": 121, "offset": 4}, "file": "llama/ggml-backend.h", "start": {"col": 14, "line": 121, "offset": 0}}, {"end": {"col": 18, "line": 122, "offset": 4}, "file": "llama/ggml-backend.h", "start": {"col": 14, "line": 122, "offset": 0}}, {"end": {"col": 18, "line": 123, "offset": 4}, "file": "llama/ggml-backend.h", "start": {"col": 14, "line": 123, "offset": 0}}, {"end": {"col": 28, "line": 131, "offset": 14}, "file": "llama/ggml-backend.h", "start": {"col": 14, "line": 131, "offset": 0}}, {"end": {"col": 28, "line": 132, "offset": 4}, "file": "llama/ggml-backend.h", "start": {"col": 24, "line": 132, "offset": 0}}, {"end": {"col": 28, "line": 133, "offset": 4}, "file": "llama/ggml-backend.h", "start": {"col": 24, "line": 133, "offset": 0}}, {"end": {"col": 28, "line": 134, "offset": 4}, "file": "llama/ggml-backend.h", "start": {"col": 24, "line": 134, "offset": 0}}, {"end": {"col": 45, "line": 137, "offset": 31}, "file": "llama/ggml-backend.h", "start": {"col": 14, "line": 137, "offset": 0}}, {"end": {"col": 50, "line": 139, "offset": 36}, "file": "llama/ggml-backend.h", "start": {"col": 14, "line": 139, "offset": 0}}, {"end": {"col": 20, "line": 151, "offset": 6}, "file": "llama/ggml-backend.h", "start": {"col": 14, "line": 151, "offset": 0}}, {"end": {"col": 20, "line": 152, "offset": 6}, "file": "llama/ggml-backend.h", "start": {"col": 14, "line": 152, "offset": 0}}, {"end": {"col": 24, "line": 154, "offset": 4}, "file": "llama/ggml-backend.h", "start": {"col": 20, "line": 154, "offset": 0}}, {"end": {"col": 18, "line": 211, "offset": 4}, "file": "llama/ggml-backend.h", "start": {"col": 14, "line": 211, "offset": 0}}, {"end": {"col": 18, "line": 214, "offset": 4}, "file": "llama/ggml-backend.h", "start": {"col": 14, "line": 214, "offset": 0}}, {"end": {"col": 17, "line": 216, "offset": 3}, "file": "llama/ggml-backend.h", "start": {"col": 14, "line": 216, "offset": 0}}, {"end": {"col": 17, "line": 220, "offset": 3}, "file": "llama/ggml-backend.h", "start": {"col": 14, "line": 220, "offset": 0}}, {"end": {"col": 17, "line": 221, "offset": 3}, "file": "llama/ggml-backend.h", "start": {"col": 14, "line": 221, "offset": 0}}, {"end": {"col": 20, "line": 223, "offset": 6}, "file": "llama/ggml-backend.h", "start": {"col": 14, "line": 223, "offset": 0}}, {"end": {"col": 18, "line": 225, "offset": 4}, "file": "llama/ggml-backend.h", "start": {"col": 14, "line": 225, "offset": 0}}, {"end": {"col": 18, "line": 229, "offset": 4}, "file": "llama/ggml-backend.h", "start": {"col": 14, "line": 229, "offset": 0}}, {"end": {"col": 30, "line": 230, "offset": 16}, "file": "llama/ggml-backend.h", "start": {"col": 14, "line": 230, "offset": 0}}, {"end": {"col": 30, "line": 231, "offset": 16}, "file": "llama/ggml-backend.h", "start": {"col": 14, "line": 231, "offset": 0}}, {"end": {"col": 18, "line": 232, "offset": 4}, "file": "llama/ggml-backend.h", "start": {"col": 14, "line": 232, "offset": 0}}, {"end": {"col": 18, "line": 235, "offset": 4}, "file": "llama/ggml-backend.h", "start": {"col": 14, "line": 235, "offset": 0}}, {"end": {"col": 18, "line": 238, "offset": 4}, "file": "llama/ggml-backend.h", "start": {"col": 14, "line": 238, "offset": 0}}, {"end": {"col": 44, "line": 252, "offset": 30}, "file": "llama/ggml-backend.h", "start": {"col": 14, "line": 252, "offset": 0}}, {"end": {"col": 18, "line": 253, "offset": 4}, "file": "llama/ggml-backend.h", "start": {"col": 14, "line": 253, "offset": 0}}, {"end": {"col": 29, "line": 255, "offset": 9}, "file": "llama/ggml-backend.h", "start": {"col": 20, "line": 255, "offset": 0}}, {"end": {"col": 18, "line": 258, "offset": 4}, "file": "llama/ggml-backend.h", "start": {"col": 14, "line": 258, "offset": 0}}, {"end": {"col": 18, "line": 261, "offset": 4}, "file": "llama/ggml-backend.h", "start": {"col": 14, "line": 261, "offset": 0}}, {"end": {"col": 18, "line": 262, "offset": 4}, "file": "llama/ggml-backend.h", "start": {"col": 14, "line": 262, "offset": 0}}], "type": ["PartialParsing", [{"end": {"col": 34, "line": 47, "offset": 4}, "path": "llama/ggml-backend.h", "start": {"col": 30, "line": 47, "offset": 0}}, {"end": {"col": 45, "line": 48, "offset": 31}, "path": "llama/ggml-backend.h", "start": {"col": 14, "line": 48, "offset": 0}}, {"end": {"col": 30, "line": 49, "offset": 6}, "path": "llama/ggml-backend.h", "start": {"col": 24, "line": 49, "offset": 0}}, {"end": {"col": 30, "line": 50, "offset": 6}, "path": "llama/ggml-backend.h", "start": {"col": 24, "line": 50, "offset": 0}}, {"end": {"col": 30, "line": 51, "offset": 16}, "path": "llama/ggml-backend.h", "start": {"col": 14, "line": 51, "offset": 0}}, {"end": {"col": 28, "line": 52, "offset": 4}, "path": "llama/ggml-backend.h", "start": {"col": 24, "line": 52, "offset": 0}}, {"end": {"col": 34, "line": 61, "offset": 4}, "path": "llama/ggml-backend.h", "start": {"col": 30, "line": 61, "offset": 0}}, {"end": {"col": 28, "line": 62, "offset": 4}, "path": "llama/ggml-backend.h", "start": {"col": 24, "line": 62, "offset": 0}}, {"end": {"col": 28, "line": 63, "offset": 4}, "path": "llama/ggml-backend.h", "start": {"col": 24, "line": 63, "offset": 0}}, {"end": {"col": 30, "line": 64, "offset": 6}, "path": "llama/ggml-backend.h", "start": {"col": 24, "line": 64, "offset": 0}}, {"end": {"col": 28, "line": 65, "offset": 14}, "path": "llama/ggml-backend.h", "start": {"col": 14, "line": 65, "offset": 0}}, {"end": {"col": 30, "line": 66, "offset": 6}, "path": "llama/ggml-backend.h", "start": {"col": 24, "line": 66, "offset": 0}}, {"end": {"col": 30, "line": 67, "offset": 6}, "path": "llama/ggml-backend.h", "start": {"col": 24, "line": 67, "offset": 0}}, {"end": {"col": 30, "line": 68, "offset": 6}, "path": "llama/ggml-backend.h", "start": {"col": 24, "line": 68, "offset": 0}}, {"end": {"col": 28, "line": 69, "offset": 4}, "path": "llama/ggml-backend.h", "start": {"col": 24, "line": 69, "offset": 0}}, {"end": {"col": 28, "line": 70, "offset": 4}, "path": "llama/ggml-backend.h", "start": {"col": 24, "line": 70, "offset": 0}}, {"end": {"col": 28, "line": 71, "offset": 4}, "path": "llama/ggml-backend.h", "start": {"col": 24, "line": 71, "offset": 0}}, {"end": {"col": 54, "line": 72, "offset": 30}, "path": "llama/ggml-backend.h", "start": {"col": 24, "line": 72, "offset": 0}}, {"end": {"col": 28, "line": 74, "offset": 4}, "path": "llama/ggml-backend.h", "start": {"col": 24, "line": 74, "offset": 0}}, {"end": {"col": 24, "line": 81, "offset": 4}, "path": "llama/ggml-backend.h", "start": {"col": 20, "line": 81, "offset": 0}}, {"end": {"col": 18, "line": 82, "offset": 4}, "path": "llama/ggml-backend.h", "start": {"col": 14, "line": 82, "offset": 0}}, {"end": {"col": 20, "line": 86, "offset": 6}, "path": "llama/ggml-backend.h", "start": {"col": 14, "line": 86, "offset": 0}}, {"end": {"col": 20, "line": 87, "offset": 6}, "path": "llama/ggml-backend.h", "start": {"col": 14, "line": 87, "offset": 0}}, {"end": {"col": 18, "line": 89, "offset": 4}, "path": "llama/ggml-backend.h", "start": {"col": 14, "line": 89, "offset": 0}}, {"end": {"col": 18, "line": 90, "offset": 4}, "path": "llama/ggml-backend.h", "start": {"col": 14, "line": 90, "offset": 0}}, {"end": {"col": 28, "line": 93, "offset": 14}, "path": "llama/ggml-backend.h", "start": {"col": 14, "line": 93, "offset": 0}}, {"end": {"col": 28, "line": 94, "offset": 14}, "path": "llama/ggml-backend.h", "start": {"col": 14, "line": 94, "offset": 0}}, {"end": {"col": 28, "line": 95, "offset": 14}, "path": "llama/ggml-backend.h", "start": {"col": 14, "line": 95, "offset": 0}}, {"end": {"col": 18, "line": 97, "offset": 4}, "path": "llama/ggml-backend.h", "start": {"col": 14, "line": 97, "offset": 0}}, {"end": {"col": 18, "line": 100, "offset": 4}, "path": "llama/ggml-backend.h", "start": {"col": 14, "line": 100, "offset": 0}}, {"end": {"col": 30, "line": 102, "offset": 16}, "path": "llama/ggml-backend.h", "start": {"col": 14, "line": 102, "offset": 0}}, {"end": {"col": 30, "line": 103, "offset": 16}, "path": "llama/ggml-backend.h", "start": {"col": 14, "line": 103, "offset": 0}}, {"end": {"col": 30, "line": 104, "offset": 16}, "path": "llama/ggml-backend.h", "start": {"col": 14, "line": 104, "offset": 0}}, {"end": {"col": 18, "line": 105, "offset": 4}, "path": "llama/ggml-backend.h", "start": {"col": 14, "line": 105, "offset": 0}}, {"end": {"col": 18, "line": 106, "offset": 4}, "path": "llama/ggml-backend.h", "start": {"col": 14, "line": 106, "offset": 0}}, {"end": {"col": 18, "line": 107, "offset": 4}, "path": "llama/ggml-backend.h", "start": {"col": 14, "line": 107, "offset": 0}}, {"end": {"col": 18, "line": 110, "offset": 4}, "path": "llama/ggml-backend.h", "start": {"col": 14, "line": 110, "offset": 0}}, {"end": {"col": 18, "line": 116, "offset": 4}, "path": "llama/ggml-backend.h", "start": {"col": 14, "line": 116, "offset": 0}}, {"end": {"col": 18, "line": 120, "offset": 4}, "path": "llama/ggml-backend.h", "start": {"col": 14, "line": 120, "offset": 0}}, {"end": {"col": 18, "line": 121, "offset": 4}, "path": "llama/ggml-backend.h", "start": {"col": 14, "line": 121, "offset": 0}}, {"end": {"col": 18, "line": 122, "offset": 4}, "path": "llama/ggml-backend.h", "start": {"col": 14, "line": 122, "offset": 0}}, {"end": {"col": 18, "line": 123, "offset": 4}, "path": "llama/ggml-backend.h", "start": {"col": 14, "line": 123, "offset": 0}}, {"end": {"col": 28, "line": 131, "offset": 14}, "path": "llama/ggml-backend.h", "start": {"col": 14, "line": 131, "offset": 0}}, {"end": {"col": 28, "line": 132, "offset": 4}, "path": "llama/ggml-backend.h", "start": {"col": 24, "line": 132, "offset": 0}}, {"end": {"col": 28, "line": 133, "offset": 4}, "path": "llama/ggml-backend.h", "start": {"col": 24, "line": 133, "offset": 0}}, {"end": {"col": 28, "line": 134, "offset": 4}, "path": "llama/ggml-backend.h", "start": {"col": 24, "line": 134, "offset": 0}}, {"end": {"col": 45, "line": 137, "offset": 31}, "path": "llama/ggml-backend.h", "start": {"col": 14, "line": 137, "offset": 0}}, {"end": {"col": 50, "line": 139, "offset": 36}, "path": "llama/ggml-backend.h", "start": {"col": 14, "line": 139, "offset": 0}}, {"end": {"col": 20, "line": 151, "offset": 6}, "path": "llama/ggml-backend.h", "start": {"col": 14, "line": 151, "offset": 0}}, {"end": {"col": 20, "line": 152, "offset": 6}, "path": "llama/ggml-backend.h", "start": {"col": 14, "line": 152, "offset": 0}}, {"end": {"col": 24, "line": 154, "offset": 4}, "path": "llama/ggml-backend.h", "start": {"col": 20, "line": 154, "offset": 0}}, {"end": {"col": 18, "line": 211, "offset": 4}, "path": "llama/ggml-backend.h", "start": {"col": 14, "line": 211, "offset": 0}}, {"end": {"col": 18, "line": 214, "offset": 4}, "path": "llama/ggml-backend.h", "start": {"col": 14, "line": 214, "offset": 0}}, {"end": {"col": 17, "line": 216, "offset": 3}, "path": "llama/ggml-backend.h", "start": {"col": 14, "line": 216, "offset": 0}}, {"end": {"col": 17, "line": 220, "offset": 3}, "path": "llama/ggml-backend.h", "start": {"col": 14, "line": 220, "offset": 0}}, {"end": {"col": 17, "line": 221, "offset": 3}, "path": "llama/ggml-backend.h", "start": {"col": 14, "line": 221, "offset": 0}}, {"end": {"col": 20, "line": 223, "offset": 6}, "path": "llama/ggml-backend.h", "start": {"col": 14, "line": 223, "offset": 0}}, {"end": {"col": 18, "line": 225, "offset": 4}, "path": "llama/ggml-backend.h", "start": {"col": 14, "line": 225, "offset": 0}}, {"end": {"col": 18, "line": 229, "offset": 4}, "path": "llama/ggml-backend.h", "start": {"col": 14, "line": 229, "offset": 0}}, {"end": {"col": 30, "line": 230, "offset": 16}, "path": "llama/ggml-backend.h", "start": {"col": 14, "line": 230, "offset": 0}}, {"end": {"col": 30, "line": 231, "offset": 16}, "path": "llama/ggml-backend.h", "start": {"col": 14, "line": 231, "offset": 0}}, {"end": {"col": 18, "line": 232, "offset": 4}, "path": "llama/ggml-backend.h", "start": {"col": 14, "line": 232, "offset": 0}}, {"end": {"col": 18, "line": 235, "offset": 4}, "path": "llama/ggml-backend.h", "start": {"col": 14, "line": 235, "offset": 0}}, {"end": {"col": 18, "line": 238, "offset": 4}, "path": "llama/ggml-backend.h", "start": {"col": 14, "line": 238, "offset": 0}}, {"end": {"col": 44, "line": 252, "offset": 30}, "path": "llama/ggml-backend.h", "start": {"col": 14, "line": 252, "offset": 0}}, {"end": {"col": 18, "line": 253, "offset": 4}, "path": "llama/ggml-backend.h", "start": {"col": 14, "line": 253, "offset": 0}}, {"end": {"col": 29, "line": 255, "offset": 9}, "path": "llama/ggml-backend.h", "start": {"col": 20, "line": 255, "offset": 0}}, {"end": {"col": 18, "line": 258, "offset": 4}, "path": "llama/ggml-backend.h", "start": {"col": 14, "line": 258, "offset": 0}}, {"end": {"col": 18, "line": 261, "offset": 4}, "path": "llama/ggml-backend.h", "start": {"col": 14, "line": 261, "offset": 0}}, {"end": {"col": 18, "line": 262, "offset": 4}, "path": "llama/ggml-backend.h", "start": {"col": 14, "line": 262, "offset": 0}}]]}, {"code": 3, "level": "warn", "message": "Syntax error at line llama/ggml-quants.h:41:\n `x` was unexpected", "path": "llama/ggml-quants.h", "spans": [{"end": {"col": 57, "line": 41, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 56, "line": 41, "offset": 0}}, {"end": {"col": 87, "line": 41, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 86, "line": 41, "offset": 0}}, {"end": {"col": 57, "line": 42, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 56, "line": 42, "offset": 0}}, {"end": {"col": 87, "line": 42, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 86, "line": 42, "offset": 0}}, {"end": {"col": 57, "line": 43, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 56, "line": 43, "offset": 0}}, {"end": {"col": 87, "line": 43, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 86, "line": 43, "offset": 0}}, {"end": {"col": 57, "line": 44, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 56, "line": 44, "offset": 0}}, {"end": {"col": 87, "line": 44, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 86, "line": 44, "offset": 0}}, {"end": {"col": 57, "line": 45, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 56, "line": 45, "offset": 0}}, {"end": {"col": 87, "line": 45, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 86, "line": 45, "offset": 0}}, {"end": {"col": 57, "line": 46, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 56, "line": 46, "offset": 0}}, {"end": {"col": 87, "line": 46, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 86, "line": 46, "offset": 0}}, {"end": {"col": 57, "line": 48, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 56, "line": 48, "offset": 0}}, {"end": {"col": 87, "line": 48, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 86, "line": 48, "offset": 0}}, {"end": {"col": 57, "line": 49, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 56, "line": 49, "offset": 0}}, {"end": {"col": 87, "line": 49, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 86, "line": 49, "offset": 0}}, {"end": {"col": 57, "line": 50, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 56, "line": 50, "offset": 0}}, {"end": {"col": 87, "line": 50, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 86, "line": 50, "offset": 0}}, {"end": {"col": 57, "line": 51, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 56, "line": 51, "offset": 0}}, {"end": {"col": 87, "line": 51, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 86, "line": 51, "offset": 0}}, {"end": {"col": 57, "line": 52, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 56, "line": 52, "offset": 0}}, {"end": {"col": 87, "line": 52, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 86, "line": 52, "offset": 0}}, {"end": {"col": 57, "line": 53, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 56, "line": 53, "offset": 0}}, {"end": {"col": 87, "line": 53, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 86, "line": 53, "offset": 0}}, {"end": {"col": 58, "line": 55, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 57, "line": 55, "offset": 0}}, {"end": {"col": 89, "line": 55, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 88, "line": 55, "offset": 0}}, {"end": {"col": 58, "line": 56, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 57, "line": 56, "offset": 0}}, {"end": {"col": 89, "line": 56, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 88, "line": 56, "offset": 0}}, {"end": {"col": 60, "line": 58, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 59, "line": 58, "offset": 0}}, {"end": {"col": 93, "line": 58, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 92, "line": 58, "offset": 0}}, {"end": {"col": 60, "line": 59, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 59, "line": 59, "offset": 0}}, {"end": {"col": 93, "line": 59, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 92, "line": 59, "offset": 0}}, {"end": {"col": 60, "line": 60, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 59, "line": 60, "offset": 0}}, {"end": {"col": 93, "line": 60, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 92, "line": 60, "offset": 0}}, {"end": {"col": 60, "line": 61, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 59, "line": 61, "offset": 0}}, {"end": {"col": 93, "line": 61, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 92, "line": 61, "offset": 0}}, {"end": {"col": 60, "line": 62, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 59, "line": 62, "offset": 0}}, {"end": {"col": 93, "line": 62, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 92, "line": 62, "offset": 0}}, {"end": {"col": 53, "line": 64, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 52, "line": 64, "offset": 0}}, {"end": {"col": 77, "line": 64, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 76, "line": 64, "offset": 0}}, {"end": {"col": 53, "line": 65, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 52, "line": 65, "offset": 0}}, {"end": {"col": 77, "line": 65, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 76, "line": 65, "offset": 0}}, {"end": {"col": 53, "line": 66, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 52, "line": 66, "offset": 0}}, {"end": {"col": 77, "line": 66, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 76, "line": 66, "offset": 0}}, {"end": {"col": 53, "line": 67, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 52, "line": 67, "offset": 0}}, {"end": {"col": 77, "line": 67, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 76, "line": 67, "offset": 0}}, {"end": {"col": 53, "line": 68, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 52, "line": 68, "offset": 0}}, {"end": {"col": 77, "line": 68, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 76, "line": 68, "offset": 0}}, {"end": {"col": 53, "line": 69, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 52, "line": 69, "offset": 0}}, {"end": {"col": 77, "line": 69, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 76, "line": 69, "offset": 0}}, {"end": {"col": 53, "line": 71, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 52, "line": 71, "offset": 0}}, {"end": {"col": 77, "line": 71, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 76, "line": 71, "offset": 0}}, {"end": {"col": 53, "line": 72, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 52, "line": 72, "offset": 0}}, {"end": {"col": 77, "line": 72, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 76, "line": 72, "offset": 0}}, {"end": {"col": 53, "line": 73, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 52, "line": 73, "offset": 0}}, {"end": {"col": 77, "line": 73, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 76, "line": 73, "offset": 0}}, {"end": {"col": 53, "line": 74, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 52, "line": 74, "offset": 0}}, {"end": {"col": 77, "line": 74, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 76, "line": 74, "offset": 0}}, {"end": {"col": 53, "line": 75, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 52, "line": 75, "offset": 0}}, {"end": {"col": 77, "line": 75, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 76, "line": 75, "offset": 0}}, {"end": {"col": 53, "line": 76, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 52, "line": 76, "offset": 0}}, {"end": {"col": 77, "line": 76, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 76, "line": 76, "offset": 0}}, {"end": {"col": 54, "line": 78, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 53, "line": 78, "offset": 0}}, {"end": {"col": 78, "line": 78, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 77, "line": 78, "offset": 0}}, {"end": {"col": 54, "line": 79, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 53, "line": 79, "offset": 0}}, {"end": {"col": 78, "line": 79, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 77, "line": 79, "offset": 0}}, {"end": {"col": 56, "line": 81, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 55, "line": 81, "offset": 0}}, {"end": {"col": 80, "line": 81, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 79, "line": 81, "offset": 0}}, {"end": {"col": 56, "line": 82, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 55, "line": 82, "offset": 0}}, {"end": {"col": 80, "line": 82, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 79, "line": 82, "offset": 0}}, {"end": {"col": 56, "line": 83, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 55, "line": 83, "offset": 0}}, {"end": {"col": 80, "line": 83, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 79, "line": 83, "offset": 0}}, {"end": {"col": 56, "line": 84, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 55, "line": 84, "offset": 0}}, {"end": {"col": 80, "line": 84, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 79, "line": 84, "offset": 0}}, {"end": {"col": 56, "line": 85, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 55, "line": 85, "offset": 0}}, {"end": {"col": 80, "line": 85, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 79, "line": 85, "offset": 0}}, {"end": {"col": 60, "line": 88, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 59, "line": 88, "offset": 0}}, {"end": {"col": 85, "line": 88, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 84, "line": 88, "offset": 0}}, {"end": {"col": 60, "line": 89, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 59, "line": 89, "offset": 0}}, {"end": {"col": 85, "line": 89, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 84, "line": 89, "offset": 0}}, {"end": {"col": 60, "line": 90, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 59, "line": 90, "offset": 0}}, {"end": {"col": 85, "line": 90, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 84, "line": 90, "offset": 0}}, {"end": {"col": 60, "line": 91, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 59, "line": 91, "offset": 0}}, {"end": {"col": 85, "line": 91, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 84, "line": 91, "offset": 0}}, {"end": {"col": 60, "line": 92, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 59, "line": 92, "offset": 0}}, {"end": {"col": 85, "line": 92, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 84, "line": 92, "offset": 0}}, {"end": {"col": 60, "line": 95, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 59, "line": 95, "offset": 0}}, {"end": {"col": 85, "line": 95, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 84, "line": 95, "offset": 0}}, {"end": {"col": 60, "line": 96, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 59, "line": 96, "offset": 0}}, {"end": {"col": 85, "line": 96, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 84, "line": 96, "offset": 0}}, {"end": {"col": 60, "line": 97, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 59, "line": 97, "offset": 0}}, {"end": {"col": 85, "line": 97, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 84, "line": 97, "offset": 0}}, {"end": {"col": 60, "line": 98, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 59, "line": 98, "offset": 0}}, {"end": {"col": 85, "line": 98, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 84, "line": 98, "offset": 0}}, {"end": {"col": 60, "line": 99, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 59, "line": 99, "offset": 0}}, {"end": {"col": 85, "line": 99, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 84, "line": 99, "offset": 0}}, {"end": {"col": 60, "line": 100, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 59, "line": 100, "offset": 0}}, {"end": {"col": 85, "line": 100, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 84, "line": 100, "offset": 0}}, {"end": {"col": 62, "line": 102, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 61, "line": 102, "offset": 0}}, {"end": {"col": 87, "line": 102, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 86, "line": 102, "offset": 0}}, {"end": {"col": 62, "line": 103, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 61, "line": 103, "offset": 0}}, {"end": {"col": 87, "line": 103, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 86, "line": 103, "offset": 0}}, {"end": {"col": 66, "line": 105, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 65, "line": 105, "offset": 0}}, {"end": {"col": 91, "line": 105, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 90, "line": 105, "offset": 0}}, {"end": {"col": 66, "line": 106, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 65, "line": 106, "offset": 0}}, {"end": {"col": 91, "line": 106, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 90, "line": 106, "offset": 0}}, {"end": {"col": 66, "line": 107, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 65, "line": 107, "offset": 0}}, {"end": {"col": 91, "line": 107, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 90, "line": 107, "offset": 0}}, {"end": {"col": 66, "line": 108, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 65, "line": 108, "offset": 0}}, {"end": {"col": 91, "line": 108, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 90, "line": 108, "offset": 0}}, {"end": {"col": 66, "line": 109, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 65, "line": 109, "offset": 0}}, {"end": {"col": 91, "line": 109, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 90, "line": 109, "offset": 0}}, {"end": {"col": 66, "line": 110, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 65, "line": 110, "offset": 0}}, {"end": {"col": 91, "line": 110, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 90, "line": 110, "offset": 0}}, {"end": {"col": 66, "line": 111, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 65, "line": 111, "offset": 0}}, {"end": {"col": 91, "line": 111, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 90, "line": 111, "offset": 0}}, {"end": {"col": 66, "line": 112, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 65, "line": 112, "offset": 0}}, {"end": {"col": 91, "line": 112, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 90, "line": 112, "offset": 0}}, {"end": {"col": 66, "line": 113, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 65, "line": 113, "offset": 0}}, {"end": {"col": 91, "line": 113, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 90, "line": 113, "offset": 0}}, {"end": {"col": 59, "line": 116, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 58, "line": 116, "offset": 0}}, {"end": {"col": 101, "line": 116, "offset": 2}, "file": "llama/ggml-quants.h", "start": {"col": 99, "line": 116, "offset": 0}}, {"end": {"col": 143, "line": 116, "offset": 2}, "file": "llama/ggml-quants.h", "start": {"col": 141, "line": 116, "offset": 0}}, {"end": {"col": 59, "line": 117, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 58, "line": 117, "offset": 0}}, {"end": {"col": 101, "line": 117, "offset": 2}, "file": "llama/ggml-quants.h", "start": {"col": 99, "line": 117, "offset": 0}}, {"end": {"col": 143, "line": 117, "offset": 2}, "file": "llama/ggml-quants.h", "start": {"col": 141, "line": 117, "offset": 0}}, {"end": {"col": 59, "line": 118, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 58, "line": 118, "offset": 0}}, {"end": {"col": 101, "line": 118, "offset": 2}, "file": "llama/ggml-quants.h", "start": {"col": 99, "line": 118, "offset": 0}}, {"end": {"col": 143, "line": 118, "offset": 2}, "file": "llama/ggml-quants.h", "start": {"col": 141, "line": 118, "offset": 0}}, {"end": {"col": 59, "line": 119, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 58, "line": 119, "offset": 0}}, {"end": {"col": 101, "line": 119, "offset": 2}, "file": "llama/ggml-quants.h", "start": {"col": 99, "line": 119, "offset": 0}}, {"end": {"col": 143, "line": 119, "offset": 2}, "file": "llama/ggml-quants.h", "start": {"col": 141, "line": 119, "offset": 0}}, {"end": {"col": 59, "line": 120, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 58, "line": 120, "offset": 0}}, {"end": {"col": 101, "line": 120, "offset": 2}, "file": "llama/ggml-quants.h", "start": {"col": 99, "line": 120, "offset": 0}}, {"end": {"col": 143, "line": 120, "offset": 2}, "file": "llama/ggml-quants.h", "start": {"col": 141, "line": 120, "offset": 0}}, {"end": {"col": 59, "line": 122, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 58, "line": 122, "offset": 0}}, {"end": {"col": 101, "line": 122, "offset": 2}, "file": "llama/ggml-quants.h", "start": {"col": 99, "line": 122, "offset": 0}}, {"end": {"col": 143, "line": 122, "offset": 2}, "file": "llama/ggml-quants.h", "start": {"col": 141, "line": 122, "offset": 0}}, {"end": {"col": 59, "line": 123, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 58, "line": 123, "offset": 0}}, {"end": {"col": 101, "line": 123, "offset": 2}, "file": "llama/ggml-quants.h", "start": {"col": 99, "line": 123, "offset": 0}}, {"end": {"col": 143, "line": 123, "offset": 2}, "file": "llama/ggml-quants.h", "start": {"col": 141, "line": 123, "offset": 0}}, {"end": {"col": 59, "line": 124, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 58, "line": 124, "offset": 0}}, {"end": {"col": 101, "line": 124, "offset": 2}, "file": "llama/ggml-quants.h", "start": {"col": 99, "line": 124, "offset": 0}}, {"end": {"col": 143, "line": 124, "offset": 2}, "file": "llama/ggml-quants.h", "start": {"col": 141, "line": 124, "offset": 0}}, {"end": {"col": 59, "line": 125, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 58, "line": 125, "offset": 0}}, {"end": {"col": 101, "line": 125, "offset": 2}, "file": "llama/ggml-quants.h", "start": {"col": 99, "line": 125, "offset": 0}}, {"end": {"col": 143, "line": 125, "offset": 2}, "file": "llama/ggml-quants.h", "start": {"col": 141, "line": 125, "offset": 0}}, {"end": {"col": 59, "line": 126, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 58, "line": 126, "offset": 0}}, {"end": {"col": 101, "line": 126, "offset": 2}, "file": "llama/ggml-quants.h", "start": {"col": 99, "line": 126, "offset": 0}}, {"end": {"col": 143, "line": 126, "offset": 2}, "file": "llama/ggml-quants.h", "start": {"col": 141, "line": 126, "offset": 0}}, {"end": {"col": 60, "line": 128, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 59, "line": 128, "offset": 0}}, {"end": {"col": 102, "line": 128, "offset": 2}, "file": "llama/ggml-quants.h", "start": {"col": 100, "line": 128, "offset": 0}}, {"end": {"col": 144, "line": 128, "offset": 2}, "file": "llama/ggml-quants.h", "start": {"col": 142, "line": 128, "offset": 0}}, {"end": {"col": 60, "line": 129, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 59, "line": 129, "offset": 0}}, {"end": {"col": 102, "line": 129, "offset": 2}, "file": "llama/ggml-quants.h", "start": {"col": 100, "line": 129, "offset": 0}}, {"end": {"col": 144, "line": 129, "offset": 2}, "file": "llama/ggml-quants.h", "start": {"col": 142, "line": 129, "offset": 0}}, {"end": {"col": 62, "line": 131, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 61, "line": 131, "offset": 0}}, {"end": {"col": 104, "line": 131, "offset": 2}, "file": "llama/ggml-quants.h", "start": {"col": 102, "line": 131, "offset": 0}}, {"end": {"col": 146, "line": 131, "offset": 2}, "file": "llama/ggml-quants.h", "start": {"col": 144, "line": 131, "offset": 0}}, {"end": {"col": 62, "line": 132, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 61, "line": 132, "offset": 0}}, {"end": {"col": 104, "line": 132, "offset": 2}, "file": "llama/ggml-quants.h", "start": {"col": 102, "line": 132, "offset": 0}}, {"end": {"col": 146, "line": 132, "offset": 2}, "file": "llama/ggml-quants.h", "start": {"col": 144, "line": 132, "offset": 0}}, {"end": {"col": 62, "line": 133, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 61, "line": 133, "offset": 0}}, {"end": {"col": 104, "line": 133, "offset": 2}, "file": "llama/ggml-quants.h", "start": {"col": 102, "line": 133, "offset": 0}}, {"end": {"col": 146, "line": 133, "offset": 2}, "file": "llama/ggml-quants.h", "start": {"col": 144, "line": 133, "offset": 0}}, {"end": {"col": 62, "line": 134, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 61, "line": 134, "offset": 0}}, {"end": {"col": 104, "line": 134, "offset": 2}, "file": "llama/ggml-quants.h", "start": {"col": 102, "line": 134, "offset": 0}}, {"end": {"col": 146, "line": 134, "offset": 2}, "file": "llama/ggml-quants.h", "start": {"col": 144, "line": 134, "offset": 0}}, {"end": {"col": 62, "line": 135, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 61, "line": 135, "offset": 0}}, {"end": {"col": 104, "line": 135, "offset": 2}, "file": "llama/ggml-quants.h", "start": {"col": 102, "line": 135, "offset": 0}}, {"end": {"col": 146, "line": 135, "offset": 2}, "file": "llama/ggml-quants.h", "start": {"col": 144, "line": 135, "offset": 0}}, {"end": {"col": 62, "line": 136, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 61, "line": 136, "offset": 0}}, {"end": {"col": 104, "line": 136, "offset": 2}, "file": "llama/ggml-quants.h", "start": {"col": 102, "line": 136, "offset": 0}}, {"end": {"col": 146, "line": 136, "offset": 2}, "file": "llama/ggml-quants.h", "start": {"col": 144, "line": 136, "offset": 0}}, {"end": {"col": 62, "line": 137, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 61, "line": 137, "offset": 0}}, {"end": {"col": 104, "line": 137, "offset": 2}, "file": "llama/ggml-quants.h", "start": {"col": 102, "line": 137, "offset": 0}}, {"end": {"col": 146, "line": 137, "offset": 2}, "file": "llama/ggml-quants.h", "start": {"col": 144, "line": 137, "offset": 0}}, {"end": {"col": 62, "line": 138, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 61, "line": 138, "offset": 0}}, {"end": {"col": 104, "line": 138, "offset": 2}, "file": "llama/ggml-quants.h", "start": {"col": 102, "line": 138, "offset": 0}}, {"end": {"col": 146, "line": 138, "offset": 2}, "file": "llama/ggml-quants.h", "start": {"col": 144, "line": 138, "offset": 0}}, {"end": {"col": 62, "line": 139, "offset": 1}, "file": "llama/ggml-quants.h", "start": {"col": 61, "line": 139, "offset": 0}}, {"end": {"col": 104, "line": 139, "offset": 2}, "file": "llama/ggml-quants.h", "start": {"col": 102, "line": 139, "offset": 0}}, {"end": {"col": 146, "line": 139, "offset": 2}, "file": "llama/ggml-quants.h", "start": {"col": 144, "line": 139, "offset": 0}}, {"end": {"col": 56, "line": 142, "offset": 3}, "file": "llama/ggml-quants.h", "start": {"col": 53, "line": 142, "offset": 0}}, {"end": {"col": 82, "line": 142, "offset": 3}, "file": "llama/ggml-quants.h", "start": {"col": 79, "line": 142, "offset": 0}}, {"end": {"col": 56, "line": 143, "offset": 3}, "file": "llama/ggml-quants.h", "start": {"col": 53, "line": 143, "offset": 0}}, {"end": {"col": 82, "line": 143, "offset": 3}, "file": "llama/ggml-quants.h", "start": {"col": 79, "line": 143, "offset": 0}}, {"end": {"col": 56, "line": 144, "offset": 3}, "file": "llama/ggml-quants.h", "start": {"col": 53, "line": 144, "offset": 0}}, {"end": {"col": 82, "line": 144, "offset": 3}, "file": "llama/ggml-quants.h", "start": {"col": 79, "line": 144, "offset": 0}}, {"end": {"col": 56, "line": 145, "offset": 3}, "file": "llama/ggml-quants.h", "start": {"col": 53, "line": 145, "offset": 0}}, {"end": {"col": 82, "line": 145, "offset": 3}, "file": "llama/ggml-quants.h", "start": {"col": 79, "line": 145, "offset": 0}}, {"end": {"col": 56, "line": 146, "offset": 3}, "file": "llama/ggml-quants.h", "start": {"col": 53, "line": 146, "offset": 0}}, {"end": {"col": 82, "line": 146, "offset": 3}, "file": "llama/ggml-quants.h", "start": {"col": 79, "line": 146, "offset": 0}}, {"end": {"col": 56, "line": 147, "offset": 3}, "file": "llama/ggml-quants.h", "start": {"col": 53, "line": 147, "offset": 0}}, {"end": {"col": 82, "line": 147, "offset": 3}, "file": "llama/ggml-quants.h", "start": {"col": 79, "line": 147, "offset": 0}}, {"end": {"col": 56, "line": 148, "offset": 3}, "file": "llama/ggml-quants.h", "start": {"col": 53, "line": 148, "offset": 0}}, {"end": {"col": 82, "line": 148, "offset": 3}, "file": "llama/ggml-quants.h", "start": {"col": 79, "line": 148, "offset": 0}}, {"end": {"col": 56, "line": 149, "offset": 3}, "file": "llama/ggml-quants.h", "start": {"col": 53, "line": 149, "offset": 0}}, {"end": {"col": 82, "line": 149, "offset": 3}, "file": "llama/ggml-quants.h", "start": {"col": 79, "line": 149, "offset": 0}}, {"end": {"col": 56, "line": 150, "offset": 3}, "file": "llama/ggml-quants.h", "start": {"col": 53, "line": 150, "offset": 0}}, {"end": {"col": 82, "line": 150, "offset": 3}, "file": "llama/ggml-quants.h", "start": {"col": 79, "line": 150, "offset": 0}}, {"end": {"col": 54, "line": 152, "offset": 3}, "file": "llama/ggml-quants.h", "start": {"col": 51, "line": 152, "offset": 0}}, {"end": {"col": 80, "line": 152, "offset": 3}, "file": "llama/ggml-quants.h", "start": {"col": 77, "line": 152, "offset": 0}}, {"end": {"col": 54, "line": 153, "offset": 3}, "file": "llama/ggml-quants.h", "start": {"col": 51, "line": 153, "offset": 0}}, {"end": {"col": 80, "line": 153, "offset": 3}, "file": "llama/ggml-quants.h", "start": {"col": 77, "line": 153, "offset": 0}}, {"end": {"col": 53, "line": 155, "offset": 3}, "file": "llama/ggml-quants.h", "start": {"col": 50, "line": 155, "offset": 0}}, {"end": {"col": 79, "line": 155, "offset": 3}, "file": "llama/ggml-quants.h", "start": {"col": 76, "line": 155, "offset": 0}}, {"end": {"col": 53, "line": 156, "offset": 3}, "file": "llama/ggml-quants.h", "start": {"col": 50, "line": 156, "offset": 0}}, {"end": {"col": 79, "line": 156, "offset": 3}, "file": "llama/ggml-quants.h", "start": {"col": 76, "line": 156, "offset": 0}}, {"end": {"col": 53, "line": 157, "offset": 3}, "file": "llama/ggml-quants.h", "start": {"col": 50, "line": 157, "offset": 0}}, {"end": {"col": 79, "line": 157, "offset": 3}, "file": "llama/ggml-quants.h", "start": {"col": 76, "line": 157, "offset": 0}}, {"end": {"col": 53, "line": 158, "offset": 3}, "file": "llama/ggml-quants.h", "start": {"col": 50, "line": 158, "offset": 0}}, {"end": {"col": 79, "line": 158, "offset": 3}, "file": "llama/ggml-quants.h", "start": {"col": 76, "line": 158, "offset": 0}}, {"end": {"col": 53, "line": 159, "offset": 3}, "file": "llama/ggml-quants.h", "start": {"col": 50, "line": 159, "offset": 0}}, {"end": {"col": 79, "line": 159, "offset": 3}, "file": "llama/ggml-quants.h", "start": {"col": 76, "line": 159, "offset": 0}}, {"end": {"col": 53, "line": 160, "offset": 3}, "file": "llama/ggml-quants.h", "start": {"col": 50, "line": 160, "offset": 0}}, {"end": {"col": 79, "line": 160, "offset": 3}, "file": "llama/ggml-quants.h", "start": {"col": 76, "line": 160, "offset": 0}}, {"end": {"col": 53, "line": 161, "offset": 3}, "file": "llama/ggml-quants.h", "start": {"col": 50, "line": 161, "offset": 0}}, {"end": {"col": 79, "line": 161, "offset": 3}, "file": "llama/ggml-quants.h", "start": {"col": 76, "line": 161, "offset": 0}}, {"end": {"col": 53, "line": 162, "offset": 3}, "file": "llama/ggml-quants.h", "start": {"col": 50, "line": 162, "offset": 0}}, {"end": {"col": 79, "line": 162, "offset": 3}, "file": "llama/ggml-quants.h", "start": {"col": 76, "line": 162, "offset": 0}}, {"end": {"col": 53, "line": 163, "offset": 3}, "file": "llama/ggml-quants.h", "start": {"col": 50, "line": 163, "offset": 0}}, {"end": {"col": 79, "line": 163, "offset": 3}, "file": "llama/ggml-quants.h", "start": {"col": 76, "line": 163, "offset": 0}}, {"end": {"col": 53, "line": 164, "offset": 3}, "file": "llama/ggml-quants.h", "start": {"col": 50, "line": 164, "offset": 0}}, {"end": {"col": 79, "line": 164, "offset": 3}, "file": "llama/ggml-quants.h", "start": {"col": 76, "line": 164, "offset": 0}}], "type": ["PartialParsing", [{"end": {"col": 57, "line": 41, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 56, "line": 41, "offset": 0}}, {"end": {"col": 87, "line": 41, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 86, "line": 41, "offset": 0}}, {"end": {"col": 57, "line": 42, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 56, "line": 42, "offset": 0}}, {"end": {"col": 87, "line": 42, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 86, "line": 42, "offset": 0}}, {"end": {"col": 57, "line": 43, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 56, "line": 43, "offset": 0}}, {"end": {"col": 87, "line": 43, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 86, "line": 43, "offset": 0}}, {"end": {"col": 57, "line": 44, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 56, "line": 44, "offset": 0}}, {"end": {"col": 87, "line": 44, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 86, "line": 44, "offset": 0}}, {"end": {"col": 57, "line": 45, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 56, "line": 45, "offset": 0}}, {"end": {"col": 87, "line": 45, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 86, "line": 45, "offset": 0}}, {"end": {"col": 57, "line": 46, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 56, "line": 46, "offset": 0}}, {"end": {"col": 87, "line": 46, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 86, "line": 46, "offset": 0}}, {"end": {"col": 57, "line": 48, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 56, "line": 48, "offset": 0}}, {"end": {"col": 87, "line": 48, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 86, "line": 48, "offset": 0}}, {"end": {"col": 57, "line": 49, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 56, "line": 49, "offset": 0}}, {"end": {"col": 87, "line": 49, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 86, "line": 49, "offset": 0}}, {"end": {"col": 57, "line": 50, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 56, "line": 50, "offset": 0}}, {"end": {"col": 87, "line": 50, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 86, "line": 50, "offset": 0}}, {"end": {"col": 57, "line": 51, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 56, "line": 51, "offset": 0}}, {"end": {"col": 87, "line": 51, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 86, "line": 51, "offset": 0}}, {"end": {"col": 57, "line": 52, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 56, "line": 52, "offset": 0}}, {"end": {"col": 87, "line": 52, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 86, "line": 52, "offset": 0}}, {"end": {"col": 57, "line": 53, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 56, "line": 53, "offset": 0}}, {"end": {"col": 87, "line": 53, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 86, "line": 53, "offset": 0}}, {"end": {"col": 58, "line": 55, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 57, "line": 55, "offset": 0}}, {"end": {"col": 89, "line": 55, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 88, "line": 55, "offset": 0}}, {"end": {"col": 58, "line": 56, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 57, "line": 56, "offset": 0}}, {"end": {"col": 89, "line": 56, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 88, "line": 56, "offset": 0}}, {"end": {"col": 60, "line": 58, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 59, "line": 58, "offset": 0}}, {"end": {"col": 93, "line": 58, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 92, "line": 58, "offset": 0}}, {"end": {"col": 60, "line": 59, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 59, "line": 59, "offset": 0}}, {"end": {"col": 93, "line": 59, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 92, "line": 59, "offset": 0}}, {"end": {"col": 60, "line": 60, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 59, "line": 60, "offset": 0}}, {"end": {"col": 93, "line": 60, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 92, "line": 60, "offset": 0}}, {"end": {"col": 60, "line": 61, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 59, "line": 61, "offset": 0}}, {"end": {"col": 93, "line": 61, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 92, "line": 61, "offset": 0}}, {"end": {"col": 60, "line": 62, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 59, "line": 62, "offset": 0}}, {"end": {"col": 93, "line": 62, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 92, "line": 62, "offset": 0}}, {"end": {"col": 53, "line": 64, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 52, "line": 64, "offset": 0}}, {"end": {"col": 77, "line": 64, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 76, "line": 64, "offset": 0}}, {"end": {"col": 53, "line": 65, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 52, "line": 65, "offset": 0}}, {"end": {"col": 77, "line": 65, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 76, "line": 65, "offset": 0}}, {"end": {"col": 53, "line": 66, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 52, "line": 66, "offset": 0}}, {"end": {"col": 77, "line": 66, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 76, "line": 66, "offset": 0}}, {"end": {"col": 53, "line": 67, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 52, "line": 67, "offset": 0}}, {"end": {"col": 77, "line": 67, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 76, "line": 67, "offset": 0}}, {"end": {"col": 53, "line": 68, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 52, "line": 68, "offset": 0}}, {"end": {"col": 77, "line": 68, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 76, "line": 68, "offset": 0}}, {"end": {"col": 53, "line": 69, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 52, "line": 69, "offset": 0}}, {"end": {"col": 77, "line": 69, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 76, "line": 69, "offset": 0}}, {"end": {"col": 53, "line": 71, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 52, "line": 71, "offset": 0}}, {"end": {"col": 77, "line": 71, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 76, "line": 71, "offset": 0}}, {"end": {"col": 53, "line": 72, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 52, "line": 72, "offset": 0}}, {"end": {"col": 77, "line": 72, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 76, "line": 72, "offset": 0}}, {"end": {"col": 53, "line": 73, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 52, "line": 73, "offset": 0}}, {"end": {"col": 77, "line": 73, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 76, "line": 73, "offset": 0}}, {"end": {"col": 53, "line": 74, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 52, "line": 74, "offset": 0}}, {"end": {"col": 77, "line": 74, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 76, "line": 74, "offset": 0}}, {"end": {"col": 53, "line": 75, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 52, "line": 75, "offset": 0}}, {"end": {"col": 77, "line": 75, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 76, "line": 75, "offset": 0}}, {"end": {"col": 53, "line": 76, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 52, "line": 76, "offset": 0}}, {"end": {"col": 77, "line": 76, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 76, "line": 76, "offset": 0}}, {"end": {"col": 54, "line": 78, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 53, "line": 78, "offset": 0}}, {"end": {"col": 78, "line": 78, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 77, "line": 78, "offset": 0}}, {"end": {"col": 54, "line": 79, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 53, "line": 79, "offset": 0}}, {"end": {"col": 78, "line": 79, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 77, "line": 79, "offset": 0}}, {"end": {"col": 56, "line": 81, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 55, "line": 81, "offset": 0}}, {"end": {"col": 80, "line": 81, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 79, "line": 81, "offset": 0}}, {"end": {"col": 56, "line": 82, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 55, "line": 82, "offset": 0}}, {"end": {"col": 80, "line": 82, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 79, "line": 82, "offset": 0}}, {"end": {"col": 56, "line": 83, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 55, "line": 83, "offset": 0}}, {"end": {"col": 80, "line": 83, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 79, "line": 83, "offset": 0}}, {"end": {"col": 56, "line": 84, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 55, "line": 84, "offset": 0}}, {"end": {"col": 80, "line": 84, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 79, "line": 84, "offset": 0}}, {"end": {"col": 56, "line": 85, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 55, "line": 85, "offset": 0}}, {"end": {"col": 80, "line": 85, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 79, "line": 85, "offset": 0}}, {"end": {"col": 60, "line": 88, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 59, "line": 88, "offset": 0}}, {"end": {"col": 85, "line": 88, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 84, "line": 88, "offset": 0}}, {"end": {"col": 60, "line": 89, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 59, "line": 89, "offset": 0}}, {"end": {"col": 85, "line": 89, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 84, "line": 89, "offset": 0}}, {"end": {"col": 60, "line": 90, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 59, "line": 90, "offset": 0}}, {"end": {"col": 85, "line": 90, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 84, "line": 90, "offset": 0}}, {"end": {"col": 60, "line": 91, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 59, "line": 91, "offset": 0}}, {"end": {"col": 85, "line": 91, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 84, "line": 91, "offset": 0}}, {"end": {"col": 60, "line": 92, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 59, "line": 92, "offset": 0}}, {"end": {"col": 85, "line": 92, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 84, "line": 92, "offset": 0}}, {"end": {"col": 60, "line": 95, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 59, "line": 95, "offset": 0}}, {"end": {"col": 85, "line": 95, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 84, "line": 95, "offset": 0}}, {"end": {"col": 60, "line": 96, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 59, "line": 96, "offset": 0}}, {"end": {"col": 85, "line": 96, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 84, "line": 96, "offset": 0}}, {"end": {"col": 60, "line": 97, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 59, "line": 97, "offset": 0}}, {"end": {"col": 85, "line": 97, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 84, "line": 97, "offset": 0}}, {"end": {"col": 60, "line": 98, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 59, "line": 98, "offset": 0}}, {"end": {"col": 85, "line": 98, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 84, "line": 98, "offset": 0}}, {"end": {"col": 60, "line": 99, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 59, "line": 99, "offset": 0}}, {"end": {"col": 85, "line": 99, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 84, "line": 99, "offset": 0}}, {"end": {"col": 60, "line": 100, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 59, "line": 100, "offset": 0}}, {"end": {"col": 85, "line": 100, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 84, "line": 100, "offset": 0}}, {"end": {"col": 62, "line": 102, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 61, "line": 102, "offset": 0}}, {"end": {"col": 87, "line": 102, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 86, "line": 102, "offset": 0}}, {"end": {"col": 62, "line": 103, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 61, "line": 103, "offset": 0}}, {"end": {"col": 87, "line": 103, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 86, "line": 103, "offset": 0}}, {"end": {"col": 66, "line": 105, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 65, "line": 105, "offset": 0}}, {"end": {"col": 91, "line": 105, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 90, "line": 105, "offset": 0}}, {"end": {"col": 66, "line": 106, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 65, "line": 106, "offset": 0}}, {"end": {"col": 91, "line": 106, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 90, "line": 106, "offset": 0}}, {"end": {"col": 66, "line": 107, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 65, "line": 107, "offset": 0}}, {"end": {"col": 91, "line": 107, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 90, "line": 107, "offset": 0}}, {"end": {"col": 66, "line": 108, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 65, "line": 108, "offset": 0}}, {"end": {"col": 91, "line": 108, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 90, "line": 108, "offset": 0}}, {"end": {"col": 66, "line": 109, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 65, "line": 109, "offset": 0}}, {"end": {"col": 91, "line": 109, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 90, "line": 109, "offset": 0}}, {"end": {"col": 66, "line": 110, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 65, "line": 110, "offset": 0}}, {"end": {"col": 91, "line": 110, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 90, "line": 110, "offset": 0}}, {"end": {"col": 66, "line": 111, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 65, "line": 111, "offset": 0}}, {"end": {"col": 91, "line": 111, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 90, "line": 111, "offset": 0}}, {"end": {"col": 66, "line": 112, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 65, "line": 112, "offset": 0}}, {"end": {"col": 91, "line": 112, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 90, "line": 112, "offset": 0}}, {"end": {"col": 66, "line": 113, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 65, "line": 113, "offset": 0}}, {"end": {"col": 91, "line": 113, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 90, "line": 113, "offset": 0}}, {"end": {"col": 59, "line": 116, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 58, "line": 116, "offset": 0}}, {"end": {"col": 101, "line": 116, "offset": 2}, "path": "llama/ggml-quants.h", "start": {"col": 99, "line": 116, "offset": 0}}, {"end": {"col": 143, "line": 116, "offset": 2}, "path": "llama/ggml-quants.h", "start": {"col": 141, "line": 116, "offset": 0}}, {"end": {"col": 59, "line": 117, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 58, "line": 117, "offset": 0}}, {"end": {"col": 101, "line": 117, "offset": 2}, "path": "llama/ggml-quants.h", "start": {"col": 99, "line": 117, "offset": 0}}, {"end": {"col": 143, "line": 117, "offset": 2}, "path": "llama/ggml-quants.h", "start": {"col": 141, "line": 117, "offset": 0}}, {"end": {"col": 59, "line": 118, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 58, "line": 118, "offset": 0}}, {"end": {"col": 101, "line": 118, "offset": 2}, "path": "llama/ggml-quants.h", "start": {"col": 99, "line": 118, "offset": 0}}, {"end": {"col": 143, "line": 118, "offset": 2}, "path": "llama/ggml-quants.h", "start": {"col": 141, "line": 118, "offset": 0}}, {"end": {"col": 59, "line": 119, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 58, "line": 119, "offset": 0}}, {"end": {"col": 101, "line": 119, "offset": 2}, "path": "llama/ggml-quants.h", "start": {"col": 99, "line": 119, "offset": 0}}, {"end": {"col": 143, "line": 119, "offset": 2}, "path": "llama/ggml-quants.h", "start": {"col": 141, "line": 119, "offset": 0}}, {"end": {"col": 59, "line": 120, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 58, "line": 120, "offset": 0}}, {"end": {"col": 101, "line": 120, "offset": 2}, "path": "llama/ggml-quants.h", "start": {"col": 99, "line": 120, "offset": 0}}, {"end": {"col": 143, "line": 120, "offset": 2}, "path": "llama/ggml-quants.h", "start": {"col": 141, "line": 120, "offset": 0}}, {"end": {"col": 59, "line": 122, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 58, "line": 122, "offset": 0}}, {"end": {"col": 101, "line": 122, "offset": 2}, "path": "llama/ggml-quants.h", "start": {"col": 99, "line": 122, "offset": 0}}, {"end": {"col": 143, "line": 122, "offset": 2}, "path": "llama/ggml-quants.h", "start": {"col": 141, "line": 122, "offset": 0}}, {"end": {"col": 59, "line": 123, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 58, "line": 123, "offset": 0}}, {"end": {"col": 101, "line": 123, "offset": 2}, "path": "llama/ggml-quants.h", "start": {"col": 99, "line": 123, "offset": 0}}, {"end": {"col": 143, "line": 123, "offset": 2}, "path": "llama/ggml-quants.h", "start": {"col": 141, "line": 123, "offset": 0}}, {"end": {"col": 59, "line": 124, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 58, "line": 124, "offset": 0}}, {"end": {"col": 101, "line": 124, "offset": 2}, "path": "llama/ggml-quants.h", "start": {"col": 99, "line": 124, "offset": 0}}, {"end": {"col": 143, "line": 124, "offset": 2}, "path": "llama/ggml-quants.h", "start": {"col": 141, "line": 124, "offset": 0}}, {"end": {"col": 59, "line": 125, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 58, "line": 125, "offset": 0}}, {"end": {"col": 101, "line": 125, "offset": 2}, "path": "llama/ggml-quants.h", "start": {"col": 99, "line": 125, "offset": 0}}, {"end": {"col": 143, "line": 125, "offset": 2}, "path": "llama/ggml-quants.h", "start": {"col": 141, "line": 125, "offset": 0}}, {"end": {"col": 59, "line": 126, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 58, "line": 126, "offset": 0}}, {"end": {"col": 101, "line": 126, "offset": 2}, "path": "llama/ggml-quants.h", "start": {"col": 99, "line": 126, "offset": 0}}, {"end": {"col": 143, "line": 126, "offset": 2}, "path": "llama/ggml-quants.h", "start": {"col": 141, "line": 126, "offset": 0}}, {"end": {"col": 60, "line": 128, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 59, "line": 128, "offset": 0}}, {"end": {"col": 102, "line": 128, "offset": 2}, "path": "llama/ggml-quants.h", "start": {"col": 100, "line": 128, "offset": 0}}, {"end": {"col": 144, "line": 128, "offset": 2}, "path": "llama/ggml-quants.h", "start": {"col": 142, "line": 128, "offset": 0}}, {"end": {"col": 60, "line": 129, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 59, "line": 129, "offset": 0}}, {"end": {"col": 102, "line": 129, "offset": 2}, "path": "llama/ggml-quants.h", "start": {"col": 100, "line": 129, "offset": 0}}, {"end": {"col": 144, "line": 129, "offset": 2}, "path": "llama/ggml-quants.h", "start": {"col": 142, "line": 129, "offset": 0}}, {"end": {"col": 62, "line": 131, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 61, "line": 131, "offset": 0}}, {"end": {"col": 104, "line": 131, "offset": 2}, "path": "llama/ggml-quants.h", "start": {"col": 102, "line": 131, "offset": 0}}, {"end": {"col": 146, "line": 131, "offset": 2}, "path": "llama/ggml-quants.h", "start": {"col": 144, "line": 131, "offset": 0}}, {"end": {"col": 62, "line": 132, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 61, "line": 132, "offset": 0}}, {"end": {"col": 104, "line": 132, "offset": 2}, "path": "llama/ggml-quants.h", "start": {"col": 102, "line": 132, "offset": 0}}, {"end": {"col": 146, "line": 132, "offset": 2}, "path": "llama/ggml-quants.h", "start": {"col": 144, "line": 132, "offset": 0}}, {"end": {"col": 62, "line": 133, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 61, "line": 133, "offset": 0}}, {"end": {"col": 104, "line": 133, "offset": 2}, "path": "llama/ggml-quants.h", "start": {"col": 102, "line": 133, "offset": 0}}, {"end": {"col": 146, "line": 133, "offset": 2}, "path": "llama/ggml-quants.h", "start": {"col": 144, "line": 133, "offset": 0}}, {"end": {"col": 62, "line": 134, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 61, "line": 134, "offset": 0}}, {"end": {"col": 104, "line": 134, "offset": 2}, "path": "llama/ggml-quants.h", "start": {"col": 102, "line": 134, "offset": 0}}, {"end": {"col": 146, "line": 134, "offset": 2}, "path": "llama/ggml-quants.h", "start": {"col": 144, "line": 134, "offset": 0}}, {"end": {"col": 62, "line": 135, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 61, "line": 135, "offset": 0}}, {"end": {"col": 104, "line": 135, "offset": 2}, "path": "llama/ggml-quants.h", "start": {"col": 102, "line": 135, "offset": 0}}, {"end": {"col": 146, "line": 135, "offset": 2}, "path": "llama/ggml-quants.h", "start": {"col": 144, "line": 135, "offset": 0}}, {"end": {"col": 62, "line": 136, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 61, "line": 136, "offset": 0}}, {"end": {"col": 104, "line": 136, "offset": 2}, "path": "llama/ggml-quants.h", "start": {"col": 102, "line": 136, "offset": 0}}, {"end": {"col": 146, "line": 136, "offset": 2}, "path": "llama/ggml-quants.h", "start": {"col": 144, "line": 136, "offset": 0}}, {"end": {"col": 62, "line": 137, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 61, "line": 137, "offset": 0}}, {"end": {"col": 104, "line": 137, "offset": 2}, "path": "llama/ggml-quants.h", "start": {"col": 102, "line": 137, "offset": 0}}, {"end": {"col": 146, "line": 137, "offset": 2}, "path": "llama/ggml-quants.h", "start": {"col": 144, "line": 137, "offset": 0}}, {"end": {"col": 62, "line": 138, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 61, "line": 138, "offset": 0}}, {"end": {"col": 104, "line": 138, "offset": 2}, "path": "llama/ggml-quants.h", "start": {"col": 102, "line": 138, "offset": 0}}, {"end": {"col": 146, "line": 138, "offset": 2}, "path": "llama/ggml-quants.h", "start": {"col": 144, "line": 138, "offset": 0}}, {"end": {"col": 62, "line": 139, "offset": 1}, "path": "llama/ggml-quants.h", "start": {"col": 61, "line": 139, "offset": 0}}, {"end": {"col": 104, "line": 139, "offset": 2}, "path": "llama/ggml-quants.h", "start": {"col": 102, "line": 139, "offset": 0}}, {"end": {"col": 146, "line": 139, "offset": 2}, "path": "llama/ggml-quants.h", "start": {"col": 144, "line": 139, "offset": 0}}, {"end": {"col": 56, "line": 142, "offset": 3}, "path": "llama/ggml-quants.h", "start": {"col": 53, "line": 142, "offset": 0}}, {"end": {"col": 82, "line": 142, "offset": 3}, "path": "llama/ggml-quants.h", "start": {"col": 79, "line": 142, "offset": 0}}, {"end": {"col": 56, "line": 143, "offset": 3}, "path": "llama/ggml-quants.h", "start": {"col": 53, "line": 143, "offset": 0}}, {"end": {"col": 82, "line": 143, "offset": 3}, "path": "llama/ggml-quants.h", "start": {"col": 79, "line": 143, "offset": 0}}, {"end": {"col": 56, "line": 144, "offset": 3}, "path": "llama/ggml-quants.h", "start": {"col": 53, "line": 144, "offset": 0}}, {"end": {"col": 82, "line": 144, "offset": 3}, "path": "llama/ggml-quants.h", "start": {"col": 79, "line": 144, "offset": 0}}, {"end": {"col": 56, "line": 145, "offset": 3}, "path": "llama/ggml-quants.h", "start": {"col": 53, "line": 145, "offset": 0}}, {"end": {"col": 82, "line": 145, "offset": 3}, "path": "llama/ggml-quants.h", "start": {"col": 79, "line": 145, "offset": 0}}, {"end": {"col": 56, "line": 146, "offset": 3}, "path": "llama/ggml-quants.h", "start": {"col": 53, "line": 146, "offset": 0}}, {"end": {"col": 82, "line": 146, "offset": 3}, "path": "llama/ggml-quants.h", "start": {"col": 79, "line": 146, "offset": 0}}, {"end": {"col": 56, "line": 147, "offset": 3}, "path": "llama/ggml-quants.h", "start": {"col": 53, "line": 147, "offset": 0}}, {"end": {"col": 82, "line": 147, "offset": 3}, "path": "llama/ggml-quants.h", "start": {"col": 79, "line": 147, "offset": 0}}, {"end": {"col": 56, "line": 148, "offset": 3}, "path": "llama/ggml-quants.h", "start": {"col": 53, "line": 148, "offset": 0}}, {"end": {"col": 82, "line": 148, "offset": 3}, "path": "llama/ggml-quants.h", "start": {"col": 79, "line": 148, "offset": 0}}, {"end": {"col": 56, "line": 149, "offset": 3}, "path": "llama/ggml-quants.h", "start": {"col": 53, "line": 149, "offset": 0}}, {"end": {"col": 82, "line": 149, "offset": 3}, "path": "llama/ggml-quants.h", "start": {"col": 79, "line": 149, "offset": 0}}, {"end": {"col": 56, "line": 150, "offset": 3}, "path": "llama/ggml-quants.h", "start": {"col": 53, "line": 150, "offset": 0}}, {"end": {"col": 82, "line": 150, "offset": 3}, "path": "llama/ggml-quants.h", "start": {"col": 79, "line": 150, "offset": 0}}, {"end": {"col": 54, "line": 152, "offset": 3}, "path": "llama/ggml-quants.h", "start": {"col": 51, "line": 152, "offset": 0}}, {"end": {"col": 80, "line": 152, "offset": 3}, "path": "llama/ggml-quants.h", "start": {"col": 77, "line": 152, "offset": 0}}, {"end": {"col": 54, "line": 153, "offset": 3}, "path": "llama/ggml-quants.h", "start": {"col": 51, "line": 153, "offset": 0}}, {"end": {"col": 80, "line": 153, "offset": 3}, "path": "llama/ggml-quants.h", "start": {"col": 77, "line": 153, "offset": 0}}, {"end": {"col": 53, "line": 155, "offset": 3}, "path": "llama/ggml-quants.h", "start": {"col": 50, "line": 155, "offset": 0}}, {"end": {"col": 79, "line": 155, "offset": 3}, "path": "llama/ggml-quants.h", "start": {"col": 76, "line": 155, "offset": 0}}, {"end": {"col": 53, "line": 156, "offset": 3}, "path": "llama/ggml-quants.h", "start": {"col": 50, "line": 156, "offset": 0}}, {"end": {"col": 79, "line": 156, "offset": 3}, "path": "llama/ggml-quants.h", "start": {"col": 76, "line": 156, "offset": 0}}, {"end": {"col": 53, "line": 157, "offset": 3}, "path": "llama/ggml-quants.h", "start": {"col": 50, "line": 157, "offset": 0}}, {"end": {"col": 79, "line": 157, "offset": 3}, "path": "llama/ggml-quants.h", "start": {"col": 76, "line": 157, "offset": 0}}, {"end": {"col": 53, "line": 158, "offset": 3}, "path": "llama/ggml-quants.h", "start": {"col": 50, "line": 158, "offset": 0}}, {"end": {"col": 79, "line": 158, "offset": 3}, "path": "llama/ggml-quants.h", "start": {"col": 76, "line": 158, "offset": 0}}, {"end": {"col": 53, "line": 159, "offset": 3}, "path": "llama/ggml-quants.h", "start": {"col": 50, "line": 159, "offset": 0}}, {"end": {"col": 79, "line": 159, "offset": 3}, "path": "llama/ggml-quants.h", "start": {"col": 76, "line": 159, "offset": 0}}, {"end": {"col": 53, "line": 160, "offset": 3}, "path": "llama/ggml-quants.h", "start": {"col": 50, "line": 160, "offset": 0}}, {"end": {"col": 79, "line": 160, "offset": 3}, "path": "llama/ggml-quants.h", "start": {"col": 76, "line": 160, "offset": 0}}, {"end": {"col": 53, "line": 161, "offset": 3}, "path": "llama/ggml-quants.h", "start": {"col": 50, "line": 161, "offset": 0}}, {"end": {"col": 79, "line": 161, "offset": 3}, "path": "llama/ggml-quants.h", "start": {"col": 76, "line": 161, "offset": 0}}, {"end": {"col": 53, "line": 162, "offset": 3}, "path": "llama/ggml-quants.h", "start": {"col": 50, "line": 162, "offset": 0}}, {"end": {"col": 79, "line": 162, "offset": 3}, "path": "llama/ggml-quants.h", "start": {"col": 76, "line": 162, "offset": 0}}, {"end": {"col": 53, "line": 163, "offset": 3}, "path": "llama/ggml-quants.h", "start": {"col": 50, "line": 163, "offset": 0}}, {"end": {"col": 79, "line": 163, "offset": 3}, "path": "llama/ggml-quants.h", "start": {"col": 76, "line": 163, "offset": 0}}, {"end": {"col": 53, "line": 164, "offset": 3}, "path": "llama/ggml-quants.h", "start": {"col": 50, "line": 164, "offset": 0}}, {"end": {"col": 79, "line": 164, "offset": 3}, "path": "llama/ggml-quants.h", "start": {"col": 76, "line": 164, "offset": 0}}]]}, {"code": 3, "level": "warn", "message": "Syntax error at line llama/ggml-blas.cpp:87:\n `enum ggml_type` was unexpected", "path": "llama/ggml-blas.cpp", "spans": [{"end": {"col": 25, "line": 87, "offset": 14}, "file": "llama/ggml-blas.cpp", "start": {"col": 11, "line": 87, "offset": 0}}, {"end": {"col": 28, "line": 266, "offset": 4}, "file": "llama/ggml-blas.cpp", "start": {"col": 24, "line": 266, "offset": 0}}, {"end": {"col": 22, "line": 272, "offset": 4}, "file": "llama/ggml-blas.cpp", "start": {"col": 18, "line": 272, "offset": 0}}, {"end": {"col": 34, "line": 284, "offset": 16}, "file": "llama/ggml-blas.cpp", "start": {"col": 18, "line": 284, "offset": 0}}, {"end": {"col": 22, "line": 316, "offset": 4}, "file": "llama/ggml-blas.cpp", "start": {"col": 18, "line": 316, "offset": 0}}, {"end": {"col": 22, "line": 331, "offset": 4}, "file": "llama/ggml-blas.cpp", "start": {"col": 18, "line": 331, "offset": 0}}, {"end": {"col": 15, "line": 387, "offset": 4}, "file": "llama/ggml-blas.cpp", "start": {"col": 11, "line": 387, "offset": 0}}], "type": ["PartialParsing", [{"end": {"col": 25, "line": 87, "offset": 14}, "path": "llama/ggml-blas.cpp", "start": {"col": 11, "line": 87, "offset": 0}}, {"end": {"col": 28, "line": 266, "offset": 4}, "path": "llama/ggml-blas.cpp", "start": {"col": 24, "line": 266, "offset": 0}}, {"end": {"col": 22, "line": 272, "offset": 4}, "path": "llama/ggml-blas.cpp", "start": {"col": 18, "line": 272, "offset": 0}}, {"end": {"col": 34, "line": 284, "offset": 16}, "path": "llama/ggml-blas.cpp", "start": {"col": 18, "line": 284, "offset": 0}}, {"end": {"col": 22, "line": 316, "offset": 4}, "path": "llama/ggml-blas.cpp", "start": {"col": 18, "line": 316, "offset": 0}}, {"end": {"col": 22, "line": 331, "offset": 4}, "path": "llama/ggml-blas.cpp", "start": {"col": 18, "line": 331, "offset": 0}}, {"end": {"col": 15, "line": 387, "offset": 4}, "path": "llama/ggml-blas.cpp", "start": {"col": 11, "line": 387, "offset": 0}}]]}, {"code": 3, "level": "warn", "message": "Syntax error at line llm/gguf.go:493:\n `~` was unexpected", "path": "llm/gguf.go", "spans": [{"end": {"col": 24, "line": 493, "offset": 1}, "file": "llm/gguf.go", "start": {"col": 23, "line": 493, "offset": 0}}], "type": ["PartialParsing", [{"end": {"col": 24, "line": 493, "offset": 1}, "path": "llm/gguf.go", "start": {"col": 23, "line": 493, "offset": 0}}]]}, {"code": 3, "level": "warn", "message": "Syntax error at line .github/workflows/test.yaml:38:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `${{` was unexpected", "path": ".github/workflows/test.yaml", "spans": [{"end": {"col": 67, "line": 38, "offset": 1209}, "file": ".github/workflows/test.yaml", "start": {"col": 64, "line": 38, "offset": 1206}}, {"end": {"col": 8, "line": 39, "offset": 1209}, "file": ".github/workflows/test.yaml", "start": {"col": 5, "line": 39, "offset": 1206}}], "type": ["PartialParsing", [{"end": {"col": 67, "line": 38, "offset": 1209}, "path": ".github/workflows/test.yaml", "start": {"col": 64, "line": 38, "offset": 1206}}, {"end": {"col": 8, "line": 39, "offset": 1209}, "path": ".github/workflows/test.yaml", "start": {"col": 5, "line": 39, "offset": 1206}}]]}, {"code": 3, "level": "warn", "message": "Syntax error at line .github/workflows/test.yaml:129:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `select -first` was unexpected", "path": ".github/workflows/test.yaml", "spans": [{"end": {"col": 116, "line": 129, "offset": 4395}, "file": ".github/workflows/test.yaml", "start": {"col": 103, "line": 129, "offset": 4382}}], "type": ["PartialParsing", [{"end": {"col": 116, "line": 129, "offset": 4395}, "path": ".github/workflows/test.yaml", "start": {"col": 103, "line": 129, "offset": 4382}}]]}, {"code": 3, "level": "warn", "message": "Syntax error at line .github/workflows/test.yaml:137:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `-NoNewWindow -Wait` was unexpected", "path": ".github/workflows/test.yaml", "spans": [{"end": {"col": 184, "line": 137, "offset": 4946}, "file": ".github/workflows/test.yaml", "start": {"col": 166, "line": 137, "offset": 4928}}], "type": ["PartialParsing", [{"end": {"col": 184, "line": 137, "offset": 4946}, "path": ".github/workflows/test.yaml", "start": {"col": 166, "line": 137, "offset": 4928}}]]}, {"code": 3, "level": "warn", "message": "Syntax error at line .github/workflows/test.yaml:141:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `import-module 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\Common7\\Tools\\Microsoft.VisualStudio.DevShell.dll'\nEnter-VsDevShell -vsinstallpath 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise' -skipautomaticlocation -DevCmdArguments '-arch=x64 -no_logo'\nif (!(gcc --version | select-string -quiet clang)) { throw \"wrong gcc compiler detected - must be clang\" }\nmake -C llama print-HIP_PATH print-HIP_LIB_DIR\nmake rocm\n` was unexpected", "path": ".github/workflows/test.yaml", "spans": [{"end": {"col": 11, "line": 145, "offset": 5606}, "file": ".github/workflows/test.yaml", "start": {"col": 15, "line": 141, "offset": 5155}}], "type": ["PartialParsing", [{"end": {"col": 11, "line": 145, "offset": 5606}, "path": ".github/workflows/test.yaml", "start": {"col": 15, "line": 141, "offset": 5155}}]]}, {"code": 3, "level": "warn", "message": "Syntax error at line .github/workflows/test.yaml:176:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `{ env.CUDA_12_WINDOWS_VER` was unexpected", "path": ".github/workflows/test.yaml", "spans": [{"end": {"col": 125, "line": 176, "offset": 6703}, "file": ".github/workflows/test.yaml", "start": {"col": 100, "line": 176, "offset": 6678}}, {"end": {"col": 58, "line": 177, "offset": 6688}, "file": ".github/workflows/test.yaml", "start": {"col": 48, "line": 177, "offset": 6678}}, {"end": {"col": 91, "line": 177, "offset": 6698}, "file": ".github/workflows/test.yaml", "start": {"col": 71, "line": 177, "offset": 6678}}], "type": ["PartialParsing", [{"end": {"col": 125, "line": 176, "offset": 6703}, "path": ".github/workflows/test.yaml", "start": {"col": 100, "line": 176, "offset": 6678}}, {"end": {"col": 58, "line": 177, "offset": 6688}, "path": ".github/workflows/test.yaml", "start": {"col": 48, "line": 177, "offset": 6678}}, {"end": {"col": 91, "line": 177, "offset": 6698}, "path": ".github/workflows/test.yaml", "start": {"col": 71, "line": 177, "offset": 6678}}]]}, {"code": 3, "level": "warn", "message": "Syntax error at line .github/workflows/test.yaml:181:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `$cudaPath=(` was unexpected", "path": ".github/workflows/test.yaml", "spans": [{"end": {"col": 12, "line": 181, "offset": 6959}, "file": ".github/workflows/test.yaml", "start": {"col": 1, "line": 181, "offset": 6948}}, {"end": {"col": 82, "line": 181, "offset": 6953}, "file": ".github/workflows/test.yaml", "start": {"col": 77, "line": 181, "offset": 6948}}, {"end": {"col": 109, "line": 181, "offset": 6949}, "file": ".github/workflows/test.yaml", "start": {"col": 108, "line": 181, "offset": 6948}}, {"end": {"col": 50, "line": 182, "offset": 6988}, "file": ".github/workflows/test.yaml", "start": {"col": 10, "line": 182, "offset": 6948}}], "type": ["PartialParsing", [{"end": {"col": 12, "line": 181, "offset": 6959}, "path": ".github/workflows/test.yaml", "start": {"col": 1, "line": 181, "offset": 6948}}, {"end": {"col": 82, "line": 181, "offset": 6953}, "path": ".github/workflows/test.yaml", "start": {"col": 77, "line": 181, "offset": 6948}}, {"end": {"col": 109, "line": 181, "offset": 6949}, "path": ".github/workflows/test.yaml", "start": {"col": 108, "line": 181, "offset": 6948}}, {"end": {"col": 50, "line": 182, "offset": 6988}, "path": ".github/workflows/test.yaml", "start": {"col": 10, "line": 182, "offset": 6948}}]]}, {"code": 3, "level": "warn", "message": "Syntax error at line .github/workflows/test.yaml:194:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `-NoNewWindow -Wait` was unexpected", "path": ".github/workflows/test.yaml", "spans": [{"end": {"col": 184, "line": 194, "offset": 7960}, "file": ".github/workflows/test.yaml", "start": {"col": 166, "line": 194, "offset": 7942}}], "type": ["PartialParsing", [{"end": {"col": 184, "line": 194, "offset": 7960}, "path": ".github/workflows/test.yaml", "start": {"col": 166, "line": 194, "offset": 7942}}]]}, {"code": 3, "level": "warn", "message": "Syntax error at line .github/workflows/test.yaml:197:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `import-module 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\Common7\\Tools\\Microsoft.VisualStudio.DevShell.dll'\nEnter-VsDevShell -vsinstallpath 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise' -skipautomaticlocation -DevCmdArguments '-arch=x64 -no_logo'\nif (!(gcc --version | select-string -quiet clang)) { throw \"wrong gcc compiler detected - must be clang\" }\nmake cuda_v$(($env:CUDA_PATH | split-path -leaf) -replace 'v(\\d+).*', '$1')\n` was unexpected", "path": ".github/workflows/test.yaml", "spans": [{"end": {"col": 77, "line": 200, "offset": 8638}, "file": ".github/workflows/test.yaml", "start": {"col": 15, "line": 197, "offset": 8168}}], "type": ["PartialParsing", [{"end": {"col": 77, "line": 200, "offset": 8638}, "path": ".github/workflows/test.yaml", "start": {"col": 15, "line": 197, "offset": 8168}}]]}, {"code": 3, "level": "warn", "message": "Syntax error at line .github/workflows/test.yaml:233:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `-NoNewWindow -Wait` was unexpected", "path": ".github/workflows/test.yaml", "spans": [{"end": {"col": 184, "line": 233, "offset": 9695}, "file": ".github/workflows/test.yaml", "start": {"col": 166, "line": 233, "offset": 9677}}], "type": ["PartialParsing", [{"end": {"col": 184, "line": 233, "offset": 9695}, "path": ".github/workflows/test.yaml", "start": {"col": 166, "line": 233, "offset": 9677}}]]}, {"code": 3, "level": "warn", "message": "Syntax error at line .github/workflows/test.yaml:237:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `$gopath=(get-command go).source | split-path -parent\n$gccpath=(get-command gcc).source | split-path -parent\nimport-module 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\Common7\\Tools\\Microsoft.VisualStudio.DevShell.dll'\nEnter-VsDevShell -vsinstallpath 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise' -skipautomaticlocation -DevCmdArguments '-arch=x64 -no_logo'\n$env:CMAKE_SYSTEM_VERSION=\"10.0.22621.0\"\n$env:PATH=\"$gopath;$gccpath;$env:PATH\"\necho $env:PATH\nif (!(gcc --version | select-string -quiet clang)) { throw \"wrong gcc compiler detected - must be clang\" }\nmake -j 4      \n` was unexpected", "path": ".github/workflows/test.yaml", "spans": [{"end": {"col": 17, "line": 245, "offset": 10579}, "file": ".github/workflows/test.yaml", "start": {"col": 15, "line": 237, "offset": 9966}}], "type": ["PartialParsing", [{"end": {"col": 17, "line": 245, "offset": 10579}, "path": ".github/workflows/test.yaml", "start": {"col": 15, "line": 237, "offset": 9966}}]]}, {"code": 3, "level": "warn", "message": "Syntax error at line .github/workflows/test.yaml:276:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `case ${` was unexpected", "path": ".github/workflows/test.yaml", "spans": [{"end": {"col": 22, "line": 276, "offset": 11421}, "file": ".github/workflows/test.yaml", "start": {"col": 15, "line": 276, "offset": 11414}}, {"end": {"col": 9, "line": 277, "offset": 11420}, "file": ".github/workflows/test.yaml", "start": {"col": 3, "line": 277, "offset": 11414}}, {"end": {"col": 9, "line": 278, "offset": 11420}, "file": ".github/workflows/test.yaml", "start": {"col": 3, "line": 278, "offset": 11414}}], "type": ["PartialParsing", [{"end": {"col": 22, "line": 276, "offset": 11421}, "path": ".github/workflows/test.yaml", "start": {"col": 15, "line": 276, "offset": 11414}}, {"end": {"col": 9, "line": 277, "offset": 11420}, "path": ".github/workflows/test.yaml", "start": {"col": 3, "line": 277, "offset": 11414}}, {"end": {"col": 9, "line": 278, "offset": 11420}, "path": ".github/workflows/test.yaml", "start": {"col": 3, "line": 278, "offset": 11414}}]]}, {"code": 3, "level": "warn", "message": "Syntax error at line .github/workflows/test.yaml:307:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `case ${` was unexpected", "path": ".github/workflows/test.yaml", "spans": [{"end": {"col": 22, "line": 307, "offset": 12222}, "file": ".github/workflows/test.yaml", "start": {"col": 15, "line": 307, "offset": 12215}}, {"end": {"col": 9, "line": 308, "offset": 12221}, "file": ".github/workflows/test.yaml", "start": {"col": 3, "line": 308, "offset": 12215}}, {"end": {"col": 9, "line": 309, "offset": 12221}, "file": ".github/workflows/test.yaml", "start": {"col": 3, "line": 309, "offset": 12215}}], "type": ["PartialParsing", [{"end": {"col": 22, "line": 307, "offset": 12222}, "path": ".github/workflows/test.yaml", "start": {"col": 15, "line": 307, "offset": 12215}}, {"end": {"col": 9, "line": 308, "offset": 12221}, "path": ".github/workflows/test.yaml", "start": {"col": 3, "line": 308, "offset": 12215}}, {"end": {"col": 9, "line": 309, "offset": 12221}, "path": ".github/workflows/test.yaml", "start": {"col": 3, "line": 309, "offset": 12215}}]]}, {"code": 3, "level": "warn", "message": "Syntax error at line llama/ggml-backend-impl.h:45:\n `get_name` was unexpected", "path": "llama/ggml-backend-impl.h", "spans": [{"end": {"col": 51, "line": 45, "offset": 8}, "file": "llama/ggml-backend-impl.h", "start": {"col": 43, "line": 45, "offset": 0}}, {"end": {"col": 42, "line": 47, "offset": 9}, "file": "llama/ggml-backend-impl.h", "start": {"col": 33, "line": 47, "offset": 0}}, {"end": {"col": 42, "line": 49, "offset": 9}, "file": "llama/ggml-backend-impl.h", "start": {"col": 33, "line": 49, "offset": 0}}, {"end": {"col": 42, "line": 51, "offset": 9}, "file": "llama/ggml-backend-impl.h", "start": {"col": 33, "line": 51, "offset": 0}}, {"end": {"col": 42, "line": 53, "offset": 9}, "file": "llama/ggml-backend-impl.h", "start": {"col": 33, "line": 53, "offset": 0}}, {"end": {"col": 50, "line": 55, "offset": 7}, "file": "llama/ggml-backend-impl.h", "start": {"col": 43, "line": 55, "offset": 0}}, {"end": {"col": 42, "line": 67, "offset": 8}, "file": "llama/ggml-backend-impl.h", "start": {"col": 34, "line": 67, "offset": 0}}, {"end": {"col": 33, "line": 68, "offset": 9}, "file": "llama/ggml-backend-impl.h", "start": {"col": 24, "line": 68, "offset": 0}}, {"end": {"col": 42, "line": 69, "offset": 8}, "file": "llama/ggml-backend-impl.h", "start": {"col": 34, "line": 69, "offset": 0}}, {"end": {"col": 33, "line": 70, "offset": 9}, "file": "llama/ggml-backend-impl.h", "start": {"col": 24, "line": 70, "offset": 0}}, {"end": {"col": 33, "line": 71, "offset": 9}, "file": "llama/ggml-backend-impl.h", "start": {"col": 24, "line": 71, "offset": 0}}, {"end": {"col": 33, "line": 72, "offset": 9}, "file": "llama/ggml-backend-impl.h", "start": {"col": 24, "line": 72, "offset": 0}}, {"end": {"col": 33, "line": 73, "offset": 9}, "file": "llama/ggml-backend-impl.h", "start": {"col": 24, "line": 73, "offset": 0}}, {"end": {"col": 33, "line": 74, "offset": 9}, "file": "llama/ggml-backend-impl.h", "start": {"col": 24, "line": 74, "offset": 0}}, {"end": {"col": 39, "line": 75, "offset": 5}, "file": "llama/ggml-backend-impl.h", "start": {"col": 34, "line": 75, "offset": 0}}, {"end": {"col": 39, "line": 76, "offset": 5}, "file": "llama/ggml-backend-impl.h", "start": {"col": 34, "line": 76, "offset": 0}}, {"end": {"col": 19, "line": 98, "offset": 4}, "file": "llama/ggml-backend-impl.h", "start": {"col": 15, "line": 98, "offset": 0}}, {"end": {"col": 19, "line": 99, "offset": 4}, "file": "llama/ggml-backend-impl.h", "start": {"col": 15, "line": 99, "offset": 0}}, {"end": {"col": 33, "line": 108, "offset": 9}, "file": "llama/ggml-backend-impl.h", "start": {"col": 24, "line": 108, "offset": 0}}, {"end": {"col": 25, "line": 110, "offset": 9}, "file": "llama/ggml-backend-impl.h", "start": {"col": 16, "line": 110, "offset": 0}}, {"end": {"col": 47, "line": 113, "offset": 9}, "file": "llama/ggml-backend-impl.h", "start": {"col": 38, "line": 113, "offset": 0}}, {"end": {"col": 25, "line": 116, "offset": 9}, "file": "llama/ggml-backend-impl.h", "start": {"col": 16, "line": 116, "offset": 0}}, {"end": {"col": 25, "line": 117, "offset": 9}, "file": "llama/ggml-backend-impl.h", "start": {"col": 16, "line": 117, "offset": 0}}, {"end": {"col": 25, "line": 118, "offset": 9}, "file": "llama/ggml-backend-impl.h", "start": {"col": 16, "line": 118, "offset": 0}}, {"end": {"col": 25, "line": 121, "offset": 9}, "file": "llama/ggml-backend-impl.h", "start": {"col": 16, "line": 121, "offset": 0}}, {"end": {"col": 46, "line": 125, "offset": 9}, "file": "llama/ggml-backend-impl.h", "start": {"col": 37, "line": 125, "offset": 0}}, {"end": {"col": 46, "line": 126, "offset": 9}, "file": "llama/ggml-backend-impl.h", "start": {"col": 37, "line": 126, "offset": 0}}, {"end": {"col": 46, "line": 128, "offset": 9}, "file": "llama/ggml-backend-impl.h", "start": {"col": 37, "line": 128, "offset": 0}}, {"end": {"col": 46, "line": 130, "offset": 9}, "file": "llama/ggml-backend-impl.h", "start": {"col": 37, "line": 130, "offset": 0}}, {"end": {"col": 37, "line": 133, "offset": 9}, "file": "llama/ggml-backend-impl.h", "start": {"col": 28, "line": 133, "offset": 0}}, {"end": {"col": 25, "line": 136, "offset": 9}, "file": "llama/ggml-backend-impl.h", "start": {"col": 16, "line": 136, "offset": 0}}, {"end": {"col": 25, "line": 139, "offset": 9}, "file": "llama/ggml-backend-impl.h", "start": {"col": 16, "line": 139, "offset": 0}}, {"end": {"col": 25, "line": 144, "offset": 9}, "file": "llama/ggml-backend-impl.h", "start": {"col": 16, "line": 144, "offset": 0}}, {"end": {"col": 51, "line": 148, "offset": 9}, "file": "llama/ggml-backend-impl.h", "start": {"col": 42, "line": 148, "offset": 0}}, {"end": {"col": 41, "line": 149, "offset": 9}, "file": "llama/ggml-backend-impl.h", "start": {"col": 32, "line": 149, "offset": 0}}, {"end": {"col": 41, "line": 151, "offset": 9}, "file": "llama/ggml-backend-impl.h", "start": {"col": 32, "line": 151, "offset": 0}}, {"end": {"col": 41, "line": 153, "offset": 9}, "file": "llama/ggml-backend-impl.h", "start": {"col": 32, "line": 153, "offset": 0}}, {"end": {"col": 41, "line": 155, "offset": 9}, "file": "llama/ggml-backend-impl.h", "start": {"col": 32, "line": 155, "offset": 0}}, {"end": {"col": 39, "line": 174, "offset": 9}, "file": "llama/ggml-backend-impl.h", "start": {"col": 30, "line": 174, "offset": 0}}, {"end": {"col": 19, "line": 176, "offset": 4}, "file": "llama/ggml-backend-impl.h", "start": {"col": 15, "line": 176, "offset": 0}}], "type": ["PartialParsing", [{"end": {"col": 51, "line": 45, "offset": 8}, "path": "llama/ggml-backend-impl.h", "start": {"col": 43, "line": 45, "offset": 0}}, {"end": {"col": 42, "line": 47, "offset": 9}, "path": "llama/ggml-backend-impl.h", "start": {"col": 33, "line": 47, "offset": 0}}, {"end": {"col": 42, "line": 49, "offset": 9}, "path": "llama/ggml-backend-impl.h", "start": {"col": 33, "line": 49, "offset": 0}}, {"end": {"col": 42, "line": 51, "offset": 9}, "path": "llama/ggml-backend-impl.h", "start": {"col": 33, "line": 51, "offset": 0}}, {"end": {"col": 42, "line": 53, "offset": 9}, "path": "llama/ggml-backend-impl.h", "start": {"col": 33, "line": 53, "offset": 0}}, {"end": {"col": 50, "line": 55, "offset": 7}, "path": "llama/ggml-backend-impl.h", "start": {"col": 43, "line": 55, "offset": 0}}, {"end": {"col": 42, "line": 67, "offset": 8}, "path": "llama/ggml-backend-impl.h", "start": {"col": 34, "line": 67, "offset": 0}}, {"end": {"col": 33, "line": 68, "offset": 9}, "path": "llama/ggml-backend-impl.h", "start": {"col": 24, "line": 68, "offset": 0}}, {"end": {"col": 42, "line": 69, "offset": 8}, "path": "llama/ggml-backend-impl.h", "start": {"col": 34, "line": 69, "offset": 0}}, {"end": {"col": 33, "line": 70, "offset": 9}, "path": "llama/ggml-backend-impl.h", "start": {"col": 24, "line": 70, "offset": 0}}, {"end": {"col": 33, "line": 71, "offset": 9}, "path": "llama/ggml-backend-impl.h", "start": {"col": 24, "line": 71, "offset": 0}}, {"end": {"col": 33, "line": 72, "offset": 9}, "path": "llama/ggml-backend-impl.h", "start": {"col": 24, "line": 72, "offset": 0}}, {"end": {"col": 33, "line": 73, "offset": 9}, "path": "llama/ggml-backend-impl.h", "start": {"col": 24, "line": 73, "offset": 0}}, {"end": {"col": 33, "line": 74, "offset": 9}, "path": "llama/ggml-backend-impl.h", "start": {"col": 24, "line": 74, "offset": 0}}, {"end": {"col": 39, "line": 75, "offset": 5}, "path": "llama/ggml-backend-impl.h", "start": {"col": 34, "line": 75, "offset": 0}}, {"end": {"col": 39, "line": 76, "offset": 5}, "path": "llama/ggml-backend-impl.h", "start": {"col": 34, "line": 76, "offset": 0}}, {"end": {"col": 19, "line": 98, "offset": 4}, "path": "llama/ggml-backend-impl.h", "start": {"col": 15, "line": 98, "offset": 0}}, {"end": {"col": 19, "line": 99, "offset": 4}, "path": "llama/ggml-backend-impl.h", "start": {"col": 15, "line": 99, "offset": 0}}, {"end": {"col": 33, "line": 108, "offset": 9}, "path": "llama/ggml-backend-impl.h", "start": {"col": 24, "line": 108, "offset": 0}}, {"end": {"col": 25, "line": 110, "offset": 9}, "path": "llama/ggml-backend-impl.h", "start": {"col": 16, "line": 110, "offset": 0}}, {"end": {"col": 47, "line": 113, "offset": 9}, "path": "llama/ggml-backend-impl.h", "start": {"col": 38, "line": 113, "offset": 0}}, {"end": {"col": 25, "line": 116, "offset": 9}, "path": "llama/ggml-backend-impl.h", "start": {"col": 16, "line": 116, "offset": 0}}, {"end": {"col": 25, "line": 117, "offset": 9}, "path": "llama/ggml-backend-impl.h", "start": {"col": 16, "line": 117, "offset": 0}}, {"end": {"col": 25, "line": 118, "offset": 9}, "path": "llama/ggml-backend-impl.h", "start": {"col": 16, "line": 118, "offset": 0}}, {"end": {"col": 25, "line": 121, "offset": 9}, "path": "llama/ggml-backend-impl.h", "start": {"col": 16, "line": 121, "offset": 0}}, {"end": {"col": 46, "line": 125, "offset": 9}, "path": "llama/ggml-backend-impl.h", "start": {"col": 37, "line": 125, "offset": 0}}, {"end": {"col": 46, "line": 126, "offset": 9}, "path": "llama/ggml-backend-impl.h", "start": {"col": 37, "line": 126, "offset": 0}}, {"end": {"col": 46, "line": 128, "offset": 9}, "path": "llama/ggml-backend-impl.h", "start": {"col": 37, "line": 128, "offset": 0}}, {"end": {"col": 46, "line": 130, "offset": 9}, "path": "llama/ggml-backend-impl.h", "start": {"col": 37, "line": 130, "offset": 0}}, {"end": {"col": 37, "line": 133, "offset": 9}, "path": "llama/ggml-backend-impl.h", "start": {"col": 28, "line": 133, "offset": 0}}, {"end": {"col": 25, "line": 136, "offset": 9}, "path": "llama/ggml-backend-impl.h", "start": {"col": 16, "line": 136, "offset": 0}}, {"end": {"col": 25, "line": 139, "offset": 9}, "path": "llama/ggml-backend-impl.h", "start": {"col": 16, "line": 139, "offset": 0}}, {"end": {"col": 25, "line": 144, "offset": 9}, "path": "llama/ggml-backend-impl.h", "start": {"col": 16, "line": 144, "offset": 0}}, {"end": {"col": 51, "line": 148, "offset": 9}, "path": "llama/ggml-backend-impl.h", "start": {"col": 42, "line": 148, "offset": 0}}, {"end": {"col": 41, "line": 149, "offset": 9}, "path": "llama/ggml-backend-impl.h", "start": {"col": 32, "line": 149, "offset": 0}}, {"end": {"col": 41, "line": 151, "offset": 9}, "path": "llama/ggml-backend-impl.h", "start": {"col": 32, "line": 151, "offset": 0}}, {"end": {"col": 41, "line": 153, "offset": 9}, "path": "llama/ggml-backend-impl.h", "start": {"col": 32, "line": 153, "offset": 0}}, {"end": {"col": 41, "line": 155, "offset": 9}, "path": "llama/ggml-backend-impl.h", "start": {"col": 32, "line": 155, "offset": 0}}, {"end": {"col": 39, "line": 174, "offset": 9}, "path": "llama/ggml-backend-impl.h", "start": {"col": 30, "line": 174, "offset": 0}}, {"end": {"col": 19, "line": 176, "offset": 4}, "path": "llama/ggml-backend-impl.h", "start": {"col": 15, "line": 176, "offset": 0}}]]}, {"code": 3, "level": "warn", "message": "Syntax error at line llama/ggml-cuda/vendors/hip.h:144:\n `__forceinline__ int` was unexpected", "path": "llama/ggml-cuda/vendors/hip.h", "spans": [{"end": {"col": 38, "line": 144, "offset": 19}, "file": "llama/ggml-cuda/vendors/hip.h", "start": {"col": 19, "line": 144, "offset": 0}}, {"end": {"col": 38, "line": 164, "offset": 19}, "file": "llama/ggml-cuda/vendors/hip.h", "start": {"col": 19, "line": 164, "offset": 0}}, {"end": {"col": 47, "line": 168, "offset": 28}, "file": "llama/ggml-cuda/vendors/hip.h", "start": {"col": 19, "line": 168, "offset": 0}}, {"end": {"col": 47, "line": 180, "offset": 28}, "file": "llama/ggml-cuda/vendors/hip.h", "start": {"col": 19, "line": 180, "offset": 0}}, {"end": {"col": 40, "line": 194, "offset": 21}, "file": "llama/ggml-cuda/vendors/hip.h", "start": {"col": 19, "line": 194, "offset": 0}}], "type": ["PartialParsing", [{"end": {"col": 38, "line": 144, "offset": 19}, "path": "llama/ggml-cuda/vendors/hip.h", "start": {"col": 19, "line": 144, "offset": 0}}, {"end": {"col": 38, "line": 164, "offset": 19}, "path": "llama/ggml-cuda/vendors/hip.h", "start": {"col": 19, "line": 164, "offset": 0}}, {"end": {"col": 47, "line": 168, "offset": 28}, "path": "llama/ggml-cuda/vendors/hip.h", "start": {"col": 19, "line": 168, "offset": 0}}, {"end": {"col": 47, "line": 180, "offset": 28}, "path": "llama/ggml-cuda/vendors/hip.h", "start": {"col": 19, "line": 180, "offset": 0}}, {"end": {"col": 40, "line": 194, "offset": 21}, "path": "llama/ggml-cuda/vendors/hip.h", "start": {"col": 19, "line": 194, "offset": 0}}]]}, {"code": 3, "level": "warn", "message": "Syntax error at line llama/clip.h:68:\n `struct clip_ctx` was unexpected", "path": "llama/clip.h", "spans": [{"end": {"col": 25, "line": 68, "offset": 15}, "file": "llama/clip.h", "start": {"col": 10, "line": 68, "offset": 0}}, {"end": {"col": 25, "line": 69, "offset": 15}, "file": "llama/clip.h", "start": {"col": 10, "line": 69, "offset": 0}}, {"end": {"col": 14, "line": 71, "offset": 4}, "file": "llama/clip.h", "start": {"col": 10, "line": 71, "offset": 0}}, {"end": {"col": 16, "line": 73, "offset": 6}, "file": "llama/clip.h", "start": {"col": 10, "line": 73, "offset": 0}}, {"end": {"col": 17, "line": 75, "offset": 7}, "file": "llama/clip.h", "start": {"col": 10, "line": 75, "offset": 0}}, {"end": {"col": 17, "line": 76, "offset": 7}, "file": "llama/clip.h", "start": {"col": 10, "line": 76, "offset": 0}}, {"end": {"col": 17, "line": 77, "offset": 7}, "file": "llama/clip.h", "start": {"col": 10, "line": 77, "offset": 0}}, {"end": {"col": 20, "line": 80, "offset": 4}, "file": "llama/clip.h", "start": {"col": 16, "line": 80, "offset": 0}}, {"end": {"col": 23, "line": 82, "offset": 7}, "file": "llama/clip.h", "start": {"col": 16, "line": 82, "offset": 0}}, {"end": {"col": 13, "line": 84, "offset": 3}, "file": "llama/clip.h", "start": {"col": 10, "line": 84, "offset": 0}}, {"end": {"col": 13, "line": 85, "offset": 3}, "file": "llama/clip.h", "start": {"col": 10, "line": 85, "offset": 0}}, {"end": {"col": 13, "line": 87, "offset": 3}, "file": "llama/clip.h", "start": {"col": 10, "line": 87, "offset": 0}}, {"end": {"col": 14, "line": 88, "offset": 4}, "file": "llama/clip.h", "start": {"col": 10, "line": 88, "offset": 0}}, {"end": {"col": 32, "line": 90, "offset": 22}, "file": "llama/clip.h", "start": {"col": 10, "line": 90, "offset": 0}}, {"end": {"col": 30, "line": 91, "offset": 20}, "file": "llama/clip.h", "start": {"col": 10, "line": 91, "offset": 0}}, {"end": {"col": 31, "line": 92, "offset": 21}, "file": "llama/clip.h", "start": {"col": 10, "line": 92, "offset": 0}}, {"end": {"col": 14, "line": 94, "offset": 4}, "file": "llama/clip.h", "start": {"col": 10, "line": 94, "offset": 0}}, {"end": {"col": 14, "line": 95, "offset": 4}, "file": "llama/clip.h", "start": {"col": 10, "line": 95, "offset": 0}}, {"end": {"col": 14, "line": 96, "offset": 4}, "file": "llama/clip.h", "start": {"col": 10, "line": 96, "offset": 0}}, {"end": {"col": 14, "line": 97, "offset": 4}, "file": "llama/clip.h", "start": {"col": 10, "line": 97, "offset": 0}}, {"end": {"col": 14, "line": 99, "offset": 4}, "file": "llama/clip.h", "start": {"col": 10, "line": 99, "offset": 0}}, {"end": {"col": 14, "line": 102, "offset": 4}, "file": "llama/clip.h", "start": {"col": 10, "line": 102, "offset": 0}}, {"end": {"col": 14, "line": 105, "offset": 4}, "file": "llama/clip.h", "start": {"col": 10, "line": 105, "offset": 0}}, {"end": {"col": 28, "line": 107, "offset": 18}, "file": "llama/clip.h", "start": {"col": 10, "line": 107, "offset": 0}}, {"end": {"col": 14, "line": 109, "offset": 4}, "file": "llama/clip.h", "start": {"col": 10, "line": 109, "offset": 0}}, {"end": {"col": 14, "line": 110, "offset": 4}, "file": "llama/clip.h", "start": {"col": 10, "line": 110, "offset": 0}}, {"end": {"col": 14, "line": 112, "offset": 4}, "file": "llama/clip.h", "start": {"col": 10, "line": 112, "offset": 0}}, {"end": {"col": 13, "line": 114, "offset": 3}, "file": "llama/clip.h", "start": {"col": 10, "line": 114, "offset": 0}}], "type": ["PartialParsing", [{"end": {"col": 25, "line": 68, "offset": 15}, "path": "llama/clip.h", "start": {"col": 10, "line": 68, "offset": 0}}, {"end": {"col": 25, "line": 69, "offset": 15}, "path": "llama/clip.h", "start": {"col": 10, "line": 69, "offset": 0}}, {"end": {"col": 14, "line": 71, "offset": 4}, "path": "llama/clip.h", "start": {"col": 10, "line": 71, "offset": 0}}, {"end": {"col": 16, "line": 73, "offset": 6}, "path": "llama/clip.h", "start": {"col": 10, "line": 73, "offset": 0}}, {"end": {"col": 17, "line": 75, "offset": 7}, "path": "llama/clip.h", "start": {"col": 10, "line": 75, "offset": 0}}, {"end": {"col": 17, "line": 76, "offset": 7}, "path": "llama/clip.h", "start": {"col": 10, "line": 76, "offset": 0}}, {"end": {"col": 17, "line": 77, "offset": 7}, "path": "llama/clip.h", "start": {"col": 10, "line": 77, "offset": 0}}, {"end": {"col": 20, "line": 80, "offset": 4}, "path": "llama/clip.h", "start": {"col": 16, "line": 80, "offset": 0}}, {"end": {"col": 23, "line": 82, "offset": 7}, "path": "llama/clip.h", "start": {"col": 16, "line": 82, "offset": 0}}, {"end": {"col": 13, "line": 84, "offset": 3}, "path": "llama/clip.h", "start": {"col": 10, "line": 84, "offset": 0}}, {"end": {"col": 13, "line": 85, "offset": 3}, "path": "llama/clip.h", "start": {"col": 10, "line": 85, "offset": 0}}, {"end": {"col": 13, "line": 87, "offset": 3}, "path": "llama/clip.h", "start": {"col": 10, "line": 87, "offset": 0}}, {"end": {"col": 14, "line": 88, "offset": 4}, "path": "llama/clip.h", "start": {"col": 10, "line": 88, "offset": 0}}, {"end": {"col": 32, "line": 90, "offset": 22}, "path": "llama/clip.h", "start": {"col": 10, "line": 90, "offset": 0}}, {"end": {"col": 30, "line": 91, "offset": 20}, "path": "llama/clip.h", "start": {"col": 10, "line": 91, "offset": 0}}, {"end": {"col": 31, "line": 92, "offset": 21}, "path": "llama/clip.h", "start": {"col": 10, "line": 92, "offset": 0}}, {"end": {"col": 14, "line": 94, "offset": 4}, "path": "llama/clip.h", "start": {"col": 10, "line": 94, "offset": 0}}, {"end": {"col": 14, "line": 95, "offset": 4}, "path": "llama/clip.h", "start": {"col": 10, "line": 95, "offset": 0}}, {"end": {"col": 14, "line": 96, "offset": 4}, "path": "llama/clip.h", "start": {"col": 10, "line": 96, "offset": 0}}, {"end": {"col": 14, "line": 97, "offset": 4}, "path": "llama/clip.h", "start": {"col": 10, "line": 97, "offset": 0}}, {"end": {"col": 14, "line": 99, "offset": 4}, "path": "llama/clip.h", "start": {"col": 10, "line": 99, "offset": 0}}, {"end": {"col": 14, "line": 102, "offset": 4}, "path": "llama/clip.h", "start": {"col": 10, "line": 102, "offset": 0}}, {"end": {"col": 14, "line": 105, "offset": 4}, "path": "llama/clip.h", "start": {"col": 10, "line": 105, "offset": 0}}, {"end": {"col": 28, "line": 107, "offset": 18}, "path": "llama/clip.h", "start": {"col": 10, "line": 107, "offset": 0}}, {"end": {"col": 14, "line": 109, "offset": 4}, "path": "llama/clip.h", "start": {"col": 10, "line": 109, "offset": 0}}, {"end": {"col": 14, "line": 110, "offset": 4}, "path": "llama/clip.h", "start": {"col": 10, "line": 110, "offset": 0}}, {"end": {"col": 14, "line": 112, "offset": 4}, "path": "llama/clip.h", "start": {"col": 10, "line": 112, "offset": 0}}, {"end": {"col": 13, "line": 114, "offset": 3}, "path": "llama/clip.h", "start": {"col": 10, "line": 114, "offset": 0}}]]}, {"code": 3, "level": "warn", "message": "Syntax error at line llama/ggml-alloc.h:47:\n `struct ggml_tallocr` was unexpected", "path": "llama/ggml-alloc.h", "spans": [{"end": {"col": 29, "line": 47, "offset": 19}, "file": "llama/ggml-alloc.h", "start": {"col": 10, "line": 47, "offset": 0}}, {"end": {"col": 14, "line": 48, "offset": 4}, "file": "llama/ggml-alloc.h", "start": {"col": 10, "line": 48, "offset": 0}}, {"end": {"col": 14, "line": 76, "offset": 4}, "file": "llama/ggml-alloc.h", "start": {"col": 10, "line": 76, "offset": 0}}, {"end": {"col": 14, "line": 82, "offset": 4}, "file": "llama/ggml-alloc.h", "start": {"col": 10, "line": 82, "offset": 0}}, {"end": {"col": 14, "line": 83, "offset": 4}, "file": "llama/ggml-alloc.h", "start": {"col": 10, "line": 83, "offset": 0}}, {"end": {"col": 14, "line": 91, "offset": 4}, "file": "llama/ggml-alloc.h", "start": {"col": 10, "line": 91, "offset": 0}}, {"end": {"col": 16, "line": 93, "offset": 6}, "file": "llama/ggml-alloc.h", "start": {"col": 10, "line": 93, "offset": 0}}, {"end": {"col": 36, "line": 97, "offset": 26}, "file": "llama/ggml-alloc.h", "start": {"col": 10, "line": 97, "offset": 0}}, {"end": {"col": 36, "line": 98, "offset": 26}, "file": "llama/ggml-alloc.h", "start": {"col": 10, "line": 98, "offset": 0}}], "type": ["PartialParsing", [{"end": {"col": 29, "line": 47, "offset": 19}, "path": "llama/ggml-alloc.h", "start": {"col": 10, "line": 47, "offset": 0}}, {"end": {"col": 14, "line": 48, "offset": 4}, "path": "llama/ggml-alloc.h", "start": {"col": 10, "line": 48, "offset": 0}}, {"end": {"col": 14, "line": 76, "offset": 4}, "path": "llama/ggml-alloc.h", "start": {"col": 10, "line": 76, "offset": 0}}, {"end": {"col": 14, "line": 82, "offset": 4}, "path": "llama/ggml-alloc.h", "start": {"col": 10, "line": 82, "offset": 0}}, {"end": {"col": 14, "line": 83, "offset": 4}, "path": "llama/ggml-alloc.h", "start": {"col": 10, "line": 83, "offset": 0}}, {"end": {"col": 14, "line": 91, "offset": 4}, "path": "llama/ggml-alloc.h", "start": {"col": 10, "line": 91, "offset": 0}}, {"end": {"col": 16, "line": 93, "offset": 6}, "path": "llama/ggml-alloc.h", "start": {"col": 10, "line": 93, "offset": 0}}, {"end": {"col": 36, "line": 97, "offset": 26}, "path": "llama/ggml-alloc.h", "start": {"col": 10, "line": 97, "offset": 0}}, {"end": {"col": 36, "line": 98, "offset": 26}, "path": "llama/ggml-alloc.h", "start": {"col": 10, "line": 98, "offset": 0}}]]}, {"code": 3, "level": "warn", "message": "Syntax error at line llama/ggml-metal.h:66:\n `void` was unexpected", "path": "llama/ggml-metal.h", "spans": [{"end": {"col": 14, "line": 66, "offset": 4}, "file": "llama/ggml-metal.h", "start": {"col": 10, "line": 66, "offset": 0}}, {"end": {"col": 14, "line": 70, "offset": 4}, "file": "llama/ggml-metal.h", "start": {"col": 10, "line": 70, "offset": 0}}, {"end": {"col": 41, "line": 72, "offset": 31}, "file": "llama/ggml-metal.h", "start": {"col": 10, "line": 72, "offset": 0}}, {"end": {"col": 14, "line": 74, "offset": 4}, "file": "llama/ggml-metal.h", "start": {"col": 10, "line": 74, "offset": 0}}, {"end": {"col": 46, "line": 76, "offset": 36}, "file": "llama/ggml-metal.h", "start": {"col": 10, "line": 76, "offset": 0}}, {"end": {"col": 14, "line": 81, "offset": 4}, "file": "llama/ggml-metal.h", "start": {"col": 10, "line": 81, "offset": 0}}, {"end": {"col": 14, "line": 84, "offset": 4}, "file": "llama/ggml-metal.h", "start": {"col": 10, "line": 84, "offset": 0}}], "type": ["PartialParsing", [{"end": {"col": 14, "line": 66, "offset": 4}, "path": "llama/ggml-metal.h", "start": {"col": 10, "line": 66, "offset": 0}}, {"end": {"col": 14, "line": 70, "offset": 4}, "path": "llama/ggml-metal.h", "start": {"col": 10, "line": 70, "offset": 0}}, {"end": {"col": 41, "line": 72, "offset": 31}, "path": "llama/ggml-metal.h", "start": {"col": 10, "line": 72, "offset": 0}}, {"end": {"col": 14, "line": 74, "offset": 4}, "path": "llama/ggml-metal.h", "start": {"col": 10, "line": 74, "offset": 0}}, {"end": {"col": 46, "line": 76, "offset": 36}, "path": "llama/ggml-metal.h", "start": {"col": 10, "line": 76, "offset": 0}}, {"end": {"col": 14, "line": 81, "offset": 4}, "path": "llama/ggml-metal.h", "start": {"col": 10, "line": 81, "offset": 0}}, {"end": {"col": 14, "line": 84, "offset": 4}, "path": "llama/ggml-metal.h", "start": {"col": 10, "line": 84, "offset": 0}}]]}, {"code": 3, "level": "warn", "message": "Syntax error at line llama/ggml-aarch64.h:42:\n `x` was unexpected", "path": "llama/ggml-aarch64.h", "spans": [{"end": {"col": 53, "line": 42, "offset": 1}, "file": "llama/ggml-aarch64.h", "start": {"col": 52, "line": 42, "offset": 0}}, {"end": {"col": 77, "line": 42, "offset": 1}, "file": "llama/ggml-aarch64.h", "start": {"col": 76, "line": 42, "offset": 0}}, {"end": {"col": 53, "line": 43, "offset": 1}, "file": "llama/ggml-aarch64.h", "start": {"col": 52, "line": 43, "offset": 0}}, {"end": {"col": 77, "line": 43, "offset": 1}, "file": "llama/ggml-aarch64.h", "start": {"col": 76, "line": 43, "offset": 0}}, {"end": {"col": 53, "line": 45, "offset": 1}, "file": "llama/ggml-aarch64.h", "start": {"col": 52, "line": 45, "offset": 0}}, {"end": {"col": 77, "line": 45, "offset": 1}, "file": "llama/ggml-aarch64.h", "start": {"col": 76, "line": 45, "offset": 0}}, {"end": {"col": 57, "line": 48, "offset": 3}, "file": "llama/ggml-aarch64.h", "start": {"col": 54, "line": 48, "offset": 0}}, {"end": {"col": 83, "line": 48, "offset": 3}, "file": "llama/ggml-aarch64.h", "start": {"col": 80, "line": 48, "offset": 0}}, {"end": {"col": 57, "line": 49, "offset": 3}, "file": "llama/ggml-aarch64.h", "start": {"col": 54, "line": 49, "offset": 0}}, {"end": {"col": 83, "line": 49, "offset": 3}, "file": "llama/ggml-aarch64.h", "start": {"col": 80, "line": 49, "offset": 0}}, {"end": {"col": 57, "line": 50, "offset": 3}, "file": "llama/ggml-aarch64.h", "start": {"col": 54, "line": 50, "offset": 0}}, {"end": {"col": 83, "line": 50, "offset": 3}, "file": "llama/ggml-aarch64.h", "start": {"col": 80, "line": 50, "offset": 0}}, {"end": {"col": 60, "line": 53, "offset": 1}, "file": "llama/ggml-aarch64.h", "start": {"col": 59, "line": 53, "offset": 0}}, {"end": {"col": 102, "line": 53, "offset": 2}, "file": "llama/ggml-aarch64.h", "start": {"col": 100, "line": 53, "offset": 0}}, {"end": {"col": 133, "line": 53, "offset": 2}, "file": "llama/ggml-aarch64.h", "start": {"col": 131, "line": 53, "offset": 0}}, {"end": {"col": 60, "line": 54, "offset": 1}, "file": "llama/ggml-aarch64.h", "start": {"col": 59, "line": 54, "offset": 0}}, {"end": {"col": 102, "line": 54, "offset": 2}, "file": "llama/ggml-aarch64.h", "start": {"col": 100, "line": 54, "offset": 0}}, {"end": {"col": 133, "line": 54, "offset": 2}, "file": "llama/ggml-aarch64.h", "start": {"col": 131, "line": 54, "offset": 0}}, {"end": {"col": 60, "line": 55, "offset": 1}, "file": "llama/ggml-aarch64.h", "start": {"col": 59, "line": 55, "offset": 0}}, {"end": {"col": 102, "line": 55, "offset": 2}, "file": "llama/ggml-aarch64.h", "start": {"col": 100, "line": 55, "offset": 0}}, {"end": {"col": 133, "line": 55, "offset": 2}, "file": "llama/ggml-aarch64.h", "start": {"col": 131, "line": 55, "offset": 0}}, {"end": {"col": 60, "line": 58, "offset": 1}, "file": "llama/ggml-aarch64.h", "start": {"col": 59, "line": 58, "offset": 0}}, {"end": {"col": 102, "line": 58, "offset": 2}, "file": "llama/ggml-aarch64.h", "start": {"col": 100, "line": 58, "offset": 0}}, {"end": {"col": 133, "line": 58, "offset": 2}, "file": "llama/ggml-aarch64.h", "start": {"col": 131, "line": 58, "offset": 0}}, {"end": {"col": 60, "line": 59, "offset": 1}, "file": "llama/ggml-aarch64.h", "start": {"col": 59, "line": 59, "offset": 0}}, {"end": {"col": 102, "line": 59, "offset": 2}, "file": "llama/ggml-aarch64.h", "start": {"col": 100, "line": 59, "offset": 0}}, {"end": {"col": 133, "line": 59, "offset": 2}, "file": "llama/ggml-aarch64.h", "start": {"col": 131, "line": 59, "offset": 0}}, {"end": {"col": 60, "line": 60, "offset": 1}, "file": "llama/ggml-aarch64.h", "start": {"col": 59, "line": 60, "offset": 0}}, {"end": {"col": 102, "line": 60, "offset": 2}, "file": "llama/ggml-aarch64.h", "start": {"col": 100, "line": 60, "offset": 0}}, {"end": {"col": 133, "line": 60, "offset": 2}, "file": "llama/ggml-aarch64.h", "start": {"col": 131, "line": 60, "offset": 0}}], "type": ["PartialParsing", [{"end": {"col": 53, "line": 42, "offset": 1}, "path": "llama/ggml-aarch64.h", "start": {"col": 52, "line": 42, "offset": 0}}, {"end": {"col": 77, "line": 42, "offset": 1}, "path": "llama/ggml-aarch64.h", "start": {"col": 76, "line": 42, "offset": 0}}, {"end": {"col": 53, "line": 43, "offset": 1}, "path": "llama/ggml-aarch64.h", "start": {"col": 52, "line": 43, "offset": 0}}, {"end": {"col": 77, "line": 43, "offset": 1}, "path": "llama/ggml-aarch64.h", "start": {"col": 76, "line": 43, "offset": 0}}, {"end": {"col": 53, "line": 45, "offset": 1}, "path": "llama/ggml-aarch64.h", "start": {"col": 52, "line": 45, "offset": 0}}, {"end": {"col": 77, "line": 45, "offset": 1}, "path": "llama/ggml-aarch64.h", "start": {"col": 76, "line": 45, "offset": 0}}, {"end": {"col": 57, "line": 48, "offset": 3}, "path": "llama/ggml-aarch64.h", "start": {"col": 54, "line": 48, "offset": 0}}, {"end": {"col": 83, "line": 48, "offset": 3}, "path": "llama/ggml-aarch64.h", "start": {"col": 80, "line": 48, "offset": 0}}, {"end": {"col": 57, "line": 49, "offset": 3}, "path": "llama/ggml-aarch64.h", "start": {"col": 54, "line": 49, "offset": 0}}, {"end": {"col": 83, "line": 49, "offset": 3}, "path": "llama/ggml-aarch64.h", "start": {"col": 80, "line": 49, "offset": 0}}, {"end": {"col": 57, "line": 50, "offset": 3}, "path": "llama/ggml-aarch64.h", "start": {"col": 54, "line": 50, "offset": 0}}, {"end": {"col": 83, "line": 50, "offset": 3}, "path": "llama/ggml-aarch64.h", "start": {"col": 80, "line": 50, "offset": 0}}, {"end": {"col": 60, "line": 53, "offset": 1}, "path": "llama/ggml-aarch64.h", "start": {"col": 59, "line": 53, "offset": 0}}, {"end": {"col": 102, "line": 53, "offset": 2}, "path": "llama/ggml-aarch64.h", "start": {"col": 100, "line": 53, "offset": 0}}, {"end": {"col": 133, "line": 53, "offset": 2}, "path": "llama/ggml-aarch64.h", "start": {"col": 131, "line": 53, "offset": 0}}, {"end": {"col": 60, "line": 54, "offset": 1}, "path": "llama/ggml-aarch64.h", "start": {"col": 59, "line": 54, "offset": 0}}, {"end": {"col": 102, "line": 54, "offset": 2}, "path": "llama/ggml-aarch64.h", "start": {"col": 100, "line": 54, "offset": 0}}, {"end": {"col": 133, "line": 54, "offset": 2}, "path": "llama/ggml-aarch64.h", "start": {"col": 131, "line": 54, "offset": 0}}, {"end": {"col": 60, "line": 55, "offset": 1}, "path": "llama/ggml-aarch64.h", "start": {"col": 59, "line": 55, "offset": 0}}, {"end": {"col": 102, "line": 55, "offset": 2}, "path": "llama/ggml-aarch64.h", "start": {"col": 100, "line": 55, "offset": 0}}, {"end": {"col": 133, "line": 55, "offset": 2}, "path": "llama/ggml-aarch64.h", "start": {"col": 131, "line": 55, "offset": 0}}, {"end": {"col": 60, "line": 58, "offset": 1}, "path": "llama/ggml-aarch64.h", "start": {"col": 59, "line": 58, "offset": 0}}, {"end": {"col": 102, "line": 58, "offset": 2}, "path": "llama/ggml-aarch64.h", "start": {"col": 100, "line": 58, "offset": 0}}, {"end": {"col": 133, "line": 58, "offset": 2}, "path": "llama/ggml-aarch64.h", "start": {"col": 131, "line": 58, "offset": 0}}, {"end": {"col": 60, "line": 59, "offset": 1}, "path": "llama/ggml-aarch64.h", "start": {"col": 59, "line": 59, "offset": 0}}, {"end": {"col": 102, "line": 59, "offset": 2}, "path": "llama/ggml-aarch64.h", "start": {"col": 100, "line": 59, "offset": 0}}, {"end": {"col": 133, "line": 59, "offset": 2}, "path": "llama/ggml-aarch64.h", "start": {"col": 131, "line": 59, "offset": 0}}, {"end": {"col": 60, "line": 60, "offset": 1}, "path": "llama/ggml-aarch64.h", "start": {"col": 59, "line": 60, "offset": 0}}, {"end": {"col": 102, "line": 60, "offset": 2}, "path": "llama/ggml-aarch64.h", "start": {"col": 100, "line": 60, "offset": 0}}, {"end": {"col": 133, "line": 60, "offset": 2}, "path": "llama/ggml-aarch64.h", "start": {"col": 131, "line": 60, "offset": 0}}]]}, {"code": 3, "level": "warn", "message": "Syntax error at line llama/llava.h:57:\n `bool` was unexpected", "path": "llama/llava.h", "spans": [{"end": {"col": 15, "line": 57, "offset": 4}, "file": "llama/llava.h", "start": {"col": 11, "line": 57, "offset": 0}}, {"end": {"col": 15, "line": 59, "offset": 4}, "file": "llama/llava.h", "start": {"col": 11, "line": 59, "offset": 0}}, {"end": {"col": 35, "line": 62, "offset": 24}, "file": "llama/llava.h", "start": {"col": 11, "line": 62, "offset": 0}}, {"end": {"col": 35, "line": 64, "offset": 24}, "file": "llama/llava.h", "start": {"col": 11, "line": 64, "offset": 0}}, {"end": {"col": 15, "line": 66, "offset": 4}, "file": "llama/llava.h", "start": {"col": 11, "line": 66, "offset": 0}}, {"end": {"col": 15, "line": 69, "offset": 4}, "file": "llama/llava.h", "start": {"col": 11, "line": 69, "offset": 0}}], "type": ["PartialParsing", [{"end": {"col": 15, "line": 57, "offset": 4}, "path": "llama/llava.h", "start": {"col": 11, "line": 57, "offset": 0}}, {"end": {"col": 15, "line": 59, "offset": 4}, "path": "llama/llava.h", "start": {"col": 11, "line": 59, "offset": 0}}, {"end": {"col": 35, "line": 62, "offset": 24}, "path": "llama/llava.h", "start": {"col": 11, "line": 62, "offset": 0}}, {"end": {"col": 35, "line": 64, "offset": 24}, "path": "llama/llava.h", "start": {"col": 11, "line": 64, "offset": 0}}, {"end": {"col": 15, "line": 66, "offset": 4}, "path": "llama/llava.h", "start": {"col": 11, "line": 66, "offset": 0}}, {"end": {"col": 15, "line": 69, "offset": 4}, "path": "llama/llava.h", "start": {"col": 11, "line": 69, "offset": 0}}]]}, {"code": 3, "level": "warn", "message": "Syntax error at line llama/ggml-cuda.h:50:\n `GGML_CALL ggml_backend_t` was unexpected", "path": "llama/ggml-cuda.h", "spans": [{"end": {"col": 34, "line": 50, "offset": 24}, "file": "llama/ggml-cuda.h", "start": {"col": 10, "line": 50, "offset": 0}}, {"end": {"col": 24, "line": 52, "offset": 14}, "file": "llama/ggml-cuda.h", "start": {"col": 10, "line": 52, "offset": 0}}, {"end": {"col": 46, "line": 55, "offset": 36}, "file": "llama/ggml-cuda.h", "start": {"col": 10, "line": 55, "offset": 0}}, {"end": {"col": 46, "line": 58, "offset": 36}, "file": "llama/ggml-cuda.h", "start": {"col": 10, "line": 58, "offset": 0}}, {"end": {"col": 46, "line": 61, "offset": 36}, "file": "llama/ggml-cuda.h", "start": {"col": 10, "line": 61, "offset": 0}}, {"end": {"col": 23, "line": 63, "offset": 13}, "file": "llama/ggml-cuda.h", "start": {"col": 10, "line": 63, "offset": 0}}, {"end": {"col": 23, "line": 65, "offset": 13}, "file": "llama/ggml-cuda.h", "start": {"col": 10, "line": 65, "offset": 0}}, {"end": {"col": 24, "line": 66, "offset": 14}, "file": "llama/ggml-cuda.h", "start": {"col": 10, "line": 66, "offset": 0}}, {"end": {"col": 24, "line": 67, "offset": 14}, "file": "llama/ggml-cuda.h", "start": {"col": 10, "line": 67, "offset": 0}}, {"end": {"col": 24, "line": 69, "offset": 14}, "file": "llama/ggml-cuda.h", "start": {"col": 10, "line": 69, "offset": 0}}, {"end": {"col": 24, "line": 70, "offset": 14}, "file": "llama/ggml-cuda.h", "start": {"col": 10, "line": 70, "offset": 0}}, {"end": {"col": 14, "line": 72, "offset": 4}, "file": "llama/ggml-cuda.h", "start": {"col": 10, "line": 72, "offset": 0}}], "type": ["PartialParsing", [{"end": {"col": 34, "line": 50, "offset": 24}, "path": "llama/ggml-cuda.h", "start": {"col": 10, "line": 50, "offset": 0}}, {"end": {"col": 24, "line": 52, "offset": 14}, "path": "llama/ggml-cuda.h", "start": {"col": 10, "line": 52, "offset": 0}}, {"end": {"col": 46, "line": 55, "offset": 36}, "path": "llama/ggml-cuda.h", "start": {"col": 10, "line": 55, "offset": 0}}, {"end": {"col": 46, "line": 58, "offset": 36}, "path": "llama/ggml-cuda.h", "start": {"col": 10, "line": 58, "offset": 0}}, {"end": {"col": 46, "line": 61, "offset": 36}, "path": "llama/ggml-cuda.h", "start": {"col": 10, "line": 61, "offset": 0}}, {"end": {"col": 23, "line": 63, "offset": 13}, "path": "llama/ggml-cuda.h", "start": {"col": 10, "line": 63, "offset": 0}}, {"end": {"col": 23, "line": 65, "offset": 13}, "path": "llama/ggml-cuda.h", "start": {"col": 10, "line": 65, "offset": 0}}, {"end": {"col": 24, "line": 66, "offset": 14}, "path": "llama/ggml-cuda.h", "start": {"col": 10, "line": 66, "offset": 0}}, {"end": {"col": 24, "line": 67, "offset": 14}, "path": "llama/ggml-cuda.h", "start": {"col": 10, "line": 67, "offset": 0}}, {"end": {"col": 24, "line": 69, "offset": 14}, "path": "llama/ggml-cuda.h", "start": {"col": 10, "line": 69, "offset": 0}}, {"end": {"col": 24, "line": 70, "offset": 14}, "path": "llama/ggml-cuda.h", "start": {"col": 10, "line": 70, "offset": 0}}, {"end": {"col": 14, "line": 72, "offset": 4}, "path": "llama/ggml-cuda.h", "start": {"col": 10, "line": 72, "offset": 0}}]]}, {"code": 3, "level": "warn", "message": "Syntax error at line llama/mllama.h:32:\n `struct mllama_ctx` was unexpected", "path": "llama/mllama.h", "spans": [{"end": {"col": 29, "line": 32, "offset": 17}, "file": "llama/mllama.h", "start": {"col": 12, "line": 32, "offset": 0}}, {"end": {"col": 29, "line": 33, "offset": 17}, "file": "llama/mllama.h", "start": {"col": 12, "line": 33, "offset": 0}}, {"end": {"col": 16, "line": 35, "offset": 4}, "file": "llama/mllama.h", "start": {"col": 12, "line": 35, "offset": 0}}, {"end": {"col": 19, "line": 37, "offset": 7}, "file": "llama/mllama.h", "start": {"col": 12, "line": 37, "offset": 0}}, {"end": {"col": 19, "line": 38, "offset": 7}, "file": "llama/mllama.h", "start": {"col": 12, "line": 38, "offset": 0}}, {"end": {"col": 19, "line": 39, "offset": 7}, "file": "llama/mllama.h", "start": {"col": 12, "line": 39, "offset": 0}}, {"end": {"col": 15, "line": 41, "offset": 3}, "file": "llama/mllama.h", "start": {"col": 12, "line": 41, "offset": 0}}, {"end": {"col": 15, "line": 42, "offset": 3}, "file": "llama/mllama.h", "start": {"col": 12, "line": 42, "offset": 0}}, {"end": {"col": 15, "line": 43, "offset": 3}, "file": "llama/mllama.h", "start": {"col": 12, "line": 43, "offset": 0}}, {"end": {"col": 15, "line": 44, "offset": 3}, "file": "llama/mllama.h", "start": {"col": 12, "line": 44, "offset": 0}}, {"end": {"col": 18, "line": 45, "offset": 6}, "file": "llama/mllama.h", "start": {"col": 12, "line": 45, "offset": 0}}, {"end": {"col": 31, "line": 47, "offset": 19}, "file": "llama/mllama.h", "start": {"col": 12, "line": 47, "offset": 0}}, {"end": {"col": 16, "line": 49, "offset": 4}, "file": "llama/mllama.h", "start": {"col": 12, "line": 49, "offset": 0}}, {"end": {"col": 16, "line": 50, "offset": 4}, "file": "llama/mllama.h", "start": {"col": 12, "line": 50, "offset": 0}}, {"end": {"col": 16, "line": 52, "offset": 4}, "file": "llama/mllama.h", "start": {"col": 12, "line": 52, "offset": 0}}, {"end": {"col": 16, "line": 54, "offset": 4}, "file": "llama/mllama.h", "start": {"col": 12, "line": 54, "offset": 0}}, {"end": {"col": 16, "line": 55, "offset": 4}, "file": "llama/mllama.h", "start": {"col": 12, "line": 55, "offset": 0}}], "type": ["PartialParsing", [{"end": {"col": 29, "line": 32, "offset": 17}, "path": "llama/mllama.h", "start": {"col": 12, "line": 32, "offset": 0}}, {"end": {"col": 29, "line": 33, "offset": 17}, "path": "llama/mllama.h", "start": {"col": 12, "line": 33, "offset": 0}}, {"end": {"col": 16, "line": 35, "offset": 4}, "path": "llama/mllama.h", "start": {"col": 12, "line": 35, "offset": 0}}, {"end": {"col": 19, "line": 37, "offset": 7}, "path": "llama/mllama.h", "start": {"col": 12, "line": 37, "offset": 0}}, {"end": {"col": 19, "line": 38, "offset": 7}, "path": "llama/mllama.h", "start": {"col": 12, "line": 38, "offset": 0}}, {"end": {"col": 19, "line": 39, "offset": 7}, "path": "llama/mllama.h", "start": {"col": 12, "line": 39, "offset": 0}}, {"end": {"col": 15, "line": 41, "offset": 3}, "path": "llama/mllama.h", "start": {"col": 12, "line": 41, "offset": 0}}, {"end": {"col": 15, "line": 42, "offset": 3}, "path": "llama/mllama.h", "start": {"col": 12, "line": 42, "offset": 0}}, {"end": {"col": 15, "line": 43, "offset": 3}, "path": "llama/mllama.h", "start": {"col": 12, "line": 43, "offset": 0}}, {"end": {"col": 15, "line": 44, "offset": 3}, "path": "llama/mllama.h", "start": {"col": 12, "line": 44, "offset": 0}}, {"end": {"col": 18, "line": 45, "offset": 6}, "path": "llama/mllama.h", "start": {"col": 12, "line": 45, "offset": 0}}, {"end": {"col": 31, "line": 47, "offset": 19}, "path": "llama/mllama.h", "start": {"col": 12, "line": 47, "offset": 0}}, {"end": {"col": 16, "line": 49, "offset": 4}, "path": "llama/mllama.h", "start": {"col": 12, "line": 49, "offset": 0}}, {"end": {"col": 16, "line": 50, "offset": 4}, "path": "llama/mllama.h", "start": {"col": 12, "line": 50, "offset": 0}}, {"end": {"col": 16, "line": 52, "offset": 4}, "path": "llama/mllama.h", "start": {"col": 12, "line": 52, "offset": 0}}, {"end": {"col": 16, "line": 54, "offset": 4}, "path": "llama/mllama.h", "start": {"col": 12, "line": 54, "offset": 0}}, {"end": {"col": 16, "line": 55, "offset": 4}, "path": "llama/mllama.h", "start": {"col": 12, "line": 55, "offset": 0}}]]}, {"code": 3, "level": "warn", "message": "Syntax error at line llama/ggml-blas.h:38:\n `GGML_CALL ggml_backend_t` was unexpected", "path": "llama/ggml-blas.h", "spans": [{"end": {"col": 34, "line": 38, "offset": 24}, "file": "llama/ggml-blas.h", "start": {"col": 10, "line": 38, "offset": 0}}, {"end": {"col": 24, "line": 40, "offset": 14}, "file": "llama/ggml-blas.h", "start": {"col": 10, "line": 40, "offset": 0}}, {"end": {"col": 24, "line": 44, "offset": 14}, "file": "llama/ggml-blas.h", "start": {"col": 10, "line": 44, "offset": 0}}], "type": ["PartialParsing", [{"end": {"col": 34, "line": 38, "offset": 24}, "path": "llama/ggml-blas.h", "start": {"col": 10, "line": 38, "offset": 0}}, {"end": {"col": 24, "line": 40, "offset": 14}, "path": "llama/ggml-blas.h", "start": {"col": 10, "line": 40, "offset": 0}}, {"end": {"col": 24, "line": 44, "offset": 14}, "path": "llama/ggml-blas.h", "start": {"col": 10, "line": 44, "offset": 0}}]]}], "interfile_languages_used": [], "paths": {"scanned": [".dockerignore", ".gitattributes", ".github/ISSUE_TEMPLATE/10_bug_report.yml", ".github/ISSUE_TEMPLATE/20_feature_request.md", ".github/ISSUE_TEMPLATE/30_model_request.md", ".github/ISSUE_TEMPLATE/config.yml", ".github/workflows/latest.yaml", ".github/workflows/release.yaml", ".github/workflows/test.yaml", ".gitignore", ".golangci.yaml", ".prettierrc.json", "CONTRIBUTING.md", "Dockerfile", "LICENSE", "Makefile", "README.md", "SECURITY.md", "api/client.go", "api/types.go", "app/.gitignore", "app/README.md", "app/assets/app.ico", "app/assets/assets.go", "app/assets/setup.bmp", "app/assets/tray.ico", "app/assets/tray_upgrade.ico", "app/lifecycle/getstarted_nonwindows.go", "app/lifecycle/getstarted_windows.go", "app/lifecycle/lifecycle.go", "app/lifecycle/logging.go", "app/lifecycle/logging_nonwindows.go", "app/lifecycle/logging_windows.go", "app/lifecycle/paths.go", "app/lifecycle/server.go", "app/lifecycle/server_unix.go", "app/lifecycle/server_windows.go", "app/lifecycle/updater.go", "app/lifecycle/updater_nonwindows.go", "app/lifecycle/updater_windows.go", "app/main.go", "app/ollama.iss", "app/ollama.rc", "app/ollama_welcome.ps1", "app/store/store.go", "app/store/store_darwin.go", "app/store/store_linux.go", "app/store/store_windows.go", "app/tray/commontray/types.go", "app/tray/tray.go", "app/tray/tray_nonwindows.go", "app/tray/tray_windows.go", "app/tray/wintray/eventloop.go", "app/tray/wintray/menus.go", "app/tray/wintray/messages.go", "app/tray/wintray/notifyicon.go", "app/tray/wintray/tray.go", "app/tray/wintray/w32api.go", "app/tray/wintray/winclass.go", "auth/auth.go", "cmd/cmd.go", "cmd/interactive.go", "cmd/start.go", "cmd/start_darwin.go", "cmd/start_default.go", "cmd/start_windows.go", "convert/convert.go", "convert/convert_bert.go", "convert/convert_gemma.go", "convert/convert_gemma2.go", "convert/convert_gemma2_adapter.go", "convert/convert_llama.go", "convert/convert_llama_adapter.go", "convert/convert_mixtral.go", "convert/convert_phi3.go", "convert/fs.go", "convert/reader.go", "convert/reader_safetensors.go", "convert/reader_torch.go", "convert/sentencepiece/sentencepiece_model.pb.go", "convert/sentencepiece_model.proto", "convert/testdata/Meta-Llama-3-8B-Instruct.json", "convert/testdata/Meta-Llama-3.1-8B-Instruct.json", "convert/testdata/Mistral-7B-Instruct-v0.2.json", "convert/testdata/Mixtral-8x7B-Instruct-v0.1.json", "convert/testdata/Phi-3-mini-128k-instruct.json", "convert/testdata/all-MiniLM-L6-v2.json", "convert/testdata/gemma-2-2b-it.json", "convert/testdata/gemma-2-9b-it.json", "convert/testdata/gemma-2b-it.json", "convert/tokenizer.go", "convert/tokenizer_spm.go", "discover/amd_common.go", "discover/amd_hip_windows.go", "discover/amd_linux.go", "discover/amd_windows.go", "discover/cpu_common.go", "discover/cuda_common.go", "discover/gpu.go", "discover/gpu_darwin.go", "discover/gpu_info.h", "discover/gpu_info_cudart.c", "discover/gpu_info_cudart.h", "discover/gpu_info_darwin.h", "discover/gpu_info_darwin.m", "discover/gpu_info_nvcuda.c", "discover/gpu_info_nvcuda.h", "discover/gpu_info_nvml.c", "discover/gpu_info_nvml.h", "discover/gpu_info_oneapi.c", "discover/gpu_info_oneapi.h", "discover/gpu_linux.go", "discover/gpu_oneapi.go", "discover/gpu_windows.go", "discover/types.go", "docs/README.md", "docs/api.md", "docs/development.md", "docs/docker.md", "docs/faq.md", "docs/gpu.md", "docs/images/ollama-keys.png", "docs/images/signup.png", "docs/import.md", "docs/linux.md", "docs/modelfile.md", "docs/openai.md", "docs/template.md", "docs/troubleshooting.md", "docs/tutorials/fly-gpu.md", "docs/tutorials/langchainjs.md", "docs/tutorials/langchainpy.md", "docs/tutorials/nvidia-jetson.md", "docs/tutorials.md", "docs/windows.md", "envconfig/config.go", "examples/.gitignore", "examples/README.md", "examples/flyio/.gitignore", "examples/flyio/README.md", "examples/go-chat/main.go", "examples/go-generate/main.go", "examples/go-generate-streaming/main.go", "examples/go-http-generate/main.go", "examples/go-multimodal/main.go", "examples/go-pull-progress/main.go", "examples/jupyter-notebook/README.md", "examples/jupyter-notebook/ollama.ipynb", "examples/kubernetes/README.md", "examples/kubernetes/cpu.yaml", "examples/kubernetes/gpu.yaml", "examples/langchain-python-rag-document/README.md", "examples/langchain-python-rag-document/main.py", "examples/langchain-python-rag-document/requirements.txt", "examples/langchain-python-rag-privategpt/.gitignore", "examples/langchain-python-rag-privategpt/LICENSE", "examples/langchain-python-rag-privategpt/README.md", "examples/langchain-python-rag-privategpt/constants.py", "examples/langchain-python-rag-privategpt/ingest.py", "examples/langchain-python-rag-privategpt/poetry.lock", "examples/langchain-python-rag-privategpt/privateGPT.py", "examples/langchain-python-rag-privategpt/pyproject.toml", "examples/langchain-python-rag-privategpt/requirements.txt", "examples/langchain-python-rag-websummary/README.md", "examples/langchain-python-rag-websummary/main.py", "examples/langchain-python-rag-websummary/requirements.txt", "examples/langchain-python-simple/README.md", "examples/langchain-python-simple/main.py", "examples/langchain-python-simple/requirements.txt", "examples/langchain-typescript-simple/README.md", "examples/langchain-typescript-simple/main.ts", "examples/langchain-typescript-simple/package-lock.json", "examples/langchain-typescript-simple/package.json", "examples/modelfile-mario/Modelfile", "examples/modelfile-mario/logo.png", "examples/modelfile-mario/readme.md", "examples/python-dockerit/Modelfile", "examples/python-dockerit/README.md", "examples/python-dockerit/dockerit.py", "examples/python-dockerit/requirements.txt", "examples/python-grounded-factuality-rag-check/README.md", "examples/python-grounded-factuality-rag-check/main.py", "examples/python-grounded-factuality-rag-check/requirements.txt", "examples/python-grounded-factuality-simple-check/main.py", "examples/python-grounded-factuality-simple-check/readme.md", "examples/python-grounded-factuality-simple-check/requirements.txt", "examples/python-json-datagenerator/predefinedschema.py", "examples/python-json-datagenerator/randomaddresses.py", "examples/python-json-datagenerator/readme.md", "examples/python-json-datagenerator/requirements.txt", "examples/python-loganalysis/Modelfile", "examples/python-loganalysis/loganalysis.py", "examples/python-loganalysis/logtest.logfile", "examples/python-loganalysis/readme.md", "examples/python-loganalysis/requirements.txt", "examples/python-rag-newssummary/README.md", "examples/python-rag-newssummary/requirements.txt", "examples/python-rag-newssummary/summ.py", "examples/python-rag-newssummary/utils.py", "examples/python-simplechat/client.py", "examples/python-simplechat/readme.md", "examples/python-simplechat/requirements.txt", "examples/python-simplegenerate/README.md", "examples/python-simplegenerate/client.py", "examples/python-simplegenerate/requirements.txt", "examples/typescript-functioncalling/extractemail.ts", "examples/typescript-functioncalling/extractwp.ts", "examples/typescript-functioncalling/info.txt", "examples/typescript-functioncalling/package-lock.json", "examples/typescript-functioncalling/package.json", "examples/typescript-functioncalling/readme.md", "examples/typescript-functioncalling/wp.txt", "examples/typescript-mentors/.gitignore", "examples/typescript-mentors/README.md", "examples/typescript-mentors/character-generator.ts", "examples/typescript-mentors/mentors.ts", "examples/typescript-mentors/package.json", "examples/typescript-simplechat/client.ts", "examples/typescript-simplechat/package.json", "examples/typescript-simplechat/readme.md", "format/bytes.go", "format/format.go", "format/time.go", "go.mod", "go.sum", "integration/README.md", "llama/.gitignore", "llama/Makefile", "llama/README.md", "llama/base64.hpp", "llama/build-info.cpp", "llama/clip.cpp", "llama/clip.h", "llama/common.cpp", "llama/common.h", "llama/ggml-aarch64.c", "llama/ggml-aarch64.h", "llama/ggml-alloc.c", "llama/ggml-alloc.h", "llama/ggml-backend-impl.h", "llama/ggml-backend.c", "llama/ggml-backend.h", "llama/ggml-blas.cpp", "llama/ggml-blas.h", "llama/ggml-common.h", "llama/ggml-cpu-impl.h", "llama/ggml-cuda/acc.cu", "llama/ggml-cuda/acc.cuh", "llama/ggml-cuda/arange.cu", "llama/ggml-cuda/arange.cuh", "llama/ggml-cuda/argsort.cu", "llama/ggml-cuda/argsort.cuh", "llama/ggml-cuda/binbcast.cu", "llama/ggml-cuda/binbcast.cuh", "llama/ggml-cuda/clamp.cu", "llama/ggml-cuda/clamp.cuh", "llama/ggml-cuda/common.cuh", "llama/ggml-cuda/concat.cu", "llama/ggml-cuda/concat.cuh", "llama/ggml-cuda/conv-transpose-1d.cu", "llama/ggml-cuda/conv-transpose-1d.cuh", "llama/ggml-cuda/convert.cu", "llama/ggml-cuda/convert.cuh", "llama/ggml-cuda/cpy.cu", "llama/ggml-cuda/cpy.cuh", "llama/ggml-cuda/cross-entropy-loss.cu", "llama/ggml-cuda/cross-entropy-loss.cuh", "llama/ggml-cuda/dequantize.cuh", "llama/ggml-cuda/diagmask.cu", "llama/ggml-cuda/diagmask.cuh", "llama/ggml-cuda/dmmv.cu", "llama/ggml-cuda/dmmv.cuh", "llama/ggml-cuda/fattn-common.cuh", "llama/ggml-cuda/fattn-tile-f16.cu", "llama/ggml-cuda/fattn-tile-f16.cuh", "llama/ggml-cuda/fattn-tile-f32.cu", "llama/ggml-cuda/fattn-tile-f32.cuh", "llama/ggml-cuda/fattn-vec-f16.cuh", "llama/ggml-cuda/fattn-vec-f32.cuh", "llama/ggml-cuda/fattn-wmma-f16.cuh", "llama/ggml-cuda/fattn.cu", "llama/ggml-cuda/fattn.cuh", "llama/ggml-cuda/getrows.cu", "llama/ggml-cuda/getrows.cuh", "llama/ggml-cuda/im2col.cu", "llama/ggml-cuda/im2col.cuh", "llama/ggml-cuda/mma.cuh", "llama/ggml-cuda/mmq.cu", "llama/ggml-cuda/mmq.cuh", "llama/ggml-cuda/mmvq.cu", "llama/ggml-cuda/mmvq.cuh", "llama/ggml-cuda/norm.cu", "llama/ggml-cuda/norm.cuh", "llama/ggml-cuda/opt-step-adamw.cu", "llama/ggml-cuda/opt-step-adamw.cuh", "llama/ggml-cuda/out-prod.cu", "llama/ggml-cuda/out-prod.cuh", "llama/ggml-cuda/pad.cu", "llama/ggml-cuda/pad.cuh", "llama/ggml-cuda/pool2d.cu", "llama/ggml-cuda/pool2d.cuh", "llama/ggml-cuda/quantize.cu", "llama/ggml-cuda/quantize.cuh", "llama/ggml-cuda/rope.cu", "llama/ggml-cuda/rope.cuh", "llama/ggml-cuda/rwkv-wkv.cu", "llama/ggml-cuda/rwkv-wkv.cuh", "llama/ggml-cuda/scale.cu", "llama/ggml-cuda/scale.cuh", "llama/ggml-cuda/softmax.cu", "llama/ggml-cuda/softmax.cuh", "llama/ggml-cuda/sum.cu", "llama/ggml-cuda/sum.cuh", "llama/ggml-cuda/sumrows.cu", "llama/ggml-cuda/sumrows.cuh", "llama/ggml-cuda/template-instances/fattn-vec-f16-instance-hs128-f16-f16.cu", "llama/ggml-cuda/template-instances/fattn-vec-f16-instance-hs128-f16-q4_0.cu", "llama/ggml-cuda/template-instances/fattn-vec-f16-instance-hs128-f16-q4_1.cu", "llama/ggml-cuda/template-instances/fattn-vec-f16-instance-hs128-f16-q5_0.cu", "llama/ggml-cuda/template-instances/fattn-vec-f16-instance-hs128-f16-q5_1.cu", "llama/ggml-cuda/template-instances/fattn-vec-f16-instance-hs128-f16-q8_0.cu", "llama/ggml-cuda/template-instances/fattn-vec-f16-instance-hs128-q4_0-f16.cu", "llama/ggml-cuda/template-instances/fattn-vec-f16-instance-hs128-q4_0-q4_0.cu", "llama/ggml-cuda/template-instances/fattn-vec-f16-instance-hs128-q4_0-q4_1.cu", "llama/ggml-cuda/template-instances/fattn-vec-f16-instance-hs128-q4_0-q5_0.cu", "llama/ggml-cuda/template-instances/fattn-vec-f16-instance-hs128-q4_0-q5_1.cu", "llama/ggml-cuda/template-instances/fattn-vec-f16-instance-hs128-q4_0-q8_0.cu", "llama/ggml-cuda/template-instances/fattn-vec-f16-instance-hs128-q4_1-f16.cu", "llama/ggml-cuda/template-instances/fattn-vec-f16-instance-hs128-q4_1-q4_0.cu", "llama/ggml-cuda/template-instances/fattn-vec-f16-instance-hs128-q4_1-q4_1.cu", "llama/ggml-cuda/template-instances/fattn-vec-f16-instance-hs128-q4_1-q5_0.cu", "llama/ggml-cuda/template-instances/fattn-vec-f16-instance-hs128-q4_1-q5_1.cu", "llama/ggml-cuda/template-instances/fattn-vec-f16-instance-hs128-q4_1-q8_0.cu", "llama/ggml-cuda/template-instances/fattn-vec-f16-instance-hs128-q5_0-f16.cu", "llama/ggml-cuda/template-instances/fattn-vec-f16-instance-hs128-q5_0-q4_0.cu", "llama/ggml-cuda/template-instances/fattn-vec-f16-instance-hs128-q5_0-q4_1.cu", "llama/ggml-cuda/template-instances/fattn-vec-f16-instance-hs128-q5_0-q5_0.cu", "llama/ggml-cuda/template-instances/fattn-vec-f16-instance-hs128-q5_0-q5_1.cu", "llama/ggml-cuda/template-instances/fattn-vec-f16-instance-hs128-q5_0-q8_0.cu", "llama/ggml-cuda/template-instances/fattn-vec-f16-instance-hs128-q5_1-f16.cu", "llama/ggml-cuda/template-instances/fattn-vec-f16-instance-hs128-q5_1-q4_0.cu", "llama/ggml-cuda/template-instances/fattn-vec-f16-instance-hs128-q5_1-q4_1.cu", "llama/ggml-cuda/template-instances/fattn-vec-f16-instance-hs128-q5_1-q5_0.cu", "llama/ggml-cuda/template-instances/fattn-vec-f16-instance-hs128-q5_1-q5_1.cu", "llama/ggml-cuda/template-instances/fattn-vec-f16-instance-hs128-q5_1-q8_0.cu", "llama/ggml-cuda/template-instances/fattn-vec-f16-instance-hs128-q8_0-f16.cu", "llama/ggml-cuda/template-instances/fattn-vec-f16-instance-hs128-q8_0-q4_0.cu", "llama/ggml-cuda/template-instances/fattn-vec-f16-instance-hs128-q8_0-q4_1.cu", "llama/ggml-cuda/template-instances/fattn-vec-f16-instance-hs128-q8_0-q5_0.cu", "llama/ggml-cuda/template-instances/fattn-vec-f16-instance-hs128-q8_0-q5_1.cu", "llama/ggml-cuda/template-instances/fattn-vec-f16-instance-hs128-q8_0-q8_0.cu", "llama/ggml-cuda/template-instances/fattn-vec-f16-instance-hs256-f16-f16.cu", "llama/ggml-cuda/template-instances/fattn-vec-f16-instance-hs64-f16-f16.cu", "llama/ggml-cuda/template-instances/fattn-vec-f16-instance-hs64-f16-q4_0.cu", "llama/ggml-cuda/template-instances/fattn-vec-f16-instance-hs64-f16-q4_1.cu", "llama/ggml-cuda/template-instances/fattn-vec-f16-instance-hs64-f16-q5_0.cu", "llama/ggml-cuda/template-instances/fattn-vec-f16-instance-hs64-f16-q5_1.cu", "llama/ggml-cuda/template-instances/fattn-vec-f16-instance-hs64-f16-q8_0.cu", "llama/ggml-cuda/template-instances/fattn-vec-f32-instance-hs128-f16-f16.cu", "llama/ggml-cuda/template-instances/fattn-vec-f32-instance-hs128-f16-q4_0.cu", "llama/ggml-cuda/template-instances/fattn-vec-f32-instance-hs128-f16-q4_1.cu", "llama/ggml-cuda/template-instances/fattn-vec-f32-instance-hs128-f16-q5_0.cu", "llama/ggml-cuda/template-instances/fattn-vec-f32-instance-hs128-f16-q5_1.cu", "llama/ggml-cuda/template-instances/fattn-vec-f32-instance-hs128-f16-q8_0.cu", "llama/ggml-cuda/template-instances/fattn-vec-f32-instance-hs128-q4_0-f16.cu", "llama/ggml-cuda/template-instances/fattn-vec-f32-instance-hs128-q4_0-q4_0.cu", "llama/ggml-cuda/template-instances/fattn-vec-f32-instance-hs128-q4_0-q4_1.cu", "llama/ggml-cuda/template-instances/fattn-vec-f32-instance-hs128-q4_0-q5_0.cu", "llama/ggml-cuda/template-instances/fattn-vec-f32-instance-hs128-q4_0-q5_1.cu", "llama/ggml-cuda/template-instances/fattn-vec-f32-instance-hs128-q4_0-q8_0.cu", "llama/ggml-cuda/template-instances/fattn-vec-f32-instance-hs128-q4_1-f16.cu", "llama/ggml-cuda/template-instances/fattn-vec-f32-instance-hs128-q4_1-q4_0.cu", "llama/ggml-cuda/template-instances/fattn-vec-f32-instance-hs128-q4_1-q4_1.cu", "llama/ggml-cuda/template-instances/fattn-vec-f32-instance-hs128-q4_1-q5_0.cu", "llama/ggml-cuda/template-instances/fattn-vec-f32-instance-hs128-q4_1-q5_1.cu", "llama/ggml-cuda/template-instances/fattn-vec-f32-instance-hs128-q4_1-q8_0.cu", "llama/ggml-cuda/template-instances/fattn-vec-f32-instance-hs128-q5_0-f16.cu", "llama/ggml-cuda/template-instances/fattn-vec-f32-instance-hs128-q5_0-q4_0.cu", "llama/ggml-cuda/template-instances/fattn-vec-f32-instance-hs128-q5_0-q4_1.cu", "llama/ggml-cuda/template-instances/fattn-vec-f32-instance-hs128-q5_0-q5_0.cu", "llama/ggml-cuda/template-instances/fattn-vec-f32-instance-hs128-q5_0-q5_1.cu", "llama/ggml-cuda/template-instances/fattn-vec-f32-instance-hs128-q5_0-q8_0.cu", "llama/ggml-cuda/template-instances/fattn-vec-f32-instance-hs128-q5_1-f16.cu", "llama/ggml-cuda/template-instances/fattn-vec-f32-instance-hs128-q5_1-q4_0.cu", "llama/ggml-cuda/template-instances/fattn-vec-f32-instance-hs128-q5_1-q4_1.cu", "llama/ggml-cuda/template-instances/fattn-vec-f32-instance-hs128-q5_1-q5_0.cu", "llama/ggml-cuda/template-instances/fattn-vec-f32-instance-hs128-q5_1-q5_1.cu", "llama/ggml-cuda/template-instances/fattn-vec-f32-instance-hs128-q5_1-q8_0.cu", "llama/ggml-cuda/template-instances/fattn-vec-f32-instance-hs128-q8_0-f16.cu", "llama/ggml-cuda/template-instances/fattn-vec-f32-instance-hs128-q8_0-q4_0.cu", "llama/ggml-cuda/template-instances/fattn-vec-f32-instance-hs128-q8_0-q4_1.cu", "llama/ggml-cuda/template-instances/fattn-vec-f32-instance-hs128-q8_0-q5_0.cu", "llama/ggml-cuda/template-instances/fattn-vec-f32-instance-hs128-q8_0-q5_1.cu", "llama/ggml-cuda/template-instances/fattn-vec-f32-instance-hs128-q8_0-q8_0.cu", "llama/ggml-cuda/template-instances/fattn-vec-f32-instance-hs256-f16-f16.cu", "llama/ggml-cuda/template-instances/fattn-vec-f32-instance-hs64-f16-f16.cu", "llama/ggml-cuda/template-instances/fattn-vec-f32-instance-hs64-f16-q4_0.cu", "llama/ggml-cuda/template-instances/fattn-vec-f32-instance-hs64-f16-q4_1.cu", "llama/ggml-cuda/template-instances/fattn-vec-f32-instance-hs64-f16-q5_0.cu", "llama/ggml-cuda/template-instances/fattn-vec-f32-instance-hs64-f16-q5_1.cu", "llama/ggml-cuda/template-instances/fattn-vec-f32-instance-hs64-f16-q8_0.cu", "llama/ggml-cuda/template-instances/fattn-wmma-f16-instance-kqfloat-cpb16.cu", "llama/ggml-cuda/template-instances/fattn-wmma-f16-instance-kqfloat-cpb32.cu", "llama/ggml-cuda/template-instances/fattn-wmma-f16-instance-kqhalf-cpb16.cu", "llama/ggml-cuda/template-instances/fattn-wmma-f16-instance-kqhalf-cpb32.cu", "llama/ggml-cuda/template-instances/fattn-wmma-f16-instance-kqhalf-cpb8.cu", "llama/ggml-cuda/template-instances/mmq-instance-iq1_s.cu", "llama/ggml-cuda/template-instances/mmq-instance-iq2_s.cu", "llama/ggml-cuda/template-instances/mmq-instance-iq2_xs.cu", "llama/ggml-cuda/template-instances/mmq-instance-iq2_xxs.cu", "llama/ggml-cuda/template-instances/mmq-instance-iq3_s.cu", "llama/ggml-cuda/template-instances/mmq-instance-iq3_xxs.cu", "llama/ggml-cuda/template-instances/mmq-instance-iq4_nl.cu", "llama/ggml-cuda/template-instances/mmq-instance-iq4_xs.cu", "llama/ggml-cuda/template-instances/mmq-instance-q2_k.cu", "llama/ggml-cuda/template-instances/mmq-instance-q3_k.cu", "llama/ggml-cuda/template-instances/mmq-instance-q4_0.cu", "llama/ggml-cuda/template-instances/mmq-instance-q4_1.cu", "llama/ggml-cuda/template-instances/mmq-instance-q4_k.cu", "llama/ggml-cuda/template-instances/mmq-instance-q5_0.cu", "llama/ggml-cuda/template-instances/mmq-instance-q5_1.cu", "llama/ggml-cuda/template-instances/mmq-instance-q5_k.cu", "llama/ggml-cuda/template-instances/mmq-instance-q6_k.cu", "llama/ggml-cuda/template-instances/mmq-instance-q8_0.cu", "llama/ggml-cuda/tsembd.cu", "llama/ggml-cuda/tsembd.cuh", "llama/ggml-cuda/unary.cu", "llama/ggml-cuda/unary.cuh", "llama/ggml-cuda/upscale.cu", "llama/ggml-cuda/upscale.cuh", "llama/ggml-cuda/vecdotq.cuh", "llama/ggml-cuda/vendors/cuda.h", "llama/ggml-cuda/vendors/hip.h", "llama/ggml-cuda/vendors/musa.h", "llama/ggml-cuda.cu", "llama/ggml-cuda.h", "llama/ggml-impl.h", "llama/ggml-metal.h", "llama/ggml-metal.metal", "llama/ggml-metal_darwin_arm64.m", "llama/ggml-quants.c", "llama/ggml-quants.h", "llama/ggml.c", "llama/ggml.h", "llama/json-schema-to-grammar.cpp", "llama/json-schema-to-grammar.h", "llama/json.hpp", "llama/llama-grammar.cpp", "llama/llama-grammar.h", "llama/llama-impl.h", "llama/llama-sampling.cpp", "llama/llama-sampling.h", "llama/llama-vocab.cpp", "llama/llama-vocab.h", "llama/llama.cpp", "llama/llama.go", "llama/llama.h", "llama/llama_darwin.c", "llama/llama_darwin.go", "llama/llamafile/sgemm.h", "llama/llava.cpp", "llama/llava.h", "llama/log.cpp", "llama/log.h", "llama/make/Makefile.cuda_v11", "llama/make/Makefile.cuda_v12", "llama/make/Makefile.default", "llama/make/Makefile.rocm", "llama/make/Makefile.sync", "llama/make/common-defs.make", "llama/make/cuda.make", "llama/make/gpu.make", "llama/mllama.cpp", "llama/mllama.h", "llama/patches/0001-cuda.patch", "llama/patches/0002-pretokenizer.patch", "llama/patches/0003-metal.patch", "llama/patches/0004-ggml-metal.patch", "llama/patches/0005-embeddings.patch", "llama/patches/0006-clip-unicode.patch", "llama/patches/0007-solar-pro.patch", "llama/patches/0008-conditional-fattn.patch", "llama/patches/0009-blas.patch", "llama/patches/0010-add-mllama-support.patch", "llama/patches/0011-add-unpad-operator.patch", "llama/patches/0012-fix-deepseek-deseret-regex.patch", "llama/runner/README.md", "llama/runner/cache.go", "llama/runner/image.go", "llama/runner/requirements.go", "llama/runner/runner.go", "llama/runner/stop.go", "llama/sampling.cpp", "llama/sampling.h", "llama/sampling_ext.cpp", "llama/sampling_ext.h", "llama/sgemm.cpp", "llama/sgemm.h", "llama/stb_image.h", "llama/unicode-data.cpp", "llama/unicode-data.h", "llama/unicode.cpp", "llama/unicode.h", "llama/vendoring", "llm/filetype.go", "llm/ggla.go", "llm/ggml.go", "llm/gguf.go", "llm/llm_darwin.go", "llm/llm_linux.go", "llm/llm_windows.go", "llm/memory.go", "llm/server.go", "llm/status.go", "macapp/.eslintrc.json", "macapp/.gitignore", "macapp/README.md", "macapp/assets/icon.icns", "macapp/assets/iconDarkTemplate.png", "macapp/assets/iconDarkTemplate@2x.png", "macapp/assets/iconDarkUpdateTemplate.png", "macapp/assets/iconDarkUpdateTemplate@2x.png", "macapp/assets/iconTemplate.png", "macapp/assets/iconTemplate@2x.png", "macapp/assets/iconUpdateTemplate.png", "macapp/assets/iconUpdateTemplate@2x.png", "macapp/forge.config.ts", "macapp/package-lock.json", "macapp/package.json", "macapp/postcss.config.js", "macapp/src/app.css", "macapp/src/app.tsx", "macapp/src/declarations.d.ts", "macapp/src/index.html", "macapp/src/index.ts", "macapp/src/install.ts", "macapp/src/ollama.svg", "macapp/src/preload.ts", "macapp/src/renderer.tsx", "macapp/tailwind.config.js", "macapp/tsconfig.json", "macapp/webpack.main.config.ts", "macapp/webpack.plugins.ts", "macapp/webpack.renderer.config.ts", "macapp/webpack.rules.ts", "main.go", "openai/openai.go", "parser/parser.go", "progress/bar.go", "progress/progress.go", "progress/spinner.go", "readline/buffer.go", "readline/errors.go", "readline/history.go", "readline/readline.go", "readline/readline_unix.go", "readline/readline_windows.go", "readline/term.go", "readline/term_bsd.go", "readline/term_linux.go", "readline/term_windows.go", "readline/types.go", "runners/common.go", "scripts/build.sh", "scripts/build_darwin.sh", "scripts/build_docker.sh", "scripts/build_linux.sh", "scripts/build_windows.ps1", "scripts/env.sh", "scripts/fast.sh", "scripts/install.sh", "scripts/publish.sh", "scripts/push_docker.sh", "scripts/rh_linux_deps.sh", "scripts/tag_latest.sh", "server/auth.go", "server/download.go", "server/fixblobs.go", "server/imageproc/images.go", "server/images.go", "server/layer.go", "server/manifest.go", "server/model.go", "server/modelpath.go", "server/prompt.go", "server/routes.go", "server/sched.go", "server/sparse_common.go", "server/sparse_windows.go", "server/testdata/tools/command-r-plus.gotmpl", "server/testdata/tools/command-r-plus.out", "server/testdata/tools/firefunction.gotmpl", "server/testdata/tools/firefunction.out", "server/testdata/tools/llama3-groq-tool-use.gotmpl", "server/testdata/tools/llama3-groq-tool-use.out", "server/testdata/tools/messages.json", "server/testdata/tools/mistral.gotmpl", "server/testdata/tools/mistral.out", "server/testdata/tools/nemotron.gotmpl", "server/testdata/tools/nemotron.out", "server/testdata/tools/tools.json", "server/testdata/tools/xlam.gotmpl", "server/testdata/tools/xlam.out", "server/upload.go", "template/alfred.gotmpl", "template/alfred.json", "template/alpaca.gotmpl", "template/alpaca.json", "template/chatml.gotmpl", "template/chatml.json", "template/chatqa.gotmpl", "template/chatqa.json", "template/codellama-70b-instruct.gotmpl", "template/codellama-70b-instruct.json", "template/falcon-instruct.gotmpl", "template/falcon-instruct.json", "template/gemma-instruct.gotmpl", "template/gemma-instruct.json", "template/granite-instruct.gotmpl", "template/granite-instruct.json", "template/index.json", "template/llama2-chat.gotmpl", "template/llama2-chat.json", "template/llama3-instruct.gotmpl", "template/llama3-instruct.json", "template/magicoder.gotmpl", "template/magicoder.json", "template/mistral-instruct.gotmpl", "template/mistral-instruct.json", "template/openchat.gotmpl", "template/openchat.json", "template/phi-3.gotmpl", "template/phi-3.json", "template/solar-instruct.gotmpl", "template/solar-instruct.json", "template/starcoder2-instruct.gotmpl", "template/starcoder2-instruct.json", "template/template.go", "template/testdata/alfred.gotmpl/system-user-assistant-user", "template/testdata/alfred.gotmpl/user", "template/testdata/alfred.gotmpl/user-assistant-user", "template/testdata/alpaca.gotmpl/system-user-assistant-user", "template/testdata/alpaca.gotmpl/user", "template/testdata/alpaca.gotmpl/user-assistant-user", "template/testdata/chatml.gotmpl/system-user-assistant-user", "template/testdata/chatml.gotmpl/user", "template/testdata/chatml.gotmpl/user-assistant-user", "template/testdata/chatqa.gotmpl/system-user-assistant-user", "template/testdata/chatqa.gotmpl/user", "template/testdata/chatqa.gotmpl/user-assistant-user", "template/testdata/codellama-70b-instruct.gotmpl/system-user-assistant-user", "template/testdata/codellama-70b-instruct.gotmpl/user", "template/testdata/codellama-70b-instruct.gotmpl/user-assistant-user", "template/testdata/falcon-instruct.gotmpl/system-user-assistant-user", "template/testdata/falcon-instruct.gotmpl/user", "template/testdata/falcon-instruct.gotmpl/user-assistant-user", "template/testdata/gemma-instruct.gotmpl/system-user-assistant-user", "template/testdata/gemma-instruct.gotmpl/user", "template/testdata/gemma-instruct.gotmpl/user-assistant-user", "template/testdata/granite-instruct.gotmpl/system-user-assistant-user", "template/testdata/granite-instruct.gotmpl/user", "template/testdata/granite-instruct.gotmpl/user-assistant-user", "template/testdata/llama2-chat.gotmpl/system-user-assistant-user", "template/testdata/llama2-chat.gotmpl/user", "template/testdata/llama2-chat.gotmpl/user-assistant-user", "template/testdata/llama3-instruct.gotmpl/system-user-assistant-user", "template/testdata/llama3-instruct.gotmpl/user", "template/testdata/llama3-instruct.gotmpl/user-assistant-user", "template/testdata/magicoder.gotmpl/system-user-assistant-user", "template/testdata/magicoder.gotmpl/user", "template/testdata/magicoder.gotmpl/user-assistant-user", "template/testdata/mistral-instruct.gotmpl/system-user-assistant-user", "template/testdata/mistral-instruct.gotmpl/user", "template/testdata/mistral-instruct.gotmpl/user-assistant-user", "template/testdata/openchat.gotmpl/system-user-assistant-user", "template/testdata/openchat.gotmpl/user", "template/testdata/openchat.gotmpl/user-assistant-user", "template/testdata/phi-3.gotmpl/system-user-assistant-user", "template/testdata/phi-3.gotmpl/user", "template/testdata/phi-3.gotmpl/user-assistant-user", "template/testdata/solar-instruct.gotmpl/system-user-assistant-user", "template/testdata/solar-instruct.gotmpl/user", "template/testdata/solar-instruct.gotmpl/user-assistant-user", "template/testdata/starcoder2-instruct.gotmpl/system-user-assistant-user", "template/testdata/starcoder2-instruct.gotmpl/user", "template/testdata/starcoder2-instruct.gotmpl/user-assistant-user", "template/testdata/templates.jsonl", "template/testdata/vicuna.gotmpl/system-user-assistant-user", "template/testdata/vicuna.gotmpl/user", "template/testdata/vicuna.gotmpl/user-assistant-user", "template/testdata/zephyr.gotmpl/system-user-assistant-user", "template/testdata/zephyr.gotmpl/user", "template/testdata/zephyr.gotmpl/user-assistant-user", "template/vicuna.gotmpl", "template/vicuna.json", "template/zephyr.gotmpl", "template/zephyr.json", "types/errtypes/errtypes.go", "types/model/name.go", "types/model/testdata/fuzz/FuzzName/d37463aa416f6bab", "util/bufioutil/buffer_seeker.go", "version/version.go"]}, "results": [{"check_id": "dockerfile.security.missing-user-entrypoint.missing-user-entrypoint", "end": {"col": 21, "line": 38, "offset": 1662}, "extra": {"engine_kind": "OSS", "fingerprint": "a9f310a1842fccd7cacd1f13bea45b7828340a31503977134cf40610cfd35c38fc56a1f9480f3771b45850db9a4b7e617a0830a1ec197f484f11d93d67578ecb_0", "fix": "USER non-root\nENTRYPOINT [ \"zsh\" ]", "is_ignored": false, "lines": "ENTRYPOINT [ \"zsh\" ]", "message": "By not specifying a USER, a program in the container may run as 'root'. This is a security hazard. If an attacker can control a process running as root, they may have control over the container. Ensure that the last USER in a Dockerfile is a USER other than 'root'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-269: Improper Privilege Management"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A04:2021 - Insecure Design"], "references": ["https://owasp.org/Top10/A04_2021-Insecure_Design"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 47272, "rule_id": "ReUW9E", "rv_id": 928285, "url": "https://semgrep.dev/playground/r/WrTYvkG/dockerfile.security.missing-user-entrypoint.missing-user-entrypoint", "version_id": "WrTYvkG"}}, "shortlink": "https://sg.run/k281", "source": "https://semgrep.dev/r/dockerfile.security.missing-user-entrypoint.missing-user-entrypoint", "subcategory": ["audit"], "technology": ["dockerfile"], "vulnerability_class": ["Improper Authorization"]}, "metavars": {"$...VARS": {"abstract_content": "[\"zsh\"]", "end": {"col": 21, "line": 38, "offset": 1662}, "start": {"col": 12, "line": 38, "offset": 1653}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "Dockerfile", "start": {"col": 1, "line": 38, "offset": 1642}}, {"check_id": "dockerfile.security.missing-user-entrypoint.missing-user-entrypoint", "end": {"col": 21, "line": 66, "offset": 2980}, "extra": {"engine_kind": "OSS", "fingerprint": "a9f310a1842fccd7cacd1f13bea45b7828340a31503977134cf40610cfd35c38fc56a1f9480f3771b45850db9a4b7e617a0830a1ec197f484f11d93d67578ecb_1", "fix": "USER non-root\nENTRYPOINT [ \"zsh\" ]", "is_ignored": false, "lines": "ENTRYPOINT [ \"zsh\" ]", "message": "By not specifying a USER, a program in the container may run as 'root'. This is a security hazard. If an attacker can control a process running as root, they may have control over the container. Ensure that the last USER in a Dockerfile is a USER other than 'root'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-269: Improper Privilege Management"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A04:2021 - Insecure Design"], "references": ["https://owasp.org/Top10/A04_2021-Insecure_Design"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 47272, "rule_id": "ReUW9E", "rv_id": 928285, "url": "https://semgrep.dev/playground/r/WrTYvkG/dockerfile.security.missing-user-entrypoint.missing-user-entrypoint", "version_id": "WrTYvkG"}}, "shortlink": "https://sg.run/k281", "source": "https://semgrep.dev/r/dockerfile.security.missing-user-entrypoint.missing-user-entrypoint", "subcategory": ["audit"], "technology": ["dockerfile"], "vulnerability_class": ["Improper Authorization"]}, "metavars": {"$...VARS": {"abstract_content": "[\"zsh\"]", "end": {"col": 21, "line": 66, "offset": 2980}, "start": {"col": 12, "line": 66, "offset": 2971}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "Dockerfile", "start": {"col": 1, "line": 66, "offset": 2960}}, {"check_id": "dockerfile.security.missing-user-entrypoint.missing-user-entrypoint", "end": {"col": 27, "line": 208, "offset": 8278}, "extra": {"engine_kind": "OSS", "fingerprint": "7611e4b88c268f38286784d2281bbd1cf4df3e82665e17b76f009cf989d67f21b84206ff4bb4320db4c0fe873c5bef49d5326c12573aa3c15b558e6c4247d01a_0", "fix": "USER non-root\nENTRYPOINT [\"/bin/ollama\"]", "is_ignored": false, "lines": "ENTRYPOINT [\"/bin/ollama\"]", "message": "By not specifying a USER, a program in the container may run as 'root'. This is a security hazard. If an attacker can control a process running as root, they may have control over the container. Ensure that the last USER in a Dockerfile is a USER other than 'root'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-269: Improper Privilege Management"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A04:2021 - Insecure Design"], "references": ["https://owasp.org/Top10/A04_2021-Insecure_Design"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 47272, "rule_id": "ReUW9E", "rv_id": 928285, "url": "https://semgrep.dev/playground/r/WrTYvkG/dockerfile.security.missing-user-entrypoint.missing-user-entrypoint", "version_id": "WrTYvkG"}}, "shortlink": "https://sg.run/k281", "source": "https://semgrep.dev/r/dockerfile.security.missing-user-entrypoint.missing-user-entrypoint", "subcategory": ["audit"], "technology": ["dockerfile"], "vulnerability_class": ["Improper Authorization"]}, "metavars": {"$...VARS": {"abstract_content": "[\"/bin/ollama\"]", "end": {"col": 27, "line": 208, "offset": 8278}, "start": {"col": 12, "line": 208, "offset": 8263}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "Dockerfile", "start": {"col": 1, "line": 208, "offset": 8252}}, {"check_id": "dockerfile.security.missing-user.missing-user", "end": {"col": 14, "line": 209, "offset": 8292}, "extra": {"engine_kind": "OSS", "fingerprint": "04657ecfd9773944fd61e7d02bbc2b5eebe6bda50174809d6ca67382a1162ecaf281d2db83097f466075e66bff505a9d412631e259431f74d2b65e44c0c45bb4_0", "fix": "USER non-root\nCMD [\"serve\"]", "is_ignored": false, "lines": "CMD [\"serve\"]", "message": "By not specifying a USER, a program in the container may run as 'root'. This is a security hazard. If an attacker can control a process running as root, they may have control over the container. Ensure that the last USER in a Dockerfile is a USER other than 'root'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-269: Improper Privilege Management"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A04:2021 - Insecure Design"], "references": ["https://owasp.org/Top10/A04_2021-Insecure_Design"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 20148, "rule_id": "AbUN06", "rv_id": 928286, "url": "https://semgrep.dev/playground/r/0bTpAQq/dockerfile.security.missing-user.missing-user", "version_id": "0bTpAQq"}}, "shortlink": "https://sg.run/Gbvn", "source": "https://semgrep.dev/r/dockerfile.security.missing-user.missing-user", "subcategory": ["audit"], "technology": ["dockerfile"], "vulnerability_class": ["Improper Authorization"]}, "metavars": {"$...VARS": {"abstract_content": "[\"serve\"]", "end": {"col": 14, "line": 209, "offset": 8292}, "start": {"col": 5, "line": 209, "offset": 8283}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "Dockerfile", "start": {"col": 1, "line": 209, "offset": 8279}}, {"check_id": "dockerfile.security.missing-user-entrypoint.missing-user-entrypoint", "end": {"col": 27, "line": 219, "offset": 8597}, "extra": {"engine_kind": "OSS", "fingerprint": "7611e4b88c268f38286784d2281bbd1cf4df3e82665e17b76f009cf989d67f21b84206ff4bb4320db4c0fe873c5bef49d5326c12573aa3c15b558e6c4247d01a_1", "fix": "USER non-root\nENTRYPOINT [\"/bin/ollama\"]", "is_ignored": false, "lines": "ENTRYPOINT [\"/bin/ollama\"]", "message": "By not specifying a USER, a program in the container may run as 'root'. This is a security hazard. If an attacker can control a process running as root, they may have control over the container. Ensure that the last USER in a Dockerfile is a USER other than 'root'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-269: Improper Privilege Management"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A04:2021 - Insecure Design"], "references": ["https://owasp.org/Top10/A04_2021-Insecure_Design"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 47272, "rule_id": "ReUW9E", "rv_id": 928285, "url": "https://semgrep.dev/playground/r/WrTYvkG/dockerfile.security.missing-user-entrypoint.missing-user-entrypoint", "version_id": "WrTYvkG"}}, "shortlink": "https://sg.run/k281", "source": "https://semgrep.dev/r/dockerfile.security.missing-user-entrypoint.missing-user-entrypoint", "subcategory": ["audit"], "technology": ["dockerfile"], "vulnerability_class": ["Improper Authorization"]}, "metavars": {"$...VARS": {"abstract_content": "[\"/bin/ollama\"]", "end": {"col": 27, "line": 219, "offset": 8597}, "start": {"col": 12, "line": 219, "offset": 8582}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "Dockerfile", "start": {"col": 1, "line": 219, "offset": 8571}}, {"check_id": "dockerfile.security.missing-user.missing-user", "end": {"col": 14, "line": 220, "offset": 8611}, "extra": {"engine_kind": "OSS", "fingerprint": "04657ecfd9773944fd61e7d02bbc2b5eebe6bda50174809d6ca67382a1162ecaf281d2db83097f466075e66bff505a9d412631e259431f74d2b65e44c0c45bb4_1", "fix": "USER non-root\nCMD [\"serve\"]", "is_ignored": false, "lines": "CMD [\"serve\"]", "message": "By not specifying a USER, a program in the container may run as 'root'. This is a security hazard. If an attacker can control a process running as root, they may have control over the container. Ensure that the last USER in a Dockerfile is a USER other than 'root'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-269: Improper Privilege Management"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A04:2021 - Insecure Design"], "references": ["https://owasp.org/Top10/A04_2021-Insecure_Design"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 20148, "rule_id": "AbUN06", "rv_id": 928286, "url": "https://semgrep.dev/playground/r/0bTpAQq/dockerfile.security.missing-user.missing-user", "version_id": "0bTpAQq"}}, "shortlink": "https://sg.run/Gbvn", "source": "https://semgrep.dev/r/dockerfile.security.missing-user.missing-user", "subcategory": ["audit"], "technology": ["dockerfile"], "vulnerability_class": ["Improper Authorization"]}, "metavars": {"$...VARS": {"abstract_content": "[\"serve\"]", "end": {"col": 14, "line": 220, "offset": 8611}, "start": {"col": 5, "line": 220, "offset": 8602}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "Dockerfile", "start": {"col": 1, "line": 220, "offset": 8598}}, {"check_id": "go.lang.security.audit.unsafe-reflect-by-name.unsafe-reflect-by-name", "end": {"col": 43, "line": 513, "offset": 16029}, "extra": {"engine_kind": "OSS", "fingerprint": "5e0fa9230d1dade9c838a12d9586a28525841c72c945abf6f63849641232e090c7e9a2ce673d022e7d93a118c7e57814a523eda6131d1ded012e7a5f7f6ecb62_0", "is_ignored": false, "lines": "\t\tfield := valueOpts.FieldByName(opt.Name)", "message": "If an attacker can supply values that the application then uses to determine which method or field to invoke, the potential exists for the attacker to create control flow paths through the application that were not intended by the application developers. This attack vector may allow the attacker to bypass authentication or access control checks or otherwise cause the application to behave in an unexpected manner.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-470: Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')"], "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 10005, "rule_id": "BYUBdJ", "rv_id": 833866, "url": "https://semgrep.dev/playground/r/qkTQnDr/go.lang.security.audit.unsafe-reflect-by-name.unsafe-reflect-by-name", "version_id": "qkTQnDr"}}, "shortlink": "https://sg.run/R8Xv", "source": "https://semgrep.dev/r/go.lang.security.audit.unsafe-reflect-by-name.unsafe-reflect-by-name", "subcategory": ["audit"], "technology": ["go"], "vulnerability_class": ["Improper Authorization"]}, "metavars": {"$NAME": {"abstract_content": "opt.Name", "end": {"col": 42, "line": 513, "offset": 16028}, "start": {"col": 34, "line": 513, "offset": 16020}}, "$SMTH": {"abstract_content": "valueOpts", "end": {"col": 21, "line": 513, "offset": 16007}, "start": {"col": 12, "line": 513, "offset": 15998}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "api/types.go", "start": {"col": 12, "line": 513, "offset": 15998}}, {"check_id": "go.lang.security.audit.unsafe-reflect-by-name.unsafe-reflect-by-name", "end": {"col": 44, "line": 684, "offset": 20557}, "extra": {"engine_kind": "OSS", "fingerprint": "5e0fa9230d1dade9c838a12d9586a28525841c72c945abf6f63849641232e090c7e9a2ce673d022e7d93a118c7e57814a523eda6131d1ded012e7a5f7f6ecb62_1", "is_ignored": false, "lines": "\t\t\tfield := valueOpts.FieldByName(opt.Name)", "message": "If an attacker can supply values that the application then uses to determine which method or field to invoke, the potential exists for the attacker to create control flow paths through the application that were not intended by the application developers. This attack vector may allow the attacker to bypass authentication or access control checks or otherwise cause the application to behave in an unexpected manner.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-470: Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')"], "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 10005, "rule_id": "BYUBdJ", "rv_id": 833866, "url": "https://semgrep.dev/playground/r/qkTQnDr/go.lang.security.audit.unsafe-reflect-by-name.unsafe-reflect-by-name", "version_id": "qkTQnDr"}}, "shortlink": "https://sg.run/R8Xv", "source": "https://semgrep.dev/r/go.lang.security.audit.unsafe-reflect-by-name.unsafe-reflect-by-name", "subcategory": ["audit"], "technology": ["go"], "vulnerability_class": ["Improper Authorization"]}, "metavars": {"$NAME": {"abstract_content": "opt.Name", "end": {"col": 43, "line": 684, "offset": 20556}, "start": {"col": 35, "line": 684, "offset": 20548}}, "$SMTH": {"abstract_content": "valueOpts", "end": {"col": 22, "line": 684, "offset": 20535}, "start": {"col": 13, "line": 684, "offset": 20526}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "api/types.go", "start": {"col": 13, "line": 684, "offset": 20526}}, {"check_id": "go.lang.security.audit.dangerous-exec-command.dangerous-exec-command", "end": {"col": 47, "line": 15, "offset": 211}, "extra": {"engine_kind": "OSS", "fingerprint": "1305e6b14f8200a4aa207c5803e7d8c1416606a4d1c93447238b086e64cd57af5a0a99d04f502e7cb184e71c2f6e6c8924b3d0e8a91c5524d47ba812c5aff58e_0", "is_ignored": false, "lines": "\treturn exec.CommandContext(ctx, cmd, \"serve\")", "message": "Detected non-static command inside Command. Audit the input to 'exec.Command'. If unverified user data can reach this call site, this is a code injection vulnerability. A malicious actor can inject a malicious script to execute arbitrary code.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-94: Improper Control of Generation of Code ('Code Injection')"], "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9109, "rule_id": "X5U8RQ", "rv_id": 833845, "url": "https://semgrep.dev/playground/r/GxTDE1v/go.lang.security.audit.dangerous-exec-command.dangerous-exec-command", "version_id": "GxTDE1v"}}, "shortlink": "https://sg.run/W8lA", "source": "https://semgrep.dev/r/go.lang.security.audit.dangerous-exec-command.dangerous-exec-command", "subcategory": ["audit"], "technology": ["go"], "vulnerability_class": ["Code Injection"]}, "metavars": {"$CMD": {"abstract_content": "cmd", "end": {"col": 37, "line": 15, "offset": 201}, "start": {"col": 34, "line": 15, "offset": 198}}, "$CTX": {"abstract_content": "ctx", "end": {"col": 32, "line": 15, "offset": 196}, "start": {"col": 29, "line": 15, "offset": 193}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "app/lifecycle/server_unix.go", "start": {"col": 9, "line": 15, "offset": 173}}, {"check_id": "go.lang.security.audit.dangerous-exec-command.dangerous-exec-command", "end": {"col": 51, "line": 13, "offset": 211}, "extra": {"engine_kind": "OSS", "fingerprint": "22f732768fa7110b3dd83e95fdb685cc298fc6fc5728207a2d3b341f111192f07d18703e415025bec2e2498d996614c147e3f2d2583ba31acd71924404f84121_0", "is_ignored": false, "lines": "\tcmd := exec.CommandContext(ctx, exePath, \"serve\")", "message": "Detected non-static command inside Command. Audit the input to 'exec.Command'. If unverified user data can reach this call site, this is a code injection vulnerability. A malicious actor can inject a malicious script to execute arbitrary code.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-94: Improper Control of Generation of Code ('Code Injection')"], "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9109, "rule_id": "X5U8RQ", "rv_id": 833845, "url": "https://semgrep.dev/playground/r/GxTDE1v/go.lang.security.audit.dangerous-exec-command.dangerous-exec-command", "version_id": "GxTDE1v"}}, "shortlink": "https://sg.run/W8lA", "source": "https://semgrep.dev/r/go.lang.security.audit.dangerous-exec-command.dangerous-exec-command", "subcategory": ["audit"], "technology": ["go"], "vulnerability_class": ["Code Injection"]}, "metavars": {"$CMD": {"abstract_content": "exePath", "end": {"col": 41, "line": 13, "offset": 201}, "start": {"col": 34, "line": 13, "offset": 194}}, "$CTX": {"abstract_content": "ctx", "end": {"col": 32, "line": 13, "offset": 192}, "start": {"col": 29, "line": 13, "offset": 189}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "app/lifecycle/server_windows.go", "start": {"col": 9, "line": 13, "offset": 169}}, {"check_id": "go.lang.security.audit.dangerous-exec-command.dangerous-exec-command", "end": {"col": 51, "line": 51, "offset": 1729}, "extra": {"engine_kind": "OSS", "fingerprint": "e41239e9318f4e053dbec663b8dd0acbb6c24a4bcc09f32114cba3ac1df16bad3d476f6e17e3f116f7b8e3f6010e25ef1cad944c92a2794fc4d732106fb21e76_0", "is_ignored": false, "lines": "\tcmd := exec.Command(installerExe, installArgs...)", "message": "Detected non-static command inside Command. Audit the input to 'exec.Command'. If unverified user data can reach this call site, this is a code injection vulnerability. A malicious actor can inject a malicious script to execute arbitrary code.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-94: Improper Control of Generation of Code ('Code Injection')"], "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9109, "rule_id": "X5U8RQ", "rv_id": 833845, "url": "https://semgrep.dev/playground/r/GxTDE1v/go.lang.security.audit.dangerous-exec-command.dangerous-exec-command", "version_id": "GxTDE1v"}}, "shortlink": "https://sg.run/W8lA", "source": "https://semgrep.dev/r/go.lang.security.audit.dangerous-exec-command.dangerous-exec-command", "subcategory": ["audit"], "technology": ["go"], "vulnerability_class": ["Code Injection"]}, "metavars": {"$CMD": {"abstract_content": "installerExe", "end": {"col": 34, "line": 51, "offset": 1712}, "propagated_value": {"svalue_abstract_content": "files[0]", "svalue_end": {"col": 26, "line": 24, "offset": 589}, "svalue_start": {"col": 18, "line": 24, "offset": 581}}, "start": {"col": 22, "line": 51, "offset": 1700}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "app/lifecycle/updater_windows.go", "start": {"col": 9, "line": 51, "offset": 1687}}, {"check_id": "go.lang.security.audit.crypto.use_of_weak_crypto.use-of-md5", "end": {"col": 26, "line": 414, "offset": 10082}, "extra": {"engine_kind": "OSS", "fingerprint": "52f17bcf483462a0e98a70224f97b79d245f07c6df34590cc962c3fb9941038c503524461183b8294a2ebda217bd5ee7851e1bb62076f000bba7386ed9083716_0", "is_ignored": false, "lines": "\tbh := md5.Sum(iconBytes)", "message": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-328: Use of Weak Hash"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9119, "rule_id": "x8Un6q", "rv_id": 833838, "url": "https://semgrep.dev/playground/r/gETy2dl/go.lang.security.audit.crypto.use_of_weak_crypto.use-of-md5", "version_id": "gETy2dl"}}, "shortlink": "https://sg.run/2xB5", "source": "https://semgrep.dev/r/go.lang.security.audit.crypto.use_of_weak_crypto.use-of-md5", "source-rule-url": "https://github.com/securego/gosec#available-rules", "subcategory": ["vuln"], "technology": ["go"], "vulnerability_class": ["Insecure Hashing Algorithm"]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "app/tray/wintray/tray.go", "start": {"col": 8, "line": 414, "offset": 10064}}, {"check_id": "trailofbits.go.missing-unlock-before-return.missing-unlock-before-return", "end": {"col": 37, "line": 189, "offset": 4956}, "extra": {"engine_kind": "OSS", "fingerprint": "a09a6d41a32da37788cb8b4a368e41c6a7d8d59d4381d03c49e5ef428a18cd2f2ab59ac9d37054288ee27641711bc8e9b512b70f1a7cc2220d1f03497e44dc20_0", "is_ignored": false, "lines": "\treturn GpuInfoList{cpus[0].GpuInfo}", "message": "Missing mutex unlock (`gpuMutex` variable) before returning from a function.  This could result in panics resulting from double lock operations", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": "CWE-667: Improper Locking", "description": "Missing `mutex` unlock before returning from a function", "impact": "MEDIUM", "license": "AGPL-3.0 license", "likelihood": "HIGH", "references": ["https://pkg.go.dev/sync#Mutex", "https://blog.trailofbits.com/2020/06/09/how-to-check-if-a-mutex-is-locked-in-go/"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 14222, "rule_id": "L1U5Gz", "rv_id": 833268, "url": "https://semgrep.dev/playground/r/X0T5Nkv/trailofbits.go.missing-unlock-before-return.missing-unlock-before-return", "version_id": "X0T5Nkv"}}, "shortlink": "https://sg.run/18Bk", "source": "https://semgrep.dev/r/trailofbits.go.missing-unlock-before-return.missing-unlock-before-return", "subcategory": ["vuln"], "technology": ["--no-technology--"], "vulnerability_class": ["Other"]}, "metavars": {"$T": {"abstract_content": "gpuMutex", "end": {"col": 10, "line": 182, "offset": 4824}, "start": {"col": 2, "line": 182, "offset": 4816}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "discover/gpu.go", "start": {"col": 2, "line": 189, "offset": 4921}}, {"check_id": "go.lang.security.audit.unsafe-reflect-by-name.unsafe-reflect-by-name", "end": {"col": 31, "line": 131, "offset": 3514}, "extra": {"engine_kind": "OSS", "fingerprint": "9e1b4847ff399e00502af8cb3500ed2cfba5883fd3b615c90a5165f18a4b92bd2e53fa2a0d6b25fc418cecceb1b4a79ab2713cbf8dafc8320dcc81edeaef118a_0", "is_ignored": false, "lines": "\t\t\t\t\ts.FieldByName(field.Name).SetString(sl[1])", "message": "If an attacker can supply values that the application then uses to determine which method or field to invoke, the potential exists for the attacker to create control flow paths through the application that were not intended by the application developers. This attack vector may allow the attacker to bypass authentication or access control checks or otherwise cause the application to behave in an unexpected manner.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-470: Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')"], "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 10005, "rule_id": "BYUBdJ", "rv_id": 833866, "url": "https://semgrep.dev/playground/r/qkTQnDr/go.lang.security.audit.unsafe-reflect-by-name.unsafe-reflect-by-name", "version_id": "qkTQnDr"}}, "shortlink": "https://sg.run/R8Xv", "source": "https://semgrep.dev/r/go.lang.security.audit.unsafe-reflect-by-name.unsafe-reflect-by-name", "subcategory": ["audit"], "technology": ["go"], "vulnerability_class": ["Improper Authorization"]}, "metavars": {"$NAME": {"abstract_content": "field.Name", "end": {"col": 30, "line": 131, "offset": 3513}, "start": {"col": 20, "line": 131, "offset": 3503}}, "$SMTH": {"abstract_content": "s", "end": {"col": 7, "line": 131, "offset": 3490}, "start": {"col": 6, "line": 131, "offset": 3489}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "discover/gpu_linux.go", "start": {"col": 6, "line": 131, "offset": 3489}}, {"check_id": "yaml.kubernetes.security.run-as-non-root.run-as-non-root", "end": {"col": 9, "line": 20, "offset": 269}, "extra": {"engine_kind": "OSS", "fingerprint": "5e62d63f56fb44e6a0ff7a184176d9516124ee045d6214569a0ae5634bde4756c7014c635cf7b33a8171edd0fecf526377e82f9dcb5bbe10602c2416579cb021_0", "fix": "spec:\n      securityContext:\n        runAsNonRoot: true #", "is_ignored": false, "lines": "    spec:", "message": "When running containers in Kubernetes, it's important to ensure that they  are properly secured to prevent privilege escalation attacks.  One potential vulnerability is when a container is allowed to run  applications as the root user, which could allow an attacker to gain  access to sensitive resources. To mitigate this risk, it's recommended to  add a `securityContext` to the container, with the parameter `runAsNonRoot`  set to `true`. This will ensure that the container runs as a non-root user,  limiting the damage that could be caused by any potential attacks. By  adding a `securityContext` to the container in your Kubernetes pod, you can  help to ensure that your containerized applications are more secure and  less vulnerable to privilege escalation attacks.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-250: Execution with Unnecessary Privileges"], "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A05:2021 - Security Misconfiguration", "A06:2017 - Security Misconfiguration"], "references": ["https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/", "https://kubernetes.io/docs/concepts/policy/pod-security-policy/", "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-2-set-a-user"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 10134, "rule_id": "ZqUqeK", "rv_id": 835331, "url": "https://semgrep.dev/playground/r/2KT7O6O/yaml.kubernetes.security.run-as-non-root.run-as-non-root", "version_id": "2KT7O6O"}}, "shortlink": "https://sg.run/dgP5", "source": "https://semgrep.dev/r/yaml.kubernetes.security.run-as-non-root.run-as-non-root", "subcategory": ["audit"], "technology": ["kubernetes"], "vulnerability_class": ["Improper Authorization"]}, "metavars": {"$1": {"abstract_content": "spec", "end": {"col": 5, "line": 1, "offset": 4}, "start": {"col": 1, "line": 1, "offset": 0}}, "$SPEC": {"abstract_content": "spec", "end": {"col": 9, "line": 20, "offset": 269}, "start": {"col": 5, "line": 20, "offset": 265}}}, "severity": "INFO", "validation_state": "NO_VALIDATOR"}, "path": "examples/kubernetes/cpu.yaml", "start": {"col": 5, "line": 20, "offset": 265}}, {"check_id": "yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext", "end": {"col": 13, "line": 22, "offset": 301}, "extra": {"engine_kind": "OSS", "fingerprint": "b2fe792ffcb6d88717a520452b7d7cdd760aa21a38f9e91f0a53edf35bd37b61ae7543f527570d8cb226903e20e9ed5ba6c7474592031127cb06bb9b742c156e_0", "fix": "securityContext:\n          allowPrivilegeEscalation: false\n        name", "is_ignored": false, "lines": "      - name: ollama", "message": "In Kubernetes, each pod runs in its own isolated environment with its own set of security policies. However, certain container images may contain `setuid` or `setgid` binaries that could allow an attacker to perform privilege escalation and gain access to sensitive resources. To mitigate this risk, it's recommended to add a `securityContext` to the container in the pod, with the parameter `allowPrivilegeEscalation` set to `false`. This will prevent the container from running any privileged processes and limit the impact of any potential attacks. By adding a `securityContext` to your Kubernetes pod, you can help to ensure that your containerized applications are more secure and less vulnerable to privilege escalation attacks.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-732: Incorrect Permission Assignment for Critical Resource"], "cwe2021-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A05:2021 - Security Misconfiguration", "A06:2017 - Security Misconfiguration"], "references": ["https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation", "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/", "https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt", "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 47276, "rule_id": "WAU5J6", "rv_id": 835317, "url": "https://semgrep.dev/playground/r/RGTKxwB/yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext", "version_id": "RGTKxwB"}}, "shortlink": "https://sg.run/eleR", "source": "https://semgrep.dev/r/yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext", "subcategory": ["vuln"], "technology": ["kubernetes"], "vulnerability_class": ["Improper Authorization"]}, "metavars": {"$CONTAINER": {"abstract_content": "ollama", "end": {"col": 21, "line": 22, "offset": 309}, "start": {"col": 15, "line": 22, "offset": 303}}, "$NAME": {"abstract_content": "name", "end": {"col": 13, "line": 22, "offset": 301}, "start": {"col": 9, "line": 22, "offset": 297}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "examples/kubernetes/cpu.yaml", "start": {"col": 9, "line": 22, "offset": 297}}, {"check_id": "yaml.kubernetes.security.run-as-non-root.run-as-non-root", "end": {"col": 9, "line": 22, "offset": 300}, "extra": {"engine_kind": "OSS", "fingerprint": "8fe576dd769281b3773cb37c6914e5c07a7ae56ffb18017088e6fce80ab03359d3f025ce178294520368e4311ef7d50897467ee403faa4378177c3bb5b4e0d3b_0", "fix": "spec:\n      securityContext:\n        runAsNonRoot: true #", "is_ignored": false, "lines": "    spec:", "message": "When running containers in Kubernetes, it's important to ensure that they  are properly secured to prevent privilege escalation attacks.  One potential vulnerability is when a container is allowed to run  applications as the root user, which could allow an attacker to gain  access to sensitive resources. To mitigate this risk, it's recommended to  add a `securityContext` to the container, with the parameter `runAsNonRoot`  set to `true`. This will ensure that the container runs as a non-root user,  limiting the damage that could be caused by any potential attacks. By  adding a `securityContext` to the container in your Kubernetes pod, you can  help to ensure that your containerized applications are more secure and  less vulnerable to privilege escalation attacks.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-250: Execution with Unnecessary Privileges"], "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A05:2021 - Security Misconfiguration", "A06:2017 - Security Misconfiguration"], "references": ["https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/", "https://kubernetes.io/docs/concepts/policy/pod-security-policy/", "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-2-set-a-user"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 10134, "rule_id": "ZqUqeK", "rv_id": 835331, "url": "https://semgrep.dev/playground/r/2KT7O6O/yaml.kubernetes.security.run-as-non-root.run-as-non-root", "version_id": "2KT7O6O"}}, "shortlink": "https://sg.run/dgP5", "source": "https://semgrep.dev/r/yaml.kubernetes.security.run-as-non-root.run-as-non-root", "subcategory": ["audit"], "technology": ["kubernetes"], "vulnerability_class": ["Improper Authorization"]}, "metavars": {"$1": {"abstract_content": "spec", "end": {"col": 5, "line": 1, "offset": 4}, "start": {"col": 1, "line": 1, "offset": 0}}, "$SPEC": {"abstract_content": "spec", "end": {"col": 9, "line": 22, "offset": 300}, "start": {"col": 5, "line": 22, "offset": 296}}}, "severity": "INFO", "validation_state": "NO_VALIDATOR"}, "path": "examples/kubernetes/gpu.yaml", "start": {"col": 5, "line": 22, "offset": 296}}, {"check_id": "yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext", "end": {"col": 13, "line": 24, "offset": 332}, "extra": {"engine_kind": "OSS", "fingerprint": "bb77cb8976c3e05b50f363dcde746071df33d9c4dbece01e07bf2eae97baddfca45448a27786ef3c0b2b7580ae2fda9ec21e3c03059e659043c08f59ec4fc984_0", "fix": "securityContext:\n          allowPrivilegeEscalation: false\n        name", "is_ignored": false, "lines": "      - name: ollama", "message": "In Kubernetes, each pod runs in its own isolated environment with its own set of security policies. However, certain container images may contain `setuid` or `setgid` binaries that could allow an attacker to perform privilege escalation and gain access to sensitive resources. To mitigate this risk, it's recommended to add a `securityContext` to the container in the pod, with the parameter `allowPrivilegeEscalation` set to `false`. This will prevent the container from running any privileged processes and limit the impact of any potential attacks. By adding a `securityContext` to your Kubernetes pod, you can help to ensure that your containerized applications are more secure and less vulnerable to privilege escalation attacks.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-732: Incorrect Permission Assignment for Critical Resource"], "cwe2021-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A05:2021 - Security Misconfiguration", "A06:2017 - Security Misconfiguration"], "references": ["https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation", "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/", "https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt", "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 47276, "rule_id": "WAU5J6", "rv_id": 835317, "url": "https://semgrep.dev/playground/r/RGTKxwB/yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext", "version_id": "RGTKxwB"}}, "shortlink": "https://sg.run/eleR", "source": "https://semgrep.dev/r/yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext", "subcategory": ["vuln"], "technology": ["kubernetes"], "vulnerability_class": ["Improper Authorization"]}, "metavars": {"$CONTAINER": {"abstract_content": "ollama", "end": {"col": 21, "line": 24, "offset": 340}, "start": {"col": 15, "line": 24, "offset": 334}}, "$NAME": {"abstract_content": "name", "end": {"col": 13, "line": 24, "offset": 332}, "start": {"col": 9, "line": 24, "offset": 328}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "examples/kubernetes/gpu.yaml", "start": {"col": 9, "line": 24, "offset": 328}}, {"check_id": "python.docker.security.audit.docker-arbitrary-container-run.docker-arbitrary-container-run", "end": {"col": 58, "line": 16, "offset": 668}, "extra": {"engine_kind": "OSS", "fingerprint": "10d0ebc96ca5adc0795769288a2fa7d455c1ebc0fe157e1e7e3796adda9219ed3cb3e5c4fa07002b3f63b825453e1f3d4ec24d6a936d7c6f16358e832ce3a496_0", "is_ignored": false, "lines": "container = client.containers.run(imageName, detach=True)", "message": "If unverified user data can reach the `run` or `create` method it can result in running arbitrary container.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-250: Execution with Unnecessary Privileges"], "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "references": ["https://cwe.mitre.org/data/definitions/250.html"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9518, "rule_id": "r6Ur5A", "rv_id": 834463, "url": "https://semgrep.dev/playground/r/5PTyGdP/python.docker.security.audit.docker-arbitrary-container-run.docker-arbitrary-container-run", "version_id": "5PTyGdP"}}, "shortlink": "https://sg.run/pxEL", "source": "https://semgrep.dev/r/python.docker.security.audit.docker-arbitrary-container-run.docker-arbitrary-container-run", "subcategory": ["audit"], "technology": ["docker"], "vulnerability_class": ["Improper Authorization"]}, "metavars": {"$CLIENT": {"abstract_content": "client", "end": {"col": 19, "line": 16, "offset": 629}, "propagated_value": {"svalue_abstract_content": "docker.from_env()", "svalue_end": {"col": 27, "line": 4, "offset": 158}, "svalue_start": {"col": 10, "line": 4, "offset": 141}}, "start": {"col": 13, "line": 16, "offset": 623}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "examples/python-dockerit/dockerit.py", "start": {"col": 13, "line": 16, "offset": 623}}, {"check_id": "python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http", "end": {"col": 40, "line": 10, "offset": 280}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 40, "line": 10, "offset": 280}, "path": "examples/python-simplechat/client.py", "start": {"col": 9, "line": 10, "offset": 249}}, "\"http://0.0.0.0:11434/api/chat\""]], "taint_source": ["CliLoc", [{"end": {"col": 40, "line": 10, "offset": 280}, "path": "examples/python-simplechat/client.py", "start": {"col": 9, "line": 10, "offset": 249}}, "\"http://0.0.0.0:11434/api/chat\""]]}, "engine_kind": "OSS", "fingerprint": "fa5bd5bb87a88540394edb4cbe7886bbb4ca117e8c21d3abb61fe49e5611b3d37e952ea4c1ae36e5790b809e4f5c23a42e575ca8ec666ab27523221d9fcba88f_0", "is_ignored": false, "lines": "        \"http://0.0.0.0:11434/api/chat\",", "message": "Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead.", "metadata": {"asvs": {"control_id": "9.1.1 Weak TLS", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x17-V9-Communications.md#v92-server-communications-security-requirements", "section": "V9 Communications Verification Requirements", "version": "4"}, "category": "security", "confidence": "MEDIUM", "cwe": ["CWE-319: Cleartext Transmission of Sensitive Information"], "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9653, "rule_id": "6JUjpG", "rv_id": 834618, "url": "https://semgrep.dev/playground/r/l4TyD9A/python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http", "version_id": "l4TyD9A"}}, "shortlink": "https://sg.run/W8J4", "source": "https://semgrep.dev/r/python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http", "subcategory": ["audit"], "technology": ["requests"], "vulnerability_class": ["Mishandled Sensitive Information"]}, "metavars": {"$SINK": {"abstract_content": "\"http://0.0.0.0:11434/api/chat\"", "end": {"col": 40, "line": 10, "offset": 280}, "start": {"col": 9, "line": 10, "offset": 249}}, "$URL": {"abstract_content": "http://0.0.0.0:11434/api/chat", "end": {"col": 39, "line": 10, "offset": 279}, "start": {"col": 10, "line": 10, "offset": 250}}, "$W": {"abstract_content": "post", "end": {"col": 22, "line": 9, "offset": 239}, "start": {"col": 18, "line": 9, "offset": 235}}}, "severity": "INFO", "validation_state": "NO_VALIDATOR"}, "path": "examples/python-simplechat/client.py", "start": {"col": 9, "line": 10, "offset": 249}}, {"check_id": "python.aws-lambda.deserialization.tainted-json-aws-lambda.tainted-json-aws-lambda", "end": {"col": 31, "line": 18, "offset": 604}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "prompt", "location": {"end": {"col": 20, "line": 7, "offset": 222}, "path": "examples/python-simplegenerate/client.py", "start": {"col": 14, "line": 7, "offset": 216}}}, {"content": "r", "location": {"end": {"col": 6, "line": 8, "offset": 239}, "path": "examples/python-simplegenerate/client.py", "start": {"col": 5, "line": 8, "offset": 238}}}, {"content": "line", "location": {"end": {"col": 13, "line": 17, "offset": 554}, "path": "examples/python-simplegenerate/client.py", "start": {"col": 9, "line": 17, "offset": 550}}}], "taint_sink": ["CliLoc", [{"end": {"col": 31, "line": 18, "offset": 604}, "path": "examples/python-simplegenerate/client.py", "start": {"col": 27, "line": 18, "offset": 600}}, "line"]], "taint_source": ["CliLoc", [{"end": {"col": 20, "line": 7, "offset": 222}, "path": "examples/python-simplegenerate/client.py", "start": {"col": 14, "line": 7, "offset": 216}}, "prompt"]]}, "engine_kind": "OSS", "fingerprint": "9cd3ac712d7d52cb1a9fbd7eb551e4734f5864bf8293e69252e87f9ee731185781d94fd9299cf7be2392dc00286809ae0ff51df1f9d17eb3702118009b0eead7_0", "is_ignored": false, "lines": "        body = json.loads(line)", "message": "The application may convert user-controlled data into a JSON object, which can lead the decoder to consume considerable CPU and memory resources, potentially causing DoS (Denial of Service). The documentation for the `json` package recommends limiting the size of data to be parsed. ", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "functional-categories": ["deserialization::sink::load-object::lang", "serverless::source::function-params::aws-lambda"], "impact": "LOW", "license": "Copyright 2023 Semgrep, Inc.", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://portswigger.net/web-security/deserialization", "https://knowledge-base.secureflag.com/vulnerabilities/unsafe_deserialization/unsafe_deserialization_python.html", "https://docs.python.org/3/library/json.html", "https://docs.python.org/3/library/pickle.html", "https://davidhamann.de/2020/04/05/exploiting-python-pickle/"], "semgrep.dev": {"rule": {"origin": "pro_rules", "r_id": 44914, "rule_id": "NbUvX2", "rv_id": 850767, "url": "https://semgrep.dev/playground/r/JdTl7eB/python.aws-lambda.deserialization.tainted-json-aws-lambda.tainted-json-aws-lambda", "version_id": "JdTl7eB"}}, "shortlink": "https://sg.run/YRrW", "source": "https://semgrep.dev/r/python.aws-lambda.deserialization.tainted-json-aws-lambda.tainted-json-aws-lambda", "subcategory": ["vuln"], "technology": ["python", "aws-lambda", "json"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {"$EVENT": {"abstract_content": "prompt", "end": {"col": 20, "line": 7, "offset": 222}, "start": {"col": 14, "line": 7, "offset": 216}}, "$HANDLER": {"abstract_content": "generate", "end": {"col": 13, "line": 7, "offset": 215}, "start": {"col": 5, "line": 7, "offset": 207}}, "$SINK": {"abstract_content": "line", "end": {"col": 31, "line": 18, "offset": 604}, "start": {"col": 27, "line": 18, "offset": 600}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "examples/python-simplegenerate/client.py", "start": {"col": 27, "line": 18, "offset": 600}}, {"check_id": "typescript.react.security.react-insecure-request.react-insecure-request", "end": {"col": 5, "line": 27, "offset": 576}, "extra": {"engine_kind": "OSS", "fingerprint": "a48887a9e71c382c6620fa1e81317d5ace53afe46f62a7bb9cc4973ae42394d07cf37a29e8c824a8d3a9190a9c13910d8eb8291d082d7e72a8b6f98989c046d9_0", "is_ignored": false, "lines": "  const response = await fetch(\"http://localhost:11434/api/chat\", {\n    method: \"POST\",\n    body: JSON.stringify(body)\n  })", "message": "Unencrypted request over HTTP detected.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-319: Cleartext Transmission of Sensitive Information"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "references": ["https://www.npmjs.com/package/axios"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9766, "rule_id": "NbUA3O", "rv_id": 835296, "url": "https://semgrep.dev/playground/r/kbT2PZK/typescript.react.security.react-insecure-request.react-insecure-request", "version_id": "kbT2PZK"}}, "shortlink": "https://sg.run/1n0b", "source": "https://semgrep.dev/r/typescript.react.security.react-insecure-request.react-insecure-request", "subcategory": ["vuln"], "technology": ["react"], "vulnerability": "Insecure Transport", "vulnerability_class": ["Mishandled Sensitive Information"]}, "metavars": {}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "examples/typescript-simplechat/client.ts", "start": {"col": 26, "line": 24, "offset": 478}}, {"check_id": "go.lang.security.audit.crypto.math_random.math-random-used", "end": {"col": 12, "line": 13, "offset": 121}, "extra": {"engine_kind": "OSS", "fingerprint": "c6fa90001c240bb06e0dc5a6f22357f157e705c62653d9b76f87ba1107e47115ff9c9ae57f5e0063cc1d69e96869b68a6d5a5e9f8f92db5c2eb3c207fb9807b7_0", "fix": "crypto/rand", "is_ignored": false, "lines": "\t\"math/rand\"", "message": "Do not use `math/rand`. Use `crypto/rand` instead.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-338: Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A02:2021 - Cryptographic Failures"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#secure-random-number-generation"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9115, "rule_id": "bwUwy8", "rv_id": 833834, "url": "https://semgrep.dev/playground/r/ExTrD7D/go.lang.security.audit.crypto.math_random.math-random-used", "version_id": "ExTrD7D"}}, "shortlink": "https://sg.run/6nK6", "source": "https://semgrep.dev/r/go.lang.security.audit.crypto.math_random.math-random-used", "subcategory": ["vuln"], "technology": ["go"], "vulnerability_class": ["Cryptographic Issues"]}, "metavars": {"$1": {"abstract_content": "math/rand", "end": {"col": 10, "line": 1, "offset": 9}, "start": {"col": 1, "line": 1, "offset": 0}}, "$FUNC": {"abstract_content": "Stat", "end": {"col": 22, "line": 77, "offset": 2135}, "start": {"col": 18, "line": 77, "offset": 2131}}, "$MATH": {"abstract_content": "math/rand", "end": {"col": 12, "line": 13, "offset": 121}, "start": {"col": 3, "line": 13, "offset": 112}}, "$RAND": {"abstract_content": "os", "end": {"col": 17, "line": 77, "offset": 2130}, "start": {"col": 15, "line": 77, "offset": 2128}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "llm/server.go", "start": {"col": 3, "line": 13, "offset": 112}}, {"check_id": "go.lang.security.audit.dangerous-exec-command.dangerous-exec-command", "end": {"col": 53, "line": 333, "offset": 10695}, "extra": {"engine_kind": "OSS", "fingerprint": "decc7db06db330c873d5f8fb68a96b9abad603c2cf1dca0ab7b2504d1057251fb5a6e03518f774de589c0ae918c6cf9a7401463c51d901d530d43b69247b2488_0", "is_ignored": false, "lines": "\t\t\tcmd:         exec.Command(server, finalParams...),", "message": "Detected non-static command inside Command. Audit the input to 'exec.Command'. If unverified user data can reach this call site, this is a code injection vulnerability. A malicious actor can inject a malicious script to execute arbitrary code.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-94: Improper Control of Generation of Code ('Code Injection')"], "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9109, "rule_id": "X5U8RQ", "rv_id": 833845, "url": "https://semgrep.dev/playground/r/GxTDE1v/go.lang.security.audit.dangerous-exec-command.dangerous-exec-command", "version_id": "GxTDE1v"}}, "shortlink": "https://sg.run/W8lA", "source": "https://semgrep.dev/r/go.lang.security.audit.dangerous-exec-command.dangerous-exec-command", "subcategory": ["audit"], "technology": ["go"], "vulnerability_class": ["Code Injection"]}, "metavars": {"$CMD": {"abstract_content": "server", "end": {"col": 36, "line": 333, "offset": 10678}, "start": {"col": 30, "line": 333, "offset": 10672}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "llm/server.go", "start": {"col": 17, "line": 333, "offset": 10659}}, {"check_id": "go.lang.security.audit.crypto.math_random.math-random-used", "end": {"col": 12, "line": 12, "offset": 205}, "extra": {"engine_kind": "OSS", "fingerprint": "cc4fb6b74e0cff07c7bddeb5cc51c7314a0ef9cecbf2e5bd17e6fafe6e4529f7e3aca2d8ec410ef97eabc0f09ac7da12b6796bd17609a6f7745307196e4d0b01_0", "fix": "crypto/rand", "is_ignored": false, "lines": "\t\"math/rand\"", "message": "Do not use `math/rand`. Use `crypto/rand` instead.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-338: Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A02:2021 - Cryptographic Failures"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#secure-random-number-generation"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9115, "rule_id": "bwUwy8", "rv_id": 833834, "url": "https://semgrep.dev/playground/r/ExTrD7D/go.lang.security.audit.crypto.math_random.math-random-used", "version_id": "ExTrD7D"}}, "shortlink": "https://sg.run/6nK6", "source": "https://semgrep.dev/r/go.lang.security.audit.crypto.math_random.math-random-used", "subcategory": ["vuln"], "technology": ["go"], "vulnerability_class": ["Cryptographic Issues"]}, "metavars": {"$1": {"abstract_content": "math/rand", "end": {"col": 10, "line": 1, "offset": 9}, "start": {"col": 1, "line": 1, "offset": 0}}, "$FUNC": {"abstract_content": "ToLower", "end": {"col": 34, "line": 200, "offset": 5709}, "start": {"col": 27, "line": 200, "offset": 5702}}, "$MATH": {"abstract_content": "math/rand", "end": {"col": 12, "line": 12, "offset": 205}, "start": {"col": 3, "line": 12, "offset": 196}}, "$RAND": {"abstract_content": "strings", "end": {"col": 26, "line": 200, "offset": 5701}, "start": {"col": 19, "line": 200, "offset": 5694}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "openai/openai.go", "start": {"col": 3, "line": 12, "offset": 196}}, {"check_id": "go.lang.security.audit.crypto.math_random.math-random-used", "end": {"col": 15, "line": 11, "offset": 110}, "extra": {"engine_kind": "OSS", "fingerprint": "8b3baf8916c13e62aa3498f62d7c2cc77df81d747e4a2665759dd7d76963537a6a533a8031a6b341c314979106e9430e8df45ddb883e3505114e9e8734dbffa9_0", "fix": "crypto/rand", "is_ignored": false, "lines": "\t\"math/rand/v2\"", "message": "Do not use `math/rand`. Use `crypto/rand` instead.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-338: Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A02:2021 - Cryptographic Failures"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#secure-random-number-generation"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9115, "rule_id": "bwUwy8", "rv_id": 833834, "url": "https://semgrep.dev/playground/r/ExTrD7D/go.lang.security.audit.crypto.math_random.math-random-used", "version_id": "ExTrD7D"}}, "shortlink": "https://sg.run/6nK6", "source": "https://semgrep.dev/r/go.lang.security.audit.crypto.math_random.math-random-used", "subcategory": ["vuln"], "technology": ["go"], "vulnerability_class": ["Cryptographic Issues"]}, "metavars": {"$1": {"abstract_content": "math/rand/v2", "end": {"col": 13, "line": 1, "offset": 12}, "start": {"col": 1, "line": 1, "offset": 0}}, "$2": {"abstract_content": "/v2", "end": {"col": 13, "line": 1, "offset": 12}, "start": {"col": 10, "line": 1, "offset": 9}}, "$FUNC": {"abstract_content": "New", "end": {"col": 36, "line": 32, "offset": 387}, "start": {"col": 33, "line": 32, "offset": 384}}, "$MATH": {"abstract_content": "math/rand/v2", "end": {"col": 15, "line": 11, "offset": 110}, "start": {"col": 3, "line": 11, "offset": 98}}, "$RAND": {"abstract_content": "errors", "end": {"col": 32, "line": 32, "offset": 383}, "start": {"col": 26, "line": 32, "offset": 377}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "server/download.go", "start": {"col": 3, "line": 11, "offset": 98}}, {"check_id": "go.lang.security.audit.crypto.use_of_weak_crypto.use-of-md5", "end": {"col": 21, "line": 181, "offset": 3878}, "extra": {"engine_kind": "OSS", "fingerprint": "59ec6b5740cedfb5290fb703994c0a809acab9b2e6ebf74474263f4ef6f3af78ecd4b92b3f2c2d79efc75fb0d6cceb34e5dd939a774e0d667288e4ee326a7b21_0", "is_ignored": false, "lines": "\tmd5sum := md5.New()", "message": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-328: Use of Weak Hash"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9119, "rule_id": "x8Un6q", "rv_id": 833838, "url": "https://semgrep.dev/playground/r/gETy2dl/go.lang.security.audit.crypto.use_of_weak_crypto.use-of-md5", "version_id": "gETy2dl"}}, "shortlink": "https://sg.run/2xB5", "source": "https://semgrep.dev/r/go.lang.security.audit.crypto.use_of_weak_crypto.use-of-md5", "source-rule-url": "https://github.com/securego/gosec#available-rules", "subcategory": ["vuln"], "technology": ["go"], "vulnerability_class": ["Insecure Hashing Algorithm"]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "server/upload.go", "start": {"col": 12, "line": 181, "offset": 3869}}, {"check_id": "go.lang.security.audit.crypto.use_of_weak_crypto.use-of-md5", "end": {"col": 21, "line": 226, "offset": 5299}, "extra": {"engine_kind": "OSS", "fingerprint": "59ec6b5740cedfb5290fb703994c0a809acab9b2e6ebf74474263f4ef6f3af78ecd4b92b3f2c2d79efc75fb0d6cceb34e5dd939a774e0d667288e4ee326a7b21_1", "is_ignored": false, "lines": "\tmd5sum := md5.New()", "message": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-328: Use of Weak Hash"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9119, "rule_id": "x8Un6q", "rv_id": 833838, "url": "https://semgrep.dev/playground/r/gETy2dl/go.lang.security.audit.crypto.use_of_weak_crypto.use-of-md5", "version_id": "gETy2dl"}}, "shortlink": "https://sg.run/2xB5", "source": "https://semgrep.dev/r/go.lang.security.audit.crypto.use_of_weak_crypto.use-of-md5", "source-rule-url": "https://github.com/securego/gosec#available-rules", "subcategory": ["vuln"], "technology": ["go"], "vulnerability_class": ["Insecure Hashing Algorithm"]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "server/upload.go", "start": {"col": 12, "line": 226, "offset": 5290}}, {"check_id": "go.lang.security.audit.xss.import-text-template.import-text-template", "end": {"col": 16, "line": 13, "offset": 130}, "extra": {"engine_kind": "OSS", "fingerprint": "9aa72c25a368713c3270bff4ec8026678d6cbeaac26f958fd0c89e89d93dd1ba5e9b7e59e3171406cfe6229b5c4b33f4de3ccb936d9253d493af2bf8f2dcb11a_0", "fix": "html/template", "is_ignored": false, "lines": "\t\"text/template\"", "message": "When working with web applications that involve rendering user-generated  content, it's important to properly escape any HTML content to prevent  Cross-Site Scripting (XSS) attacks. In Go, the `text/template` package does  not automatically escape HTML content, which can leave your application  vulnerable to these types of attacks. To mitigate this risk, it's  recommended to use the `html/template` package instead, which provides  built-in functionality for HTML escaping. By using `html/template` to render  your HTML content, you can help to ensure that your web application is more  secure and less susceptible to XSS vulnerabilities.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.veracode.com/blog/secure-development/use-golang-these-mistakes-could-compromise-your-apps-security"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9136, "rule_id": "5rUOZQ", "rv_id": 833868, "url": "https://semgrep.dev/playground/r/YDTl0LG/go.lang.security.audit.xss.import-text-template.import-text-template", "version_id": "YDTl0LG"}}, "shortlink": "https://sg.run/ndEO", "source": "https://semgrep.dev/r/go.lang.security.audit.xss.import-text-template.import-text-template", "subcategory": ["audit"], "technology": ["go"], "vulnerability_class": ["Cross-Site-Scripting (XSS)"]}, "metavars": {"$1": {"abstract_content": "text/template", "end": {"col": 14, "line": 1, "offset": 13}, "start": {"col": 1, "line": 1, "offset": 0}}, "$IMPORT": {"abstract_content": "text/template", "end": {"col": 16, "line": 13, "offset": 130}, "start": {"col": 3, "line": 13, "offset": 117}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "template/template.go", "start": {"col": 3, "line": 13, "offset": 117}}], "skipped_rules": [], "version": "1.95.0"}